// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAssessmentsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AssessmentsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssessmentByIdApiResponse"/>&gt;</returns>
        Task<IDeleteAssessmentByIdApiResponse> DeleteAssessmentByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssessmentByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteAssessmentByIdApiResponse?> DeleteAssessmentByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesAssessmentsApiResponse"/>&gt;</returns>
        Task<IDeletesAssessmentsApiResponse> DeletesAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesAssessmentsApiResponse"/>?&gt;</returns>
        Task<IDeletesAssessmentsApiResponse?> DeletesAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="assessmentCategoryDescriptor">The category of an assessment based on format and content. (optional)</param>
        /// <param name="adaptiveAssessment">Indicates that the assessment is adaptive. (optional)</param>
        /// <param name="assessmentFamily">The assessment family this assessment is a member of. (optional)</param>
        /// <param name="assessmentForm">Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc. (optional)</param>
        /// <param name="assessmentTitle">The title or name of the assessment. (optional)</param>
        /// <param name="assessmentVersion">The version identifier for the assessment. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum. (optional)</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for assessment. (optional)</param>
        /// <param name="revisionDate">The month, day, and year that the conceptual design for the assessment was most recently revised substantially. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="assessmentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the assessment identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsApiResponse"/>&gt;</returns>
        Task<IGetAssessmentsApiResponse> GetAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<long> educationOrganizationId = default, Option<string> assessmentCategoryDescriptor = default, Option<bool> adaptiveAssessment = default, Option<string> assessmentFamily = default, Option<string> assessmentForm = default, Option<string> assessmentTitle = default, Option<int> assessmentVersion = default, Option<string> id = default, Option<double> maxRawScore = default, Option<string> nomenclature = default, Option<DateOnly> revisionDate = default, Option<bool> useSnapshot = default, Option<string> assessmentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="assessmentCategoryDescriptor">The category of an assessment based on format and content. (optional)</param>
        /// <param name="adaptiveAssessment">Indicates that the assessment is adaptive. (optional)</param>
        /// <param name="assessmentFamily">The assessment family this assessment is a member of. (optional)</param>
        /// <param name="assessmentForm">Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc. (optional)</param>
        /// <param name="assessmentTitle">The title or name of the assessment. (optional)</param>
        /// <param name="assessmentVersion">The version identifier for the assessment. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum. (optional)</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for assessment. (optional)</param>
        /// <param name="revisionDate">The month, day, and year that the conceptual design for the assessment was most recently revised substantially. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="assessmentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the assessment identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsApiResponse"/>?&gt;</returns>
        Task<IGetAssessmentsApiResponse?> GetAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<long> educationOrganizationId = default, Option<string> assessmentCategoryDescriptor = default, Option<bool> adaptiveAssessment = default, Option<string> assessmentFamily = default, Option<string> assessmentForm = default, Option<string> assessmentTitle = default, Option<int> assessmentVersion = default, Option<string> id = default, Option<double> maxRawScore = default, Option<string> nomenclature = default, Option<DateOnly> revisionDate = default, Option<bool> useSnapshot = default, Option<string> assessmentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsByIdApiResponse"/>&gt;</returns>
        Task<IGetAssessmentsByIdApiResponse> GetAssessmentsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsByIdApiResponse"/>?&gt;</returns>
        Task<IGetAssessmentsByIdApiResponse?> GetAssessmentsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="assessmentCategoryDescriptor">The category of an assessment based on format and content. (optional)</param>
        /// <param name="adaptiveAssessment">Indicates that the assessment is adaptive. (optional)</param>
        /// <param name="assessmentFamily">The assessment family this assessment is a member of. (optional)</param>
        /// <param name="assessmentForm">Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc. (optional)</param>
        /// <param name="assessmentTitle">The title or name of the assessment. (optional)</param>
        /// <param name="assessmentVersion">The version identifier for the assessment. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum. (optional)</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for assessment. (optional)</param>
        /// <param name="revisionDate">The month, day, and year that the conceptual design for the assessment was most recently revised substantially. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="assessmentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the assessment identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetAssessmentsPartitionsApiResponse> GetAssessmentsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<long> educationOrganizationId = default, Option<string> assessmentCategoryDescriptor = default, Option<bool> adaptiveAssessment = default, Option<string> assessmentFamily = default, Option<string> assessmentForm = default, Option<string> assessmentTitle = default, Option<int> assessmentVersion = default, Option<string> id = default, Option<double> maxRawScore = default, Option<string> nomenclature = default, Option<DateOnly> revisionDate = default, Option<bool> useSnapshot = default, Option<string> assessmentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="assessmentCategoryDescriptor">The category of an assessment based on format and content. (optional)</param>
        /// <param name="adaptiveAssessment">Indicates that the assessment is adaptive. (optional)</param>
        /// <param name="assessmentFamily">The assessment family this assessment is a member of. (optional)</param>
        /// <param name="assessmentForm">Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc. (optional)</param>
        /// <param name="assessmentTitle">The title or name of the assessment. (optional)</param>
        /// <param name="assessmentVersion">The version identifier for the assessment. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum. (optional)</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for assessment. (optional)</param>
        /// <param name="revisionDate">The month, day, and year that the conceptual design for the assessment was most recently revised substantially. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="assessmentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the assessment identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetAssessmentsPartitionsApiResponse?> GetAssessmentsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<long> educationOrganizationId = default, Option<string> assessmentCategoryDescriptor = default, Option<bool> adaptiveAssessment = default, Option<string> assessmentFamily = default, Option<string> assessmentForm = default, Option<string> assessmentTitle = default, Option<int> assessmentVersion = default, Option<string> id = default, Option<double> maxRawScore = default, Option<string> nomenclature = default, Option<DateOnly> revisionDate = default, Option<bool> useSnapshot = default, Option<string> assessmentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesAssessmentsApiResponse"/>&gt;</returns>
        Task<IKeyChangesAssessmentsApiResponse> KeyChangesAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesAssessmentsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesAssessmentsApiResponse?> KeyChangesAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiAssessment">The JSON representation of the \&quot;assessment\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostAssessmentApiResponse"/>&gt;</returns>
        Task<IPostAssessmentApiResponse> PostAssessmentAsync(EdFiAssessment edFiAssessment, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiAssessment">The JSON representation of the \&quot;assessment\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostAssessmentApiResponse"/>?&gt;</returns>
        Task<IPostAssessmentApiResponse?> PostAssessmentOrDefaultAsync(EdFiAssessment edFiAssessment, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiAssessment">The JSON representation of the \&quot;assessment\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssessmentApiResponse"/>&gt;</returns>
        Task<IPutAssessmentApiResponse> PutAssessmentAsync(string id, EdFiAssessment edFiAssessment, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiAssessment">The JSON representation of the \&quot;assessment\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssessmentApiResponse"/>?&gt;</returns>
        Task<IPutAssessmentApiResponse?> PutAssessmentOrDefaultAsync(string id, EdFiAssessment edFiAssessment, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteAssessmentByIdApiResponse"/>
    /// </summary>
    public interface IDeleteAssessmentByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesAssessmentsApiResponse"/>
    /// </summary>
    public interface IDeletesAssessmentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiAssessmentDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssessmentsApiResponse"/>
    /// </summary>
    public interface IGetAssessmentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiAssessment>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssessmentsByIdApiResponse"/>
    /// </summary>
    public interface IGetAssessmentsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiAssessment?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssessmentsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetAssessmentsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesAssessmentsApiResponse"/>
    /// </summary>
    public interface IKeyChangesAssessmentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiAssessmentKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostAssessmentApiResponse"/>
    /// </summary>
    public interface IPostAssessmentApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutAssessmentApiResponse"/>
    /// </summary>
    public interface IPutAssessmentApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AssessmentsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAssessmentById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAssessmentById;

        internal void ExecuteOnDeleteAssessmentById(AssessmentsApi.DeleteAssessmentByIdApiResponse apiResponse)
        {
            OnDeleteAssessmentById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAssessmentById(Exception exception)
        {
            OnErrorDeleteAssessmentById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesAssessments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesAssessments;

        internal void ExecuteOnDeletesAssessments(AssessmentsApi.DeletesAssessmentsApiResponse apiResponse)
        {
            OnDeletesAssessments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesAssessments(Exception exception)
        {
            OnErrorDeletesAssessments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssessments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssessments;

        internal void ExecuteOnGetAssessments(AssessmentsApi.GetAssessmentsApiResponse apiResponse)
        {
            OnGetAssessments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssessments(Exception exception)
        {
            OnErrorGetAssessments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssessmentsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssessmentsById;

        internal void ExecuteOnGetAssessmentsById(AssessmentsApi.GetAssessmentsByIdApiResponse apiResponse)
        {
            OnGetAssessmentsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssessmentsById(Exception exception)
        {
            OnErrorGetAssessmentsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssessmentsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssessmentsPartitions;

        internal void ExecuteOnGetAssessmentsPartitions(AssessmentsApi.GetAssessmentsPartitionsApiResponse apiResponse)
        {
            OnGetAssessmentsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssessmentsPartitions(Exception exception)
        {
            OnErrorGetAssessmentsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesAssessments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesAssessments;

        internal void ExecuteOnKeyChangesAssessments(AssessmentsApi.KeyChangesAssessmentsApiResponse apiResponse)
        {
            OnKeyChangesAssessments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesAssessments(Exception exception)
        {
            OnErrorKeyChangesAssessments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostAssessment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostAssessment;

        internal void ExecuteOnPostAssessment(AssessmentsApi.PostAssessmentApiResponse apiResponse)
        {
            OnPostAssessment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostAssessment(Exception exception)
        {
            OnErrorPostAssessment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutAssessment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutAssessment;

        internal void ExecuteOnPutAssessment(AssessmentsApi.PutAssessmentApiResponse apiResponse)
        {
            OnPutAssessment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutAssessment(Exception exception)
        {
            OnErrorPutAssessment?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AssessmentsApi : IAssessmentsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AssessmentsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AssessmentsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssessmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssessmentsApi(ILogger<AssessmentsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AssessmentsApiEvents assessmentsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AssessmentsApi>();
            HttpClient = httpClient;
            Events = assessmentsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteAssessmentById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteAssessmentById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteAssessmentByIdDefaultImplementation(IDeleteAssessmentByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAssessmentById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteAssessmentById(ref bool suppressDefaultLog, IDeleteAssessmentByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteAssessmentByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAssessmentById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteAssessmentById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssessmentByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteAssessmentByIdApiResponse?> DeleteAssessmentByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAssessmentByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAssessmentByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteAssessmentByIdApiResponse> DeleteAssessmentByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteAssessmentById(id, ifMatch);

                FormatDeleteAssessmentById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/assessments/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/assessments/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteAssessmentByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAssessmentByIdApiResponse>();

                        DeleteAssessmentByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/assessments/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAssessmentByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteAssessmentById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAssessmentByIdDefaultImplementation(e, "/ed-fi/assessments/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteAssessmentById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAssessmentByIdApiResponse"/>
        /// </summary>
        public partial class DeleteAssessmentByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteAssessmentByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAssessmentByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAssessmentByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAssessmentByIdApiResponse(ILogger<DeleteAssessmentByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesAssessments(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesAssessmentsDefaultImplementation(IDeletesAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesAssessments(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesAssessments(ref bool suppressDefaultLog, IDeletesAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesAssessmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesAssessments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesAssessments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IDeletesAssessmentsApiResponse?> DeletesAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesAssessmentsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IDeletesAssessmentsApiResponse> DeletesAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesAssessments(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/assessments/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/assessments/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesAssessmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesAssessmentsApiResponse>();

                        DeletesAssessmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/assessments/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesAssessmentsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesAssessments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesAssessmentsDefaultImplementation(e, "/ed-fi/assessments/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesAssessments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesAssessmentsApiResponse"/>
        /// </summary>
        public partial class DeletesAssessmentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesAssessmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesAssessmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesAssessmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesAssessmentsApiResponse(ILogger<DeletesAssessmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiAssessmentDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiAssessmentDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiAssessmentDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssessments(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> assessmentIdentifier, ref Option<string> varNamespace, ref Option<long> educationOrganizationId, ref Option<string> assessmentCategoryDescriptor, ref Option<bool> adaptiveAssessment, ref Option<string> assessmentFamily, ref Option<string> assessmentForm, ref Option<string> assessmentTitle, ref Option<int> assessmentVersion, ref Option<string> id, ref Option<double> maxRawScore, ref Option<string> nomenclature, ref Option<DateOnly> revisionDate, ref Option<bool> useSnapshot, ref Option<string> assessmentIdentificationSystemDescriptor, ref Option<string> assigningOrganizationIdentificationCode, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="assessmentCategoryDescriptor"></param>
        /// <param name="assessmentFamily"></param>
        /// <param name="assessmentForm"></param>
        /// <param name="assessmentTitle"></param>
        /// <param name="id"></param>
        /// <param name="nomenclature"></param>
        /// <param name="assessmentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetAssessments(Option<string> pageToken, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<string> assessmentCategoryDescriptor, Option<string> assessmentFamily, Option<string> assessmentForm, Option<string> assessmentTitle, Option<string> id, Option<string> nomenclature, Option<string> assessmentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (assessmentIdentifier.IsSet && assessmentIdentifier.Value == null)
                throw new ArgumentNullException(nameof(assessmentIdentifier));

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace));

            if (assessmentCategoryDescriptor.IsSet && assessmentCategoryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(assessmentCategoryDescriptor));

            if (assessmentFamily.IsSet && assessmentFamily.Value == null)
                throw new ArgumentNullException(nameof(assessmentFamily));

            if (assessmentForm.IsSet && assessmentForm.Value == null)
                throw new ArgumentNullException(nameof(assessmentForm));

            if (assessmentTitle.IsSet && assessmentTitle.Value == null)
                throw new ArgumentNullException(nameof(assessmentTitle));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (nomenclature.IsSet && nomenclature.Value == null)
                throw new ArgumentNullException(nameof(nomenclature));

            if (assessmentIdentificationSystemDescriptor.IsSet && assessmentIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(assessmentIdentificationSystemDescriptor));

            if (assigningOrganizationIdentificationCode.IsSet && assigningOrganizationIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="assessmentCategoryDescriptor"></param>
        /// <param name="adaptiveAssessment"></param>
        /// <param name="assessmentFamily"></param>
        /// <param name="assessmentForm"></param>
        /// <param name="assessmentTitle"></param>
        /// <param name="assessmentVersion"></param>
        /// <param name="id"></param>
        /// <param name="maxRawScore"></param>
        /// <param name="nomenclature"></param>
        /// <param name="revisionDate"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="assessmentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetAssessmentsDefaultImplementation(IGetAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<long> educationOrganizationId, Option<string> assessmentCategoryDescriptor, Option<bool> adaptiveAssessment, Option<string> assessmentFamily, Option<string> assessmentForm, Option<string> assessmentTitle, Option<int> assessmentVersion, Option<string> id, Option<double> maxRawScore, Option<string> nomenclature, Option<DateOnly> revisionDate, Option<bool> useSnapshot, Option<string> assessmentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetAssessments(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, assessmentIdentifier, varNamespace, educationOrganizationId, assessmentCategoryDescriptor, adaptiveAssessment, assessmentFamily, assessmentForm, assessmentTitle, assessmentVersion, id, maxRawScore, nomenclature, revisionDate, useSnapshot, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="assessmentCategoryDescriptor"></param>
        /// <param name="adaptiveAssessment"></param>
        /// <param name="assessmentFamily"></param>
        /// <param name="assessmentForm"></param>
        /// <param name="assessmentTitle"></param>
        /// <param name="assessmentVersion"></param>
        /// <param name="id"></param>
        /// <param name="maxRawScore"></param>
        /// <param name="nomenclature"></param>
        /// <param name="revisionDate"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="assessmentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetAssessments(ref bool suppressDefaultLog, IGetAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<long> educationOrganizationId, Option<string> assessmentCategoryDescriptor, Option<bool> adaptiveAssessment, Option<string> assessmentFamily, Option<string> assessmentForm, Option<string> assessmentTitle, Option<int> assessmentVersion, Option<string> id, Option<double> maxRawScore, Option<string> nomenclature, Option<DateOnly> revisionDate, Option<bool> useSnapshot, Option<string> assessmentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="assessmentCategoryDescriptor"></param>
        /// <param name="adaptiveAssessment"></param>
        /// <param name="assessmentFamily"></param>
        /// <param name="assessmentForm"></param>
        /// <param name="assessmentTitle"></param>
        /// <param name="assessmentVersion"></param>
        /// <param name="id"></param>
        /// <param name="maxRawScore"></param>
        /// <param name="nomenclature"></param>
        /// <param name="revisionDate"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="assessmentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetAssessmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<long> educationOrganizationId, Option<string> assessmentCategoryDescriptor, Option<bool> adaptiveAssessment, Option<string> assessmentFamily, Option<string> assessmentForm, Option<string> assessmentTitle, Option<int> assessmentVersion, Option<string> id, Option<double> maxRawScore, Option<string> nomenclature, Option<DateOnly> revisionDate, Option<bool> useSnapshot, Option<string> assessmentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssessments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, assessmentIdentifier, varNamespace, educationOrganizationId, assessmentCategoryDescriptor, adaptiveAssessment, assessmentFamily, assessmentForm, assessmentTitle, assessmentVersion, id, maxRawScore, nomenclature, revisionDate, useSnapshot, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="assessmentCategoryDescriptor"></param>
        /// <param name="adaptiveAssessment"></param>
        /// <param name="assessmentFamily"></param>
        /// <param name="assessmentForm"></param>
        /// <param name="assessmentTitle"></param>
        /// <param name="assessmentVersion"></param>
        /// <param name="id"></param>
        /// <param name="maxRawScore"></param>
        /// <param name="nomenclature"></param>
        /// <param name="revisionDate"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="assessmentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetAssessments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<long> educationOrganizationId, Option<string> assessmentCategoryDescriptor, Option<bool> adaptiveAssessment, Option<string> assessmentFamily, Option<string> assessmentForm, Option<string> assessmentTitle, Option<int> assessmentVersion, Option<string> id, Option<double> maxRawScore, Option<string> nomenclature, Option<DateOnly> revisionDate, Option<bool> useSnapshot, Option<string> assessmentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="assessmentCategoryDescriptor">The category of an assessment based on format and content. (optional)</param>
        /// <param name="adaptiveAssessment">Indicates that the assessment is adaptive. (optional)</param>
        /// <param name="assessmentFamily">The assessment family this assessment is a member of. (optional)</param>
        /// <param name="assessmentForm">Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc. (optional)</param>
        /// <param name="assessmentTitle">The title or name of the assessment. (optional)</param>
        /// <param name="assessmentVersion">The version identifier for the assessment. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum. (optional)</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for assessment. (optional)</param>
        /// <param name="revisionDate">The month, day, and year that the conceptual design for the assessment was most recently revised substantially. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="assessmentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the assessment identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IGetAssessmentsApiResponse?> GetAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<long> educationOrganizationId = default, Option<string> assessmentCategoryDescriptor = default, Option<bool> adaptiveAssessment = default, Option<string> assessmentFamily = default, Option<string> assessmentForm = default, Option<string> assessmentTitle = default, Option<int> assessmentVersion = default, Option<string> id = default, Option<double> maxRawScore = default, Option<string> nomenclature = default, Option<DateOnly> revisionDate = default, Option<bool> useSnapshot = default, Option<string> assessmentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssessmentsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, assessmentIdentifier, varNamespace, educationOrganizationId, assessmentCategoryDescriptor, adaptiveAssessment, assessmentFamily, assessmentForm, assessmentTitle, assessmentVersion, id, maxRawScore, nomenclature, revisionDate, useSnapshot, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="assessmentCategoryDescriptor">The category of an assessment based on format and content. (optional)</param>
        /// <param name="adaptiveAssessment">Indicates that the assessment is adaptive. (optional)</param>
        /// <param name="assessmentFamily">The assessment family this assessment is a member of. (optional)</param>
        /// <param name="assessmentForm">Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc. (optional)</param>
        /// <param name="assessmentTitle">The title or name of the assessment. (optional)</param>
        /// <param name="assessmentVersion">The version identifier for the assessment. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum. (optional)</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for assessment. (optional)</param>
        /// <param name="revisionDate">The month, day, and year that the conceptual design for the assessment was most recently revised substantially. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="assessmentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the assessment identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IGetAssessmentsApiResponse> GetAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<long> educationOrganizationId = default, Option<string> assessmentCategoryDescriptor = default, Option<bool> adaptiveAssessment = default, Option<string> assessmentFamily = default, Option<string> assessmentForm = default, Option<string> assessmentTitle = default, Option<int> assessmentVersion = default, Option<string> id = default, Option<double> maxRawScore = default, Option<string> nomenclature = default, Option<DateOnly> revisionDate = default, Option<bool> useSnapshot = default, Option<string> assessmentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssessments(pageToken, assessmentIdentifier, varNamespace, assessmentCategoryDescriptor, assessmentFamily, assessmentForm, assessmentTitle, id, nomenclature, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                FormatGetAssessments(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref assessmentIdentifier, ref varNamespace, ref educationOrganizationId, ref assessmentCategoryDescriptor, ref adaptiveAssessment, ref assessmentFamily, ref assessmentForm, ref assessmentTitle, ref assessmentVersion, ref id, ref maxRawScore, ref nomenclature, ref revisionDate, ref useSnapshot, ref assessmentIdentificationSystemDescriptor, ref assigningOrganizationIdentificationCode, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/assessments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/assessments");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (assessmentIdentifier.IsSet)
                        parseQueryStringLocalVar["assessmentIdentifier"] = ClientUtils.ParameterToString(assessmentIdentifier.Value);

                    if (varNamespace.IsSet)
                        parseQueryStringLocalVar["namespace"] = ClientUtils.ParameterToString(varNamespace.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (assessmentCategoryDescriptor.IsSet)
                        parseQueryStringLocalVar["assessmentCategoryDescriptor"] = ClientUtils.ParameterToString(assessmentCategoryDescriptor.Value);

                    if (adaptiveAssessment.IsSet)
                        parseQueryStringLocalVar["adaptiveAssessment"] = ClientUtils.ParameterToString(adaptiveAssessment.Value);

                    if (assessmentFamily.IsSet)
                        parseQueryStringLocalVar["assessmentFamily"] = ClientUtils.ParameterToString(assessmentFamily.Value);

                    if (assessmentForm.IsSet)
                        parseQueryStringLocalVar["assessmentForm"] = ClientUtils.ParameterToString(assessmentForm.Value);

                    if (assessmentTitle.IsSet)
                        parseQueryStringLocalVar["assessmentTitle"] = ClientUtils.ParameterToString(assessmentTitle.Value);

                    if (assessmentVersion.IsSet)
                        parseQueryStringLocalVar["assessmentVersion"] = ClientUtils.ParameterToString(assessmentVersion.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (maxRawScore.IsSet)
                        parseQueryStringLocalVar["maxRawScore"] = ClientUtils.ParameterToString(maxRawScore.Value);

                    if (nomenclature.IsSet)
                        parseQueryStringLocalVar["nomenclature"] = ClientUtils.ParameterToString(nomenclature.Value);

                    if (revisionDate.IsSet)
                        parseQueryStringLocalVar["revisionDate"] = ClientUtils.ParameterToString(revisionDate.Value);

                    if (assessmentIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["assessmentIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(assessmentIdentificationSystemDescriptor.Value);

                    if (assigningOrganizationIdentificationCode.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssessmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssessmentsApiResponse>();

                        GetAssessmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/assessments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssessmentsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, assessmentIdentifier, varNamespace, educationOrganizationId, assessmentCategoryDescriptor, adaptiveAssessment, assessmentFamily, assessmentForm, assessmentTitle, assessmentVersion, id, maxRawScore, nomenclature, revisionDate, useSnapshot, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                        Events.ExecuteOnGetAssessments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssessmentsDefaultImplementation(e, "/ed-fi/assessments", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, assessmentIdentifier, varNamespace, educationOrganizationId, assessmentCategoryDescriptor, adaptiveAssessment, assessmentFamily, assessmentForm, assessmentTitle, assessmentVersion, id, maxRawScore, nomenclature, revisionDate, useSnapshot, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
                Events.ExecuteOnErrorGetAssessments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssessmentsApiResponse"/>
        /// </summary>
        public partial class GetAssessmentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetAssessmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssessmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssessmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssessmentsApiResponse(ILogger<GetAssessmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiAssessment>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiAssessment>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiAssessment>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssessmentsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetAssessmentsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetAssessmentsByIdDefaultImplementation(IGetAssessmentsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetAssessmentsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetAssessmentsById(ref bool suppressDefaultLog, IGetAssessmentsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetAssessmentsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssessmentsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetAssessmentsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetAssessmentsByIdApiResponse?> GetAssessmentsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssessmentsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetAssessmentsByIdApiResponse> GetAssessmentsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssessmentsById(id, ifNoneMatch);

                FormatGetAssessmentsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/assessments/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/assessments/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssessmentsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssessmentsByIdApiResponse>();

                        GetAssessmentsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/assessments/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssessmentsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetAssessmentsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssessmentsByIdDefaultImplementation(e, "/ed-fi/assessments/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetAssessmentsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssessmentsByIdApiResponse"/>
        /// </summary>
        public partial class GetAssessmentsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetAssessmentsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssessmentsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssessmentsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssessmentsByIdApiResponse(ILogger<GetAssessmentsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiAssessment? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiAssessment>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiAssessment? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssessmentsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> assessmentIdentifier, ref Option<string> varNamespace, ref Option<long> educationOrganizationId, ref Option<string> assessmentCategoryDescriptor, ref Option<bool> adaptiveAssessment, ref Option<string> assessmentFamily, ref Option<string> assessmentForm, ref Option<string> assessmentTitle, ref Option<int> assessmentVersion, ref Option<string> id, ref Option<double> maxRawScore, ref Option<string> nomenclature, ref Option<DateOnly> revisionDate, ref Option<bool> useSnapshot, ref Option<string> assessmentIdentificationSystemDescriptor, ref Option<string> assigningOrganizationIdentificationCode, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="assessmentCategoryDescriptor"></param>
        /// <param name="assessmentFamily"></param>
        /// <param name="assessmentForm"></param>
        /// <param name="assessmentTitle"></param>
        /// <param name="id"></param>
        /// <param name="nomenclature"></param>
        /// <param name="assessmentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetAssessmentsPartitions(Option<string> assessmentIdentifier, Option<string> varNamespace, Option<string> assessmentCategoryDescriptor, Option<string> assessmentFamily, Option<string> assessmentForm, Option<string> assessmentTitle, Option<string> id, Option<string> nomenclature, Option<string> assessmentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            if (assessmentIdentifier.IsSet && assessmentIdentifier.Value == null)
                throw new ArgumentNullException(nameof(assessmentIdentifier));

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace));

            if (assessmentCategoryDescriptor.IsSet && assessmentCategoryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(assessmentCategoryDescriptor));

            if (assessmentFamily.IsSet && assessmentFamily.Value == null)
                throw new ArgumentNullException(nameof(assessmentFamily));

            if (assessmentForm.IsSet && assessmentForm.Value == null)
                throw new ArgumentNullException(nameof(assessmentForm));

            if (assessmentTitle.IsSet && assessmentTitle.Value == null)
                throw new ArgumentNullException(nameof(assessmentTitle));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (nomenclature.IsSet && nomenclature.Value == null)
                throw new ArgumentNullException(nameof(nomenclature));

            if (assessmentIdentificationSystemDescriptor.IsSet && assessmentIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(assessmentIdentificationSystemDescriptor));

            if (assigningOrganizationIdentificationCode.IsSet && assigningOrganizationIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="assessmentCategoryDescriptor"></param>
        /// <param name="adaptiveAssessment"></param>
        /// <param name="assessmentFamily"></param>
        /// <param name="assessmentForm"></param>
        /// <param name="assessmentTitle"></param>
        /// <param name="assessmentVersion"></param>
        /// <param name="id"></param>
        /// <param name="maxRawScore"></param>
        /// <param name="nomenclature"></param>
        /// <param name="revisionDate"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="assessmentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetAssessmentsPartitionsDefaultImplementation(IGetAssessmentsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<long> educationOrganizationId, Option<string> assessmentCategoryDescriptor, Option<bool> adaptiveAssessment, Option<string> assessmentFamily, Option<string> assessmentForm, Option<string> assessmentTitle, Option<int> assessmentVersion, Option<string> id, Option<double> maxRawScore, Option<string> nomenclature, Option<DateOnly> revisionDate, Option<bool> useSnapshot, Option<string> assessmentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetAssessmentsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, assessmentIdentifier, varNamespace, educationOrganizationId, assessmentCategoryDescriptor, adaptiveAssessment, assessmentFamily, assessmentForm, assessmentTitle, assessmentVersion, id, maxRawScore, nomenclature, revisionDate, useSnapshot, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="assessmentCategoryDescriptor"></param>
        /// <param name="adaptiveAssessment"></param>
        /// <param name="assessmentFamily"></param>
        /// <param name="assessmentForm"></param>
        /// <param name="assessmentTitle"></param>
        /// <param name="assessmentVersion"></param>
        /// <param name="id"></param>
        /// <param name="maxRawScore"></param>
        /// <param name="nomenclature"></param>
        /// <param name="revisionDate"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="assessmentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetAssessmentsPartitions(ref bool suppressDefaultLog, IGetAssessmentsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<long> educationOrganizationId, Option<string> assessmentCategoryDescriptor, Option<bool> adaptiveAssessment, Option<string> assessmentFamily, Option<string> assessmentForm, Option<string> assessmentTitle, Option<int> assessmentVersion, Option<string> id, Option<double> maxRawScore, Option<string> nomenclature, Option<DateOnly> revisionDate, Option<bool> useSnapshot, Option<string> assessmentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="assessmentCategoryDescriptor"></param>
        /// <param name="adaptiveAssessment"></param>
        /// <param name="assessmentFamily"></param>
        /// <param name="assessmentForm"></param>
        /// <param name="assessmentTitle"></param>
        /// <param name="assessmentVersion"></param>
        /// <param name="id"></param>
        /// <param name="maxRawScore"></param>
        /// <param name="nomenclature"></param>
        /// <param name="revisionDate"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="assessmentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetAssessmentsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<long> educationOrganizationId, Option<string> assessmentCategoryDescriptor, Option<bool> adaptiveAssessment, Option<string> assessmentFamily, Option<string> assessmentForm, Option<string> assessmentTitle, Option<int> assessmentVersion, Option<string> id, Option<double> maxRawScore, Option<string> nomenclature, Option<DateOnly> revisionDate, Option<bool> useSnapshot, Option<string> assessmentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssessmentsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, assessmentIdentifier, varNamespace, educationOrganizationId, assessmentCategoryDescriptor, adaptiveAssessment, assessmentFamily, assessmentForm, assessmentTitle, assessmentVersion, id, maxRawScore, nomenclature, revisionDate, useSnapshot, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="assessmentCategoryDescriptor"></param>
        /// <param name="adaptiveAssessment"></param>
        /// <param name="assessmentFamily"></param>
        /// <param name="assessmentForm"></param>
        /// <param name="assessmentTitle"></param>
        /// <param name="assessmentVersion"></param>
        /// <param name="id"></param>
        /// <param name="maxRawScore"></param>
        /// <param name="nomenclature"></param>
        /// <param name="revisionDate"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="assessmentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetAssessmentsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<long> educationOrganizationId, Option<string> assessmentCategoryDescriptor, Option<bool> adaptiveAssessment, Option<string> assessmentFamily, Option<string> assessmentForm, Option<string> assessmentTitle, Option<int> assessmentVersion, Option<string> id, Option<double> maxRawScore, Option<string> nomenclature, Option<DateOnly> revisionDate, Option<bool> useSnapshot, Option<string> assessmentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="assessmentCategoryDescriptor">The category of an assessment based on format and content. (optional)</param>
        /// <param name="adaptiveAssessment">Indicates that the assessment is adaptive. (optional)</param>
        /// <param name="assessmentFamily">The assessment family this assessment is a member of. (optional)</param>
        /// <param name="assessmentForm">Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc. (optional)</param>
        /// <param name="assessmentTitle">The title or name of the assessment. (optional)</param>
        /// <param name="assessmentVersion">The version identifier for the assessment. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum. (optional)</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for assessment. (optional)</param>
        /// <param name="revisionDate">The month, day, and year that the conceptual design for the assessment was most recently revised substantially. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="assessmentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the assessment identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetAssessmentsPartitionsApiResponse?> GetAssessmentsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<long> educationOrganizationId = default, Option<string> assessmentCategoryDescriptor = default, Option<bool> adaptiveAssessment = default, Option<string> assessmentFamily = default, Option<string> assessmentForm = default, Option<string> assessmentTitle = default, Option<int> assessmentVersion = default, Option<string> id = default, Option<double> maxRawScore = default, Option<string> nomenclature = default, Option<DateOnly> revisionDate = default, Option<bool> useSnapshot = default, Option<string> assessmentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssessmentsPartitionsAsync(number, minChangeVersion, maxChangeVersion, assessmentIdentifier, varNamespace, educationOrganizationId, assessmentCategoryDescriptor, adaptiveAssessment, assessmentFamily, assessmentForm, assessmentTitle, assessmentVersion, id, maxRawScore, nomenclature, revisionDate, useSnapshot, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="assessmentCategoryDescriptor">The category of an assessment based on format and content. (optional)</param>
        /// <param name="adaptiveAssessment">Indicates that the assessment is adaptive. (optional)</param>
        /// <param name="assessmentFamily">The assessment family this assessment is a member of. (optional)</param>
        /// <param name="assessmentForm">Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc. (optional)</param>
        /// <param name="assessmentTitle">The title or name of the assessment. (optional)</param>
        /// <param name="assessmentVersion">The version identifier for the assessment. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum. (optional)</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for assessment. (optional)</param>
        /// <param name="revisionDate">The month, day, and year that the conceptual design for the assessment was most recently revised substantially. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="assessmentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the assessment identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssessmentsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetAssessmentsPartitionsApiResponse> GetAssessmentsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<long> educationOrganizationId = default, Option<string> assessmentCategoryDescriptor = default, Option<bool> adaptiveAssessment = default, Option<string> assessmentFamily = default, Option<string> assessmentForm = default, Option<string> assessmentTitle = default, Option<int> assessmentVersion = default, Option<string> id = default, Option<double> maxRawScore = default, Option<string> nomenclature = default, Option<DateOnly> revisionDate = default, Option<bool> useSnapshot = default, Option<string> assessmentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssessmentsPartitions(assessmentIdentifier, varNamespace, assessmentCategoryDescriptor, assessmentFamily, assessmentForm, assessmentTitle, id, nomenclature, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                FormatGetAssessmentsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref assessmentIdentifier, ref varNamespace, ref educationOrganizationId, ref assessmentCategoryDescriptor, ref adaptiveAssessment, ref assessmentFamily, ref assessmentForm, ref assessmentTitle, ref assessmentVersion, ref id, ref maxRawScore, ref nomenclature, ref revisionDate, ref useSnapshot, ref assessmentIdentificationSystemDescriptor, ref assigningOrganizationIdentificationCode, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/assessments/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/assessments/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (assessmentIdentifier.IsSet)
                        parseQueryStringLocalVar["assessmentIdentifier"] = ClientUtils.ParameterToString(assessmentIdentifier.Value);

                    if (varNamespace.IsSet)
                        parseQueryStringLocalVar["namespace"] = ClientUtils.ParameterToString(varNamespace.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (assessmentCategoryDescriptor.IsSet)
                        parseQueryStringLocalVar["assessmentCategoryDescriptor"] = ClientUtils.ParameterToString(assessmentCategoryDescriptor.Value);

                    if (adaptiveAssessment.IsSet)
                        parseQueryStringLocalVar["adaptiveAssessment"] = ClientUtils.ParameterToString(adaptiveAssessment.Value);

                    if (assessmentFamily.IsSet)
                        parseQueryStringLocalVar["assessmentFamily"] = ClientUtils.ParameterToString(assessmentFamily.Value);

                    if (assessmentForm.IsSet)
                        parseQueryStringLocalVar["assessmentForm"] = ClientUtils.ParameterToString(assessmentForm.Value);

                    if (assessmentTitle.IsSet)
                        parseQueryStringLocalVar["assessmentTitle"] = ClientUtils.ParameterToString(assessmentTitle.Value);

                    if (assessmentVersion.IsSet)
                        parseQueryStringLocalVar["assessmentVersion"] = ClientUtils.ParameterToString(assessmentVersion.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (maxRawScore.IsSet)
                        parseQueryStringLocalVar["maxRawScore"] = ClientUtils.ParameterToString(maxRawScore.Value);

                    if (nomenclature.IsSet)
                        parseQueryStringLocalVar["nomenclature"] = ClientUtils.ParameterToString(nomenclature.Value);

                    if (revisionDate.IsSet)
                        parseQueryStringLocalVar["revisionDate"] = ClientUtils.ParameterToString(revisionDate.Value);

                    if (assessmentIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["assessmentIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(assessmentIdentificationSystemDescriptor.Value);

                    if (assigningOrganizationIdentificationCode.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssessmentsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssessmentsPartitionsApiResponse>();

                        GetAssessmentsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/assessments/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssessmentsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, assessmentIdentifier, varNamespace, educationOrganizationId, assessmentCategoryDescriptor, adaptiveAssessment, assessmentFamily, assessmentForm, assessmentTitle, assessmentVersion, id, maxRawScore, nomenclature, revisionDate, useSnapshot, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                        Events.ExecuteOnGetAssessmentsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssessmentsPartitionsDefaultImplementation(e, "/ed-fi/assessments/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, assessmentIdentifier, varNamespace, educationOrganizationId, assessmentCategoryDescriptor, adaptiveAssessment, assessmentFamily, assessmentForm, assessmentTitle, assessmentVersion, id, maxRawScore, nomenclature, revisionDate, useSnapshot, assessmentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
                Events.ExecuteOnErrorGetAssessmentsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssessmentsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetAssessmentsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetAssessmentsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssessmentsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssessmentsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssessmentsPartitionsApiResponse(ILogger<GetAssessmentsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesAssessments(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesAssessmentsDefaultImplementation(IKeyChangesAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesAssessments(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesAssessments(ref bool suppressDefaultLog, IKeyChangesAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesAssessmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesAssessments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesAssessments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesAssessmentsApiResponse?> KeyChangesAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesAssessmentsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesAssessmentsApiResponse> KeyChangesAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesAssessments(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/assessments/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/assessments/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesAssessmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesAssessmentsApiResponse>();

                        KeyChangesAssessmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/assessments/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesAssessmentsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesAssessments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesAssessmentsDefaultImplementation(e, "/ed-fi/assessments/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesAssessments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesAssessmentsApiResponse"/>
        /// </summary>
        public partial class KeyChangesAssessmentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesAssessmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesAssessmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesAssessmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesAssessmentsApiResponse(ILogger<KeyChangesAssessmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiAssessmentKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiAssessmentKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiAssessmentKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostAssessment(EdFiAssessment edFiAssessment);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiAssessment"></param>
        /// <returns></returns>
        private void ValidatePostAssessment(EdFiAssessment edFiAssessment)
        {
            if (edFiAssessment == null)
                throw new ArgumentNullException(nameof(edFiAssessment));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiAssessment"></param>
        private void AfterPostAssessmentDefaultImplementation(IPostAssessmentApiResponse apiResponseLocalVar, EdFiAssessment edFiAssessment)
        {
            bool suppressDefaultLog = false;
            AfterPostAssessment(ref suppressDefaultLog, apiResponseLocalVar, edFiAssessment);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiAssessment"></param>
        partial void AfterPostAssessment(ref bool suppressDefaultLog, IPostAssessmentApiResponse apiResponseLocalVar, EdFiAssessment edFiAssessment);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiAssessment"></param>
        private void OnErrorPostAssessmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiAssessment edFiAssessment)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostAssessment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiAssessment);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiAssessment"></param>
        partial void OnErrorPostAssessment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiAssessment edFiAssessment);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiAssessment">The JSON representation of the \&quot;assessment\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostAssessmentApiResponse"/>&gt;</returns>
        public async Task<IPostAssessmentApiResponse?> PostAssessmentOrDefaultAsync(EdFiAssessment edFiAssessment, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostAssessmentAsync(edFiAssessment, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiAssessment">The JSON representation of the \&quot;assessment\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostAssessmentApiResponse"/>&gt;</returns>
        public async Task<IPostAssessmentApiResponse> PostAssessmentAsync(EdFiAssessment edFiAssessment, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostAssessment(edFiAssessment);

                FormatPostAssessment(edFiAssessment);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/assessments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/assessments");

                    httpRequestMessageLocalVar.Content = (edFiAssessment as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiAssessment, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostAssessmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostAssessmentApiResponse>();

                        PostAssessmentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/assessments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostAssessmentDefaultImplementation(apiResponseLocalVar, edFiAssessment);

                        Events.ExecuteOnPostAssessment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostAssessmentDefaultImplementation(e, "/ed-fi/assessments", uriBuilderLocalVar.Path, edFiAssessment);
                Events.ExecuteOnErrorPostAssessment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostAssessmentApiResponse"/>
        /// </summary>
        public partial class PostAssessmentApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostAssessmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostAssessmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostAssessmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostAssessmentApiResponse(ILogger<PostAssessmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutAssessment(ref string id, EdFiAssessment edFiAssessment, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiAssessment"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutAssessment(string id, EdFiAssessment edFiAssessment, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiAssessment == null)
                throw new ArgumentNullException(nameof(edFiAssessment));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiAssessment"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutAssessmentDefaultImplementation(IPutAssessmentApiResponse apiResponseLocalVar, string id, EdFiAssessment edFiAssessment, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutAssessment(ref suppressDefaultLog, apiResponseLocalVar, id, edFiAssessment, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiAssessment"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutAssessment(ref bool suppressDefaultLog, IPutAssessmentApiResponse apiResponseLocalVar, string id, EdFiAssessment edFiAssessment, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiAssessment"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutAssessmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiAssessment edFiAssessment, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutAssessment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiAssessment, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiAssessment"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutAssessment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiAssessment edFiAssessment, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiAssessment">The JSON representation of the \&quot;assessment\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssessmentApiResponse"/>&gt;</returns>
        public async Task<IPutAssessmentApiResponse?> PutAssessmentOrDefaultAsync(string id, EdFiAssessment edFiAssessment, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutAssessmentAsync(id, edFiAssessment, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiAssessment">The JSON representation of the \&quot;assessment\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutAssessmentApiResponse"/>&gt;</returns>
        public async Task<IPutAssessmentApiResponse> PutAssessmentAsync(string id, EdFiAssessment edFiAssessment, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutAssessment(id, edFiAssessment, ifMatch);

                FormatPutAssessment(ref id, edFiAssessment, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/assessments/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/assessments/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiAssessment as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiAssessment, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutAssessmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutAssessmentApiResponse>();

                        PutAssessmentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/assessments/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutAssessmentDefaultImplementation(apiResponseLocalVar, id, edFiAssessment, ifMatch);

                        Events.ExecuteOnPutAssessment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutAssessmentDefaultImplementation(e, "/ed-fi/assessments/{id}", uriBuilderLocalVar.Path, id, edFiAssessment, ifMatch);
                Events.ExecuteOnErrorPutAssessment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutAssessmentApiResponse"/>
        /// </summary>
        public partial class PutAssessmentApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutAssessmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutAssessmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutAssessmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutAssessmentApiResponse(ILogger<PutAssessmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
