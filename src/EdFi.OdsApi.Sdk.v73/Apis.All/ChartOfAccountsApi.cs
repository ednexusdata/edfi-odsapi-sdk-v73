// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IChartOfAccountsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ChartOfAccountsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChartOfAccountByIdApiResponse"/>&gt;</returns>
        Task<IDeleteChartOfAccountByIdApiResponse> DeleteChartOfAccountByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChartOfAccountByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteChartOfAccountByIdApiResponse?> DeleteChartOfAccountByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesChartOfAccountsApiResponse"/>&gt;</returns>
        Task<IDeletesChartOfAccountsApiResponse> DeletesChartOfAccountsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesChartOfAccountsApiResponse"/>?&gt;</returns>
        Task<IDeletesChartOfAccountsApiResponse?> DeletesChartOfAccountsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="accountIdentifier">SEA populated code value for the valid combination of account dimensions under which financials are reported. (optional)</param>
        /// <param name="fiscalYear">The fiscal year for the account (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="balanceSheetCode">The code representation of the account balance sheet dimension. (optional)</param>
        /// <param name="functionCode">The code representation of the account function dimension. (optional)</param>
        /// <param name="fundCode">The code representation of the account fund dimension. (optional)</param>
        /// <param name="objectCode">The code representation of the account object dimension. (optional)</param>
        /// <param name="operationalUnitCode">The code representation of the account operational unit dimension. (optional)</param>
        /// <param name="programCode">The code representation of the account program dimension. (optional)</param>
        /// <param name="projectCode">The code representation of the account project dimension. (optional)</param>
        /// <param name="sourceCode">The code representation of the account source dimension. (optional)</param>
        /// <param name="accountTypeDescriptor">The type of account used in accounting such as revenue, expenditure, or balance sheet. (optional)</param>
        /// <param name="accountName">A descriptive name for the account. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsApiResponse"/>&gt;</returns>
        Task<IGetChartOfAccountsApiResponse> GetChartOfAccountsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> accountIdentifier = default, Option<int> fiscalYear = default, Option<long> educationOrganizationId = default, Option<string> balanceSheetCode = default, Option<string> functionCode = default, Option<string> fundCode = default, Option<string> objectCode = default, Option<string> operationalUnitCode = default, Option<string> programCode = default, Option<string> projectCode = default, Option<string> sourceCode = default, Option<string> accountTypeDescriptor = default, Option<string> accountName = default, Option<string> id = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="accountIdentifier">SEA populated code value for the valid combination of account dimensions under which financials are reported. (optional)</param>
        /// <param name="fiscalYear">The fiscal year for the account (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="balanceSheetCode">The code representation of the account balance sheet dimension. (optional)</param>
        /// <param name="functionCode">The code representation of the account function dimension. (optional)</param>
        /// <param name="fundCode">The code representation of the account fund dimension. (optional)</param>
        /// <param name="objectCode">The code representation of the account object dimension. (optional)</param>
        /// <param name="operationalUnitCode">The code representation of the account operational unit dimension. (optional)</param>
        /// <param name="programCode">The code representation of the account program dimension. (optional)</param>
        /// <param name="projectCode">The code representation of the account project dimension. (optional)</param>
        /// <param name="sourceCode">The code representation of the account source dimension. (optional)</param>
        /// <param name="accountTypeDescriptor">The type of account used in accounting such as revenue, expenditure, or balance sheet. (optional)</param>
        /// <param name="accountName">A descriptive name for the account. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsApiResponse"/>?&gt;</returns>
        Task<IGetChartOfAccountsApiResponse?> GetChartOfAccountsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> accountIdentifier = default, Option<int> fiscalYear = default, Option<long> educationOrganizationId = default, Option<string> balanceSheetCode = default, Option<string> functionCode = default, Option<string> fundCode = default, Option<string> objectCode = default, Option<string> operationalUnitCode = default, Option<string> programCode = default, Option<string> projectCode = default, Option<string> sourceCode = default, Option<string> accountTypeDescriptor = default, Option<string> accountName = default, Option<string> id = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsByIdApiResponse"/>&gt;</returns>
        Task<IGetChartOfAccountsByIdApiResponse> GetChartOfAccountsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsByIdApiResponse"/>?&gt;</returns>
        Task<IGetChartOfAccountsByIdApiResponse?> GetChartOfAccountsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="accountIdentifier">SEA populated code value for the valid combination of account dimensions under which financials are reported. (optional)</param>
        /// <param name="fiscalYear">The fiscal year for the account (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="balanceSheetCode">The code representation of the account balance sheet dimension. (optional)</param>
        /// <param name="functionCode">The code representation of the account function dimension. (optional)</param>
        /// <param name="fundCode">The code representation of the account fund dimension. (optional)</param>
        /// <param name="objectCode">The code representation of the account object dimension. (optional)</param>
        /// <param name="operationalUnitCode">The code representation of the account operational unit dimension. (optional)</param>
        /// <param name="programCode">The code representation of the account program dimension. (optional)</param>
        /// <param name="projectCode">The code representation of the account project dimension. (optional)</param>
        /// <param name="sourceCode">The code representation of the account source dimension. (optional)</param>
        /// <param name="accountTypeDescriptor">The type of account used in accounting such as revenue, expenditure, or balance sheet. (optional)</param>
        /// <param name="accountName">A descriptive name for the account. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetChartOfAccountsPartitionsApiResponse> GetChartOfAccountsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> accountIdentifier = default, Option<int> fiscalYear = default, Option<long> educationOrganizationId = default, Option<string> balanceSheetCode = default, Option<string> functionCode = default, Option<string> fundCode = default, Option<string> objectCode = default, Option<string> operationalUnitCode = default, Option<string> programCode = default, Option<string> projectCode = default, Option<string> sourceCode = default, Option<string> accountTypeDescriptor = default, Option<string> accountName = default, Option<string> id = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="accountIdentifier">SEA populated code value for the valid combination of account dimensions under which financials are reported. (optional)</param>
        /// <param name="fiscalYear">The fiscal year for the account (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="balanceSheetCode">The code representation of the account balance sheet dimension. (optional)</param>
        /// <param name="functionCode">The code representation of the account function dimension. (optional)</param>
        /// <param name="fundCode">The code representation of the account fund dimension. (optional)</param>
        /// <param name="objectCode">The code representation of the account object dimension. (optional)</param>
        /// <param name="operationalUnitCode">The code representation of the account operational unit dimension. (optional)</param>
        /// <param name="programCode">The code representation of the account program dimension. (optional)</param>
        /// <param name="projectCode">The code representation of the account project dimension. (optional)</param>
        /// <param name="sourceCode">The code representation of the account source dimension. (optional)</param>
        /// <param name="accountTypeDescriptor">The type of account used in accounting such as revenue, expenditure, or balance sheet. (optional)</param>
        /// <param name="accountName">A descriptive name for the account. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetChartOfAccountsPartitionsApiResponse?> GetChartOfAccountsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> accountIdentifier = default, Option<int> fiscalYear = default, Option<long> educationOrganizationId = default, Option<string> balanceSheetCode = default, Option<string> functionCode = default, Option<string> fundCode = default, Option<string> objectCode = default, Option<string> operationalUnitCode = default, Option<string> programCode = default, Option<string> projectCode = default, Option<string> sourceCode = default, Option<string> accountTypeDescriptor = default, Option<string> accountName = default, Option<string> id = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesChartOfAccountsApiResponse"/>&gt;</returns>
        Task<IKeyChangesChartOfAccountsApiResponse> KeyChangesChartOfAccountsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesChartOfAccountsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesChartOfAccountsApiResponse?> KeyChangesChartOfAccountsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiChartOfAccount">The JSON representation of the \&quot;chartOfAccount\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostChartOfAccountApiResponse"/>&gt;</returns>
        Task<IPostChartOfAccountApiResponse> PostChartOfAccountAsync(EdFiChartOfAccount edFiChartOfAccount, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiChartOfAccount">The JSON representation of the \&quot;chartOfAccount\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostChartOfAccountApiResponse"/>?&gt;</returns>
        Task<IPostChartOfAccountApiResponse?> PostChartOfAccountOrDefaultAsync(EdFiChartOfAccount edFiChartOfAccount, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiChartOfAccount">The JSON representation of the \&quot;chartOfAccount\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutChartOfAccountApiResponse"/>&gt;</returns>
        Task<IPutChartOfAccountApiResponse> PutChartOfAccountAsync(string id, EdFiChartOfAccount edFiChartOfAccount, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiChartOfAccount">The JSON representation of the \&quot;chartOfAccount\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutChartOfAccountApiResponse"/>?&gt;</returns>
        Task<IPutChartOfAccountApiResponse?> PutChartOfAccountOrDefaultAsync(string id, EdFiChartOfAccount edFiChartOfAccount, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteChartOfAccountByIdApiResponse"/>
    /// </summary>
    public interface IDeleteChartOfAccountByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesChartOfAccountsApiResponse"/>
    /// </summary>
    public interface IDeletesChartOfAccountsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiChartOfAccountDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChartOfAccountsApiResponse"/>
    /// </summary>
    public interface IGetChartOfAccountsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiChartOfAccount>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChartOfAccountsByIdApiResponse"/>
    /// </summary>
    public interface IGetChartOfAccountsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiChartOfAccount?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChartOfAccountsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetChartOfAccountsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesChartOfAccountsApiResponse"/>
    /// </summary>
    public interface IKeyChangesChartOfAccountsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiChartOfAccountKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostChartOfAccountApiResponse"/>
    /// </summary>
    public interface IPostChartOfAccountApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutChartOfAccountApiResponse"/>
    /// </summary>
    public interface IPutChartOfAccountApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ChartOfAccountsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteChartOfAccountById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteChartOfAccountById;

        internal void ExecuteOnDeleteChartOfAccountById(ChartOfAccountsApi.DeleteChartOfAccountByIdApiResponse apiResponse)
        {
            OnDeleteChartOfAccountById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteChartOfAccountById(Exception exception)
        {
            OnErrorDeleteChartOfAccountById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesChartOfAccounts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesChartOfAccounts;

        internal void ExecuteOnDeletesChartOfAccounts(ChartOfAccountsApi.DeletesChartOfAccountsApiResponse apiResponse)
        {
            OnDeletesChartOfAccounts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesChartOfAccounts(Exception exception)
        {
            OnErrorDeletesChartOfAccounts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChartOfAccounts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChartOfAccounts;

        internal void ExecuteOnGetChartOfAccounts(ChartOfAccountsApi.GetChartOfAccountsApiResponse apiResponse)
        {
            OnGetChartOfAccounts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChartOfAccounts(Exception exception)
        {
            OnErrorGetChartOfAccounts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChartOfAccountsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChartOfAccountsById;

        internal void ExecuteOnGetChartOfAccountsById(ChartOfAccountsApi.GetChartOfAccountsByIdApiResponse apiResponse)
        {
            OnGetChartOfAccountsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChartOfAccountsById(Exception exception)
        {
            OnErrorGetChartOfAccountsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChartOfAccountsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChartOfAccountsPartitions;

        internal void ExecuteOnGetChartOfAccountsPartitions(ChartOfAccountsApi.GetChartOfAccountsPartitionsApiResponse apiResponse)
        {
            OnGetChartOfAccountsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChartOfAccountsPartitions(Exception exception)
        {
            OnErrorGetChartOfAccountsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesChartOfAccounts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesChartOfAccounts;

        internal void ExecuteOnKeyChangesChartOfAccounts(ChartOfAccountsApi.KeyChangesChartOfAccountsApiResponse apiResponse)
        {
            OnKeyChangesChartOfAccounts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesChartOfAccounts(Exception exception)
        {
            OnErrorKeyChangesChartOfAccounts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostChartOfAccount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostChartOfAccount;

        internal void ExecuteOnPostChartOfAccount(ChartOfAccountsApi.PostChartOfAccountApiResponse apiResponse)
        {
            OnPostChartOfAccount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostChartOfAccount(Exception exception)
        {
            OnErrorPostChartOfAccount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutChartOfAccount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutChartOfAccount;

        internal void ExecuteOnPutChartOfAccount(ChartOfAccountsApi.PutChartOfAccountApiResponse apiResponse)
        {
            OnPutChartOfAccount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutChartOfAccount(Exception exception)
        {
            OnErrorPutChartOfAccount?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ChartOfAccountsApi : IChartOfAccountsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ChartOfAccountsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ChartOfAccountsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChartOfAccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChartOfAccountsApi(ILogger<ChartOfAccountsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ChartOfAccountsApiEvents chartOfAccountsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ChartOfAccountsApi>();
            HttpClient = httpClient;
            Events = chartOfAccountsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteChartOfAccountById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteChartOfAccountById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteChartOfAccountByIdDefaultImplementation(IDeleteChartOfAccountByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteChartOfAccountById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteChartOfAccountById(ref bool suppressDefaultLog, IDeleteChartOfAccountByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteChartOfAccountByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteChartOfAccountById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteChartOfAccountById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChartOfAccountByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteChartOfAccountByIdApiResponse?> DeleteChartOfAccountByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteChartOfAccountByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChartOfAccountByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteChartOfAccountByIdApiResponse> DeleteChartOfAccountByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteChartOfAccountById(id, ifMatch);

                FormatDeleteChartOfAccountById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/chartOfAccounts/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/chartOfAccounts/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteChartOfAccountByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteChartOfAccountByIdApiResponse>();

                        DeleteChartOfAccountByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/chartOfAccounts/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteChartOfAccountByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteChartOfAccountById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteChartOfAccountByIdDefaultImplementation(e, "/ed-fi/chartOfAccounts/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteChartOfAccountById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteChartOfAccountByIdApiResponse"/>
        /// </summary>
        public partial class DeleteChartOfAccountByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteChartOfAccountByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteChartOfAccountByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteChartOfAccountByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteChartOfAccountByIdApiResponse(ILogger<DeleteChartOfAccountByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesChartOfAccounts(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesChartOfAccountsDefaultImplementation(IDeletesChartOfAccountsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesChartOfAccounts(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesChartOfAccounts(ref bool suppressDefaultLog, IDeletesChartOfAccountsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesChartOfAccountsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesChartOfAccounts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesChartOfAccounts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesChartOfAccountsApiResponse"/>&gt;</returns>
        public async Task<IDeletesChartOfAccountsApiResponse?> DeletesChartOfAccountsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesChartOfAccountsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesChartOfAccountsApiResponse"/>&gt;</returns>
        public async Task<IDeletesChartOfAccountsApiResponse> DeletesChartOfAccountsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesChartOfAccounts(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/chartOfAccounts/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/chartOfAccounts/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesChartOfAccountsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesChartOfAccountsApiResponse>();

                        DeletesChartOfAccountsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/chartOfAccounts/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesChartOfAccountsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesChartOfAccounts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesChartOfAccountsDefaultImplementation(e, "/ed-fi/chartOfAccounts/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesChartOfAccounts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesChartOfAccountsApiResponse"/>
        /// </summary>
        public partial class DeletesChartOfAccountsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesChartOfAccountsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesChartOfAccountsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesChartOfAccountsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesChartOfAccountsApiResponse(ILogger<DeletesChartOfAccountsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiChartOfAccountDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiChartOfAccountDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiChartOfAccountDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChartOfAccounts(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> accountIdentifier, ref Option<int> fiscalYear, ref Option<long> educationOrganizationId, ref Option<string> balanceSheetCode, ref Option<string> functionCode, ref Option<string> fundCode, ref Option<string> objectCode, ref Option<string> operationalUnitCode, ref Option<string> programCode, ref Option<string> projectCode, ref Option<string> sourceCode, ref Option<string> accountTypeDescriptor, ref Option<string> accountName, ref Option<string> id, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="accountIdentifier"></param>
        /// <param name="balanceSheetCode"></param>
        /// <param name="functionCode"></param>
        /// <param name="fundCode"></param>
        /// <param name="objectCode"></param>
        /// <param name="operationalUnitCode"></param>
        /// <param name="programCode"></param>
        /// <param name="projectCode"></param>
        /// <param name="sourceCode"></param>
        /// <param name="accountTypeDescriptor"></param>
        /// <param name="accountName"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetChartOfAccounts(Option<string> pageToken, Option<string> accountIdentifier, Option<string> balanceSheetCode, Option<string> functionCode, Option<string> fundCode, Option<string> objectCode, Option<string> operationalUnitCode, Option<string> programCode, Option<string> projectCode, Option<string> sourceCode, Option<string> accountTypeDescriptor, Option<string> accountName, Option<string> id)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (accountIdentifier.IsSet && accountIdentifier.Value == null)
                throw new ArgumentNullException(nameof(accountIdentifier));

            if (balanceSheetCode.IsSet && balanceSheetCode.Value == null)
                throw new ArgumentNullException(nameof(balanceSheetCode));

            if (functionCode.IsSet && functionCode.Value == null)
                throw new ArgumentNullException(nameof(functionCode));

            if (fundCode.IsSet && fundCode.Value == null)
                throw new ArgumentNullException(nameof(fundCode));

            if (objectCode.IsSet && objectCode.Value == null)
                throw new ArgumentNullException(nameof(objectCode));

            if (operationalUnitCode.IsSet && operationalUnitCode.Value == null)
                throw new ArgumentNullException(nameof(operationalUnitCode));

            if (programCode.IsSet && programCode.Value == null)
                throw new ArgumentNullException(nameof(programCode));

            if (projectCode.IsSet && projectCode.Value == null)
                throw new ArgumentNullException(nameof(projectCode));

            if (sourceCode.IsSet && sourceCode.Value == null)
                throw new ArgumentNullException(nameof(sourceCode));

            if (accountTypeDescriptor.IsSet && accountTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(accountTypeDescriptor));

            if (accountName.IsSet && accountName.Value == null)
                throw new ArgumentNullException(nameof(accountName));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="accountIdentifier"></param>
        /// <param name="fiscalYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="balanceSheetCode"></param>
        /// <param name="functionCode"></param>
        /// <param name="fundCode"></param>
        /// <param name="objectCode"></param>
        /// <param name="operationalUnitCode"></param>
        /// <param name="programCode"></param>
        /// <param name="projectCode"></param>
        /// <param name="sourceCode"></param>
        /// <param name="accountTypeDescriptor"></param>
        /// <param name="accountName"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetChartOfAccountsDefaultImplementation(IGetChartOfAccountsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> accountIdentifier, Option<int> fiscalYear, Option<long> educationOrganizationId, Option<string> balanceSheetCode, Option<string> functionCode, Option<string> fundCode, Option<string> objectCode, Option<string> operationalUnitCode, Option<string> programCode, Option<string> projectCode, Option<string> sourceCode, Option<string> accountTypeDescriptor, Option<string> accountName, Option<string> id, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetChartOfAccounts(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, accountIdentifier, fiscalYear, educationOrganizationId, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="accountIdentifier"></param>
        /// <param name="fiscalYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="balanceSheetCode"></param>
        /// <param name="functionCode"></param>
        /// <param name="fundCode"></param>
        /// <param name="objectCode"></param>
        /// <param name="operationalUnitCode"></param>
        /// <param name="programCode"></param>
        /// <param name="projectCode"></param>
        /// <param name="sourceCode"></param>
        /// <param name="accountTypeDescriptor"></param>
        /// <param name="accountName"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetChartOfAccounts(ref bool suppressDefaultLog, IGetChartOfAccountsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> accountIdentifier, Option<int> fiscalYear, Option<long> educationOrganizationId, Option<string> balanceSheetCode, Option<string> functionCode, Option<string> fundCode, Option<string> objectCode, Option<string> operationalUnitCode, Option<string> programCode, Option<string> projectCode, Option<string> sourceCode, Option<string> accountTypeDescriptor, Option<string> accountName, Option<string> id, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="accountIdentifier"></param>
        /// <param name="fiscalYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="balanceSheetCode"></param>
        /// <param name="functionCode"></param>
        /// <param name="fundCode"></param>
        /// <param name="objectCode"></param>
        /// <param name="operationalUnitCode"></param>
        /// <param name="programCode"></param>
        /// <param name="projectCode"></param>
        /// <param name="sourceCode"></param>
        /// <param name="accountTypeDescriptor"></param>
        /// <param name="accountName"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetChartOfAccountsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> accountIdentifier, Option<int> fiscalYear, Option<long> educationOrganizationId, Option<string> balanceSheetCode, Option<string> functionCode, Option<string> fundCode, Option<string> objectCode, Option<string> operationalUnitCode, Option<string> programCode, Option<string> projectCode, Option<string> sourceCode, Option<string> accountTypeDescriptor, Option<string> accountName, Option<string> id, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChartOfAccounts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, accountIdentifier, fiscalYear, educationOrganizationId, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="accountIdentifier"></param>
        /// <param name="fiscalYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="balanceSheetCode"></param>
        /// <param name="functionCode"></param>
        /// <param name="fundCode"></param>
        /// <param name="objectCode"></param>
        /// <param name="operationalUnitCode"></param>
        /// <param name="programCode"></param>
        /// <param name="projectCode"></param>
        /// <param name="sourceCode"></param>
        /// <param name="accountTypeDescriptor"></param>
        /// <param name="accountName"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetChartOfAccounts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> accountIdentifier, Option<int> fiscalYear, Option<long> educationOrganizationId, Option<string> balanceSheetCode, Option<string> functionCode, Option<string> fundCode, Option<string> objectCode, Option<string> operationalUnitCode, Option<string> programCode, Option<string> projectCode, Option<string> sourceCode, Option<string> accountTypeDescriptor, Option<string> accountName, Option<string> id, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="accountIdentifier">SEA populated code value for the valid combination of account dimensions under which financials are reported. (optional)</param>
        /// <param name="fiscalYear">The fiscal year for the account (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="balanceSheetCode">The code representation of the account balance sheet dimension. (optional)</param>
        /// <param name="functionCode">The code representation of the account function dimension. (optional)</param>
        /// <param name="fundCode">The code representation of the account fund dimension. (optional)</param>
        /// <param name="objectCode">The code representation of the account object dimension. (optional)</param>
        /// <param name="operationalUnitCode">The code representation of the account operational unit dimension. (optional)</param>
        /// <param name="programCode">The code representation of the account program dimension. (optional)</param>
        /// <param name="projectCode">The code representation of the account project dimension. (optional)</param>
        /// <param name="sourceCode">The code representation of the account source dimension. (optional)</param>
        /// <param name="accountTypeDescriptor">The type of account used in accounting such as revenue, expenditure, or balance sheet. (optional)</param>
        /// <param name="accountName">A descriptive name for the account. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsApiResponse"/>&gt;</returns>
        public async Task<IGetChartOfAccountsApiResponse?> GetChartOfAccountsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> accountIdentifier = default, Option<int> fiscalYear = default, Option<long> educationOrganizationId = default, Option<string> balanceSheetCode = default, Option<string> functionCode = default, Option<string> fundCode = default, Option<string> objectCode = default, Option<string> operationalUnitCode = default, Option<string> programCode = default, Option<string> projectCode = default, Option<string> sourceCode = default, Option<string> accountTypeDescriptor = default, Option<string> accountName = default, Option<string> id = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChartOfAccountsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, accountIdentifier, fiscalYear, educationOrganizationId, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="accountIdentifier">SEA populated code value for the valid combination of account dimensions under which financials are reported. (optional)</param>
        /// <param name="fiscalYear">The fiscal year for the account (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="balanceSheetCode">The code representation of the account balance sheet dimension. (optional)</param>
        /// <param name="functionCode">The code representation of the account function dimension. (optional)</param>
        /// <param name="fundCode">The code representation of the account fund dimension. (optional)</param>
        /// <param name="objectCode">The code representation of the account object dimension. (optional)</param>
        /// <param name="operationalUnitCode">The code representation of the account operational unit dimension. (optional)</param>
        /// <param name="programCode">The code representation of the account program dimension. (optional)</param>
        /// <param name="projectCode">The code representation of the account project dimension. (optional)</param>
        /// <param name="sourceCode">The code representation of the account source dimension. (optional)</param>
        /// <param name="accountTypeDescriptor">The type of account used in accounting such as revenue, expenditure, or balance sheet. (optional)</param>
        /// <param name="accountName">A descriptive name for the account. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsApiResponse"/>&gt;</returns>
        public async Task<IGetChartOfAccountsApiResponse> GetChartOfAccountsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> accountIdentifier = default, Option<int> fiscalYear = default, Option<long> educationOrganizationId = default, Option<string> balanceSheetCode = default, Option<string> functionCode = default, Option<string> fundCode = default, Option<string> objectCode = default, Option<string> operationalUnitCode = default, Option<string> programCode = default, Option<string> projectCode = default, Option<string> sourceCode = default, Option<string> accountTypeDescriptor = default, Option<string> accountName = default, Option<string> id = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChartOfAccounts(pageToken, accountIdentifier, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id);

                FormatGetChartOfAccounts(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref accountIdentifier, ref fiscalYear, ref educationOrganizationId, ref balanceSheetCode, ref functionCode, ref fundCode, ref objectCode, ref operationalUnitCode, ref programCode, ref projectCode, ref sourceCode, ref accountTypeDescriptor, ref accountName, ref id, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/chartOfAccounts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/chartOfAccounts");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (accountIdentifier.IsSet)
                        parseQueryStringLocalVar["accountIdentifier"] = ClientUtils.ParameterToString(accountIdentifier.Value);

                    if (fiscalYear.IsSet)
                        parseQueryStringLocalVar["fiscalYear"] = ClientUtils.ParameterToString(fiscalYear.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (balanceSheetCode.IsSet)
                        parseQueryStringLocalVar["balanceSheetCode"] = ClientUtils.ParameterToString(balanceSheetCode.Value);

                    if (functionCode.IsSet)
                        parseQueryStringLocalVar["functionCode"] = ClientUtils.ParameterToString(functionCode.Value);

                    if (fundCode.IsSet)
                        parseQueryStringLocalVar["fundCode"] = ClientUtils.ParameterToString(fundCode.Value);

                    if (objectCode.IsSet)
                        parseQueryStringLocalVar["objectCode"] = ClientUtils.ParameterToString(objectCode.Value);

                    if (operationalUnitCode.IsSet)
                        parseQueryStringLocalVar["operationalUnitCode"] = ClientUtils.ParameterToString(operationalUnitCode.Value);

                    if (programCode.IsSet)
                        parseQueryStringLocalVar["programCode"] = ClientUtils.ParameterToString(programCode.Value);

                    if (projectCode.IsSet)
                        parseQueryStringLocalVar["projectCode"] = ClientUtils.ParameterToString(projectCode.Value);

                    if (sourceCode.IsSet)
                        parseQueryStringLocalVar["sourceCode"] = ClientUtils.ParameterToString(sourceCode.Value);

                    if (accountTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["accountTypeDescriptor"] = ClientUtils.ParameterToString(accountTypeDescriptor.Value);

                    if (accountName.IsSet)
                        parseQueryStringLocalVar["accountName"] = ClientUtils.ParameterToString(accountName.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChartOfAccountsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChartOfAccountsApiResponse>();

                        GetChartOfAccountsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/chartOfAccounts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChartOfAccountsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, accountIdentifier, fiscalYear, educationOrganizationId, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id, useSnapshot);

                        Events.ExecuteOnGetChartOfAccounts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChartOfAccountsDefaultImplementation(e, "/ed-fi/chartOfAccounts", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, accountIdentifier, fiscalYear, educationOrganizationId, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id, useSnapshot);
                Events.ExecuteOnErrorGetChartOfAccounts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChartOfAccountsApiResponse"/>
        /// </summary>
        public partial class GetChartOfAccountsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetChartOfAccountsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChartOfAccountsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChartOfAccountsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChartOfAccountsApiResponse(ILogger<GetChartOfAccountsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiChartOfAccount>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiChartOfAccount>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiChartOfAccount>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChartOfAccountsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetChartOfAccountsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetChartOfAccountsByIdDefaultImplementation(IGetChartOfAccountsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetChartOfAccountsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetChartOfAccountsById(ref bool suppressDefaultLog, IGetChartOfAccountsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetChartOfAccountsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChartOfAccountsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetChartOfAccountsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetChartOfAccountsByIdApiResponse?> GetChartOfAccountsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChartOfAccountsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetChartOfAccountsByIdApiResponse> GetChartOfAccountsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChartOfAccountsById(id, ifNoneMatch);

                FormatGetChartOfAccountsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/chartOfAccounts/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/chartOfAccounts/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChartOfAccountsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChartOfAccountsByIdApiResponse>();

                        GetChartOfAccountsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/chartOfAccounts/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChartOfAccountsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetChartOfAccountsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChartOfAccountsByIdDefaultImplementation(e, "/ed-fi/chartOfAccounts/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetChartOfAccountsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChartOfAccountsByIdApiResponse"/>
        /// </summary>
        public partial class GetChartOfAccountsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetChartOfAccountsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChartOfAccountsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChartOfAccountsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChartOfAccountsByIdApiResponse(ILogger<GetChartOfAccountsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiChartOfAccount? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiChartOfAccount>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiChartOfAccount? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChartOfAccountsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> accountIdentifier, ref Option<int> fiscalYear, ref Option<long> educationOrganizationId, ref Option<string> balanceSheetCode, ref Option<string> functionCode, ref Option<string> fundCode, ref Option<string> objectCode, ref Option<string> operationalUnitCode, ref Option<string> programCode, ref Option<string> projectCode, ref Option<string> sourceCode, ref Option<string> accountTypeDescriptor, ref Option<string> accountName, ref Option<string> id, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accountIdentifier"></param>
        /// <param name="balanceSheetCode"></param>
        /// <param name="functionCode"></param>
        /// <param name="fundCode"></param>
        /// <param name="objectCode"></param>
        /// <param name="operationalUnitCode"></param>
        /// <param name="programCode"></param>
        /// <param name="projectCode"></param>
        /// <param name="sourceCode"></param>
        /// <param name="accountTypeDescriptor"></param>
        /// <param name="accountName"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetChartOfAccountsPartitions(Option<string> accountIdentifier, Option<string> balanceSheetCode, Option<string> functionCode, Option<string> fundCode, Option<string> objectCode, Option<string> operationalUnitCode, Option<string> programCode, Option<string> projectCode, Option<string> sourceCode, Option<string> accountTypeDescriptor, Option<string> accountName, Option<string> id)
        {
            if (accountIdentifier.IsSet && accountIdentifier.Value == null)
                throw new ArgumentNullException(nameof(accountIdentifier));

            if (balanceSheetCode.IsSet && balanceSheetCode.Value == null)
                throw new ArgumentNullException(nameof(balanceSheetCode));

            if (functionCode.IsSet && functionCode.Value == null)
                throw new ArgumentNullException(nameof(functionCode));

            if (fundCode.IsSet && fundCode.Value == null)
                throw new ArgumentNullException(nameof(fundCode));

            if (objectCode.IsSet && objectCode.Value == null)
                throw new ArgumentNullException(nameof(objectCode));

            if (operationalUnitCode.IsSet && operationalUnitCode.Value == null)
                throw new ArgumentNullException(nameof(operationalUnitCode));

            if (programCode.IsSet && programCode.Value == null)
                throw new ArgumentNullException(nameof(programCode));

            if (projectCode.IsSet && projectCode.Value == null)
                throw new ArgumentNullException(nameof(projectCode));

            if (sourceCode.IsSet && sourceCode.Value == null)
                throw new ArgumentNullException(nameof(sourceCode));

            if (accountTypeDescriptor.IsSet && accountTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(accountTypeDescriptor));

            if (accountName.IsSet && accountName.Value == null)
                throw new ArgumentNullException(nameof(accountName));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="accountIdentifier"></param>
        /// <param name="fiscalYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="balanceSheetCode"></param>
        /// <param name="functionCode"></param>
        /// <param name="fundCode"></param>
        /// <param name="objectCode"></param>
        /// <param name="operationalUnitCode"></param>
        /// <param name="programCode"></param>
        /// <param name="projectCode"></param>
        /// <param name="sourceCode"></param>
        /// <param name="accountTypeDescriptor"></param>
        /// <param name="accountName"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetChartOfAccountsPartitionsDefaultImplementation(IGetChartOfAccountsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> accountIdentifier, Option<int> fiscalYear, Option<long> educationOrganizationId, Option<string> balanceSheetCode, Option<string> functionCode, Option<string> fundCode, Option<string> objectCode, Option<string> operationalUnitCode, Option<string> programCode, Option<string> projectCode, Option<string> sourceCode, Option<string> accountTypeDescriptor, Option<string> accountName, Option<string> id, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetChartOfAccountsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, accountIdentifier, fiscalYear, educationOrganizationId, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="accountIdentifier"></param>
        /// <param name="fiscalYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="balanceSheetCode"></param>
        /// <param name="functionCode"></param>
        /// <param name="fundCode"></param>
        /// <param name="objectCode"></param>
        /// <param name="operationalUnitCode"></param>
        /// <param name="programCode"></param>
        /// <param name="projectCode"></param>
        /// <param name="sourceCode"></param>
        /// <param name="accountTypeDescriptor"></param>
        /// <param name="accountName"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetChartOfAccountsPartitions(ref bool suppressDefaultLog, IGetChartOfAccountsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> accountIdentifier, Option<int> fiscalYear, Option<long> educationOrganizationId, Option<string> balanceSheetCode, Option<string> functionCode, Option<string> fundCode, Option<string> objectCode, Option<string> operationalUnitCode, Option<string> programCode, Option<string> projectCode, Option<string> sourceCode, Option<string> accountTypeDescriptor, Option<string> accountName, Option<string> id, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="accountIdentifier"></param>
        /// <param name="fiscalYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="balanceSheetCode"></param>
        /// <param name="functionCode"></param>
        /// <param name="fundCode"></param>
        /// <param name="objectCode"></param>
        /// <param name="operationalUnitCode"></param>
        /// <param name="programCode"></param>
        /// <param name="projectCode"></param>
        /// <param name="sourceCode"></param>
        /// <param name="accountTypeDescriptor"></param>
        /// <param name="accountName"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetChartOfAccountsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> accountIdentifier, Option<int> fiscalYear, Option<long> educationOrganizationId, Option<string> balanceSheetCode, Option<string> functionCode, Option<string> fundCode, Option<string> objectCode, Option<string> operationalUnitCode, Option<string> programCode, Option<string> projectCode, Option<string> sourceCode, Option<string> accountTypeDescriptor, Option<string> accountName, Option<string> id, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChartOfAccountsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, accountIdentifier, fiscalYear, educationOrganizationId, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="accountIdentifier"></param>
        /// <param name="fiscalYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="balanceSheetCode"></param>
        /// <param name="functionCode"></param>
        /// <param name="fundCode"></param>
        /// <param name="objectCode"></param>
        /// <param name="operationalUnitCode"></param>
        /// <param name="programCode"></param>
        /// <param name="projectCode"></param>
        /// <param name="sourceCode"></param>
        /// <param name="accountTypeDescriptor"></param>
        /// <param name="accountName"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetChartOfAccountsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> accountIdentifier, Option<int> fiscalYear, Option<long> educationOrganizationId, Option<string> balanceSheetCode, Option<string> functionCode, Option<string> fundCode, Option<string> objectCode, Option<string> operationalUnitCode, Option<string> programCode, Option<string> projectCode, Option<string> sourceCode, Option<string> accountTypeDescriptor, Option<string> accountName, Option<string> id, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="accountIdentifier">SEA populated code value for the valid combination of account dimensions under which financials are reported. (optional)</param>
        /// <param name="fiscalYear">The fiscal year for the account (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="balanceSheetCode">The code representation of the account balance sheet dimension. (optional)</param>
        /// <param name="functionCode">The code representation of the account function dimension. (optional)</param>
        /// <param name="fundCode">The code representation of the account fund dimension. (optional)</param>
        /// <param name="objectCode">The code representation of the account object dimension. (optional)</param>
        /// <param name="operationalUnitCode">The code representation of the account operational unit dimension. (optional)</param>
        /// <param name="programCode">The code representation of the account program dimension. (optional)</param>
        /// <param name="projectCode">The code representation of the account project dimension. (optional)</param>
        /// <param name="sourceCode">The code representation of the account source dimension. (optional)</param>
        /// <param name="accountTypeDescriptor">The type of account used in accounting such as revenue, expenditure, or balance sheet. (optional)</param>
        /// <param name="accountName">A descriptive name for the account. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetChartOfAccountsPartitionsApiResponse?> GetChartOfAccountsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> accountIdentifier = default, Option<int> fiscalYear = default, Option<long> educationOrganizationId = default, Option<string> balanceSheetCode = default, Option<string> functionCode = default, Option<string> fundCode = default, Option<string> objectCode = default, Option<string> operationalUnitCode = default, Option<string> programCode = default, Option<string> projectCode = default, Option<string> sourceCode = default, Option<string> accountTypeDescriptor = default, Option<string> accountName = default, Option<string> id = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChartOfAccountsPartitionsAsync(number, minChangeVersion, maxChangeVersion, accountIdentifier, fiscalYear, educationOrganizationId, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="accountIdentifier">SEA populated code value for the valid combination of account dimensions under which financials are reported. (optional)</param>
        /// <param name="fiscalYear">The fiscal year for the account (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="balanceSheetCode">The code representation of the account balance sheet dimension. (optional)</param>
        /// <param name="functionCode">The code representation of the account function dimension. (optional)</param>
        /// <param name="fundCode">The code representation of the account fund dimension. (optional)</param>
        /// <param name="objectCode">The code representation of the account object dimension. (optional)</param>
        /// <param name="operationalUnitCode">The code representation of the account operational unit dimension. (optional)</param>
        /// <param name="programCode">The code representation of the account program dimension. (optional)</param>
        /// <param name="projectCode">The code representation of the account project dimension. (optional)</param>
        /// <param name="sourceCode">The code representation of the account source dimension. (optional)</param>
        /// <param name="accountTypeDescriptor">The type of account used in accounting such as revenue, expenditure, or balance sheet. (optional)</param>
        /// <param name="accountName">A descriptive name for the account. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChartOfAccountsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetChartOfAccountsPartitionsApiResponse> GetChartOfAccountsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> accountIdentifier = default, Option<int> fiscalYear = default, Option<long> educationOrganizationId = default, Option<string> balanceSheetCode = default, Option<string> functionCode = default, Option<string> fundCode = default, Option<string> objectCode = default, Option<string> operationalUnitCode = default, Option<string> programCode = default, Option<string> projectCode = default, Option<string> sourceCode = default, Option<string> accountTypeDescriptor = default, Option<string> accountName = default, Option<string> id = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChartOfAccountsPartitions(accountIdentifier, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id);

                FormatGetChartOfAccountsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref accountIdentifier, ref fiscalYear, ref educationOrganizationId, ref balanceSheetCode, ref functionCode, ref fundCode, ref objectCode, ref operationalUnitCode, ref programCode, ref projectCode, ref sourceCode, ref accountTypeDescriptor, ref accountName, ref id, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/chartOfAccounts/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/chartOfAccounts/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (accountIdentifier.IsSet)
                        parseQueryStringLocalVar["accountIdentifier"] = ClientUtils.ParameterToString(accountIdentifier.Value);

                    if (fiscalYear.IsSet)
                        parseQueryStringLocalVar["fiscalYear"] = ClientUtils.ParameterToString(fiscalYear.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (balanceSheetCode.IsSet)
                        parseQueryStringLocalVar["balanceSheetCode"] = ClientUtils.ParameterToString(balanceSheetCode.Value);

                    if (functionCode.IsSet)
                        parseQueryStringLocalVar["functionCode"] = ClientUtils.ParameterToString(functionCode.Value);

                    if (fundCode.IsSet)
                        parseQueryStringLocalVar["fundCode"] = ClientUtils.ParameterToString(fundCode.Value);

                    if (objectCode.IsSet)
                        parseQueryStringLocalVar["objectCode"] = ClientUtils.ParameterToString(objectCode.Value);

                    if (operationalUnitCode.IsSet)
                        parseQueryStringLocalVar["operationalUnitCode"] = ClientUtils.ParameterToString(operationalUnitCode.Value);

                    if (programCode.IsSet)
                        parseQueryStringLocalVar["programCode"] = ClientUtils.ParameterToString(programCode.Value);

                    if (projectCode.IsSet)
                        parseQueryStringLocalVar["projectCode"] = ClientUtils.ParameterToString(projectCode.Value);

                    if (sourceCode.IsSet)
                        parseQueryStringLocalVar["sourceCode"] = ClientUtils.ParameterToString(sourceCode.Value);

                    if (accountTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["accountTypeDescriptor"] = ClientUtils.ParameterToString(accountTypeDescriptor.Value);

                    if (accountName.IsSet)
                        parseQueryStringLocalVar["accountName"] = ClientUtils.ParameterToString(accountName.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChartOfAccountsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChartOfAccountsPartitionsApiResponse>();

                        GetChartOfAccountsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/chartOfAccounts/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChartOfAccountsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, accountIdentifier, fiscalYear, educationOrganizationId, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id, useSnapshot);

                        Events.ExecuteOnGetChartOfAccountsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChartOfAccountsPartitionsDefaultImplementation(e, "/ed-fi/chartOfAccounts/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, accountIdentifier, fiscalYear, educationOrganizationId, balanceSheetCode, functionCode, fundCode, objectCode, operationalUnitCode, programCode, projectCode, sourceCode, accountTypeDescriptor, accountName, id, useSnapshot);
                Events.ExecuteOnErrorGetChartOfAccountsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChartOfAccountsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetChartOfAccountsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetChartOfAccountsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChartOfAccountsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChartOfAccountsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChartOfAccountsPartitionsApiResponse(ILogger<GetChartOfAccountsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesChartOfAccounts(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesChartOfAccountsDefaultImplementation(IKeyChangesChartOfAccountsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesChartOfAccounts(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesChartOfAccounts(ref bool suppressDefaultLog, IKeyChangesChartOfAccountsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesChartOfAccountsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesChartOfAccounts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesChartOfAccounts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesChartOfAccountsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesChartOfAccountsApiResponse?> KeyChangesChartOfAccountsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesChartOfAccountsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesChartOfAccountsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesChartOfAccountsApiResponse> KeyChangesChartOfAccountsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesChartOfAccounts(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/chartOfAccounts/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/chartOfAccounts/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesChartOfAccountsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesChartOfAccountsApiResponse>();

                        KeyChangesChartOfAccountsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/chartOfAccounts/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesChartOfAccountsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesChartOfAccounts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesChartOfAccountsDefaultImplementation(e, "/ed-fi/chartOfAccounts/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesChartOfAccounts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesChartOfAccountsApiResponse"/>
        /// </summary>
        public partial class KeyChangesChartOfAccountsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesChartOfAccountsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesChartOfAccountsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesChartOfAccountsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesChartOfAccountsApiResponse(ILogger<KeyChangesChartOfAccountsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiChartOfAccountKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiChartOfAccountKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiChartOfAccountKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostChartOfAccount(EdFiChartOfAccount edFiChartOfAccount);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiChartOfAccount"></param>
        /// <returns></returns>
        private void ValidatePostChartOfAccount(EdFiChartOfAccount edFiChartOfAccount)
        {
            if (edFiChartOfAccount == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiChartOfAccount"></param>
        private void AfterPostChartOfAccountDefaultImplementation(IPostChartOfAccountApiResponse apiResponseLocalVar, EdFiChartOfAccount edFiChartOfAccount)
        {
            bool suppressDefaultLog = false;
            AfterPostChartOfAccount(ref suppressDefaultLog, apiResponseLocalVar, edFiChartOfAccount);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiChartOfAccount"></param>
        partial void AfterPostChartOfAccount(ref bool suppressDefaultLog, IPostChartOfAccountApiResponse apiResponseLocalVar, EdFiChartOfAccount edFiChartOfAccount);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiChartOfAccount"></param>
        private void OnErrorPostChartOfAccountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiChartOfAccount edFiChartOfAccount)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostChartOfAccount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiChartOfAccount);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiChartOfAccount"></param>
        partial void OnErrorPostChartOfAccount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiChartOfAccount edFiChartOfAccount);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiChartOfAccount">The JSON representation of the \&quot;chartOfAccount\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostChartOfAccountApiResponse"/>&gt;</returns>
        public async Task<IPostChartOfAccountApiResponse?> PostChartOfAccountOrDefaultAsync(EdFiChartOfAccount edFiChartOfAccount, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostChartOfAccountAsync(edFiChartOfAccount, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiChartOfAccount">The JSON representation of the \&quot;chartOfAccount\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostChartOfAccountApiResponse"/>&gt;</returns>
        public async Task<IPostChartOfAccountApiResponse> PostChartOfAccountAsync(EdFiChartOfAccount edFiChartOfAccount, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostChartOfAccount(edFiChartOfAccount);

                FormatPostChartOfAccount(edFiChartOfAccount);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/chartOfAccounts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/chartOfAccounts");

                    httpRequestMessageLocalVar.Content = (edFiChartOfAccount as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiChartOfAccount, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostChartOfAccountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostChartOfAccountApiResponse>();

                        PostChartOfAccountApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/chartOfAccounts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostChartOfAccountDefaultImplementation(apiResponseLocalVar, edFiChartOfAccount);

                        Events.ExecuteOnPostChartOfAccount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostChartOfAccountDefaultImplementation(e, "/ed-fi/chartOfAccounts", uriBuilderLocalVar.Path, edFiChartOfAccount);
                Events.ExecuteOnErrorPostChartOfAccount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostChartOfAccountApiResponse"/>
        /// </summary>
        public partial class PostChartOfAccountApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostChartOfAccountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostChartOfAccountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostChartOfAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostChartOfAccountApiResponse(ILogger<PostChartOfAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutChartOfAccount(ref string id, EdFiChartOfAccount edFiChartOfAccount, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiChartOfAccount"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutChartOfAccount(string id, EdFiChartOfAccount edFiChartOfAccount, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiChartOfAccount == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiChartOfAccount"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutChartOfAccountDefaultImplementation(IPutChartOfAccountApiResponse apiResponseLocalVar, string id, EdFiChartOfAccount edFiChartOfAccount, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutChartOfAccount(ref suppressDefaultLog, apiResponseLocalVar, id, edFiChartOfAccount, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiChartOfAccount"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutChartOfAccount(ref bool suppressDefaultLog, IPutChartOfAccountApiResponse apiResponseLocalVar, string id, EdFiChartOfAccount edFiChartOfAccount, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiChartOfAccount"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutChartOfAccountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiChartOfAccount edFiChartOfAccount, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutChartOfAccount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiChartOfAccount, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiChartOfAccount"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutChartOfAccount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiChartOfAccount edFiChartOfAccount, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiChartOfAccount">The JSON representation of the \&quot;chartOfAccount\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutChartOfAccountApiResponse"/>&gt;</returns>
        public async Task<IPutChartOfAccountApiResponse?> PutChartOfAccountOrDefaultAsync(string id, EdFiChartOfAccount edFiChartOfAccount, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutChartOfAccountAsync(id, edFiChartOfAccount, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiChartOfAccount">The JSON representation of the \&quot;chartOfAccount\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutChartOfAccountApiResponse"/>&gt;</returns>
        public async Task<IPutChartOfAccountApiResponse> PutChartOfAccountAsync(string id, EdFiChartOfAccount edFiChartOfAccount, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutChartOfAccount(id, edFiChartOfAccount, ifMatch);

                FormatPutChartOfAccount(ref id, edFiChartOfAccount, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/chartOfAccounts/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/chartOfAccounts/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiChartOfAccount as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiChartOfAccount, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutChartOfAccountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutChartOfAccountApiResponse>();

                        PutChartOfAccountApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/chartOfAccounts/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutChartOfAccountDefaultImplementation(apiResponseLocalVar, id, edFiChartOfAccount, ifMatch);

                        Events.ExecuteOnPutChartOfAccount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutChartOfAccountDefaultImplementation(e, "/ed-fi/chartOfAccounts/{id}", uriBuilderLocalVar.Path, id, edFiChartOfAccount, ifMatch);
                Events.ExecuteOnErrorPutChartOfAccount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutChartOfAccountApiResponse"/>
        /// </summary>
        public partial class PutChartOfAccountApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutChartOfAccountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutChartOfAccountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutChartOfAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutChartOfAccountApiResponse(ILogger<PutChartOfAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
