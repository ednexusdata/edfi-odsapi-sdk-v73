// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICourseTranscriptsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CourseTranscriptsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCourseTranscriptByIdApiResponse"/>&gt;</returns>
        Task<IDeleteCourseTranscriptByIdApiResponse> DeleteCourseTranscriptByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCourseTranscriptByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteCourseTranscriptByIdApiResponse?> DeleteCourseTranscriptByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesCourseTranscriptsApiResponse"/>&gt;</returns>
        Task<IDeletesCourseTranscriptsApiResponse> DeletesCourseTranscriptsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesCourseTranscriptsApiResponse"/>?&gt;</returns>
        Task<IDeletesCourseTranscriptsApiResponse?> DeletesCourseTranscriptsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="courseAttemptResultDescriptor">The result from the student&#39;s attempt to take the course. (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="courseEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="externalEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="responsibleTeacherStaffUniqueId">A unique alphanumeric code assigned to a responsibleteacherstaff. (optional)</param>
        /// <param name="courseRepeatCodeDescriptor">Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average. (optional)</param>
        /// <param name="attemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="earnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="whenTakenGradeLevelDescriptor">Student&#39;s grade level at time of course. (optional)</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned. (optional)</param>
        /// <param name="alternativeCourseTitle">The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the course identification code. (optional)</param>
        /// <param name="attemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="attemptedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts). (optional)</param>
        /// <param name="earnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="earnedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="externalEducationOrganizationNameOfInstitution">Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available. (optional)</param>
        /// <param name="finalLetterGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="finalNumericGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode2">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL2">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsApiResponse"/>&gt;</returns>
        Task<IGetCourseTranscriptsApiResponse> GetCourseTranscriptsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> courseAttemptResultDescriptor = default, Option<string> courseCode = default, Option<long> courseEducationOrganizationId = default, Option<long> educationOrganizationId = default, Option<int> schoolYear = default, Option<string> studentUniqueId = default, Option<string> termDescriptor = default, Option<long> externalEducationOrganizationId = default, Option<string> responsibleTeacherStaffUniqueId = default, Option<string> courseRepeatCodeDescriptor = default, Option<string> attemptedCreditTypeDescriptor = default, Option<string> earnedCreditTypeDescriptor = default, Option<string> whenTakenGradeLevelDescriptor = default, Option<string> methodCreditEarnedDescriptor = default, Option<string> alternativeCourseTitle = default, Option<string> assigningOrganizationIdentificationCode = default, Option<double> attemptedCreditConversion = default, Option<double> attemptedCredits = default, Option<string> courseCatalogURL = default, Option<string> courseTitle = default, Option<double> earnedCreditConversion = default, Option<double> earnedCredits = default, Option<string> externalEducationOrganizationNameOfInstitution = default, Option<string> finalLetterGradeEarned = default, Option<double> finalNumericGradeEarned = default, Option<string> id = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode2 = default, Option<string> courseCatalogURL2 = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="courseAttemptResultDescriptor">The result from the student&#39;s attempt to take the course. (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="courseEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="externalEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="responsibleTeacherStaffUniqueId">A unique alphanumeric code assigned to a responsibleteacherstaff. (optional)</param>
        /// <param name="courseRepeatCodeDescriptor">Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average. (optional)</param>
        /// <param name="attemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="earnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="whenTakenGradeLevelDescriptor">Student&#39;s grade level at time of course. (optional)</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned. (optional)</param>
        /// <param name="alternativeCourseTitle">The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the course identification code. (optional)</param>
        /// <param name="attemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="attemptedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts). (optional)</param>
        /// <param name="earnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="earnedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="externalEducationOrganizationNameOfInstitution">Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available. (optional)</param>
        /// <param name="finalLetterGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="finalNumericGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode2">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL2">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsApiResponse"/>?&gt;</returns>
        Task<IGetCourseTranscriptsApiResponse?> GetCourseTranscriptsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> courseAttemptResultDescriptor = default, Option<string> courseCode = default, Option<long> courseEducationOrganizationId = default, Option<long> educationOrganizationId = default, Option<int> schoolYear = default, Option<string> studentUniqueId = default, Option<string> termDescriptor = default, Option<long> externalEducationOrganizationId = default, Option<string> responsibleTeacherStaffUniqueId = default, Option<string> courseRepeatCodeDescriptor = default, Option<string> attemptedCreditTypeDescriptor = default, Option<string> earnedCreditTypeDescriptor = default, Option<string> whenTakenGradeLevelDescriptor = default, Option<string> methodCreditEarnedDescriptor = default, Option<string> alternativeCourseTitle = default, Option<string> assigningOrganizationIdentificationCode = default, Option<double> attemptedCreditConversion = default, Option<double> attemptedCredits = default, Option<string> courseCatalogURL = default, Option<string> courseTitle = default, Option<double> earnedCreditConversion = default, Option<double> earnedCredits = default, Option<string> externalEducationOrganizationNameOfInstitution = default, Option<string> finalLetterGradeEarned = default, Option<double> finalNumericGradeEarned = default, Option<string> id = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode2 = default, Option<string> courseCatalogURL2 = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsByIdApiResponse"/>&gt;</returns>
        Task<IGetCourseTranscriptsByIdApiResponse> GetCourseTranscriptsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsByIdApiResponse"/>?&gt;</returns>
        Task<IGetCourseTranscriptsByIdApiResponse?> GetCourseTranscriptsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="courseAttemptResultDescriptor">The result from the student&#39;s attempt to take the course. (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="courseEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="externalEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="responsibleTeacherStaffUniqueId">A unique alphanumeric code assigned to a responsibleteacherstaff. (optional)</param>
        /// <param name="courseRepeatCodeDescriptor">Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average. (optional)</param>
        /// <param name="attemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="earnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="whenTakenGradeLevelDescriptor">Student&#39;s grade level at time of course. (optional)</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned. (optional)</param>
        /// <param name="alternativeCourseTitle">The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the course identification code. (optional)</param>
        /// <param name="attemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="attemptedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts). (optional)</param>
        /// <param name="earnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="earnedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="externalEducationOrganizationNameOfInstitution">Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available. (optional)</param>
        /// <param name="finalLetterGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="finalNumericGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode2">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL2">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetCourseTranscriptsPartitionsApiResponse> GetCourseTranscriptsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> courseAttemptResultDescriptor = default, Option<string> courseCode = default, Option<long> courseEducationOrganizationId = default, Option<long> educationOrganizationId = default, Option<int> schoolYear = default, Option<string> studentUniqueId = default, Option<string> termDescriptor = default, Option<long> externalEducationOrganizationId = default, Option<string> responsibleTeacherStaffUniqueId = default, Option<string> courseRepeatCodeDescriptor = default, Option<string> attemptedCreditTypeDescriptor = default, Option<string> earnedCreditTypeDescriptor = default, Option<string> whenTakenGradeLevelDescriptor = default, Option<string> methodCreditEarnedDescriptor = default, Option<string> alternativeCourseTitle = default, Option<string> assigningOrganizationIdentificationCode = default, Option<double> attemptedCreditConversion = default, Option<double> attemptedCredits = default, Option<string> courseCatalogURL = default, Option<string> courseTitle = default, Option<double> earnedCreditConversion = default, Option<double> earnedCredits = default, Option<string> externalEducationOrganizationNameOfInstitution = default, Option<string> finalLetterGradeEarned = default, Option<double> finalNumericGradeEarned = default, Option<string> id = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode2 = default, Option<string> courseCatalogURL2 = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="courseAttemptResultDescriptor">The result from the student&#39;s attempt to take the course. (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="courseEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="externalEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="responsibleTeacherStaffUniqueId">A unique alphanumeric code assigned to a responsibleteacherstaff. (optional)</param>
        /// <param name="courseRepeatCodeDescriptor">Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average. (optional)</param>
        /// <param name="attemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="earnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="whenTakenGradeLevelDescriptor">Student&#39;s grade level at time of course. (optional)</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned. (optional)</param>
        /// <param name="alternativeCourseTitle">The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the course identification code. (optional)</param>
        /// <param name="attemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="attemptedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts). (optional)</param>
        /// <param name="earnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="earnedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="externalEducationOrganizationNameOfInstitution">Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available. (optional)</param>
        /// <param name="finalLetterGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="finalNumericGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode2">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL2">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetCourseTranscriptsPartitionsApiResponse?> GetCourseTranscriptsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> courseAttemptResultDescriptor = default, Option<string> courseCode = default, Option<long> courseEducationOrganizationId = default, Option<long> educationOrganizationId = default, Option<int> schoolYear = default, Option<string> studentUniqueId = default, Option<string> termDescriptor = default, Option<long> externalEducationOrganizationId = default, Option<string> responsibleTeacherStaffUniqueId = default, Option<string> courseRepeatCodeDescriptor = default, Option<string> attemptedCreditTypeDescriptor = default, Option<string> earnedCreditTypeDescriptor = default, Option<string> whenTakenGradeLevelDescriptor = default, Option<string> methodCreditEarnedDescriptor = default, Option<string> alternativeCourseTitle = default, Option<string> assigningOrganizationIdentificationCode = default, Option<double> attemptedCreditConversion = default, Option<double> attemptedCredits = default, Option<string> courseCatalogURL = default, Option<string> courseTitle = default, Option<double> earnedCreditConversion = default, Option<double> earnedCredits = default, Option<string> externalEducationOrganizationNameOfInstitution = default, Option<string> finalLetterGradeEarned = default, Option<double> finalNumericGradeEarned = default, Option<string> id = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode2 = default, Option<string> courseCatalogURL2 = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesCourseTranscriptsApiResponse"/>&gt;</returns>
        Task<IKeyChangesCourseTranscriptsApiResponse> KeyChangesCourseTranscriptsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesCourseTranscriptsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesCourseTranscriptsApiResponse?> KeyChangesCourseTranscriptsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiCourseTranscript">The JSON representation of the \&quot;courseTranscript\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCourseTranscriptApiResponse"/>&gt;</returns>
        Task<IPostCourseTranscriptApiResponse> PostCourseTranscriptAsync(EdFiCourseTranscript edFiCourseTranscript, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiCourseTranscript">The JSON representation of the \&quot;courseTranscript\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCourseTranscriptApiResponse"/>?&gt;</returns>
        Task<IPostCourseTranscriptApiResponse?> PostCourseTranscriptOrDefaultAsync(EdFiCourseTranscript edFiCourseTranscript, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiCourseTranscript">The JSON representation of the \&quot;courseTranscript\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCourseTranscriptApiResponse"/>&gt;</returns>
        Task<IPutCourseTranscriptApiResponse> PutCourseTranscriptAsync(string id, EdFiCourseTranscript edFiCourseTranscript, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiCourseTranscript">The JSON representation of the \&quot;courseTranscript\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCourseTranscriptApiResponse"/>?&gt;</returns>
        Task<IPutCourseTranscriptApiResponse?> PutCourseTranscriptOrDefaultAsync(string id, EdFiCourseTranscript edFiCourseTranscript, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteCourseTranscriptByIdApiResponse"/>
    /// </summary>
    public interface IDeleteCourseTranscriptByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesCourseTranscriptsApiResponse"/>
    /// </summary>
    public interface IDeletesCourseTranscriptsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiCourseTranscriptDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetCourseTranscriptsApiResponse"/>
    /// </summary>
    public interface IGetCourseTranscriptsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiCourseTranscript>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetCourseTranscriptsByIdApiResponse"/>
    /// </summary>
    public interface IGetCourseTranscriptsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiCourseTranscript?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetCourseTranscriptsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetCourseTranscriptsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesCourseTranscriptsApiResponse"/>
    /// </summary>
    public interface IKeyChangesCourseTranscriptsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiCourseTranscriptKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostCourseTranscriptApiResponse"/>
    /// </summary>
    public interface IPostCourseTranscriptApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutCourseTranscriptApiResponse"/>
    /// </summary>
    public interface IPutCourseTranscriptApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CourseTranscriptsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteCourseTranscriptById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteCourseTranscriptById;

        internal void ExecuteOnDeleteCourseTranscriptById(CourseTranscriptsApi.DeleteCourseTranscriptByIdApiResponse apiResponse)
        {
            OnDeleteCourseTranscriptById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteCourseTranscriptById(Exception exception)
        {
            OnErrorDeleteCourseTranscriptById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesCourseTranscripts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesCourseTranscripts;

        internal void ExecuteOnDeletesCourseTranscripts(CourseTranscriptsApi.DeletesCourseTranscriptsApiResponse apiResponse)
        {
            OnDeletesCourseTranscripts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesCourseTranscripts(Exception exception)
        {
            OnErrorDeletesCourseTranscripts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCourseTranscripts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCourseTranscripts;

        internal void ExecuteOnGetCourseTranscripts(CourseTranscriptsApi.GetCourseTranscriptsApiResponse apiResponse)
        {
            OnGetCourseTranscripts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCourseTranscripts(Exception exception)
        {
            OnErrorGetCourseTranscripts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCourseTranscriptsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCourseTranscriptsById;

        internal void ExecuteOnGetCourseTranscriptsById(CourseTranscriptsApi.GetCourseTranscriptsByIdApiResponse apiResponse)
        {
            OnGetCourseTranscriptsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCourseTranscriptsById(Exception exception)
        {
            OnErrorGetCourseTranscriptsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCourseTranscriptsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCourseTranscriptsPartitions;

        internal void ExecuteOnGetCourseTranscriptsPartitions(CourseTranscriptsApi.GetCourseTranscriptsPartitionsApiResponse apiResponse)
        {
            OnGetCourseTranscriptsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCourseTranscriptsPartitions(Exception exception)
        {
            OnErrorGetCourseTranscriptsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesCourseTranscripts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesCourseTranscripts;

        internal void ExecuteOnKeyChangesCourseTranscripts(CourseTranscriptsApi.KeyChangesCourseTranscriptsApiResponse apiResponse)
        {
            OnKeyChangesCourseTranscripts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesCourseTranscripts(Exception exception)
        {
            OnErrorKeyChangesCourseTranscripts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostCourseTranscript;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostCourseTranscript;

        internal void ExecuteOnPostCourseTranscript(CourseTranscriptsApi.PostCourseTranscriptApiResponse apiResponse)
        {
            OnPostCourseTranscript?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostCourseTranscript(Exception exception)
        {
            OnErrorPostCourseTranscript?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutCourseTranscript;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutCourseTranscript;

        internal void ExecuteOnPutCourseTranscript(CourseTranscriptsApi.PutCourseTranscriptApiResponse apiResponse)
        {
            OnPutCourseTranscript?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutCourseTranscript(Exception exception)
        {
            OnErrorPutCourseTranscript?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CourseTranscriptsApi : ICourseTranscriptsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CourseTranscriptsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CourseTranscriptsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CourseTranscriptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CourseTranscriptsApi(ILogger<CourseTranscriptsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CourseTranscriptsApiEvents courseTranscriptsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CourseTranscriptsApi>();
            HttpClient = httpClient;
            Events = courseTranscriptsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteCourseTranscriptById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteCourseTranscriptById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteCourseTranscriptByIdDefaultImplementation(IDeleteCourseTranscriptByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteCourseTranscriptById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteCourseTranscriptById(ref bool suppressDefaultLog, IDeleteCourseTranscriptByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteCourseTranscriptByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteCourseTranscriptById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteCourseTranscriptById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCourseTranscriptByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteCourseTranscriptByIdApiResponse?> DeleteCourseTranscriptByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteCourseTranscriptByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCourseTranscriptByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteCourseTranscriptByIdApiResponse> DeleteCourseTranscriptByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteCourseTranscriptById(id, ifMatch);

                FormatDeleteCourseTranscriptById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courseTranscripts/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courseTranscripts/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteCourseTranscriptByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteCourseTranscriptByIdApiResponse>();

                        DeleteCourseTranscriptByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courseTranscripts/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteCourseTranscriptByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteCourseTranscriptById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteCourseTranscriptByIdDefaultImplementation(e, "/ed-fi/courseTranscripts/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteCourseTranscriptById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteCourseTranscriptByIdApiResponse"/>
        /// </summary>
        public partial class DeleteCourseTranscriptByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteCourseTranscriptByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteCourseTranscriptByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteCourseTranscriptByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteCourseTranscriptByIdApiResponse(ILogger<DeleteCourseTranscriptByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesCourseTranscripts(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesCourseTranscriptsDefaultImplementation(IDeletesCourseTranscriptsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesCourseTranscripts(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesCourseTranscripts(ref bool suppressDefaultLog, IDeletesCourseTranscriptsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesCourseTranscriptsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesCourseTranscripts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesCourseTranscripts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesCourseTranscriptsApiResponse"/>&gt;</returns>
        public async Task<IDeletesCourseTranscriptsApiResponse?> DeletesCourseTranscriptsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesCourseTranscriptsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesCourseTranscriptsApiResponse"/>&gt;</returns>
        public async Task<IDeletesCourseTranscriptsApiResponse> DeletesCourseTranscriptsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesCourseTranscripts(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courseTranscripts/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courseTranscripts/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesCourseTranscriptsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesCourseTranscriptsApiResponse>();

                        DeletesCourseTranscriptsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courseTranscripts/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesCourseTranscriptsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesCourseTranscripts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesCourseTranscriptsDefaultImplementation(e, "/ed-fi/courseTranscripts/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesCourseTranscripts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesCourseTranscriptsApiResponse"/>
        /// </summary>
        public partial class DeletesCourseTranscriptsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesCourseTranscriptsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesCourseTranscriptsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesCourseTranscriptsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesCourseTranscriptsApiResponse(ILogger<DeletesCourseTranscriptsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiCourseTranscriptDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiCourseTranscriptDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiCourseTranscriptDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCourseTranscripts(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> courseAttemptResultDescriptor, ref Option<string> courseCode, ref Option<long> courseEducationOrganizationId, ref Option<long> educationOrganizationId, ref Option<int> schoolYear, ref Option<string> studentUniqueId, ref Option<string> termDescriptor, ref Option<long> externalEducationOrganizationId, ref Option<string> responsibleTeacherStaffUniqueId, ref Option<string> courseRepeatCodeDescriptor, ref Option<string> attemptedCreditTypeDescriptor, ref Option<string> earnedCreditTypeDescriptor, ref Option<string> whenTakenGradeLevelDescriptor, ref Option<string> methodCreditEarnedDescriptor, ref Option<string> alternativeCourseTitle, ref Option<string> assigningOrganizationIdentificationCode, ref Option<double> attemptedCreditConversion, ref Option<double> attemptedCredits, ref Option<string> courseCatalogURL, ref Option<string> courseTitle, ref Option<double> earnedCreditConversion, ref Option<double> earnedCredits, ref Option<string> externalEducationOrganizationNameOfInstitution, ref Option<string> finalLetterGradeEarned, ref Option<double> finalNumericGradeEarned, ref Option<string> id, ref Option<bool> useSnapshot, ref Option<string> courseIdentificationSystemDescriptor, ref Option<string> assigningOrganizationIdentificationCode2, ref Option<string> courseCatalogURL2, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="courseAttemptResultDescriptor"></param>
        /// <param name="courseCode"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="termDescriptor"></param>
        /// <param name="responsibleTeacherStaffUniqueId"></param>
        /// <param name="courseRepeatCodeDescriptor"></param>
        /// <param name="attemptedCreditTypeDescriptor"></param>
        /// <param name="earnedCreditTypeDescriptor"></param>
        /// <param name="whenTakenGradeLevelDescriptor"></param>
        /// <param name="methodCreditEarnedDescriptor"></param>
        /// <param name="alternativeCourseTitle"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="courseTitle"></param>
        /// <param name="externalEducationOrganizationNameOfInstitution"></param>
        /// <param name="finalLetterGradeEarned"></param>
        /// <param name="id"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode2"></param>
        /// <param name="courseCatalogURL2"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetCourseTranscripts(Option<string> pageToken, Option<string> courseAttemptResultDescriptor, Option<string> courseCode, Option<string> studentUniqueId, Option<string> termDescriptor, Option<string> responsibleTeacherStaffUniqueId, Option<string> courseRepeatCodeDescriptor, Option<string> attemptedCreditTypeDescriptor, Option<string> earnedCreditTypeDescriptor, Option<string> whenTakenGradeLevelDescriptor, Option<string> methodCreditEarnedDescriptor, Option<string> alternativeCourseTitle, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> courseTitle, Option<string> externalEducationOrganizationNameOfInstitution, Option<string> finalLetterGradeEarned, Option<string> id, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode2, Option<string> courseCatalogURL2, Option<string> identificationCode)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (courseAttemptResultDescriptor.IsSet && courseAttemptResultDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseAttemptResultDescriptor));

            if (courseCode.IsSet && courseCode.Value == null)
                throw new ArgumentNullException(nameof(courseCode));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (termDescriptor.IsSet && termDescriptor.Value == null)
                throw new ArgumentNullException(nameof(termDescriptor));

            if (responsibleTeacherStaffUniqueId.IsSet && responsibleTeacherStaffUniqueId.Value == null)
                throw new ArgumentNullException(nameof(responsibleTeacherStaffUniqueId));

            if (courseRepeatCodeDescriptor.IsSet && courseRepeatCodeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseRepeatCodeDescriptor));

            if (attemptedCreditTypeDescriptor.IsSet && attemptedCreditTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(attemptedCreditTypeDescriptor));

            if (earnedCreditTypeDescriptor.IsSet && earnedCreditTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(earnedCreditTypeDescriptor));

            if (whenTakenGradeLevelDescriptor.IsSet && whenTakenGradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(whenTakenGradeLevelDescriptor));

            if (methodCreditEarnedDescriptor.IsSet && methodCreditEarnedDescriptor.Value == null)
                throw new ArgumentNullException(nameof(methodCreditEarnedDescriptor));

            if (alternativeCourseTitle.IsSet && alternativeCourseTitle.Value == null)
                throw new ArgumentNullException(nameof(alternativeCourseTitle));

            if (assigningOrganizationIdentificationCode.IsSet && assigningOrganizationIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode));

            if (courseCatalogURL.IsSet && courseCatalogURL.Value == null)
                throw new ArgumentNullException(nameof(courseCatalogURL));

            if (courseTitle.IsSet && courseTitle.Value == null)
                throw new ArgumentNullException(nameof(courseTitle));

            if (externalEducationOrganizationNameOfInstitution.IsSet && externalEducationOrganizationNameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(externalEducationOrganizationNameOfInstitution));

            if (finalLetterGradeEarned.IsSet && finalLetterGradeEarned.Value == null)
                throw new ArgumentNullException(nameof(finalLetterGradeEarned));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (courseIdentificationSystemDescriptor.IsSet && courseIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseIdentificationSystemDescriptor));

            if (assigningOrganizationIdentificationCode2.IsSet && assigningOrganizationIdentificationCode2.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode2));

            if (courseCatalogURL2.IsSet && courseCatalogURL2.Value == null)
                throw new ArgumentNullException(nameof(courseCatalogURL2));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="courseAttemptResultDescriptor"></param>
        /// <param name="courseCode"></param>
        /// <param name="courseEducationOrganizationId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="termDescriptor"></param>
        /// <param name="externalEducationOrganizationId"></param>
        /// <param name="responsibleTeacherStaffUniqueId"></param>
        /// <param name="courseRepeatCodeDescriptor"></param>
        /// <param name="attemptedCreditTypeDescriptor"></param>
        /// <param name="earnedCreditTypeDescriptor"></param>
        /// <param name="whenTakenGradeLevelDescriptor"></param>
        /// <param name="methodCreditEarnedDescriptor"></param>
        /// <param name="alternativeCourseTitle"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="attemptedCreditConversion"></param>
        /// <param name="attemptedCredits"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="courseTitle"></param>
        /// <param name="earnedCreditConversion"></param>
        /// <param name="earnedCredits"></param>
        /// <param name="externalEducationOrganizationNameOfInstitution"></param>
        /// <param name="finalLetterGradeEarned"></param>
        /// <param name="finalNumericGradeEarned"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode2"></param>
        /// <param name="courseCatalogURL2"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetCourseTranscriptsDefaultImplementation(IGetCourseTranscriptsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> courseAttemptResultDescriptor, Option<string> courseCode, Option<long> courseEducationOrganizationId, Option<long> educationOrganizationId, Option<int> schoolYear, Option<string> studentUniqueId, Option<string> termDescriptor, Option<long> externalEducationOrganizationId, Option<string> responsibleTeacherStaffUniqueId, Option<string> courseRepeatCodeDescriptor, Option<string> attemptedCreditTypeDescriptor, Option<string> earnedCreditTypeDescriptor, Option<string> whenTakenGradeLevelDescriptor, Option<string> methodCreditEarnedDescriptor, Option<string> alternativeCourseTitle, Option<string> assigningOrganizationIdentificationCode, Option<double> attemptedCreditConversion, Option<double> attemptedCredits, Option<string> courseCatalogURL, Option<string> courseTitle, Option<double> earnedCreditConversion, Option<double> earnedCredits, Option<string> externalEducationOrganizationNameOfInstitution, Option<string> finalLetterGradeEarned, Option<double> finalNumericGradeEarned, Option<string> id, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode2, Option<string> courseCatalogURL2, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetCourseTranscripts(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, courseAttemptResultDescriptor, courseCode, courseEducationOrganizationId, educationOrganizationId, schoolYear, studentUniqueId, termDescriptor, externalEducationOrganizationId, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, attemptedCreditConversion, attemptedCredits, courseCatalogURL, courseTitle, earnedCreditConversion, earnedCredits, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, finalNumericGradeEarned, id, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="courseAttemptResultDescriptor"></param>
        /// <param name="courseCode"></param>
        /// <param name="courseEducationOrganizationId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="termDescriptor"></param>
        /// <param name="externalEducationOrganizationId"></param>
        /// <param name="responsibleTeacherStaffUniqueId"></param>
        /// <param name="courseRepeatCodeDescriptor"></param>
        /// <param name="attemptedCreditTypeDescriptor"></param>
        /// <param name="earnedCreditTypeDescriptor"></param>
        /// <param name="whenTakenGradeLevelDescriptor"></param>
        /// <param name="methodCreditEarnedDescriptor"></param>
        /// <param name="alternativeCourseTitle"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="attemptedCreditConversion"></param>
        /// <param name="attemptedCredits"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="courseTitle"></param>
        /// <param name="earnedCreditConversion"></param>
        /// <param name="earnedCredits"></param>
        /// <param name="externalEducationOrganizationNameOfInstitution"></param>
        /// <param name="finalLetterGradeEarned"></param>
        /// <param name="finalNumericGradeEarned"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode2"></param>
        /// <param name="courseCatalogURL2"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetCourseTranscripts(ref bool suppressDefaultLog, IGetCourseTranscriptsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> courseAttemptResultDescriptor, Option<string> courseCode, Option<long> courseEducationOrganizationId, Option<long> educationOrganizationId, Option<int> schoolYear, Option<string> studentUniqueId, Option<string> termDescriptor, Option<long> externalEducationOrganizationId, Option<string> responsibleTeacherStaffUniqueId, Option<string> courseRepeatCodeDescriptor, Option<string> attemptedCreditTypeDescriptor, Option<string> earnedCreditTypeDescriptor, Option<string> whenTakenGradeLevelDescriptor, Option<string> methodCreditEarnedDescriptor, Option<string> alternativeCourseTitle, Option<string> assigningOrganizationIdentificationCode, Option<double> attemptedCreditConversion, Option<double> attemptedCredits, Option<string> courseCatalogURL, Option<string> courseTitle, Option<double> earnedCreditConversion, Option<double> earnedCredits, Option<string> externalEducationOrganizationNameOfInstitution, Option<string> finalLetterGradeEarned, Option<double> finalNumericGradeEarned, Option<string> id, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode2, Option<string> courseCatalogURL2, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="courseAttemptResultDescriptor"></param>
        /// <param name="courseCode"></param>
        /// <param name="courseEducationOrganizationId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="termDescriptor"></param>
        /// <param name="externalEducationOrganizationId"></param>
        /// <param name="responsibleTeacherStaffUniqueId"></param>
        /// <param name="courseRepeatCodeDescriptor"></param>
        /// <param name="attemptedCreditTypeDescriptor"></param>
        /// <param name="earnedCreditTypeDescriptor"></param>
        /// <param name="whenTakenGradeLevelDescriptor"></param>
        /// <param name="methodCreditEarnedDescriptor"></param>
        /// <param name="alternativeCourseTitle"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="attemptedCreditConversion"></param>
        /// <param name="attemptedCredits"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="courseTitle"></param>
        /// <param name="earnedCreditConversion"></param>
        /// <param name="earnedCredits"></param>
        /// <param name="externalEducationOrganizationNameOfInstitution"></param>
        /// <param name="finalLetterGradeEarned"></param>
        /// <param name="finalNumericGradeEarned"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode2"></param>
        /// <param name="courseCatalogURL2"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetCourseTranscriptsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> courseAttemptResultDescriptor, Option<string> courseCode, Option<long> courseEducationOrganizationId, Option<long> educationOrganizationId, Option<int> schoolYear, Option<string> studentUniqueId, Option<string> termDescriptor, Option<long> externalEducationOrganizationId, Option<string> responsibleTeacherStaffUniqueId, Option<string> courseRepeatCodeDescriptor, Option<string> attemptedCreditTypeDescriptor, Option<string> earnedCreditTypeDescriptor, Option<string> whenTakenGradeLevelDescriptor, Option<string> methodCreditEarnedDescriptor, Option<string> alternativeCourseTitle, Option<string> assigningOrganizationIdentificationCode, Option<double> attemptedCreditConversion, Option<double> attemptedCredits, Option<string> courseCatalogURL, Option<string> courseTitle, Option<double> earnedCreditConversion, Option<double> earnedCredits, Option<string> externalEducationOrganizationNameOfInstitution, Option<string> finalLetterGradeEarned, Option<double> finalNumericGradeEarned, Option<string> id, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode2, Option<string> courseCatalogURL2, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCourseTranscripts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, courseAttemptResultDescriptor, courseCode, courseEducationOrganizationId, educationOrganizationId, schoolYear, studentUniqueId, termDescriptor, externalEducationOrganizationId, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, attemptedCreditConversion, attemptedCredits, courseCatalogURL, courseTitle, earnedCreditConversion, earnedCredits, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, finalNumericGradeEarned, id, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="courseAttemptResultDescriptor"></param>
        /// <param name="courseCode"></param>
        /// <param name="courseEducationOrganizationId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="termDescriptor"></param>
        /// <param name="externalEducationOrganizationId"></param>
        /// <param name="responsibleTeacherStaffUniqueId"></param>
        /// <param name="courseRepeatCodeDescriptor"></param>
        /// <param name="attemptedCreditTypeDescriptor"></param>
        /// <param name="earnedCreditTypeDescriptor"></param>
        /// <param name="whenTakenGradeLevelDescriptor"></param>
        /// <param name="methodCreditEarnedDescriptor"></param>
        /// <param name="alternativeCourseTitle"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="attemptedCreditConversion"></param>
        /// <param name="attemptedCredits"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="courseTitle"></param>
        /// <param name="earnedCreditConversion"></param>
        /// <param name="earnedCredits"></param>
        /// <param name="externalEducationOrganizationNameOfInstitution"></param>
        /// <param name="finalLetterGradeEarned"></param>
        /// <param name="finalNumericGradeEarned"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode2"></param>
        /// <param name="courseCatalogURL2"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetCourseTranscripts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> courseAttemptResultDescriptor, Option<string> courseCode, Option<long> courseEducationOrganizationId, Option<long> educationOrganizationId, Option<int> schoolYear, Option<string> studentUniqueId, Option<string> termDescriptor, Option<long> externalEducationOrganizationId, Option<string> responsibleTeacherStaffUniqueId, Option<string> courseRepeatCodeDescriptor, Option<string> attemptedCreditTypeDescriptor, Option<string> earnedCreditTypeDescriptor, Option<string> whenTakenGradeLevelDescriptor, Option<string> methodCreditEarnedDescriptor, Option<string> alternativeCourseTitle, Option<string> assigningOrganizationIdentificationCode, Option<double> attemptedCreditConversion, Option<double> attemptedCredits, Option<string> courseCatalogURL, Option<string> courseTitle, Option<double> earnedCreditConversion, Option<double> earnedCredits, Option<string> externalEducationOrganizationNameOfInstitution, Option<string> finalLetterGradeEarned, Option<double> finalNumericGradeEarned, Option<string> id, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode2, Option<string> courseCatalogURL2, Option<string> identificationCode);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="courseAttemptResultDescriptor">The result from the student&#39;s attempt to take the course. (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="courseEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="externalEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="responsibleTeacherStaffUniqueId">A unique alphanumeric code assigned to a responsibleteacherstaff. (optional)</param>
        /// <param name="courseRepeatCodeDescriptor">Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average. (optional)</param>
        /// <param name="attemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="earnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="whenTakenGradeLevelDescriptor">Student&#39;s grade level at time of course. (optional)</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned. (optional)</param>
        /// <param name="alternativeCourseTitle">The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the course identification code. (optional)</param>
        /// <param name="attemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="attemptedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts). (optional)</param>
        /// <param name="earnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="earnedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="externalEducationOrganizationNameOfInstitution">Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available. (optional)</param>
        /// <param name="finalLetterGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="finalNumericGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode2">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL2">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsApiResponse"/>&gt;</returns>
        public async Task<IGetCourseTranscriptsApiResponse?> GetCourseTranscriptsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> courseAttemptResultDescriptor = default, Option<string> courseCode = default, Option<long> courseEducationOrganizationId = default, Option<long> educationOrganizationId = default, Option<int> schoolYear = default, Option<string> studentUniqueId = default, Option<string> termDescriptor = default, Option<long> externalEducationOrganizationId = default, Option<string> responsibleTeacherStaffUniqueId = default, Option<string> courseRepeatCodeDescriptor = default, Option<string> attemptedCreditTypeDescriptor = default, Option<string> earnedCreditTypeDescriptor = default, Option<string> whenTakenGradeLevelDescriptor = default, Option<string> methodCreditEarnedDescriptor = default, Option<string> alternativeCourseTitle = default, Option<string> assigningOrganizationIdentificationCode = default, Option<double> attemptedCreditConversion = default, Option<double> attemptedCredits = default, Option<string> courseCatalogURL = default, Option<string> courseTitle = default, Option<double> earnedCreditConversion = default, Option<double> earnedCredits = default, Option<string> externalEducationOrganizationNameOfInstitution = default, Option<string> finalLetterGradeEarned = default, Option<double> finalNumericGradeEarned = default, Option<string> id = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode2 = default, Option<string> courseCatalogURL2 = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCourseTranscriptsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, courseAttemptResultDescriptor, courseCode, courseEducationOrganizationId, educationOrganizationId, schoolYear, studentUniqueId, termDescriptor, externalEducationOrganizationId, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, attemptedCreditConversion, attemptedCredits, courseCatalogURL, courseTitle, earnedCreditConversion, earnedCredits, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, finalNumericGradeEarned, id, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="courseAttemptResultDescriptor">The result from the student&#39;s attempt to take the course. (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="courseEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="externalEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="responsibleTeacherStaffUniqueId">A unique alphanumeric code assigned to a responsibleteacherstaff. (optional)</param>
        /// <param name="courseRepeatCodeDescriptor">Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average. (optional)</param>
        /// <param name="attemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="earnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="whenTakenGradeLevelDescriptor">Student&#39;s grade level at time of course. (optional)</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned. (optional)</param>
        /// <param name="alternativeCourseTitle">The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the course identification code. (optional)</param>
        /// <param name="attemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="attemptedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts). (optional)</param>
        /// <param name="earnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="earnedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="externalEducationOrganizationNameOfInstitution">Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available. (optional)</param>
        /// <param name="finalLetterGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="finalNumericGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode2">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL2">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsApiResponse"/>&gt;</returns>
        public async Task<IGetCourseTranscriptsApiResponse> GetCourseTranscriptsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> courseAttemptResultDescriptor = default, Option<string> courseCode = default, Option<long> courseEducationOrganizationId = default, Option<long> educationOrganizationId = default, Option<int> schoolYear = default, Option<string> studentUniqueId = default, Option<string> termDescriptor = default, Option<long> externalEducationOrganizationId = default, Option<string> responsibleTeacherStaffUniqueId = default, Option<string> courseRepeatCodeDescriptor = default, Option<string> attemptedCreditTypeDescriptor = default, Option<string> earnedCreditTypeDescriptor = default, Option<string> whenTakenGradeLevelDescriptor = default, Option<string> methodCreditEarnedDescriptor = default, Option<string> alternativeCourseTitle = default, Option<string> assigningOrganizationIdentificationCode = default, Option<double> attemptedCreditConversion = default, Option<double> attemptedCredits = default, Option<string> courseCatalogURL = default, Option<string> courseTitle = default, Option<double> earnedCreditConversion = default, Option<double> earnedCredits = default, Option<string> externalEducationOrganizationNameOfInstitution = default, Option<string> finalLetterGradeEarned = default, Option<double> finalNumericGradeEarned = default, Option<string> id = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode2 = default, Option<string> courseCatalogURL2 = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCourseTranscripts(pageToken, courseAttemptResultDescriptor, courseCode, studentUniqueId, termDescriptor, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, courseCatalogURL, courseTitle, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, id, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode);

                FormatGetCourseTranscripts(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref courseAttemptResultDescriptor, ref courseCode, ref courseEducationOrganizationId, ref educationOrganizationId, ref schoolYear, ref studentUniqueId, ref termDescriptor, ref externalEducationOrganizationId, ref responsibleTeacherStaffUniqueId, ref courseRepeatCodeDescriptor, ref attemptedCreditTypeDescriptor, ref earnedCreditTypeDescriptor, ref whenTakenGradeLevelDescriptor, ref methodCreditEarnedDescriptor, ref alternativeCourseTitle, ref assigningOrganizationIdentificationCode, ref attemptedCreditConversion, ref attemptedCredits, ref courseCatalogURL, ref courseTitle, ref earnedCreditConversion, ref earnedCredits, ref externalEducationOrganizationNameOfInstitution, ref finalLetterGradeEarned, ref finalNumericGradeEarned, ref id, ref useSnapshot, ref courseIdentificationSystemDescriptor, ref assigningOrganizationIdentificationCode2, ref courseCatalogURL2, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courseTranscripts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courseTranscripts");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (courseAttemptResultDescriptor.IsSet)
                        parseQueryStringLocalVar["courseAttemptResultDescriptor"] = ClientUtils.ParameterToString(courseAttemptResultDescriptor.Value);

                    if (courseCode.IsSet)
                        parseQueryStringLocalVar["courseCode"] = ClientUtils.ParameterToString(courseCode.Value);

                    if (courseEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["courseEducationOrganizationId"] = ClientUtils.ParameterToString(courseEducationOrganizationId.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (schoolYear.IsSet)
                        parseQueryStringLocalVar["schoolYear"] = ClientUtils.ParameterToString(schoolYear.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (termDescriptor.IsSet)
                        parseQueryStringLocalVar["termDescriptor"] = ClientUtils.ParameterToString(termDescriptor.Value);

                    if (externalEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["externalEducationOrganizationId"] = ClientUtils.ParameterToString(externalEducationOrganizationId.Value);

                    if (responsibleTeacherStaffUniqueId.IsSet)
                        parseQueryStringLocalVar["responsibleTeacherStaffUniqueId"] = ClientUtils.ParameterToString(responsibleTeacherStaffUniqueId.Value);

                    if (courseRepeatCodeDescriptor.IsSet)
                        parseQueryStringLocalVar["courseRepeatCodeDescriptor"] = ClientUtils.ParameterToString(courseRepeatCodeDescriptor.Value);

                    if (attemptedCreditTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["attemptedCreditTypeDescriptor"] = ClientUtils.ParameterToString(attemptedCreditTypeDescriptor.Value);

                    if (earnedCreditTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["earnedCreditTypeDescriptor"] = ClientUtils.ParameterToString(earnedCreditTypeDescriptor.Value);

                    if (whenTakenGradeLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["whenTakenGradeLevelDescriptor"] = ClientUtils.ParameterToString(whenTakenGradeLevelDescriptor.Value);

                    if (methodCreditEarnedDescriptor.IsSet)
                        parseQueryStringLocalVar["methodCreditEarnedDescriptor"] = ClientUtils.ParameterToString(methodCreditEarnedDescriptor.Value);

                    if (alternativeCourseTitle.IsSet)
                        parseQueryStringLocalVar["alternativeCourseTitle"] = ClientUtils.ParameterToString(alternativeCourseTitle.Value);

                    if (assigningOrganizationIdentificationCode.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode.Value);

                    if (attemptedCreditConversion.IsSet)
                        parseQueryStringLocalVar["attemptedCreditConversion"] = ClientUtils.ParameterToString(attemptedCreditConversion.Value);

                    if (attemptedCredits.IsSet)
                        parseQueryStringLocalVar["attemptedCredits"] = ClientUtils.ParameterToString(attemptedCredits.Value);

                    if (courseCatalogURL.IsSet)
                        parseQueryStringLocalVar["courseCatalogURL"] = ClientUtils.ParameterToString(courseCatalogURL.Value);

                    if (courseTitle.IsSet)
                        parseQueryStringLocalVar["courseTitle"] = ClientUtils.ParameterToString(courseTitle.Value);

                    if (earnedCreditConversion.IsSet)
                        parseQueryStringLocalVar["earnedCreditConversion"] = ClientUtils.ParameterToString(earnedCreditConversion.Value);

                    if (earnedCredits.IsSet)
                        parseQueryStringLocalVar["earnedCredits"] = ClientUtils.ParameterToString(earnedCredits.Value);

                    if (externalEducationOrganizationNameOfInstitution.IsSet)
                        parseQueryStringLocalVar["externalEducationOrganizationNameOfInstitution"] = ClientUtils.ParameterToString(externalEducationOrganizationNameOfInstitution.Value);

                    if (finalLetterGradeEarned.IsSet)
                        parseQueryStringLocalVar["finalLetterGradeEarned"] = ClientUtils.ParameterToString(finalLetterGradeEarned.Value);

                    if (finalNumericGradeEarned.IsSet)
                        parseQueryStringLocalVar["finalNumericGradeEarned"] = ClientUtils.ParameterToString(finalNumericGradeEarned.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (courseIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["courseIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(courseIdentificationSystemDescriptor.Value);

                    if (assigningOrganizationIdentificationCode2.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode2.Value);

                    if (courseCatalogURL2.IsSet)
                        parseQueryStringLocalVar["courseCatalogURL"] = ClientUtils.ParameterToString(courseCatalogURL2.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCourseTranscriptsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCourseTranscriptsApiResponse>();

                        GetCourseTranscriptsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courseTranscripts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCourseTranscriptsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, courseAttemptResultDescriptor, courseCode, courseEducationOrganizationId, educationOrganizationId, schoolYear, studentUniqueId, termDescriptor, externalEducationOrganizationId, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, attemptedCreditConversion, attemptedCredits, courseCatalogURL, courseTitle, earnedCreditConversion, earnedCredits, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, finalNumericGradeEarned, id, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode);

                        Events.ExecuteOnGetCourseTranscripts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCourseTranscriptsDefaultImplementation(e, "/ed-fi/courseTranscripts", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, courseAttemptResultDescriptor, courseCode, courseEducationOrganizationId, educationOrganizationId, schoolYear, studentUniqueId, termDescriptor, externalEducationOrganizationId, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, attemptedCreditConversion, attemptedCredits, courseCatalogURL, courseTitle, earnedCreditConversion, earnedCredits, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, finalNumericGradeEarned, id, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode);
                Events.ExecuteOnErrorGetCourseTranscripts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCourseTranscriptsApiResponse"/>
        /// </summary>
        public partial class GetCourseTranscriptsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetCourseTranscriptsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCourseTranscriptsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCourseTranscriptsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCourseTranscriptsApiResponse(ILogger<GetCourseTranscriptsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiCourseTranscript>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiCourseTranscript>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiCourseTranscript>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCourseTranscriptsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetCourseTranscriptsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetCourseTranscriptsByIdDefaultImplementation(IGetCourseTranscriptsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetCourseTranscriptsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetCourseTranscriptsById(ref bool suppressDefaultLog, IGetCourseTranscriptsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetCourseTranscriptsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCourseTranscriptsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetCourseTranscriptsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetCourseTranscriptsByIdApiResponse?> GetCourseTranscriptsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCourseTranscriptsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetCourseTranscriptsByIdApiResponse> GetCourseTranscriptsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCourseTranscriptsById(id, ifNoneMatch);

                FormatGetCourseTranscriptsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courseTranscripts/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courseTranscripts/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCourseTranscriptsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCourseTranscriptsByIdApiResponse>();

                        GetCourseTranscriptsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courseTranscripts/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCourseTranscriptsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetCourseTranscriptsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCourseTranscriptsByIdDefaultImplementation(e, "/ed-fi/courseTranscripts/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetCourseTranscriptsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCourseTranscriptsByIdApiResponse"/>
        /// </summary>
        public partial class GetCourseTranscriptsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetCourseTranscriptsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCourseTranscriptsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCourseTranscriptsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCourseTranscriptsByIdApiResponse(ILogger<GetCourseTranscriptsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiCourseTranscript? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiCourseTranscript>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiCourseTranscript? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCourseTranscriptsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> courseAttemptResultDescriptor, ref Option<string> courseCode, ref Option<long> courseEducationOrganizationId, ref Option<long> educationOrganizationId, ref Option<int> schoolYear, ref Option<string> studentUniqueId, ref Option<string> termDescriptor, ref Option<long> externalEducationOrganizationId, ref Option<string> responsibleTeacherStaffUniqueId, ref Option<string> courseRepeatCodeDescriptor, ref Option<string> attemptedCreditTypeDescriptor, ref Option<string> earnedCreditTypeDescriptor, ref Option<string> whenTakenGradeLevelDescriptor, ref Option<string> methodCreditEarnedDescriptor, ref Option<string> alternativeCourseTitle, ref Option<string> assigningOrganizationIdentificationCode, ref Option<double> attemptedCreditConversion, ref Option<double> attemptedCredits, ref Option<string> courseCatalogURL, ref Option<string> courseTitle, ref Option<double> earnedCreditConversion, ref Option<double> earnedCredits, ref Option<string> externalEducationOrganizationNameOfInstitution, ref Option<string> finalLetterGradeEarned, ref Option<double> finalNumericGradeEarned, ref Option<string> id, ref Option<bool> useSnapshot, ref Option<string> courseIdentificationSystemDescriptor, ref Option<string> assigningOrganizationIdentificationCode2, ref Option<string> courseCatalogURL2, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="courseAttemptResultDescriptor"></param>
        /// <param name="courseCode"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="termDescriptor"></param>
        /// <param name="responsibleTeacherStaffUniqueId"></param>
        /// <param name="courseRepeatCodeDescriptor"></param>
        /// <param name="attemptedCreditTypeDescriptor"></param>
        /// <param name="earnedCreditTypeDescriptor"></param>
        /// <param name="whenTakenGradeLevelDescriptor"></param>
        /// <param name="methodCreditEarnedDescriptor"></param>
        /// <param name="alternativeCourseTitle"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="courseTitle"></param>
        /// <param name="externalEducationOrganizationNameOfInstitution"></param>
        /// <param name="finalLetterGradeEarned"></param>
        /// <param name="id"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode2"></param>
        /// <param name="courseCatalogURL2"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetCourseTranscriptsPartitions(Option<string> courseAttemptResultDescriptor, Option<string> courseCode, Option<string> studentUniqueId, Option<string> termDescriptor, Option<string> responsibleTeacherStaffUniqueId, Option<string> courseRepeatCodeDescriptor, Option<string> attemptedCreditTypeDescriptor, Option<string> earnedCreditTypeDescriptor, Option<string> whenTakenGradeLevelDescriptor, Option<string> methodCreditEarnedDescriptor, Option<string> alternativeCourseTitle, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> courseTitle, Option<string> externalEducationOrganizationNameOfInstitution, Option<string> finalLetterGradeEarned, Option<string> id, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode2, Option<string> courseCatalogURL2, Option<string> identificationCode)
        {
            if (courseAttemptResultDescriptor.IsSet && courseAttemptResultDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseAttemptResultDescriptor));

            if (courseCode.IsSet && courseCode.Value == null)
                throw new ArgumentNullException(nameof(courseCode));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (termDescriptor.IsSet && termDescriptor.Value == null)
                throw new ArgumentNullException(nameof(termDescriptor));

            if (responsibleTeacherStaffUniqueId.IsSet && responsibleTeacherStaffUniqueId.Value == null)
                throw new ArgumentNullException(nameof(responsibleTeacherStaffUniqueId));

            if (courseRepeatCodeDescriptor.IsSet && courseRepeatCodeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseRepeatCodeDescriptor));

            if (attemptedCreditTypeDescriptor.IsSet && attemptedCreditTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(attemptedCreditTypeDescriptor));

            if (earnedCreditTypeDescriptor.IsSet && earnedCreditTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(earnedCreditTypeDescriptor));

            if (whenTakenGradeLevelDescriptor.IsSet && whenTakenGradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(whenTakenGradeLevelDescriptor));

            if (methodCreditEarnedDescriptor.IsSet && methodCreditEarnedDescriptor.Value == null)
                throw new ArgumentNullException(nameof(methodCreditEarnedDescriptor));

            if (alternativeCourseTitle.IsSet && alternativeCourseTitle.Value == null)
                throw new ArgumentNullException(nameof(alternativeCourseTitle));

            if (assigningOrganizationIdentificationCode.IsSet && assigningOrganizationIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode));

            if (courseCatalogURL.IsSet && courseCatalogURL.Value == null)
                throw new ArgumentNullException(nameof(courseCatalogURL));

            if (courseTitle.IsSet && courseTitle.Value == null)
                throw new ArgumentNullException(nameof(courseTitle));

            if (externalEducationOrganizationNameOfInstitution.IsSet && externalEducationOrganizationNameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(externalEducationOrganizationNameOfInstitution));

            if (finalLetterGradeEarned.IsSet && finalLetterGradeEarned.Value == null)
                throw new ArgumentNullException(nameof(finalLetterGradeEarned));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (courseIdentificationSystemDescriptor.IsSet && courseIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseIdentificationSystemDescriptor));

            if (assigningOrganizationIdentificationCode2.IsSet && assigningOrganizationIdentificationCode2.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode2));

            if (courseCatalogURL2.IsSet && courseCatalogURL2.Value == null)
                throw new ArgumentNullException(nameof(courseCatalogURL2));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="courseAttemptResultDescriptor"></param>
        /// <param name="courseCode"></param>
        /// <param name="courseEducationOrganizationId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="termDescriptor"></param>
        /// <param name="externalEducationOrganizationId"></param>
        /// <param name="responsibleTeacherStaffUniqueId"></param>
        /// <param name="courseRepeatCodeDescriptor"></param>
        /// <param name="attemptedCreditTypeDescriptor"></param>
        /// <param name="earnedCreditTypeDescriptor"></param>
        /// <param name="whenTakenGradeLevelDescriptor"></param>
        /// <param name="methodCreditEarnedDescriptor"></param>
        /// <param name="alternativeCourseTitle"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="attemptedCreditConversion"></param>
        /// <param name="attemptedCredits"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="courseTitle"></param>
        /// <param name="earnedCreditConversion"></param>
        /// <param name="earnedCredits"></param>
        /// <param name="externalEducationOrganizationNameOfInstitution"></param>
        /// <param name="finalLetterGradeEarned"></param>
        /// <param name="finalNumericGradeEarned"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode2"></param>
        /// <param name="courseCatalogURL2"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetCourseTranscriptsPartitionsDefaultImplementation(IGetCourseTranscriptsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> courseAttemptResultDescriptor, Option<string> courseCode, Option<long> courseEducationOrganizationId, Option<long> educationOrganizationId, Option<int> schoolYear, Option<string> studentUniqueId, Option<string> termDescriptor, Option<long> externalEducationOrganizationId, Option<string> responsibleTeacherStaffUniqueId, Option<string> courseRepeatCodeDescriptor, Option<string> attemptedCreditTypeDescriptor, Option<string> earnedCreditTypeDescriptor, Option<string> whenTakenGradeLevelDescriptor, Option<string> methodCreditEarnedDescriptor, Option<string> alternativeCourseTitle, Option<string> assigningOrganizationIdentificationCode, Option<double> attemptedCreditConversion, Option<double> attemptedCredits, Option<string> courseCatalogURL, Option<string> courseTitle, Option<double> earnedCreditConversion, Option<double> earnedCredits, Option<string> externalEducationOrganizationNameOfInstitution, Option<string> finalLetterGradeEarned, Option<double> finalNumericGradeEarned, Option<string> id, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode2, Option<string> courseCatalogURL2, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetCourseTranscriptsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, courseAttemptResultDescriptor, courseCode, courseEducationOrganizationId, educationOrganizationId, schoolYear, studentUniqueId, termDescriptor, externalEducationOrganizationId, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, attemptedCreditConversion, attemptedCredits, courseCatalogURL, courseTitle, earnedCreditConversion, earnedCredits, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, finalNumericGradeEarned, id, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="courseAttemptResultDescriptor"></param>
        /// <param name="courseCode"></param>
        /// <param name="courseEducationOrganizationId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="termDescriptor"></param>
        /// <param name="externalEducationOrganizationId"></param>
        /// <param name="responsibleTeacherStaffUniqueId"></param>
        /// <param name="courseRepeatCodeDescriptor"></param>
        /// <param name="attemptedCreditTypeDescriptor"></param>
        /// <param name="earnedCreditTypeDescriptor"></param>
        /// <param name="whenTakenGradeLevelDescriptor"></param>
        /// <param name="methodCreditEarnedDescriptor"></param>
        /// <param name="alternativeCourseTitle"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="attemptedCreditConversion"></param>
        /// <param name="attemptedCredits"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="courseTitle"></param>
        /// <param name="earnedCreditConversion"></param>
        /// <param name="earnedCredits"></param>
        /// <param name="externalEducationOrganizationNameOfInstitution"></param>
        /// <param name="finalLetterGradeEarned"></param>
        /// <param name="finalNumericGradeEarned"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode2"></param>
        /// <param name="courseCatalogURL2"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetCourseTranscriptsPartitions(ref bool suppressDefaultLog, IGetCourseTranscriptsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> courseAttemptResultDescriptor, Option<string> courseCode, Option<long> courseEducationOrganizationId, Option<long> educationOrganizationId, Option<int> schoolYear, Option<string> studentUniqueId, Option<string> termDescriptor, Option<long> externalEducationOrganizationId, Option<string> responsibleTeacherStaffUniqueId, Option<string> courseRepeatCodeDescriptor, Option<string> attemptedCreditTypeDescriptor, Option<string> earnedCreditTypeDescriptor, Option<string> whenTakenGradeLevelDescriptor, Option<string> methodCreditEarnedDescriptor, Option<string> alternativeCourseTitle, Option<string> assigningOrganizationIdentificationCode, Option<double> attemptedCreditConversion, Option<double> attemptedCredits, Option<string> courseCatalogURL, Option<string> courseTitle, Option<double> earnedCreditConversion, Option<double> earnedCredits, Option<string> externalEducationOrganizationNameOfInstitution, Option<string> finalLetterGradeEarned, Option<double> finalNumericGradeEarned, Option<string> id, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode2, Option<string> courseCatalogURL2, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="courseAttemptResultDescriptor"></param>
        /// <param name="courseCode"></param>
        /// <param name="courseEducationOrganizationId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="termDescriptor"></param>
        /// <param name="externalEducationOrganizationId"></param>
        /// <param name="responsibleTeacherStaffUniqueId"></param>
        /// <param name="courseRepeatCodeDescriptor"></param>
        /// <param name="attemptedCreditTypeDescriptor"></param>
        /// <param name="earnedCreditTypeDescriptor"></param>
        /// <param name="whenTakenGradeLevelDescriptor"></param>
        /// <param name="methodCreditEarnedDescriptor"></param>
        /// <param name="alternativeCourseTitle"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="attemptedCreditConversion"></param>
        /// <param name="attemptedCredits"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="courseTitle"></param>
        /// <param name="earnedCreditConversion"></param>
        /// <param name="earnedCredits"></param>
        /// <param name="externalEducationOrganizationNameOfInstitution"></param>
        /// <param name="finalLetterGradeEarned"></param>
        /// <param name="finalNumericGradeEarned"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode2"></param>
        /// <param name="courseCatalogURL2"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetCourseTranscriptsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> courseAttemptResultDescriptor, Option<string> courseCode, Option<long> courseEducationOrganizationId, Option<long> educationOrganizationId, Option<int> schoolYear, Option<string> studentUniqueId, Option<string> termDescriptor, Option<long> externalEducationOrganizationId, Option<string> responsibleTeacherStaffUniqueId, Option<string> courseRepeatCodeDescriptor, Option<string> attemptedCreditTypeDescriptor, Option<string> earnedCreditTypeDescriptor, Option<string> whenTakenGradeLevelDescriptor, Option<string> methodCreditEarnedDescriptor, Option<string> alternativeCourseTitle, Option<string> assigningOrganizationIdentificationCode, Option<double> attemptedCreditConversion, Option<double> attemptedCredits, Option<string> courseCatalogURL, Option<string> courseTitle, Option<double> earnedCreditConversion, Option<double> earnedCredits, Option<string> externalEducationOrganizationNameOfInstitution, Option<string> finalLetterGradeEarned, Option<double> finalNumericGradeEarned, Option<string> id, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode2, Option<string> courseCatalogURL2, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCourseTranscriptsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, courseAttemptResultDescriptor, courseCode, courseEducationOrganizationId, educationOrganizationId, schoolYear, studentUniqueId, termDescriptor, externalEducationOrganizationId, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, attemptedCreditConversion, attemptedCredits, courseCatalogURL, courseTitle, earnedCreditConversion, earnedCredits, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, finalNumericGradeEarned, id, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="courseAttemptResultDescriptor"></param>
        /// <param name="courseCode"></param>
        /// <param name="courseEducationOrganizationId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="termDescriptor"></param>
        /// <param name="externalEducationOrganizationId"></param>
        /// <param name="responsibleTeacherStaffUniqueId"></param>
        /// <param name="courseRepeatCodeDescriptor"></param>
        /// <param name="attemptedCreditTypeDescriptor"></param>
        /// <param name="earnedCreditTypeDescriptor"></param>
        /// <param name="whenTakenGradeLevelDescriptor"></param>
        /// <param name="methodCreditEarnedDescriptor"></param>
        /// <param name="alternativeCourseTitle"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="attemptedCreditConversion"></param>
        /// <param name="attemptedCredits"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="courseTitle"></param>
        /// <param name="earnedCreditConversion"></param>
        /// <param name="earnedCredits"></param>
        /// <param name="externalEducationOrganizationNameOfInstitution"></param>
        /// <param name="finalLetterGradeEarned"></param>
        /// <param name="finalNumericGradeEarned"></param>
        /// <param name="id"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode2"></param>
        /// <param name="courseCatalogURL2"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetCourseTranscriptsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> courseAttemptResultDescriptor, Option<string> courseCode, Option<long> courseEducationOrganizationId, Option<long> educationOrganizationId, Option<int> schoolYear, Option<string> studentUniqueId, Option<string> termDescriptor, Option<long> externalEducationOrganizationId, Option<string> responsibleTeacherStaffUniqueId, Option<string> courseRepeatCodeDescriptor, Option<string> attemptedCreditTypeDescriptor, Option<string> earnedCreditTypeDescriptor, Option<string> whenTakenGradeLevelDescriptor, Option<string> methodCreditEarnedDescriptor, Option<string> alternativeCourseTitle, Option<string> assigningOrganizationIdentificationCode, Option<double> attemptedCreditConversion, Option<double> attemptedCredits, Option<string> courseCatalogURL, Option<string> courseTitle, Option<double> earnedCreditConversion, Option<double> earnedCredits, Option<string> externalEducationOrganizationNameOfInstitution, Option<string> finalLetterGradeEarned, Option<double> finalNumericGradeEarned, Option<string> id, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode2, Option<string> courseCatalogURL2, Option<string> identificationCode);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="courseAttemptResultDescriptor">The result from the student&#39;s attempt to take the course. (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="courseEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="externalEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="responsibleTeacherStaffUniqueId">A unique alphanumeric code assigned to a responsibleteacherstaff. (optional)</param>
        /// <param name="courseRepeatCodeDescriptor">Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average. (optional)</param>
        /// <param name="attemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="earnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="whenTakenGradeLevelDescriptor">Student&#39;s grade level at time of course. (optional)</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned. (optional)</param>
        /// <param name="alternativeCourseTitle">The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the course identification code. (optional)</param>
        /// <param name="attemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="attemptedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts). (optional)</param>
        /// <param name="earnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="earnedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="externalEducationOrganizationNameOfInstitution">Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available. (optional)</param>
        /// <param name="finalLetterGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="finalNumericGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode2">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL2">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetCourseTranscriptsPartitionsApiResponse?> GetCourseTranscriptsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> courseAttemptResultDescriptor = default, Option<string> courseCode = default, Option<long> courseEducationOrganizationId = default, Option<long> educationOrganizationId = default, Option<int> schoolYear = default, Option<string> studentUniqueId = default, Option<string> termDescriptor = default, Option<long> externalEducationOrganizationId = default, Option<string> responsibleTeacherStaffUniqueId = default, Option<string> courseRepeatCodeDescriptor = default, Option<string> attemptedCreditTypeDescriptor = default, Option<string> earnedCreditTypeDescriptor = default, Option<string> whenTakenGradeLevelDescriptor = default, Option<string> methodCreditEarnedDescriptor = default, Option<string> alternativeCourseTitle = default, Option<string> assigningOrganizationIdentificationCode = default, Option<double> attemptedCreditConversion = default, Option<double> attemptedCredits = default, Option<string> courseCatalogURL = default, Option<string> courseTitle = default, Option<double> earnedCreditConversion = default, Option<double> earnedCredits = default, Option<string> externalEducationOrganizationNameOfInstitution = default, Option<string> finalLetterGradeEarned = default, Option<double> finalNumericGradeEarned = default, Option<string> id = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode2 = default, Option<string> courseCatalogURL2 = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCourseTranscriptsPartitionsAsync(number, minChangeVersion, maxChangeVersion, courseAttemptResultDescriptor, courseCode, courseEducationOrganizationId, educationOrganizationId, schoolYear, studentUniqueId, termDescriptor, externalEducationOrganizationId, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, attemptedCreditConversion, attemptedCredits, courseCatalogURL, courseTitle, earnedCreditConversion, earnedCredits, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, finalNumericGradeEarned, id, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="courseAttemptResultDescriptor">The result from the student&#39;s attempt to take the course. (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="courseEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="externalEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="responsibleTeacherStaffUniqueId">A unique alphanumeric code assigned to a responsibleteacherstaff. (optional)</param>
        /// <param name="courseRepeatCodeDescriptor">Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average. (optional)</param>
        /// <param name="attemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="earnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="whenTakenGradeLevelDescriptor">Student&#39;s grade level at time of course. (optional)</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned. (optional)</param>
        /// <param name="alternativeCourseTitle">The descriptive name given to a course of study offered in the school, if different from the CourseTitle. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the course identification code. (optional)</param>
        /// <param name="attemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="attemptedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts). (optional)</param>
        /// <param name="earnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="earnedCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="externalEducationOrganizationNameOfInstitution">Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available. (optional)</param>
        /// <param name="finalLetterGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="finalNumericGradeEarned">The final indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode2">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL2">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourseTranscriptsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetCourseTranscriptsPartitionsApiResponse> GetCourseTranscriptsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> courseAttemptResultDescriptor = default, Option<string> courseCode = default, Option<long> courseEducationOrganizationId = default, Option<long> educationOrganizationId = default, Option<int> schoolYear = default, Option<string> studentUniqueId = default, Option<string> termDescriptor = default, Option<long> externalEducationOrganizationId = default, Option<string> responsibleTeacherStaffUniqueId = default, Option<string> courseRepeatCodeDescriptor = default, Option<string> attemptedCreditTypeDescriptor = default, Option<string> earnedCreditTypeDescriptor = default, Option<string> whenTakenGradeLevelDescriptor = default, Option<string> methodCreditEarnedDescriptor = default, Option<string> alternativeCourseTitle = default, Option<string> assigningOrganizationIdentificationCode = default, Option<double> attemptedCreditConversion = default, Option<double> attemptedCredits = default, Option<string> courseCatalogURL = default, Option<string> courseTitle = default, Option<double> earnedCreditConversion = default, Option<double> earnedCredits = default, Option<string> externalEducationOrganizationNameOfInstitution = default, Option<string> finalLetterGradeEarned = default, Option<double> finalNumericGradeEarned = default, Option<string> id = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode2 = default, Option<string> courseCatalogURL2 = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCourseTranscriptsPartitions(courseAttemptResultDescriptor, courseCode, studentUniqueId, termDescriptor, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, courseCatalogURL, courseTitle, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, id, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode);

                FormatGetCourseTranscriptsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref courseAttemptResultDescriptor, ref courseCode, ref courseEducationOrganizationId, ref educationOrganizationId, ref schoolYear, ref studentUniqueId, ref termDescriptor, ref externalEducationOrganizationId, ref responsibleTeacherStaffUniqueId, ref courseRepeatCodeDescriptor, ref attemptedCreditTypeDescriptor, ref earnedCreditTypeDescriptor, ref whenTakenGradeLevelDescriptor, ref methodCreditEarnedDescriptor, ref alternativeCourseTitle, ref assigningOrganizationIdentificationCode, ref attemptedCreditConversion, ref attemptedCredits, ref courseCatalogURL, ref courseTitle, ref earnedCreditConversion, ref earnedCredits, ref externalEducationOrganizationNameOfInstitution, ref finalLetterGradeEarned, ref finalNumericGradeEarned, ref id, ref useSnapshot, ref courseIdentificationSystemDescriptor, ref assigningOrganizationIdentificationCode2, ref courseCatalogURL2, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courseTranscripts/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courseTranscripts/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (courseAttemptResultDescriptor.IsSet)
                        parseQueryStringLocalVar["courseAttemptResultDescriptor"] = ClientUtils.ParameterToString(courseAttemptResultDescriptor.Value);

                    if (courseCode.IsSet)
                        parseQueryStringLocalVar["courseCode"] = ClientUtils.ParameterToString(courseCode.Value);

                    if (courseEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["courseEducationOrganizationId"] = ClientUtils.ParameterToString(courseEducationOrganizationId.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (schoolYear.IsSet)
                        parseQueryStringLocalVar["schoolYear"] = ClientUtils.ParameterToString(schoolYear.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (termDescriptor.IsSet)
                        parseQueryStringLocalVar["termDescriptor"] = ClientUtils.ParameterToString(termDescriptor.Value);

                    if (externalEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["externalEducationOrganizationId"] = ClientUtils.ParameterToString(externalEducationOrganizationId.Value);

                    if (responsibleTeacherStaffUniqueId.IsSet)
                        parseQueryStringLocalVar["responsibleTeacherStaffUniqueId"] = ClientUtils.ParameterToString(responsibleTeacherStaffUniqueId.Value);

                    if (courseRepeatCodeDescriptor.IsSet)
                        parseQueryStringLocalVar["courseRepeatCodeDescriptor"] = ClientUtils.ParameterToString(courseRepeatCodeDescriptor.Value);

                    if (attemptedCreditTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["attemptedCreditTypeDescriptor"] = ClientUtils.ParameterToString(attemptedCreditTypeDescriptor.Value);

                    if (earnedCreditTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["earnedCreditTypeDescriptor"] = ClientUtils.ParameterToString(earnedCreditTypeDescriptor.Value);

                    if (whenTakenGradeLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["whenTakenGradeLevelDescriptor"] = ClientUtils.ParameterToString(whenTakenGradeLevelDescriptor.Value);

                    if (methodCreditEarnedDescriptor.IsSet)
                        parseQueryStringLocalVar["methodCreditEarnedDescriptor"] = ClientUtils.ParameterToString(methodCreditEarnedDescriptor.Value);

                    if (alternativeCourseTitle.IsSet)
                        parseQueryStringLocalVar["alternativeCourseTitle"] = ClientUtils.ParameterToString(alternativeCourseTitle.Value);

                    if (assigningOrganizationIdentificationCode.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode.Value);

                    if (attemptedCreditConversion.IsSet)
                        parseQueryStringLocalVar["attemptedCreditConversion"] = ClientUtils.ParameterToString(attemptedCreditConversion.Value);

                    if (attemptedCredits.IsSet)
                        parseQueryStringLocalVar["attemptedCredits"] = ClientUtils.ParameterToString(attemptedCredits.Value);

                    if (courseCatalogURL.IsSet)
                        parseQueryStringLocalVar["courseCatalogURL"] = ClientUtils.ParameterToString(courseCatalogURL.Value);

                    if (courseTitle.IsSet)
                        parseQueryStringLocalVar["courseTitle"] = ClientUtils.ParameterToString(courseTitle.Value);

                    if (earnedCreditConversion.IsSet)
                        parseQueryStringLocalVar["earnedCreditConversion"] = ClientUtils.ParameterToString(earnedCreditConversion.Value);

                    if (earnedCredits.IsSet)
                        parseQueryStringLocalVar["earnedCredits"] = ClientUtils.ParameterToString(earnedCredits.Value);

                    if (externalEducationOrganizationNameOfInstitution.IsSet)
                        parseQueryStringLocalVar["externalEducationOrganizationNameOfInstitution"] = ClientUtils.ParameterToString(externalEducationOrganizationNameOfInstitution.Value);

                    if (finalLetterGradeEarned.IsSet)
                        parseQueryStringLocalVar["finalLetterGradeEarned"] = ClientUtils.ParameterToString(finalLetterGradeEarned.Value);

                    if (finalNumericGradeEarned.IsSet)
                        parseQueryStringLocalVar["finalNumericGradeEarned"] = ClientUtils.ParameterToString(finalNumericGradeEarned.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (courseIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["courseIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(courseIdentificationSystemDescriptor.Value);

                    if (assigningOrganizationIdentificationCode2.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode2.Value);

                    if (courseCatalogURL2.IsSet)
                        parseQueryStringLocalVar["courseCatalogURL"] = ClientUtils.ParameterToString(courseCatalogURL2.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCourseTranscriptsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCourseTranscriptsPartitionsApiResponse>();

                        GetCourseTranscriptsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courseTranscripts/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCourseTranscriptsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, courseAttemptResultDescriptor, courseCode, courseEducationOrganizationId, educationOrganizationId, schoolYear, studentUniqueId, termDescriptor, externalEducationOrganizationId, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, attemptedCreditConversion, attemptedCredits, courseCatalogURL, courseTitle, earnedCreditConversion, earnedCredits, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, finalNumericGradeEarned, id, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode);

                        Events.ExecuteOnGetCourseTranscriptsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCourseTranscriptsPartitionsDefaultImplementation(e, "/ed-fi/courseTranscripts/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, courseAttemptResultDescriptor, courseCode, courseEducationOrganizationId, educationOrganizationId, schoolYear, studentUniqueId, termDescriptor, externalEducationOrganizationId, responsibleTeacherStaffUniqueId, courseRepeatCodeDescriptor, attemptedCreditTypeDescriptor, earnedCreditTypeDescriptor, whenTakenGradeLevelDescriptor, methodCreditEarnedDescriptor, alternativeCourseTitle, assigningOrganizationIdentificationCode, attemptedCreditConversion, attemptedCredits, courseCatalogURL, courseTitle, earnedCreditConversion, earnedCredits, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, finalNumericGradeEarned, id, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode2, courseCatalogURL2, identificationCode);
                Events.ExecuteOnErrorGetCourseTranscriptsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCourseTranscriptsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetCourseTranscriptsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetCourseTranscriptsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCourseTranscriptsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCourseTranscriptsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCourseTranscriptsPartitionsApiResponse(ILogger<GetCourseTranscriptsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesCourseTranscripts(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesCourseTranscriptsDefaultImplementation(IKeyChangesCourseTranscriptsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesCourseTranscripts(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesCourseTranscripts(ref bool suppressDefaultLog, IKeyChangesCourseTranscriptsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesCourseTranscriptsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesCourseTranscripts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesCourseTranscripts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesCourseTranscriptsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesCourseTranscriptsApiResponse?> KeyChangesCourseTranscriptsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesCourseTranscriptsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesCourseTranscriptsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesCourseTranscriptsApiResponse> KeyChangesCourseTranscriptsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesCourseTranscripts(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courseTranscripts/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courseTranscripts/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesCourseTranscriptsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesCourseTranscriptsApiResponse>();

                        KeyChangesCourseTranscriptsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courseTranscripts/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesCourseTranscriptsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesCourseTranscripts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesCourseTranscriptsDefaultImplementation(e, "/ed-fi/courseTranscripts/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesCourseTranscripts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesCourseTranscriptsApiResponse"/>
        /// </summary>
        public partial class KeyChangesCourseTranscriptsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesCourseTranscriptsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesCourseTranscriptsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesCourseTranscriptsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesCourseTranscriptsApiResponse(ILogger<KeyChangesCourseTranscriptsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiCourseTranscriptKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiCourseTranscriptKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiCourseTranscriptKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostCourseTranscript(EdFiCourseTranscript edFiCourseTranscript);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiCourseTranscript"></param>
        /// <returns></returns>
        private void ValidatePostCourseTranscript(EdFiCourseTranscript edFiCourseTranscript)
        {
            if (edFiCourseTranscript == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiCourseTranscript"></param>
        private void AfterPostCourseTranscriptDefaultImplementation(IPostCourseTranscriptApiResponse apiResponseLocalVar, EdFiCourseTranscript edFiCourseTranscript)
        {
            bool suppressDefaultLog = false;
            AfterPostCourseTranscript(ref suppressDefaultLog, apiResponseLocalVar, edFiCourseTranscript);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiCourseTranscript"></param>
        partial void AfterPostCourseTranscript(ref bool suppressDefaultLog, IPostCourseTranscriptApiResponse apiResponseLocalVar, EdFiCourseTranscript edFiCourseTranscript);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiCourseTranscript"></param>
        private void OnErrorPostCourseTranscriptDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiCourseTranscript edFiCourseTranscript)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostCourseTranscript(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiCourseTranscript);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiCourseTranscript"></param>
        partial void OnErrorPostCourseTranscript(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiCourseTranscript edFiCourseTranscript);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiCourseTranscript">The JSON representation of the \&quot;courseTranscript\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCourseTranscriptApiResponse"/>&gt;</returns>
        public async Task<IPostCourseTranscriptApiResponse?> PostCourseTranscriptOrDefaultAsync(EdFiCourseTranscript edFiCourseTranscript, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostCourseTranscriptAsync(edFiCourseTranscript, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiCourseTranscript">The JSON representation of the \&quot;courseTranscript\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCourseTranscriptApiResponse"/>&gt;</returns>
        public async Task<IPostCourseTranscriptApiResponse> PostCourseTranscriptAsync(EdFiCourseTranscript edFiCourseTranscript, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostCourseTranscript(edFiCourseTranscript);

                FormatPostCourseTranscript(edFiCourseTranscript);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courseTranscripts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courseTranscripts");

                    httpRequestMessageLocalVar.Content = (edFiCourseTranscript as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiCourseTranscript, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostCourseTranscriptApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostCourseTranscriptApiResponse>();

                        PostCourseTranscriptApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courseTranscripts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostCourseTranscriptDefaultImplementation(apiResponseLocalVar, edFiCourseTranscript);

                        Events.ExecuteOnPostCourseTranscript(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostCourseTranscriptDefaultImplementation(e, "/ed-fi/courseTranscripts", uriBuilderLocalVar.Path, edFiCourseTranscript);
                Events.ExecuteOnErrorPostCourseTranscript(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostCourseTranscriptApiResponse"/>
        /// </summary>
        public partial class PostCourseTranscriptApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostCourseTranscriptApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostCourseTranscriptApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostCourseTranscriptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostCourseTranscriptApiResponse(ILogger<PostCourseTranscriptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutCourseTranscript(ref string id, EdFiCourseTranscript edFiCourseTranscript, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiCourseTranscript"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutCourseTranscript(string id, EdFiCourseTranscript edFiCourseTranscript, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiCourseTranscript == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiCourseTranscript"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutCourseTranscriptDefaultImplementation(IPutCourseTranscriptApiResponse apiResponseLocalVar, string id, EdFiCourseTranscript edFiCourseTranscript, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutCourseTranscript(ref suppressDefaultLog, apiResponseLocalVar, id, edFiCourseTranscript, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiCourseTranscript"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutCourseTranscript(ref bool suppressDefaultLog, IPutCourseTranscriptApiResponse apiResponseLocalVar, string id, EdFiCourseTranscript edFiCourseTranscript, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiCourseTranscript"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutCourseTranscriptDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiCourseTranscript edFiCourseTranscript, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutCourseTranscript(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiCourseTranscript, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiCourseTranscript"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutCourseTranscript(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiCourseTranscript edFiCourseTranscript, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiCourseTranscript">The JSON representation of the \&quot;courseTranscript\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCourseTranscriptApiResponse"/>&gt;</returns>
        public async Task<IPutCourseTranscriptApiResponse?> PutCourseTranscriptOrDefaultAsync(string id, EdFiCourseTranscript edFiCourseTranscript, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutCourseTranscriptAsync(id, edFiCourseTranscript, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiCourseTranscript">The JSON representation of the \&quot;courseTranscript\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCourseTranscriptApiResponse"/>&gt;</returns>
        public async Task<IPutCourseTranscriptApiResponse> PutCourseTranscriptAsync(string id, EdFiCourseTranscript edFiCourseTranscript, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutCourseTranscript(id, edFiCourseTranscript, ifMatch);

                FormatPutCourseTranscript(ref id, edFiCourseTranscript, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courseTranscripts/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courseTranscripts/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiCourseTranscript as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiCourseTranscript, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutCourseTranscriptApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutCourseTranscriptApiResponse>();

                        PutCourseTranscriptApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courseTranscripts/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutCourseTranscriptDefaultImplementation(apiResponseLocalVar, id, edFiCourseTranscript, ifMatch);

                        Events.ExecuteOnPutCourseTranscript(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutCourseTranscriptDefaultImplementation(e, "/ed-fi/courseTranscripts/{id}", uriBuilderLocalVar.Path, id, edFiCourseTranscript, ifMatch);
                Events.ExecuteOnErrorPutCourseTranscript(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutCourseTranscriptApiResponse"/>
        /// </summary>
        public partial class PutCourseTranscriptApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutCourseTranscriptApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutCourseTranscriptApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutCourseTranscriptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutCourseTranscriptApiResponse(ILogger<PutCourseTranscriptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
