// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICoursesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CoursesApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCourseByIdApiResponse"/>&gt;</returns>
        Task<IDeleteCourseByIdApiResponse> DeleteCourseByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCourseByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteCourseByIdApiResponse?> DeleteCourseByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesCoursesApiResponse"/>&gt;</returns>
        Task<IDeletesCoursesApiResponse> DeletesCoursesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesCoursesApiResponse"/>?&gt;</returns>
        Task<IDeletesCoursesApiResponse?> DeletesCoursesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesApiResponse"/>&gt;</returns>
        Task<IGetCoursesApiResponse> GetCoursesAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> courseCode = default, Option<long> educationOrganizationId = default, Option<string> careerPathwayDescriptor = default, Option<string> courseDefinedByDescriptor = default, Option<string> courseGPAApplicabilityDescriptor = default, Option<string> minimumAvailableCreditTypeDescriptor = default, Option<string> maximumAvailableCreditTypeDescriptor = default, Option<string> courseDescription = default, Option<string> courseTitle = default, Option<DateOnly> dateCourseAdopted = default, Option<bool> highSchoolCourseRequirement = default, Option<string> id = default, Option<int> maxCompletionsForCredit = default, Option<double> maximumAvailableCreditConversion = default, Option<double> maximumAvailableCredits = default, Option<double> minimumAvailableCreditConversion = default, Option<double> minimumAvailableCredits = default, Option<int> numberOfParts = default, Option<int> timeRequiredForCompletion = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> courseCatalogURL = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesApiResponse"/>?&gt;</returns>
        Task<IGetCoursesApiResponse?> GetCoursesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> courseCode = default, Option<long> educationOrganizationId = default, Option<string> careerPathwayDescriptor = default, Option<string> courseDefinedByDescriptor = default, Option<string> courseGPAApplicabilityDescriptor = default, Option<string> minimumAvailableCreditTypeDescriptor = default, Option<string> maximumAvailableCreditTypeDescriptor = default, Option<string> courseDescription = default, Option<string> courseTitle = default, Option<DateOnly> dateCourseAdopted = default, Option<bool> highSchoolCourseRequirement = default, Option<string> id = default, Option<int> maxCompletionsForCredit = default, Option<double> maximumAvailableCreditConversion = default, Option<double> maximumAvailableCredits = default, Option<double> minimumAvailableCreditConversion = default, Option<double> minimumAvailableCredits = default, Option<int> numberOfParts = default, Option<int> timeRequiredForCompletion = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> courseCatalogURL = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesByIdApiResponse"/>&gt;</returns>
        Task<IGetCoursesByIdApiResponse> GetCoursesByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesByIdApiResponse"/>?&gt;</returns>
        Task<IGetCoursesByIdApiResponse?> GetCoursesByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesPartitionsApiResponse"/>&gt;</returns>
        Task<IGetCoursesPartitionsApiResponse> GetCoursesPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> courseCode = default, Option<long> educationOrganizationId = default, Option<string> careerPathwayDescriptor = default, Option<string> courseDefinedByDescriptor = default, Option<string> courseGPAApplicabilityDescriptor = default, Option<string> minimumAvailableCreditTypeDescriptor = default, Option<string> maximumAvailableCreditTypeDescriptor = default, Option<string> courseDescription = default, Option<string> courseTitle = default, Option<DateOnly> dateCourseAdopted = default, Option<bool> highSchoolCourseRequirement = default, Option<string> id = default, Option<int> maxCompletionsForCredit = default, Option<double> maximumAvailableCreditConversion = default, Option<double> maximumAvailableCredits = default, Option<double> minimumAvailableCreditConversion = default, Option<double> minimumAvailableCredits = default, Option<int> numberOfParts = default, Option<int> timeRequiredForCompletion = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> courseCatalogURL = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetCoursesPartitionsApiResponse?> GetCoursesPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> courseCode = default, Option<long> educationOrganizationId = default, Option<string> careerPathwayDescriptor = default, Option<string> courseDefinedByDescriptor = default, Option<string> courseGPAApplicabilityDescriptor = default, Option<string> minimumAvailableCreditTypeDescriptor = default, Option<string> maximumAvailableCreditTypeDescriptor = default, Option<string> courseDescription = default, Option<string> courseTitle = default, Option<DateOnly> dateCourseAdopted = default, Option<bool> highSchoolCourseRequirement = default, Option<string> id = default, Option<int> maxCompletionsForCredit = default, Option<double> maximumAvailableCreditConversion = default, Option<double> maximumAvailableCredits = default, Option<double> minimumAvailableCreditConversion = default, Option<double> minimumAvailableCredits = default, Option<int> numberOfParts = default, Option<int> timeRequiredForCompletion = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> courseCatalogURL = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesCoursesApiResponse"/>&gt;</returns>
        Task<IKeyChangesCoursesApiResponse> KeyChangesCoursesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesCoursesApiResponse"/>?&gt;</returns>
        Task<IKeyChangesCoursesApiResponse?> KeyChangesCoursesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiCourse">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCourseApiResponse"/>&gt;</returns>
        Task<IPostCourseApiResponse> PostCourseAsync(EdFiCourse edFiCourse, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiCourse">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCourseApiResponse"/>?&gt;</returns>
        Task<IPostCourseApiResponse?> PostCourseOrDefaultAsync(EdFiCourse edFiCourse, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiCourse">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCourseApiResponse"/>&gt;</returns>
        Task<IPutCourseApiResponse> PutCourseAsync(string id, EdFiCourse edFiCourse, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiCourse">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCourseApiResponse"/>?&gt;</returns>
        Task<IPutCourseApiResponse?> PutCourseOrDefaultAsync(string id, EdFiCourse edFiCourse, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteCourseByIdApiResponse"/>
    /// </summary>
    public interface IDeleteCourseByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesCoursesApiResponse"/>
    /// </summary>
    public interface IDeletesCoursesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiCourseDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetCoursesApiResponse"/>
    /// </summary>
    public interface IGetCoursesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiCourse>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetCoursesByIdApiResponse"/>
    /// </summary>
    public interface IGetCoursesByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiCourse?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetCoursesPartitionsApiResponse"/>
    /// </summary>
    public interface IGetCoursesPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesCoursesApiResponse"/>
    /// </summary>
    public interface IKeyChangesCoursesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiCourseKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostCourseApiResponse"/>
    /// </summary>
    public interface IPostCourseApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutCourseApiResponse"/>
    /// </summary>
    public interface IPutCourseApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CoursesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteCourseById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteCourseById;

        internal void ExecuteOnDeleteCourseById(CoursesApi.DeleteCourseByIdApiResponse apiResponse)
        {
            OnDeleteCourseById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteCourseById(Exception exception)
        {
            OnErrorDeleteCourseById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesCourses;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesCourses;

        internal void ExecuteOnDeletesCourses(CoursesApi.DeletesCoursesApiResponse apiResponse)
        {
            OnDeletesCourses?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesCourses(Exception exception)
        {
            OnErrorDeletesCourses?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCourses;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCourses;

        internal void ExecuteOnGetCourses(CoursesApi.GetCoursesApiResponse apiResponse)
        {
            OnGetCourses?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCourses(Exception exception)
        {
            OnErrorGetCourses?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCoursesById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCoursesById;

        internal void ExecuteOnGetCoursesById(CoursesApi.GetCoursesByIdApiResponse apiResponse)
        {
            OnGetCoursesById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCoursesById(Exception exception)
        {
            OnErrorGetCoursesById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCoursesPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCoursesPartitions;

        internal void ExecuteOnGetCoursesPartitions(CoursesApi.GetCoursesPartitionsApiResponse apiResponse)
        {
            OnGetCoursesPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCoursesPartitions(Exception exception)
        {
            OnErrorGetCoursesPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesCourses;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesCourses;

        internal void ExecuteOnKeyChangesCourses(CoursesApi.KeyChangesCoursesApiResponse apiResponse)
        {
            OnKeyChangesCourses?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesCourses(Exception exception)
        {
            OnErrorKeyChangesCourses?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostCourse;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostCourse;

        internal void ExecuteOnPostCourse(CoursesApi.PostCourseApiResponse apiResponse)
        {
            OnPostCourse?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostCourse(Exception exception)
        {
            OnErrorPostCourse?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutCourse;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutCourse;

        internal void ExecuteOnPutCourse(CoursesApi.PutCourseApiResponse apiResponse)
        {
            OnPutCourse?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutCourse(Exception exception)
        {
            OnErrorPutCourse?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CoursesApi : ICoursesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CoursesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CoursesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoursesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoursesApi(ILogger<CoursesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CoursesApiEvents coursesApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CoursesApi>();
            HttpClient = httpClient;
            Events = coursesApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteCourseById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteCourseById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteCourseByIdDefaultImplementation(IDeleteCourseByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteCourseById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteCourseById(ref bool suppressDefaultLog, IDeleteCourseByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteCourseByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteCourseById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteCourseById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCourseByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteCourseByIdApiResponse?> DeleteCourseByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteCourseByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCourseByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteCourseByIdApiResponse> DeleteCourseByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteCourseById(id, ifMatch);

                FormatDeleteCourseById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courses/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courses/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteCourseByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteCourseByIdApiResponse>();

                        DeleteCourseByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courses/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteCourseByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteCourseById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteCourseByIdDefaultImplementation(e, "/ed-fi/courses/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteCourseById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteCourseByIdApiResponse"/>
        /// </summary>
        public partial class DeleteCourseByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteCourseByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteCourseByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteCourseByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteCourseByIdApiResponse(ILogger<DeleteCourseByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesCourses(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesCoursesDefaultImplementation(IDeletesCoursesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesCourses(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesCourses(ref bool suppressDefaultLog, IDeletesCoursesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesCoursesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesCourses(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesCourses(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesCoursesApiResponse"/>&gt;</returns>
        public async Task<IDeletesCoursesApiResponse?> DeletesCoursesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesCoursesAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesCoursesApiResponse"/>&gt;</returns>
        public async Task<IDeletesCoursesApiResponse> DeletesCoursesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesCourses(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courses/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courses/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesCoursesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesCoursesApiResponse>();

                        DeletesCoursesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courses/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesCoursesDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesCourses(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesCoursesDefaultImplementation(e, "/ed-fi/courses/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesCourses(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesCoursesApiResponse"/>
        /// </summary>
        public partial class DeletesCoursesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesCoursesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesCoursesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesCoursesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesCoursesApiResponse(ILogger<DeletesCoursesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiCourseDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiCourseDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiCourseDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCourses(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> courseCode, ref Option<long> educationOrganizationId, ref Option<string> careerPathwayDescriptor, ref Option<string> courseDefinedByDescriptor, ref Option<string> courseGPAApplicabilityDescriptor, ref Option<string> minimumAvailableCreditTypeDescriptor, ref Option<string> maximumAvailableCreditTypeDescriptor, ref Option<string> courseDescription, ref Option<string> courseTitle, ref Option<DateOnly> dateCourseAdopted, ref Option<bool> highSchoolCourseRequirement, ref Option<string> id, ref Option<int> maxCompletionsForCredit, ref Option<double> maximumAvailableCreditConversion, ref Option<double> maximumAvailableCredits, ref Option<double> minimumAvailableCreditConversion, ref Option<double> minimumAvailableCredits, ref Option<int> numberOfParts, ref Option<int> timeRequiredForCompletion, ref Option<bool> useSnapshot, ref Option<string> courseIdentificationSystemDescriptor, ref Option<string> assigningOrganizationIdentificationCode, ref Option<string> courseCatalogURL, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="courseCode"></param>
        /// <param name="careerPathwayDescriptor"></param>
        /// <param name="courseDefinedByDescriptor"></param>
        /// <param name="courseGPAApplicabilityDescriptor"></param>
        /// <param name="minimumAvailableCreditTypeDescriptor"></param>
        /// <param name="maximumAvailableCreditTypeDescriptor"></param>
        /// <param name="courseDescription"></param>
        /// <param name="courseTitle"></param>
        /// <param name="id"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetCourses(Option<string> pageToken, Option<string> courseCode, Option<string> careerPathwayDescriptor, Option<string> courseDefinedByDescriptor, Option<string> courseGPAApplicabilityDescriptor, Option<string> minimumAvailableCreditTypeDescriptor, Option<string> maximumAvailableCreditTypeDescriptor, Option<string> courseDescription, Option<string> courseTitle, Option<string> id, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> identificationCode)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (courseCode.IsSet && courseCode.Value == null)
                throw new ArgumentNullException(nameof(courseCode));

            if (careerPathwayDescriptor.IsSet && careerPathwayDescriptor.Value == null)
                throw new ArgumentNullException(nameof(careerPathwayDescriptor));

            if (courseDefinedByDescriptor.IsSet && courseDefinedByDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseDefinedByDescriptor));

            if (courseGPAApplicabilityDescriptor.IsSet && courseGPAApplicabilityDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseGPAApplicabilityDescriptor));

            if (minimumAvailableCreditTypeDescriptor.IsSet && minimumAvailableCreditTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(minimumAvailableCreditTypeDescriptor));

            if (maximumAvailableCreditTypeDescriptor.IsSet && maximumAvailableCreditTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(maximumAvailableCreditTypeDescriptor));

            if (courseDescription.IsSet && courseDescription.Value == null)
                throw new ArgumentNullException(nameof(courseDescription));

            if (courseTitle.IsSet && courseTitle.Value == null)
                throw new ArgumentNullException(nameof(courseTitle));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (courseIdentificationSystemDescriptor.IsSet && courseIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseIdentificationSystemDescriptor));

            if (assigningOrganizationIdentificationCode.IsSet && assigningOrganizationIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode));

            if (courseCatalogURL.IsSet && courseCatalogURL.Value == null)
                throw new ArgumentNullException(nameof(courseCatalogURL));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="courseCode"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="careerPathwayDescriptor"></param>
        /// <param name="courseDefinedByDescriptor"></param>
        /// <param name="courseGPAApplicabilityDescriptor"></param>
        /// <param name="minimumAvailableCreditTypeDescriptor"></param>
        /// <param name="maximumAvailableCreditTypeDescriptor"></param>
        /// <param name="courseDescription"></param>
        /// <param name="courseTitle"></param>
        /// <param name="dateCourseAdopted"></param>
        /// <param name="highSchoolCourseRequirement"></param>
        /// <param name="id"></param>
        /// <param name="maxCompletionsForCredit"></param>
        /// <param name="maximumAvailableCreditConversion"></param>
        /// <param name="maximumAvailableCredits"></param>
        /// <param name="minimumAvailableCreditConversion"></param>
        /// <param name="minimumAvailableCredits"></param>
        /// <param name="numberOfParts"></param>
        /// <param name="timeRequiredForCompletion"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetCoursesDefaultImplementation(IGetCoursesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> courseCode, Option<long> educationOrganizationId, Option<string> careerPathwayDescriptor, Option<string> courseDefinedByDescriptor, Option<string> courseGPAApplicabilityDescriptor, Option<string> minimumAvailableCreditTypeDescriptor, Option<string> maximumAvailableCreditTypeDescriptor, Option<string> courseDescription, Option<string> courseTitle, Option<DateOnly> dateCourseAdopted, Option<bool> highSchoolCourseRequirement, Option<string> id, Option<int> maxCompletionsForCredit, Option<double> maximumAvailableCreditConversion, Option<double> maximumAvailableCredits, Option<double> minimumAvailableCreditConversion, Option<double> minimumAvailableCredits, Option<int> numberOfParts, Option<int> timeRequiredForCompletion, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetCourses(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, courseCode, educationOrganizationId, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="courseCode"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="careerPathwayDescriptor"></param>
        /// <param name="courseDefinedByDescriptor"></param>
        /// <param name="courseGPAApplicabilityDescriptor"></param>
        /// <param name="minimumAvailableCreditTypeDescriptor"></param>
        /// <param name="maximumAvailableCreditTypeDescriptor"></param>
        /// <param name="courseDescription"></param>
        /// <param name="courseTitle"></param>
        /// <param name="dateCourseAdopted"></param>
        /// <param name="highSchoolCourseRequirement"></param>
        /// <param name="id"></param>
        /// <param name="maxCompletionsForCredit"></param>
        /// <param name="maximumAvailableCreditConversion"></param>
        /// <param name="maximumAvailableCredits"></param>
        /// <param name="minimumAvailableCreditConversion"></param>
        /// <param name="minimumAvailableCredits"></param>
        /// <param name="numberOfParts"></param>
        /// <param name="timeRequiredForCompletion"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetCourses(ref bool suppressDefaultLog, IGetCoursesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> courseCode, Option<long> educationOrganizationId, Option<string> careerPathwayDescriptor, Option<string> courseDefinedByDescriptor, Option<string> courseGPAApplicabilityDescriptor, Option<string> minimumAvailableCreditTypeDescriptor, Option<string> maximumAvailableCreditTypeDescriptor, Option<string> courseDescription, Option<string> courseTitle, Option<DateOnly> dateCourseAdopted, Option<bool> highSchoolCourseRequirement, Option<string> id, Option<int> maxCompletionsForCredit, Option<double> maximumAvailableCreditConversion, Option<double> maximumAvailableCredits, Option<double> minimumAvailableCreditConversion, Option<double> minimumAvailableCredits, Option<int> numberOfParts, Option<int> timeRequiredForCompletion, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="courseCode"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="careerPathwayDescriptor"></param>
        /// <param name="courseDefinedByDescriptor"></param>
        /// <param name="courseGPAApplicabilityDescriptor"></param>
        /// <param name="minimumAvailableCreditTypeDescriptor"></param>
        /// <param name="maximumAvailableCreditTypeDescriptor"></param>
        /// <param name="courseDescription"></param>
        /// <param name="courseTitle"></param>
        /// <param name="dateCourseAdopted"></param>
        /// <param name="highSchoolCourseRequirement"></param>
        /// <param name="id"></param>
        /// <param name="maxCompletionsForCredit"></param>
        /// <param name="maximumAvailableCreditConversion"></param>
        /// <param name="maximumAvailableCredits"></param>
        /// <param name="minimumAvailableCreditConversion"></param>
        /// <param name="minimumAvailableCredits"></param>
        /// <param name="numberOfParts"></param>
        /// <param name="timeRequiredForCompletion"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetCoursesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> courseCode, Option<long> educationOrganizationId, Option<string> careerPathwayDescriptor, Option<string> courseDefinedByDescriptor, Option<string> courseGPAApplicabilityDescriptor, Option<string> minimumAvailableCreditTypeDescriptor, Option<string> maximumAvailableCreditTypeDescriptor, Option<string> courseDescription, Option<string> courseTitle, Option<DateOnly> dateCourseAdopted, Option<bool> highSchoolCourseRequirement, Option<string> id, Option<int> maxCompletionsForCredit, Option<double> maximumAvailableCreditConversion, Option<double> maximumAvailableCredits, Option<double> minimumAvailableCreditConversion, Option<double> minimumAvailableCredits, Option<int> numberOfParts, Option<int> timeRequiredForCompletion, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCourses(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, courseCode, educationOrganizationId, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="courseCode"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="careerPathwayDescriptor"></param>
        /// <param name="courseDefinedByDescriptor"></param>
        /// <param name="courseGPAApplicabilityDescriptor"></param>
        /// <param name="minimumAvailableCreditTypeDescriptor"></param>
        /// <param name="maximumAvailableCreditTypeDescriptor"></param>
        /// <param name="courseDescription"></param>
        /// <param name="courseTitle"></param>
        /// <param name="dateCourseAdopted"></param>
        /// <param name="highSchoolCourseRequirement"></param>
        /// <param name="id"></param>
        /// <param name="maxCompletionsForCredit"></param>
        /// <param name="maximumAvailableCreditConversion"></param>
        /// <param name="maximumAvailableCredits"></param>
        /// <param name="minimumAvailableCreditConversion"></param>
        /// <param name="minimumAvailableCredits"></param>
        /// <param name="numberOfParts"></param>
        /// <param name="timeRequiredForCompletion"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetCourses(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> courseCode, Option<long> educationOrganizationId, Option<string> careerPathwayDescriptor, Option<string> courseDefinedByDescriptor, Option<string> courseGPAApplicabilityDescriptor, Option<string> minimumAvailableCreditTypeDescriptor, Option<string> maximumAvailableCreditTypeDescriptor, Option<string> courseDescription, Option<string> courseTitle, Option<DateOnly> dateCourseAdopted, Option<bool> highSchoolCourseRequirement, Option<string> id, Option<int> maxCompletionsForCredit, Option<double> maximumAvailableCreditConversion, Option<double> maximumAvailableCredits, Option<double> minimumAvailableCreditConversion, Option<double> minimumAvailableCredits, Option<int> numberOfParts, Option<int> timeRequiredForCompletion, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> identificationCode);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesApiResponse"/>&gt;</returns>
        public async Task<IGetCoursesApiResponse?> GetCoursesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> courseCode = default, Option<long> educationOrganizationId = default, Option<string> careerPathwayDescriptor = default, Option<string> courseDefinedByDescriptor = default, Option<string> courseGPAApplicabilityDescriptor = default, Option<string> minimumAvailableCreditTypeDescriptor = default, Option<string> maximumAvailableCreditTypeDescriptor = default, Option<string> courseDescription = default, Option<string> courseTitle = default, Option<DateOnly> dateCourseAdopted = default, Option<bool> highSchoolCourseRequirement = default, Option<string> id = default, Option<int> maxCompletionsForCredit = default, Option<double> maximumAvailableCreditConversion = default, Option<double> maximumAvailableCredits = default, Option<double> minimumAvailableCreditConversion = default, Option<double> minimumAvailableCredits = default, Option<int> numberOfParts = default, Option<int> timeRequiredForCompletion = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> courseCatalogURL = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCoursesAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, courseCode, educationOrganizationId, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesApiResponse"/>&gt;</returns>
        public async Task<IGetCoursesApiResponse> GetCoursesAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> courseCode = default, Option<long> educationOrganizationId = default, Option<string> careerPathwayDescriptor = default, Option<string> courseDefinedByDescriptor = default, Option<string> courseGPAApplicabilityDescriptor = default, Option<string> minimumAvailableCreditTypeDescriptor = default, Option<string> maximumAvailableCreditTypeDescriptor = default, Option<string> courseDescription = default, Option<string> courseTitle = default, Option<DateOnly> dateCourseAdopted = default, Option<bool> highSchoolCourseRequirement = default, Option<string> id = default, Option<int> maxCompletionsForCredit = default, Option<double> maximumAvailableCreditConversion = default, Option<double> maximumAvailableCredits = default, Option<double> minimumAvailableCreditConversion = default, Option<double> minimumAvailableCredits = default, Option<int> numberOfParts = default, Option<int> timeRequiredForCompletion = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> courseCatalogURL = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCourses(pageToken, courseCode, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, id, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode);

                FormatGetCourses(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref courseCode, ref educationOrganizationId, ref careerPathwayDescriptor, ref courseDefinedByDescriptor, ref courseGPAApplicabilityDescriptor, ref minimumAvailableCreditTypeDescriptor, ref maximumAvailableCreditTypeDescriptor, ref courseDescription, ref courseTitle, ref dateCourseAdopted, ref highSchoolCourseRequirement, ref id, ref maxCompletionsForCredit, ref maximumAvailableCreditConversion, ref maximumAvailableCredits, ref minimumAvailableCreditConversion, ref minimumAvailableCredits, ref numberOfParts, ref timeRequiredForCompletion, ref useSnapshot, ref courseIdentificationSystemDescriptor, ref assigningOrganizationIdentificationCode, ref courseCatalogURL, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courses"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courses");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (courseCode.IsSet)
                        parseQueryStringLocalVar["courseCode"] = ClientUtils.ParameterToString(courseCode.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (careerPathwayDescriptor.IsSet)
                        parseQueryStringLocalVar["careerPathwayDescriptor"] = ClientUtils.ParameterToString(careerPathwayDescriptor.Value);

                    if (courseDefinedByDescriptor.IsSet)
                        parseQueryStringLocalVar["courseDefinedByDescriptor"] = ClientUtils.ParameterToString(courseDefinedByDescriptor.Value);

                    if (courseGPAApplicabilityDescriptor.IsSet)
                        parseQueryStringLocalVar["courseGPAApplicabilityDescriptor"] = ClientUtils.ParameterToString(courseGPAApplicabilityDescriptor.Value);

                    if (minimumAvailableCreditTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["minimumAvailableCreditTypeDescriptor"] = ClientUtils.ParameterToString(minimumAvailableCreditTypeDescriptor.Value);

                    if (maximumAvailableCreditTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["maximumAvailableCreditTypeDescriptor"] = ClientUtils.ParameterToString(maximumAvailableCreditTypeDescriptor.Value);

                    if (courseDescription.IsSet)
                        parseQueryStringLocalVar["courseDescription"] = ClientUtils.ParameterToString(courseDescription.Value);

                    if (courseTitle.IsSet)
                        parseQueryStringLocalVar["courseTitle"] = ClientUtils.ParameterToString(courseTitle.Value);

                    if (dateCourseAdopted.IsSet)
                        parseQueryStringLocalVar["dateCourseAdopted"] = ClientUtils.ParameterToString(dateCourseAdopted.Value);

                    if (highSchoolCourseRequirement.IsSet)
                        parseQueryStringLocalVar["highSchoolCourseRequirement"] = ClientUtils.ParameterToString(highSchoolCourseRequirement.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (maxCompletionsForCredit.IsSet)
                        parseQueryStringLocalVar["maxCompletionsForCredit"] = ClientUtils.ParameterToString(maxCompletionsForCredit.Value);

                    if (maximumAvailableCreditConversion.IsSet)
                        parseQueryStringLocalVar["maximumAvailableCreditConversion"] = ClientUtils.ParameterToString(maximumAvailableCreditConversion.Value);

                    if (maximumAvailableCredits.IsSet)
                        parseQueryStringLocalVar["maximumAvailableCredits"] = ClientUtils.ParameterToString(maximumAvailableCredits.Value);

                    if (minimumAvailableCreditConversion.IsSet)
                        parseQueryStringLocalVar["minimumAvailableCreditConversion"] = ClientUtils.ParameterToString(minimumAvailableCreditConversion.Value);

                    if (minimumAvailableCredits.IsSet)
                        parseQueryStringLocalVar["minimumAvailableCredits"] = ClientUtils.ParameterToString(minimumAvailableCredits.Value);

                    if (numberOfParts.IsSet)
                        parseQueryStringLocalVar["numberOfParts"] = ClientUtils.ParameterToString(numberOfParts.Value);

                    if (timeRequiredForCompletion.IsSet)
                        parseQueryStringLocalVar["timeRequiredForCompletion"] = ClientUtils.ParameterToString(timeRequiredForCompletion.Value);

                    if (courseIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["courseIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(courseIdentificationSystemDescriptor.Value);

                    if (assigningOrganizationIdentificationCode.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode.Value);

                    if (courseCatalogURL.IsSet)
                        parseQueryStringLocalVar["courseCatalogURL"] = ClientUtils.ParameterToString(courseCatalogURL.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCoursesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCoursesApiResponse>();

                        GetCoursesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courses", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCoursesDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, courseCode, educationOrganizationId, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode);

                        Events.ExecuteOnGetCourses(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCoursesDefaultImplementation(e, "/ed-fi/courses", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, courseCode, educationOrganizationId, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode);
                Events.ExecuteOnErrorGetCourses(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCoursesApiResponse"/>
        /// </summary>
        public partial class GetCoursesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetCoursesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCoursesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCoursesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCoursesApiResponse(ILogger<GetCoursesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiCourse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiCourse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiCourse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCoursesById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetCoursesById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetCoursesByIdDefaultImplementation(IGetCoursesByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetCoursesById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetCoursesById(ref bool suppressDefaultLog, IGetCoursesByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetCoursesByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCoursesById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetCoursesById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesByIdApiResponse"/>&gt;</returns>
        public async Task<IGetCoursesByIdApiResponse?> GetCoursesByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCoursesByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesByIdApiResponse"/>&gt;</returns>
        public async Task<IGetCoursesByIdApiResponse> GetCoursesByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCoursesById(id, ifNoneMatch);

                FormatGetCoursesById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courses/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courses/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCoursesByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCoursesByIdApiResponse>();

                        GetCoursesByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courses/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCoursesByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetCoursesById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCoursesByIdDefaultImplementation(e, "/ed-fi/courses/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetCoursesById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCoursesByIdApiResponse"/>
        /// </summary>
        public partial class GetCoursesByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetCoursesByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCoursesByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCoursesByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCoursesByIdApiResponse(ILogger<GetCoursesByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiCourse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiCourse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiCourse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCoursesPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> courseCode, ref Option<long> educationOrganizationId, ref Option<string> careerPathwayDescriptor, ref Option<string> courseDefinedByDescriptor, ref Option<string> courseGPAApplicabilityDescriptor, ref Option<string> minimumAvailableCreditTypeDescriptor, ref Option<string> maximumAvailableCreditTypeDescriptor, ref Option<string> courseDescription, ref Option<string> courseTitle, ref Option<DateOnly> dateCourseAdopted, ref Option<bool> highSchoolCourseRequirement, ref Option<string> id, ref Option<int> maxCompletionsForCredit, ref Option<double> maximumAvailableCreditConversion, ref Option<double> maximumAvailableCredits, ref Option<double> minimumAvailableCreditConversion, ref Option<double> minimumAvailableCredits, ref Option<int> numberOfParts, ref Option<int> timeRequiredForCompletion, ref Option<bool> useSnapshot, ref Option<string> courseIdentificationSystemDescriptor, ref Option<string> assigningOrganizationIdentificationCode, ref Option<string> courseCatalogURL, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="courseCode"></param>
        /// <param name="careerPathwayDescriptor"></param>
        /// <param name="courseDefinedByDescriptor"></param>
        /// <param name="courseGPAApplicabilityDescriptor"></param>
        /// <param name="minimumAvailableCreditTypeDescriptor"></param>
        /// <param name="maximumAvailableCreditTypeDescriptor"></param>
        /// <param name="courseDescription"></param>
        /// <param name="courseTitle"></param>
        /// <param name="id"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetCoursesPartitions(Option<string> courseCode, Option<string> careerPathwayDescriptor, Option<string> courseDefinedByDescriptor, Option<string> courseGPAApplicabilityDescriptor, Option<string> minimumAvailableCreditTypeDescriptor, Option<string> maximumAvailableCreditTypeDescriptor, Option<string> courseDescription, Option<string> courseTitle, Option<string> id, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> identificationCode)
        {
            if (courseCode.IsSet && courseCode.Value == null)
                throw new ArgumentNullException(nameof(courseCode));

            if (careerPathwayDescriptor.IsSet && careerPathwayDescriptor.Value == null)
                throw new ArgumentNullException(nameof(careerPathwayDescriptor));

            if (courseDefinedByDescriptor.IsSet && courseDefinedByDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseDefinedByDescriptor));

            if (courseGPAApplicabilityDescriptor.IsSet && courseGPAApplicabilityDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseGPAApplicabilityDescriptor));

            if (minimumAvailableCreditTypeDescriptor.IsSet && minimumAvailableCreditTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(minimumAvailableCreditTypeDescriptor));

            if (maximumAvailableCreditTypeDescriptor.IsSet && maximumAvailableCreditTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(maximumAvailableCreditTypeDescriptor));

            if (courseDescription.IsSet && courseDescription.Value == null)
                throw new ArgumentNullException(nameof(courseDescription));

            if (courseTitle.IsSet && courseTitle.Value == null)
                throw new ArgumentNullException(nameof(courseTitle));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (courseIdentificationSystemDescriptor.IsSet && courseIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseIdentificationSystemDescriptor));

            if (assigningOrganizationIdentificationCode.IsSet && assigningOrganizationIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode));

            if (courseCatalogURL.IsSet && courseCatalogURL.Value == null)
                throw new ArgumentNullException(nameof(courseCatalogURL));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="courseCode"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="careerPathwayDescriptor"></param>
        /// <param name="courseDefinedByDescriptor"></param>
        /// <param name="courseGPAApplicabilityDescriptor"></param>
        /// <param name="minimumAvailableCreditTypeDescriptor"></param>
        /// <param name="maximumAvailableCreditTypeDescriptor"></param>
        /// <param name="courseDescription"></param>
        /// <param name="courseTitle"></param>
        /// <param name="dateCourseAdopted"></param>
        /// <param name="highSchoolCourseRequirement"></param>
        /// <param name="id"></param>
        /// <param name="maxCompletionsForCredit"></param>
        /// <param name="maximumAvailableCreditConversion"></param>
        /// <param name="maximumAvailableCredits"></param>
        /// <param name="minimumAvailableCreditConversion"></param>
        /// <param name="minimumAvailableCredits"></param>
        /// <param name="numberOfParts"></param>
        /// <param name="timeRequiredForCompletion"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetCoursesPartitionsDefaultImplementation(IGetCoursesPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> courseCode, Option<long> educationOrganizationId, Option<string> careerPathwayDescriptor, Option<string> courseDefinedByDescriptor, Option<string> courseGPAApplicabilityDescriptor, Option<string> minimumAvailableCreditTypeDescriptor, Option<string> maximumAvailableCreditTypeDescriptor, Option<string> courseDescription, Option<string> courseTitle, Option<DateOnly> dateCourseAdopted, Option<bool> highSchoolCourseRequirement, Option<string> id, Option<int> maxCompletionsForCredit, Option<double> maximumAvailableCreditConversion, Option<double> maximumAvailableCredits, Option<double> minimumAvailableCreditConversion, Option<double> minimumAvailableCredits, Option<int> numberOfParts, Option<int> timeRequiredForCompletion, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetCoursesPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, courseCode, educationOrganizationId, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="courseCode"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="careerPathwayDescriptor"></param>
        /// <param name="courseDefinedByDescriptor"></param>
        /// <param name="courseGPAApplicabilityDescriptor"></param>
        /// <param name="minimumAvailableCreditTypeDescriptor"></param>
        /// <param name="maximumAvailableCreditTypeDescriptor"></param>
        /// <param name="courseDescription"></param>
        /// <param name="courseTitle"></param>
        /// <param name="dateCourseAdopted"></param>
        /// <param name="highSchoolCourseRequirement"></param>
        /// <param name="id"></param>
        /// <param name="maxCompletionsForCredit"></param>
        /// <param name="maximumAvailableCreditConversion"></param>
        /// <param name="maximumAvailableCredits"></param>
        /// <param name="minimumAvailableCreditConversion"></param>
        /// <param name="minimumAvailableCredits"></param>
        /// <param name="numberOfParts"></param>
        /// <param name="timeRequiredForCompletion"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetCoursesPartitions(ref bool suppressDefaultLog, IGetCoursesPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> courseCode, Option<long> educationOrganizationId, Option<string> careerPathwayDescriptor, Option<string> courseDefinedByDescriptor, Option<string> courseGPAApplicabilityDescriptor, Option<string> minimumAvailableCreditTypeDescriptor, Option<string> maximumAvailableCreditTypeDescriptor, Option<string> courseDescription, Option<string> courseTitle, Option<DateOnly> dateCourseAdopted, Option<bool> highSchoolCourseRequirement, Option<string> id, Option<int> maxCompletionsForCredit, Option<double> maximumAvailableCreditConversion, Option<double> maximumAvailableCredits, Option<double> minimumAvailableCreditConversion, Option<double> minimumAvailableCredits, Option<int> numberOfParts, Option<int> timeRequiredForCompletion, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="courseCode"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="careerPathwayDescriptor"></param>
        /// <param name="courseDefinedByDescriptor"></param>
        /// <param name="courseGPAApplicabilityDescriptor"></param>
        /// <param name="minimumAvailableCreditTypeDescriptor"></param>
        /// <param name="maximumAvailableCreditTypeDescriptor"></param>
        /// <param name="courseDescription"></param>
        /// <param name="courseTitle"></param>
        /// <param name="dateCourseAdopted"></param>
        /// <param name="highSchoolCourseRequirement"></param>
        /// <param name="id"></param>
        /// <param name="maxCompletionsForCredit"></param>
        /// <param name="maximumAvailableCreditConversion"></param>
        /// <param name="maximumAvailableCredits"></param>
        /// <param name="minimumAvailableCreditConversion"></param>
        /// <param name="minimumAvailableCredits"></param>
        /// <param name="numberOfParts"></param>
        /// <param name="timeRequiredForCompletion"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetCoursesPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> courseCode, Option<long> educationOrganizationId, Option<string> careerPathwayDescriptor, Option<string> courseDefinedByDescriptor, Option<string> courseGPAApplicabilityDescriptor, Option<string> minimumAvailableCreditTypeDescriptor, Option<string> maximumAvailableCreditTypeDescriptor, Option<string> courseDescription, Option<string> courseTitle, Option<DateOnly> dateCourseAdopted, Option<bool> highSchoolCourseRequirement, Option<string> id, Option<int> maxCompletionsForCredit, Option<double> maximumAvailableCreditConversion, Option<double> maximumAvailableCredits, Option<double> minimumAvailableCreditConversion, Option<double> minimumAvailableCredits, Option<int> numberOfParts, Option<int> timeRequiredForCompletion, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCoursesPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, courseCode, educationOrganizationId, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="courseCode"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="careerPathwayDescriptor"></param>
        /// <param name="courseDefinedByDescriptor"></param>
        /// <param name="courseGPAApplicabilityDescriptor"></param>
        /// <param name="minimumAvailableCreditTypeDescriptor"></param>
        /// <param name="maximumAvailableCreditTypeDescriptor"></param>
        /// <param name="courseDescription"></param>
        /// <param name="courseTitle"></param>
        /// <param name="dateCourseAdopted"></param>
        /// <param name="highSchoolCourseRequirement"></param>
        /// <param name="id"></param>
        /// <param name="maxCompletionsForCredit"></param>
        /// <param name="maximumAvailableCreditConversion"></param>
        /// <param name="maximumAvailableCredits"></param>
        /// <param name="minimumAvailableCreditConversion"></param>
        /// <param name="minimumAvailableCredits"></param>
        /// <param name="numberOfParts"></param>
        /// <param name="timeRequiredForCompletion"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="courseIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="courseCatalogURL"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetCoursesPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> courseCode, Option<long> educationOrganizationId, Option<string> careerPathwayDescriptor, Option<string> courseDefinedByDescriptor, Option<string> courseGPAApplicabilityDescriptor, Option<string> minimumAvailableCreditTypeDescriptor, Option<string> maximumAvailableCreditTypeDescriptor, Option<string> courseDescription, Option<string> courseTitle, Option<DateOnly> dateCourseAdopted, Option<bool> highSchoolCourseRequirement, Option<string> id, Option<int> maxCompletionsForCredit, Option<double> maximumAvailableCreditConversion, Option<double> maximumAvailableCredits, Option<double> minimumAvailableCreditConversion, Option<double> minimumAvailableCredits, Option<int> numberOfParts, Option<int> timeRequiredForCompletion, Option<bool> useSnapshot, Option<string> courseIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> courseCatalogURL, Option<string> identificationCode);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetCoursesPartitionsApiResponse?> GetCoursesPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> courseCode = default, Option<long> educationOrganizationId = default, Option<string> careerPathwayDescriptor = default, Option<string> courseDefinedByDescriptor = default, Option<string> courseGPAApplicabilityDescriptor = default, Option<string> minimumAvailableCreditTypeDescriptor = default, Option<string> maximumAvailableCreditTypeDescriptor = default, Option<string> courseDescription = default, Option<string> courseTitle = default, Option<DateOnly> dateCourseAdopted = default, Option<bool> highSchoolCourseRequirement = default, Option<string> id = default, Option<int> maxCompletionsForCredit = default, Option<double> maximumAvailableCreditConversion = default, Option<double> maximumAvailableCredits = default, Option<double> minimumAvailableCreditConversion = default, Option<double> minimumAvailableCredits = default, Option<int> numberOfParts = default, Option<int> timeRequiredForCompletion = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> courseCatalogURL = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCoursesPartitionsAsync(number, minChangeVersion, maxChangeVersion, courseCode, educationOrganizationId, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="courseIdentificationSystemDescriptor">A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the Identification Code. (optional)</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \&quot;/\&quot;. For example, consider the following SCED code-    subject &#x3D; 20 Math    course &#x3D; 272 Geometry    level &#x3D; G General    credits &#x3D; 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCoursesPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetCoursesPartitionsApiResponse> GetCoursesPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> courseCode = default, Option<long> educationOrganizationId = default, Option<string> careerPathwayDescriptor = default, Option<string> courseDefinedByDescriptor = default, Option<string> courseGPAApplicabilityDescriptor = default, Option<string> minimumAvailableCreditTypeDescriptor = default, Option<string> maximumAvailableCreditTypeDescriptor = default, Option<string> courseDescription = default, Option<string> courseTitle = default, Option<DateOnly> dateCourseAdopted = default, Option<bool> highSchoolCourseRequirement = default, Option<string> id = default, Option<int> maxCompletionsForCredit = default, Option<double> maximumAvailableCreditConversion = default, Option<double> maximumAvailableCredits = default, Option<double> minimumAvailableCreditConversion = default, Option<double> minimumAvailableCredits = default, Option<int> numberOfParts = default, Option<int> timeRequiredForCompletion = default, Option<bool> useSnapshot = default, Option<string> courseIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> courseCatalogURL = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCoursesPartitions(courseCode, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, id, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode);

                FormatGetCoursesPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref courseCode, ref educationOrganizationId, ref careerPathwayDescriptor, ref courseDefinedByDescriptor, ref courseGPAApplicabilityDescriptor, ref minimumAvailableCreditTypeDescriptor, ref maximumAvailableCreditTypeDescriptor, ref courseDescription, ref courseTitle, ref dateCourseAdopted, ref highSchoolCourseRequirement, ref id, ref maxCompletionsForCredit, ref maximumAvailableCreditConversion, ref maximumAvailableCredits, ref minimumAvailableCreditConversion, ref minimumAvailableCredits, ref numberOfParts, ref timeRequiredForCompletion, ref useSnapshot, ref courseIdentificationSystemDescriptor, ref assigningOrganizationIdentificationCode, ref courseCatalogURL, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courses/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courses/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (courseCode.IsSet)
                        parseQueryStringLocalVar["courseCode"] = ClientUtils.ParameterToString(courseCode.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (careerPathwayDescriptor.IsSet)
                        parseQueryStringLocalVar["careerPathwayDescriptor"] = ClientUtils.ParameterToString(careerPathwayDescriptor.Value);

                    if (courseDefinedByDescriptor.IsSet)
                        parseQueryStringLocalVar["courseDefinedByDescriptor"] = ClientUtils.ParameterToString(courseDefinedByDescriptor.Value);

                    if (courseGPAApplicabilityDescriptor.IsSet)
                        parseQueryStringLocalVar["courseGPAApplicabilityDescriptor"] = ClientUtils.ParameterToString(courseGPAApplicabilityDescriptor.Value);

                    if (minimumAvailableCreditTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["minimumAvailableCreditTypeDescriptor"] = ClientUtils.ParameterToString(minimumAvailableCreditTypeDescriptor.Value);

                    if (maximumAvailableCreditTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["maximumAvailableCreditTypeDescriptor"] = ClientUtils.ParameterToString(maximumAvailableCreditTypeDescriptor.Value);

                    if (courseDescription.IsSet)
                        parseQueryStringLocalVar["courseDescription"] = ClientUtils.ParameterToString(courseDescription.Value);

                    if (courseTitle.IsSet)
                        parseQueryStringLocalVar["courseTitle"] = ClientUtils.ParameterToString(courseTitle.Value);

                    if (dateCourseAdopted.IsSet)
                        parseQueryStringLocalVar["dateCourseAdopted"] = ClientUtils.ParameterToString(dateCourseAdopted.Value);

                    if (highSchoolCourseRequirement.IsSet)
                        parseQueryStringLocalVar["highSchoolCourseRequirement"] = ClientUtils.ParameterToString(highSchoolCourseRequirement.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (maxCompletionsForCredit.IsSet)
                        parseQueryStringLocalVar["maxCompletionsForCredit"] = ClientUtils.ParameterToString(maxCompletionsForCredit.Value);

                    if (maximumAvailableCreditConversion.IsSet)
                        parseQueryStringLocalVar["maximumAvailableCreditConversion"] = ClientUtils.ParameterToString(maximumAvailableCreditConversion.Value);

                    if (maximumAvailableCredits.IsSet)
                        parseQueryStringLocalVar["maximumAvailableCredits"] = ClientUtils.ParameterToString(maximumAvailableCredits.Value);

                    if (minimumAvailableCreditConversion.IsSet)
                        parseQueryStringLocalVar["minimumAvailableCreditConversion"] = ClientUtils.ParameterToString(minimumAvailableCreditConversion.Value);

                    if (minimumAvailableCredits.IsSet)
                        parseQueryStringLocalVar["minimumAvailableCredits"] = ClientUtils.ParameterToString(minimumAvailableCredits.Value);

                    if (numberOfParts.IsSet)
                        parseQueryStringLocalVar["numberOfParts"] = ClientUtils.ParameterToString(numberOfParts.Value);

                    if (timeRequiredForCompletion.IsSet)
                        parseQueryStringLocalVar["timeRequiredForCompletion"] = ClientUtils.ParameterToString(timeRequiredForCompletion.Value);

                    if (courseIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["courseIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(courseIdentificationSystemDescriptor.Value);

                    if (assigningOrganizationIdentificationCode.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode.Value);

                    if (courseCatalogURL.IsSet)
                        parseQueryStringLocalVar["courseCatalogURL"] = ClientUtils.ParameterToString(courseCatalogURL.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCoursesPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCoursesPartitionsApiResponse>();

                        GetCoursesPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courses/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCoursesPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, courseCode, educationOrganizationId, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode);

                        Events.ExecuteOnGetCoursesPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCoursesPartitionsDefaultImplementation(e, "/ed-fi/courses/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, courseCode, educationOrganizationId, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, useSnapshot, courseIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, courseCatalogURL, identificationCode);
                Events.ExecuteOnErrorGetCoursesPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCoursesPartitionsApiResponse"/>
        /// </summary>
        public partial class GetCoursesPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetCoursesPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCoursesPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCoursesPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCoursesPartitionsApiResponse(ILogger<GetCoursesPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesCourses(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesCoursesDefaultImplementation(IKeyChangesCoursesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesCourses(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesCourses(ref bool suppressDefaultLog, IKeyChangesCoursesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesCoursesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesCourses(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesCourses(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesCoursesApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesCoursesApiResponse?> KeyChangesCoursesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesCoursesAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesCoursesApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesCoursesApiResponse> KeyChangesCoursesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesCourses(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courses/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courses/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesCoursesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesCoursesApiResponse>();

                        KeyChangesCoursesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courses/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesCoursesDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesCourses(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesCoursesDefaultImplementation(e, "/ed-fi/courses/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesCourses(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesCoursesApiResponse"/>
        /// </summary>
        public partial class KeyChangesCoursesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesCoursesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesCoursesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesCoursesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesCoursesApiResponse(ILogger<KeyChangesCoursesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiCourseKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiCourseKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiCourseKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostCourse(EdFiCourse edFiCourse);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiCourse"></param>
        /// <returns></returns>
        private void ValidatePostCourse(EdFiCourse edFiCourse)
        {
            if (edFiCourse == null)
                throw new ArgumentNullException(nameof(edFiCourse));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiCourse"></param>
        private void AfterPostCourseDefaultImplementation(IPostCourseApiResponse apiResponseLocalVar, EdFiCourse edFiCourse)
        {
            bool suppressDefaultLog = false;
            AfterPostCourse(ref suppressDefaultLog, apiResponseLocalVar, edFiCourse);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiCourse"></param>
        partial void AfterPostCourse(ref bool suppressDefaultLog, IPostCourseApiResponse apiResponseLocalVar, EdFiCourse edFiCourse);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiCourse"></param>
        private void OnErrorPostCourseDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiCourse edFiCourse)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostCourse(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiCourse);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiCourse"></param>
        partial void OnErrorPostCourse(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiCourse edFiCourse);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiCourse">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCourseApiResponse"/>&gt;</returns>
        public async Task<IPostCourseApiResponse?> PostCourseOrDefaultAsync(EdFiCourse edFiCourse, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostCourseAsync(edFiCourse, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiCourse">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCourseApiResponse"/>&gt;</returns>
        public async Task<IPostCourseApiResponse> PostCourseAsync(EdFiCourse edFiCourse, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostCourse(edFiCourse);

                FormatPostCourse(edFiCourse);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courses"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courses");

                    httpRequestMessageLocalVar.Content = (edFiCourse as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiCourse, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostCourseApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostCourseApiResponse>();

                        PostCourseApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courses", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostCourseDefaultImplementation(apiResponseLocalVar, edFiCourse);

                        Events.ExecuteOnPostCourse(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostCourseDefaultImplementation(e, "/ed-fi/courses", uriBuilderLocalVar.Path, edFiCourse);
                Events.ExecuteOnErrorPostCourse(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostCourseApiResponse"/>
        /// </summary>
        public partial class PostCourseApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostCourseApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostCourseApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostCourseApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostCourseApiResponse(ILogger<PostCourseApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutCourse(ref string id, EdFiCourse edFiCourse, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiCourse"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutCourse(string id, EdFiCourse edFiCourse, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiCourse == null)
                throw new ArgumentNullException(nameof(edFiCourse));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiCourse"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutCourseDefaultImplementation(IPutCourseApiResponse apiResponseLocalVar, string id, EdFiCourse edFiCourse, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutCourse(ref suppressDefaultLog, apiResponseLocalVar, id, edFiCourse, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiCourse"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutCourse(ref bool suppressDefaultLog, IPutCourseApiResponse apiResponseLocalVar, string id, EdFiCourse edFiCourse, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiCourse"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutCourseDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiCourse edFiCourse, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutCourse(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiCourse, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiCourse"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutCourse(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiCourse edFiCourse, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiCourse">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCourseApiResponse"/>&gt;</returns>
        public async Task<IPutCourseApiResponse?> PutCourseOrDefaultAsync(string id, EdFiCourse edFiCourse, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutCourseAsync(id, edFiCourse, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiCourse">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCourseApiResponse"/>&gt;</returns>
        public async Task<IPutCourseApiResponse> PutCourseAsync(string id, EdFiCourse edFiCourse, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutCourse(id, edFiCourse, ifMatch);

                FormatPutCourse(ref id, edFiCourse, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/courses/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/courses/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiCourse as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiCourse, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutCourseApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutCourseApiResponse>();

                        PutCourseApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/courses/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutCourseDefaultImplementation(apiResponseLocalVar, id, edFiCourse, ifMatch);

                        Events.ExecuteOnPutCourse(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutCourseDefaultImplementation(e, "/ed-fi/courses/{id}", uriBuilderLocalVar.Path, id, edFiCourse, ifMatch);
                Events.ExecuteOnErrorPutCourse(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutCourseApiResponse"/>
        /// </summary>
        public partial class PutCourseApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutCourseApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutCourseApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutCourseApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutCourseApiResponse(ILogger<PutCourseApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
