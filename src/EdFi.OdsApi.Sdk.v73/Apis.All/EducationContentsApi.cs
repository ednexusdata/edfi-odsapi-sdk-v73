// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEducationContentsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EducationContentsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEducationContentByIdApiResponse"/>&gt;</returns>
        Task<IDeleteEducationContentByIdApiResponse> DeleteEducationContentByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEducationContentByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteEducationContentByIdApiResponse?> DeleteEducationContentByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesEducationContentsApiResponse"/>&gt;</returns>
        Task<IDeletesEducationContentsApiResponse> DeletesEducationContentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesEducationContentsApiResponse"/>?&gt;</returns>
        Task<IDeletesEducationContentsApiResponse?> DeletesEducationContentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="contentIdentifier">A unique identifier for the education content. (optional)</param>
        /// <param name="learningStandardId">The identifier for the specific learning standard (e.g., 111.15.3.1.A). (optional)</param>
        /// <param name="contentClassDescriptor">The predominate type or kind characterizing the learning resource. (optional)</param>
        /// <param name="costRateDescriptor">The rate by which the cost applies. (optional)</param>
        /// <param name="interactivityStyleDescriptor">The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed. (optional)</param>
        /// <param name="additionalAuthorsIndicator">Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \&quot;et al\&quot;. (optional)</param>
        /// <param name="cost">An amount that has to be paid or spent to buy or obtain the education content. (optional)</param>
        /// <param name="description">An extended written representation of the education content. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="learningResourceMetadataURI">The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item. (optional)</param>
        /// <param name="varNamespace">Namespace for the education content. (optional)</param>
        /// <param name="publicationDate">The date on which this content was first published. (optional)</param>
        /// <param name="publicationYear">The year at which this content was first published. (optional)</param>
        /// <param name="publisher">The organization credited with publishing the resource. (optional)</param>
        /// <param name="shortDescription">A short description or name of the entity. (optional)</param>
        /// <param name="timeRequired">Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes. (optional)</param>
        /// <param name="useRightsURL">The URL where the owner specifies permissions for using the resource. (optional)</param>
        /// <param name="version">The version identifier for the content. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsApiResponse"/>&gt;</returns>
        Task<IGetEducationContentsApiResponse> GetEducationContentsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> contentIdentifier = default, Option<string> learningStandardId = default, Option<string> contentClassDescriptor = default, Option<string> costRateDescriptor = default, Option<string> interactivityStyleDescriptor = default, Option<bool> additionalAuthorsIndicator = default, Option<double> cost = default, Option<string> description = default, Option<string> id = default, Option<string> learningResourceMetadataURI = default, Option<string> varNamespace = default, Option<DateOnly> publicationDate = default, Option<int> publicationYear = default, Option<string> publisher = default, Option<string> shortDescription = default, Option<string> timeRequired = default, Option<string> useRightsURL = default, Option<string> version = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="contentIdentifier">A unique identifier for the education content. (optional)</param>
        /// <param name="learningStandardId">The identifier for the specific learning standard (e.g., 111.15.3.1.A). (optional)</param>
        /// <param name="contentClassDescriptor">The predominate type or kind characterizing the learning resource. (optional)</param>
        /// <param name="costRateDescriptor">The rate by which the cost applies. (optional)</param>
        /// <param name="interactivityStyleDescriptor">The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed. (optional)</param>
        /// <param name="additionalAuthorsIndicator">Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \&quot;et al\&quot;. (optional)</param>
        /// <param name="cost">An amount that has to be paid or spent to buy or obtain the education content. (optional)</param>
        /// <param name="description">An extended written representation of the education content. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="learningResourceMetadataURI">The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item. (optional)</param>
        /// <param name="varNamespace">Namespace for the education content. (optional)</param>
        /// <param name="publicationDate">The date on which this content was first published. (optional)</param>
        /// <param name="publicationYear">The year at which this content was first published. (optional)</param>
        /// <param name="publisher">The organization credited with publishing the resource. (optional)</param>
        /// <param name="shortDescription">A short description or name of the entity. (optional)</param>
        /// <param name="timeRequired">Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes. (optional)</param>
        /// <param name="useRightsURL">The URL where the owner specifies permissions for using the resource. (optional)</param>
        /// <param name="version">The version identifier for the content. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsApiResponse"/>?&gt;</returns>
        Task<IGetEducationContentsApiResponse?> GetEducationContentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> contentIdentifier = default, Option<string> learningStandardId = default, Option<string> contentClassDescriptor = default, Option<string> costRateDescriptor = default, Option<string> interactivityStyleDescriptor = default, Option<bool> additionalAuthorsIndicator = default, Option<double> cost = default, Option<string> description = default, Option<string> id = default, Option<string> learningResourceMetadataURI = default, Option<string> varNamespace = default, Option<DateOnly> publicationDate = default, Option<int> publicationYear = default, Option<string> publisher = default, Option<string> shortDescription = default, Option<string> timeRequired = default, Option<string> useRightsURL = default, Option<string> version = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsByIdApiResponse"/>&gt;</returns>
        Task<IGetEducationContentsByIdApiResponse> GetEducationContentsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsByIdApiResponse"/>?&gt;</returns>
        Task<IGetEducationContentsByIdApiResponse?> GetEducationContentsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="contentIdentifier">A unique identifier for the education content. (optional)</param>
        /// <param name="learningStandardId">The identifier for the specific learning standard (e.g., 111.15.3.1.A). (optional)</param>
        /// <param name="contentClassDescriptor">The predominate type or kind characterizing the learning resource. (optional)</param>
        /// <param name="costRateDescriptor">The rate by which the cost applies. (optional)</param>
        /// <param name="interactivityStyleDescriptor">The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed. (optional)</param>
        /// <param name="additionalAuthorsIndicator">Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \&quot;et al\&quot;. (optional)</param>
        /// <param name="cost">An amount that has to be paid or spent to buy or obtain the education content. (optional)</param>
        /// <param name="description">An extended written representation of the education content. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="learningResourceMetadataURI">The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item. (optional)</param>
        /// <param name="varNamespace">Namespace for the education content. (optional)</param>
        /// <param name="publicationDate">The date on which this content was first published. (optional)</param>
        /// <param name="publicationYear">The year at which this content was first published. (optional)</param>
        /// <param name="publisher">The organization credited with publishing the resource. (optional)</param>
        /// <param name="shortDescription">A short description or name of the entity. (optional)</param>
        /// <param name="timeRequired">Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes. (optional)</param>
        /// <param name="useRightsURL">The URL where the owner specifies permissions for using the resource. (optional)</param>
        /// <param name="version">The version identifier for the content. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetEducationContentsPartitionsApiResponse> GetEducationContentsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> contentIdentifier = default, Option<string> learningStandardId = default, Option<string> contentClassDescriptor = default, Option<string> costRateDescriptor = default, Option<string> interactivityStyleDescriptor = default, Option<bool> additionalAuthorsIndicator = default, Option<double> cost = default, Option<string> description = default, Option<string> id = default, Option<string> learningResourceMetadataURI = default, Option<string> varNamespace = default, Option<DateOnly> publicationDate = default, Option<int> publicationYear = default, Option<string> publisher = default, Option<string> shortDescription = default, Option<string> timeRequired = default, Option<string> useRightsURL = default, Option<string> version = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="contentIdentifier">A unique identifier for the education content. (optional)</param>
        /// <param name="learningStandardId">The identifier for the specific learning standard (e.g., 111.15.3.1.A). (optional)</param>
        /// <param name="contentClassDescriptor">The predominate type or kind characterizing the learning resource. (optional)</param>
        /// <param name="costRateDescriptor">The rate by which the cost applies. (optional)</param>
        /// <param name="interactivityStyleDescriptor">The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed. (optional)</param>
        /// <param name="additionalAuthorsIndicator">Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \&quot;et al\&quot;. (optional)</param>
        /// <param name="cost">An amount that has to be paid or spent to buy or obtain the education content. (optional)</param>
        /// <param name="description">An extended written representation of the education content. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="learningResourceMetadataURI">The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item. (optional)</param>
        /// <param name="varNamespace">Namespace for the education content. (optional)</param>
        /// <param name="publicationDate">The date on which this content was first published. (optional)</param>
        /// <param name="publicationYear">The year at which this content was first published. (optional)</param>
        /// <param name="publisher">The organization credited with publishing the resource. (optional)</param>
        /// <param name="shortDescription">A short description or name of the entity. (optional)</param>
        /// <param name="timeRequired">Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes. (optional)</param>
        /// <param name="useRightsURL">The URL where the owner specifies permissions for using the resource. (optional)</param>
        /// <param name="version">The version identifier for the content. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetEducationContentsPartitionsApiResponse?> GetEducationContentsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> contentIdentifier = default, Option<string> learningStandardId = default, Option<string> contentClassDescriptor = default, Option<string> costRateDescriptor = default, Option<string> interactivityStyleDescriptor = default, Option<bool> additionalAuthorsIndicator = default, Option<double> cost = default, Option<string> description = default, Option<string> id = default, Option<string> learningResourceMetadataURI = default, Option<string> varNamespace = default, Option<DateOnly> publicationDate = default, Option<int> publicationYear = default, Option<string> publisher = default, Option<string> shortDescription = default, Option<string> timeRequired = default, Option<string> useRightsURL = default, Option<string> version = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesEducationContentsApiResponse"/>&gt;</returns>
        Task<IKeyChangesEducationContentsApiResponse> KeyChangesEducationContentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesEducationContentsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesEducationContentsApiResponse?> KeyChangesEducationContentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiEducationContent">The JSON representation of the \&quot;educationContent\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostEducationContentApiResponse"/>&gt;</returns>
        Task<IPostEducationContentApiResponse> PostEducationContentAsync(EdFiEducationContent edFiEducationContent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiEducationContent">The JSON representation of the \&quot;educationContent\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostEducationContentApiResponse"/>?&gt;</returns>
        Task<IPostEducationContentApiResponse?> PostEducationContentOrDefaultAsync(EdFiEducationContent edFiEducationContent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiEducationContent">The JSON representation of the \&quot;educationContent\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutEducationContentApiResponse"/>&gt;</returns>
        Task<IPutEducationContentApiResponse> PutEducationContentAsync(string id, EdFiEducationContent edFiEducationContent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiEducationContent">The JSON representation of the \&quot;educationContent\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutEducationContentApiResponse"/>?&gt;</returns>
        Task<IPutEducationContentApiResponse?> PutEducationContentOrDefaultAsync(string id, EdFiEducationContent edFiEducationContent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteEducationContentByIdApiResponse"/>
    /// </summary>
    public interface IDeleteEducationContentByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesEducationContentsApiResponse"/>
    /// </summary>
    public interface IDeletesEducationContentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiEducationContentDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetEducationContentsApiResponse"/>
    /// </summary>
    public interface IGetEducationContentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiEducationContent>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetEducationContentsByIdApiResponse"/>
    /// </summary>
    public interface IGetEducationContentsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiEducationContent?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetEducationContentsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetEducationContentsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesEducationContentsApiResponse"/>
    /// </summary>
    public interface IKeyChangesEducationContentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiEducationContentKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostEducationContentApiResponse"/>
    /// </summary>
    public interface IPostEducationContentApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutEducationContentApiResponse"/>
    /// </summary>
    public interface IPutEducationContentApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EducationContentsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteEducationContentById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteEducationContentById;

        internal void ExecuteOnDeleteEducationContentById(EducationContentsApi.DeleteEducationContentByIdApiResponse apiResponse)
        {
            OnDeleteEducationContentById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteEducationContentById(Exception exception)
        {
            OnErrorDeleteEducationContentById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesEducationContents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesEducationContents;

        internal void ExecuteOnDeletesEducationContents(EducationContentsApi.DeletesEducationContentsApiResponse apiResponse)
        {
            OnDeletesEducationContents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesEducationContents(Exception exception)
        {
            OnErrorDeletesEducationContents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEducationContents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEducationContents;

        internal void ExecuteOnGetEducationContents(EducationContentsApi.GetEducationContentsApiResponse apiResponse)
        {
            OnGetEducationContents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEducationContents(Exception exception)
        {
            OnErrorGetEducationContents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEducationContentsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEducationContentsById;

        internal void ExecuteOnGetEducationContentsById(EducationContentsApi.GetEducationContentsByIdApiResponse apiResponse)
        {
            OnGetEducationContentsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEducationContentsById(Exception exception)
        {
            OnErrorGetEducationContentsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEducationContentsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEducationContentsPartitions;

        internal void ExecuteOnGetEducationContentsPartitions(EducationContentsApi.GetEducationContentsPartitionsApiResponse apiResponse)
        {
            OnGetEducationContentsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEducationContentsPartitions(Exception exception)
        {
            OnErrorGetEducationContentsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesEducationContents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesEducationContents;

        internal void ExecuteOnKeyChangesEducationContents(EducationContentsApi.KeyChangesEducationContentsApiResponse apiResponse)
        {
            OnKeyChangesEducationContents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesEducationContents(Exception exception)
        {
            OnErrorKeyChangesEducationContents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostEducationContent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostEducationContent;

        internal void ExecuteOnPostEducationContent(EducationContentsApi.PostEducationContentApiResponse apiResponse)
        {
            OnPostEducationContent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostEducationContent(Exception exception)
        {
            OnErrorPostEducationContent?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutEducationContent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutEducationContent;

        internal void ExecuteOnPutEducationContent(EducationContentsApi.PutEducationContentApiResponse apiResponse)
        {
            OnPutEducationContent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutEducationContent(Exception exception)
        {
            OnErrorPutEducationContent?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EducationContentsApi : IEducationContentsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EducationContentsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EducationContentsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EducationContentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EducationContentsApi(ILogger<EducationContentsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EducationContentsApiEvents educationContentsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EducationContentsApi>();
            HttpClient = httpClient;
            Events = educationContentsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteEducationContentById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteEducationContentById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteEducationContentByIdDefaultImplementation(IDeleteEducationContentByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteEducationContentById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteEducationContentById(ref bool suppressDefaultLog, IDeleteEducationContentByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteEducationContentByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteEducationContentById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteEducationContentById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEducationContentByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteEducationContentByIdApiResponse?> DeleteEducationContentByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteEducationContentByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEducationContentByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteEducationContentByIdApiResponse> DeleteEducationContentByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteEducationContentById(id, ifMatch);

                FormatDeleteEducationContentById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/educationContents/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/educationContents/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteEducationContentByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteEducationContentByIdApiResponse>();

                        DeleteEducationContentByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/educationContents/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteEducationContentByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteEducationContentById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteEducationContentByIdDefaultImplementation(e, "/ed-fi/educationContents/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteEducationContentById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteEducationContentByIdApiResponse"/>
        /// </summary>
        public partial class DeleteEducationContentByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteEducationContentByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteEducationContentByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteEducationContentByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteEducationContentByIdApiResponse(ILogger<DeleteEducationContentByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesEducationContents(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesEducationContentsDefaultImplementation(IDeletesEducationContentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesEducationContents(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesEducationContents(ref bool suppressDefaultLog, IDeletesEducationContentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesEducationContentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesEducationContents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesEducationContents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesEducationContentsApiResponse"/>&gt;</returns>
        public async Task<IDeletesEducationContentsApiResponse?> DeletesEducationContentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesEducationContentsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesEducationContentsApiResponse"/>&gt;</returns>
        public async Task<IDeletesEducationContentsApiResponse> DeletesEducationContentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesEducationContents(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/educationContents/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/educationContents/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesEducationContentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesEducationContentsApiResponse>();

                        DeletesEducationContentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/educationContents/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesEducationContentsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesEducationContents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesEducationContentsDefaultImplementation(e, "/ed-fi/educationContents/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesEducationContents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesEducationContentsApiResponse"/>
        /// </summary>
        public partial class DeletesEducationContentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesEducationContentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesEducationContentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesEducationContentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesEducationContentsApiResponse(ILogger<DeletesEducationContentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiEducationContentDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiEducationContentDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiEducationContentDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEducationContents(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> contentIdentifier, ref Option<string> learningStandardId, ref Option<string> contentClassDescriptor, ref Option<string> costRateDescriptor, ref Option<string> interactivityStyleDescriptor, ref Option<bool> additionalAuthorsIndicator, ref Option<double> cost, ref Option<string> description, ref Option<string> id, ref Option<string> learningResourceMetadataURI, ref Option<string> varNamespace, ref Option<DateOnly> publicationDate, ref Option<int> publicationYear, ref Option<string> publisher, ref Option<string> shortDescription, ref Option<string> timeRequired, ref Option<string> useRightsURL, ref Option<string> version, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="contentIdentifier"></param>
        /// <param name="learningStandardId"></param>
        /// <param name="contentClassDescriptor"></param>
        /// <param name="costRateDescriptor"></param>
        /// <param name="interactivityStyleDescriptor"></param>
        /// <param name="description"></param>
        /// <param name="id"></param>
        /// <param name="learningResourceMetadataURI"></param>
        /// <param name="varNamespace"></param>
        /// <param name="publisher"></param>
        /// <param name="shortDescription"></param>
        /// <param name="timeRequired"></param>
        /// <param name="useRightsURL"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        private void ValidateGetEducationContents(Option<string> pageToken, Option<string> contentIdentifier, Option<string> learningStandardId, Option<string> contentClassDescriptor, Option<string> costRateDescriptor, Option<string> interactivityStyleDescriptor, Option<string> description, Option<string> id, Option<string> learningResourceMetadataURI, Option<string> varNamespace, Option<string> publisher, Option<string> shortDescription, Option<string> timeRequired, Option<string> useRightsURL, Option<string> version)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (contentIdentifier.IsSet && contentIdentifier.Value == null)
                throw new ArgumentNullException(nameof(contentIdentifier));

            if (learningStandardId.IsSet && learningStandardId.Value == null)
                throw new ArgumentNullException(nameof(learningStandardId));

            if (contentClassDescriptor.IsSet && contentClassDescriptor.Value == null)
                throw new ArgumentNullException(nameof(contentClassDescriptor));

            if (costRateDescriptor.IsSet && costRateDescriptor.Value == null)
                throw new ArgumentNullException(nameof(costRateDescriptor));

            if (interactivityStyleDescriptor.IsSet && interactivityStyleDescriptor.Value == null)
                throw new ArgumentNullException(nameof(interactivityStyleDescriptor));

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (learningResourceMetadataURI.IsSet && learningResourceMetadataURI.Value == null)
                throw new ArgumentNullException(nameof(learningResourceMetadataURI));

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace));

            if (publisher.IsSet && publisher.Value == null)
                throw new ArgumentNullException(nameof(publisher));

            if (shortDescription.IsSet && shortDescription.Value == null)
                throw new ArgumentNullException(nameof(shortDescription));

            if (timeRequired.IsSet && timeRequired.Value == null)
                throw new ArgumentNullException(nameof(timeRequired));

            if (useRightsURL.IsSet && useRightsURL.Value == null)
                throw new ArgumentNullException(nameof(useRightsURL));

            if (version.IsSet && version.Value == null)
                throw new ArgumentNullException(nameof(version));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="contentIdentifier"></param>
        /// <param name="learningStandardId"></param>
        /// <param name="contentClassDescriptor"></param>
        /// <param name="costRateDescriptor"></param>
        /// <param name="interactivityStyleDescriptor"></param>
        /// <param name="additionalAuthorsIndicator"></param>
        /// <param name="cost"></param>
        /// <param name="description"></param>
        /// <param name="id"></param>
        /// <param name="learningResourceMetadataURI"></param>
        /// <param name="varNamespace"></param>
        /// <param name="publicationDate"></param>
        /// <param name="publicationYear"></param>
        /// <param name="publisher"></param>
        /// <param name="shortDescription"></param>
        /// <param name="timeRequired"></param>
        /// <param name="useRightsURL"></param>
        /// <param name="version"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetEducationContentsDefaultImplementation(IGetEducationContentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> contentIdentifier, Option<string> learningStandardId, Option<string> contentClassDescriptor, Option<string> costRateDescriptor, Option<string> interactivityStyleDescriptor, Option<bool> additionalAuthorsIndicator, Option<double> cost, Option<string> description, Option<string> id, Option<string> learningResourceMetadataURI, Option<string> varNamespace, Option<DateOnly> publicationDate, Option<int> publicationYear, Option<string> publisher, Option<string> shortDescription, Option<string> timeRequired, Option<string> useRightsURL, Option<string> version, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetEducationContents(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, additionalAuthorsIndicator, cost, description, id, learningResourceMetadataURI, varNamespace, publicationDate, publicationYear, publisher, shortDescription, timeRequired, useRightsURL, version, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="contentIdentifier"></param>
        /// <param name="learningStandardId"></param>
        /// <param name="contentClassDescriptor"></param>
        /// <param name="costRateDescriptor"></param>
        /// <param name="interactivityStyleDescriptor"></param>
        /// <param name="additionalAuthorsIndicator"></param>
        /// <param name="cost"></param>
        /// <param name="description"></param>
        /// <param name="id"></param>
        /// <param name="learningResourceMetadataURI"></param>
        /// <param name="varNamespace"></param>
        /// <param name="publicationDate"></param>
        /// <param name="publicationYear"></param>
        /// <param name="publisher"></param>
        /// <param name="shortDescription"></param>
        /// <param name="timeRequired"></param>
        /// <param name="useRightsURL"></param>
        /// <param name="version"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetEducationContents(ref bool suppressDefaultLog, IGetEducationContentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> contentIdentifier, Option<string> learningStandardId, Option<string> contentClassDescriptor, Option<string> costRateDescriptor, Option<string> interactivityStyleDescriptor, Option<bool> additionalAuthorsIndicator, Option<double> cost, Option<string> description, Option<string> id, Option<string> learningResourceMetadataURI, Option<string> varNamespace, Option<DateOnly> publicationDate, Option<int> publicationYear, Option<string> publisher, Option<string> shortDescription, Option<string> timeRequired, Option<string> useRightsURL, Option<string> version, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="contentIdentifier"></param>
        /// <param name="learningStandardId"></param>
        /// <param name="contentClassDescriptor"></param>
        /// <param name="costRateDescriptor"></param>
        /// <param name="interactivityStyleDescriptor"></param>
        /// <param name="additionalAuthorsIndicator"></param>
        /// <param name="cost"></param>
        /// <param name="description"></param>
        /// <param name="id"></param>
        /// <param name="learningResourceMetadataURI"></param>
        /// <param name="varNamespace"></param>
        /// <param name="publicationDate"></param>
        /// <param name="publicationYear"></param>
        /// <param name="publisher"></param>
        /// <param name="shortDescription"></param>
        /// <param name="timeRequired"></param>
        /// <param name="useRightsURL"></param>
        /// <param name="version"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetEducationContentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> contentIdentifier, Option<string> learningStandardId, Option<string> contentClassDescriptor, Option<string> costRateDescriptor, Option<string> interactivityStyleDescriptor, Option<bool> additionalAuthorsIndicator, Option<double> cost, Option<string> description, Option<string> id, Option<string> learningResourceMetadataURI, Option<string> varNamespace, Option<DateOnly> publicationDate, Option<int> publicationYear, Option<string> publisher, Option<string> shortDescription, Option<string> timeRequired, Option<string> useRightsURL, Option<string> version, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEducationContents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, additionalAuthorsIndicator, cost, description, id, learningResourceMetadataURI, varNamespace, publicationDate, publicationYear, publisher, shortDescription, timeRequired, useRightsURL, version, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="contentIdentifier"></param>
        /// <param name="learningStandardId"></param>
        /// <param name="contentClassDescriptor"></param>
        /// <param name="costRateDescriptor"></param>
        /// <param name="interactivityStyleDescriptor"></param>
        /// <param name="additionalAuthorsIndicator"></param>
        /// <param name="cost"></param>
        /// <param name="description"></param>
        /// <param name="id"></param>
        /// <param name="learningResourceMetadataURI"></param>
        /// <param name="varNamespace"></param>
        /// <param name="publicationDate"></param>
        /// <param name="publicationYear"></param>
        /// <param name="publisher"></param>
        /// <param name="shortDescription"></param>
        /// <param name="timeRequired"></param>
        /// <param name="useRightsURL"></param>
        /// <param name="version"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetEducationContents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> contentIdentifier, Option<string> learningStandardId, Option<string> contentClassDescriptor, Option<string> costRateDescriptor, Option<string> interactivityStyleDescriptor, Option<bool> additionalAuthorsIndicator, Option<double> cost, Option<string> description, Option<string> id, Option<string> learningResourceMetadataURI, Option<string> varNamespace, Option<DateOnly> publicationDate, Option<int> publicationYear, Option<string> publisher, Option<string> shortDescription, Option<string> timeRequired, Option<string> useRightsURL, Option<string> version, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="contentIdentifier">A unique identifier for the education content. (optional)</param>
        /// <param name="learningStandardId">The identifier for the specific learning standard (e.g., 111.15.3.1.A). (optional)</param>
        /// <param name="contentClassDescriptor">The predominate type or kind characterizing the learning resource. (optional)</param>
        /// <param name="costRateDescriptor">The rate by which the cost applies. (optional)</param>
        /// <param name="interactivityStyleDescriptor">The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed. (optional)</param>
        /// <param name="additionalAuthorsIndicator">Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \&quot;et al\&quot;. (optional)</param>
        /// <param name="cost">An amount that has to be paid or spent to buy or obtain the education content. (optional)</param>
        /// <param name="description">An extended written representation of the education content. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="learningResourceMetadataURI">The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item. (optional)</param>
        /// <param name="varNamespace">Namespace for the education content. (optional)</param>
        /// <param name="publicationDate">The date on which this content was first published. (optional)</param>
        /// <param name="publicationYear">The year at which this content was first published. (optional)</param>
        /// <param name="publisher">The organization credited with publishing the resource. (optional)</param>
        /// <param name="shortDescription">A short description or name of the entity. (optional)</param>
        /// <param name="timeRequired">Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes. (optional)</param>
        /// <param name="useRightsURL">The URL where the owner specifies permissions for using the resource. (optional)</param>
        /// <param name="version">The version identifier for the content. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsApiResponse"/>&gt;</returns>
        public async Task<IGetEducationContentsApiResponse?> GetEducationContentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> contentIdentifier = default, Option<string> learningStandardId = default, Option<string> contentClassDescriptor = default, Option<string> costRateDescriptor = default, Option<string> interactivityStyleDescriptor = default, Option<bool> additionalAuthorsIndicator = default, Option<double> cost = default, Option<string> description = default, Option<string> id = default, Option<string> learningResourceMetadataURI = default, Option<string> varNamespace = default, Option<DateOnly> publicationDate = default, Option<int> publicationYear = default, Option<string> publisher = default, Option<string> shortDescription = default, Option<string> timeRequired = default, Option<string> useRightsURL = default, Option<string> version = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEducationContentsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, additionalAuthorsIndicator, cost, description, id, learningResourceMetadataURI, varNamespace, publicationDate, publicationYear, publisher, shortDescription, timeRequired, useRightsURL, version, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="contentIdentifier">A unique identifier for the education content. (optional)</param>
        /// <param name="learningStandardId">The identifier for the specific learning standard (e.g., 111.15.3.1.A). (optional)</param>
        /// <param name="contentClassDescriptor">The predominate type or kind characterizing the learning resource. (optional)</param>
        /// <param name="costRateDescriptor">The rate by which the cost applies. (optional)</param>
        /// <param name="interactivityStyleDescriptor">The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed. (optional)</param>
        /// <param name="additionalAuthorsIndicator">Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \&quot;et al\&quot;. (optional)</param>
        /// <param name="cost">An amount that has to be paid or spent to buy or obtain the education content. (optional)</param>
        /// <param name="description">An extended written representation of the education content. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="learningResourceMetadataURI">The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item. (optional)</param>
        /// <param name="varNamespace">Namespace for the education content. (optional)</param>
        /// <param name="publicationDate">The date on which this content was first published. (optional)</param>
        /// <param name="publicationYear">The year at which this content was first published. (optional)</param>
        /// <param name="publisher">The organization credited with publishing the resource. (optional)</param>
        /// <param name="shortDescription">A short description or name of the entity. (optional)</param>
        /// <param name="timeRequired">Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes. (optional)</param>
        /// <param name="useRightsURL">The URL where the owner specifies permissions for using the resource. (optional)</param>
        /// <param name="version">The version identifier for the content. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsApiResponse"/>&gt;</returns>
        public async Task<IGetEducationContentsApiResponse> GetEducationContentsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> contentIdentifier = default, Option<string> learningStandardId = default, Option<string> contentClassDescriptor = default, Option<string> costRateDescriptor = default, Option<string> interactivityStyleDescriptor = default, Option<bool> additionalAuthorsIndicator = default, Option<double> cost = default, Option<string> description = default, Option<string> id = default, Option<string> learningResourceMetadataURI = default, Option<string> varNamespace = default, Option<DateOnly> publicationDate = default, Option<int> publicationYear = default, Option<string> publisher = default, Option<string> shortDescription = default, Option<string> timeRequired = default, Option<string> useRightsURL = default, Option<string> version = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEducationContents(pageToken, contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, description, id, learningResourceMetadataURI, varNamespace, publisher, shortDescription, timeRequired, useRightsURL, version);

                FormatGetEducationContents(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref contentIdentifier, ref learningStandardId, ref contentClassDescriptor, ref costRateDescriptor, ref interactivityStyleDescriptor, ref additionalAuthorsIndicator, ref cost, ref description, ref id, ref learningResourceMetadataURI, ref varNamespace, ref publicationDate, ref publicationYear, ref publisher, ref shortDescription, ref timeRequired, ref useRightsURL, ref version, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/educationContents"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/educationContents");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (contentIdentifier.IsSet)
                        parseQueryStringLocalVar["contentIdentifier"] = ClientUtils.ParameterToString(contentIdentifier.Value);

                    if (learningStandardId.IsSet)
                        parseQueryStringLocalVar["learningStandardId"] = ClientUtils.ParameterToString(learningStandardId.Value);

                    if (contentClassDescriptor.IsSet)
                        parseQueryStringLocalVar["contentClassDescriptor"] = ClientUtils.ParameterToString(contentClassDescriptor.Value);

                    if (costRateDescriptor.IsSet)
                        parseQueryStringLocalVar["costRateDescriptor"] = ClientUtils.ParameterToString(costRateDescriptor.Value);

                    if (interactivityStyleDescriptor.IsSet)
                        parseQueryStringLocalVar["interactivityStyleDescriptor"] = ClientUtils.ParameterToString(interactivityStyleDescriptor.Value);

                    if (additionalAuthorsIndicator.IsSet)
                        parseQueryStringLocalVar["additionalAuthorsIndicator"] = ClientUtils.ParameterToString(additionalAuthorsIndicator.Value);

                    if (cost.IsSet)
                        parseQueryStringLocalVar["cost"] = ClientUtils.ParameterToString(cost.Value);

                    if (description.IsSet)
                        parseQueryStringLocalVar["description"] = ClientUtils.ParameterToString(description.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (learningResourceMetadataURI.IsSet)
                        parseQueryStringLocalVar["learningResourceMetadataURI"] = ClientUtils.ParameterToString(learningResourceMetadataURI.Value);

                    if (varNamespace.IsSet)
                        parseQueryStringLocalVar["namespace"] = ClientUtils.ParameterToString(varNamespace.Value);

                    if (publicationDate.IsSet)
                        parseQueryStringLocalVar["publicationDate"] = ClientUtils.ParameterToString(publicationDate.Value);

                    if (publicationYear.IsSet)
                        parseQueryStringLocalVar["publicationYear"] = ClientUtils.ParameterToString(publicationYear.Value);

                    if (publisher.IsSet)
                        parseQueryStringLocalVar["publisher"] = ClientUtils.ParameterToString(publisher.Value);

                    if (shortDescription.IsSet)
                        parseQueryStringLocalVar["shortDescription"] = ClientUtils.ParameterToString(shortDescription.Value);

                    if (timeRequired.IsSet)
                        parseQueryStringLocalVar["timeRequired"] = ClientUtils.ParameterToString(timeRequired.Value);

                    if (useRightsURL.IsSet)
                        parseQueryStringLocalVar["useRightsURL"] = ClientUtils.ParameterToString(useRightsURL.Value);

                    if (version.IsSet)
                        parseQueryStringLocalVar["version"] = ClientUtils.ParameterToString(version.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEducationContentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEducationContentsApiResponse>();

                        GetEducationContentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/educationContents", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEducationContentsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, additionalAuthorsIndicator, cost, description, id, learningResourceMetadataURI, varNamespace, publicationDate, publicationYear, publisher, shortDescription, timeRequired, useRightsURL, version, useSnapshot);

                        Events.ExecuteOnGetEducationContents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEducationContentsDefaultImplementation(e, "/ed-fi/educationContents", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, additionalAuthorsIndicator, cost, description, id, learningResourceMetadataURI, varNamespace, publicationDate, publicationYear, publisher, shortDescription, timeRequired, useRightsURL, version, useSnapshot);
                Events.ExecuteOnErrorGetEducationContents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEducationContentsApiResponse"/>
        /// </summary>
        public partial class GetEducationContentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetEducationContentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEducationContentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEducationContentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEducationContentsApiResponse(ILogger<GetEducationContentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiEducationContent>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiEducationContent>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiEducationContent>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEducationContentsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetEducationContentsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetEducationContentsByIdDefaultImplementation(IGetEducationContentsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetEducationContentsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetEducationContentsById(ref bool suppressDefaultLog, IGetEducationContentsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetEducationContentsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEducationContentsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetEducationContentsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetEducationContentsByIdApiResponse?> GetEducationContentsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEducationContentsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetEducationContentsByIdApiResponse> GetEducationContentsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEducationContentsById(id, ifNoneMatch);

                FormatGetEducationContentsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/educationContents/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/educationContents/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEducationContentsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEducationContentsByIdApiResponse>();

                        GetEducationContentsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/educationContents/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEducationContentsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetEducationContentsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEducationContentsByIdDefaultImplementation(e, "/ed-fi/educationContents/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetEducationContentsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEducationContentsByIdApiResponse"/>
        /// </summary>
        public partial class GetEducationContentsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetEducationContentsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEducationContentsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEducationContentsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEducationContentsByIdApiResponse(ILogger<GetEducationContentsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiEducationContent? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiEducationContent>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiEducationContent? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEducationContentsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> contentIdentifier, ref Option<string> learningStandardId, ref Option<string> contentClassDescriptor, ref Option<string> costRateDescriptor, ref Option<string> interactivityStyleDescriptor, ref Option<bool> additionalAuthorsIndicator, ref Option<double> cost, ref Option<string> description, ref Option<string> id, ref Option<string> learningResourceMetadataURI, ref Option<string> varNamespace, ref Option<DateOnly> publicationDate, ref Option<int> publicationYear, ref Option<string> publisher, ref Option<string> shortDescription, ref Option<string> timeRequired, ref Option<string> useRightsURL, ref Option<string> version, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contentIdentifier"></param>
        /// <param name="learningStandardId"></param>
        /// <param name="contentClassDescriptor"></param>
        /// <param name="costRateDescriptor"></param>
        /// <param name="interactivityStyleDescriptor"></param>
        /// <param name="description"></param>
        /// <param name="id"></param>
        /// <param name="learningResourceMetadataURI"></param>
        /// <param name="varNamespace"></param>
        /// <param name="publisher"></param>
        /// <param name="shortDescription"></param>
        /// <param name="timeRequired"></param>
        /// <param name="useRightsURL"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        private void ValidateGetEducationContentsPartitions(Option<string> contentIdentifier, Option<string> learningStandardId, Option<string> contentClassDescriptor, Option<string> costRateDescriptor, Option<string> interactivityStyleDescriptor, Option<string> description, Option<string> id, Option<string> learningResourceMetadataURI, Option<string> varNamespace, Option<string> publisher, Option<string> shortDescription, Option<string> timeRequired, Option<string> useRightsURL, Option<string> version)
        {
            if (contentIdentifier.IsSet && contentIdentifier.Value == null)
                throw new ArgumentNullException(nameof(contentIdentifier));

            if (learningStandardId.IsSet && learningStandardId.Value == null)
                throw new ArgumentNullException(nameof(learningStandardId));

            if (contentClassDescriptor.IsSet && contentClassDescriptor.Value == null)
                throw new ArgumentNullException(nameof(contentClassDescriptor));

            if (costRateDescriptor.IsSet && costRateDescriptor.Value == null)
                throw new ArgumentNullException(nameof(costRateDescriptor));

            if (interactivityStyleDescriptor.IsSet && interactivityStyleDescriptor.Value == null)
                throw new ArgumentNullException(nameof(interactivityStyleDescriptor));

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (learningResourceMetadataURI.IsSet && learningResourceMetadataURI.Value == null)
                throw new ArgumentNullException(nameof(learningResourceMetadataURI));

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace));

            if (publisher.IsSet && publisher.Value == null)
                throw new ArgumentNullException(nameof(publisher));

            if (shortDescription.IsSet && shortDescription.Value == null)
                throw new ArgumentNullException(nameof(shortDescription));

            if (timeRequired.IsSet && timeRequired.Value == null)
                throw new ArgumentNullException(nameof(timeRequired));

            if (useRightsURL.IsSet && useRightsURL.Value == null)
                throw new ArgumentNullException(nameof(useRightsURL));

            if (version.IsSet && version.Value == null)
                throw new ArgumentNullException(nameof(version));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="contentIdentifier"></param>
        /// <param name="learningStandardId"></param>
        /// <param name="contentClassDescriptor"></param>
        /// <param name="costRateDescriptor"></param>
        /// <param name="interactivityStyleDescriptor"></param>
        /// <param name="additionalAuthorsIndicator"></param>
        /// <param name="cost"></param>
        /// <param name="description"></param>
        /// <param name="id"></param>
        /// <param name="learningResourceMetadataURI"></param>
        /// <param name="varNamespace"></param>
        /// <param name="publicationDate"></param>
        /// <param name="publicationYear"></param>
        /// <param name="publisher"></param>
        /// <param name="shortDescription"></param>
        /// <param name="timeRequired"></param>
        /// <param name="useRightsURL"></param>
        /// <param name="version"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetEducationContentsPartitionsDefaultImplementation(IGetEducationContentsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> contentIdentifier, Option<string> learningStandardId, Option<string> contentClassDescriptor, Option<string> costRateDescriptor, Option<string> interactivityStyleDescriptor, Option<bool> additionalAuthorsIndicator, Option<double> cost, Option<string> description, Option<string> id, Option<string> learningResourceMetadataURI, Option<string> varNamespace, Option<DateOnly> publicationDate, Option<int> publicationYear, Option<string> publisher, Option<string> shortDescription, Option<string> timeRequired, Option<string> useRightsURL, Option<string> version, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetEducationContentsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, additionalAuthorsIndicator, cost, description, id, learningResourceMetadataURI, varNamespace, publicationDate, publicationYear, publisher, shortDescription, timeRequired, useRightsURL, version, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="contentIdentifier"></param>
        /// <param name="learningStandardId"></param>
        /// <param name="contentClassDescriptor"></param>
        /// <param name="costRateDescriptor"></param>
        /// <param name="interactivityStyleDescriptor"></param>
        /// <param name="additionalAuthorsIndicator"></param>
        /// <param name="cost"></param>
        /// <param name="description"></param>
        /// <param name="id"></param>
        /// <param name="learningResourceMetadataURI"></param>
        /// <param name="varNamespace"></param>
        /// <param name="publicationDate"></param>
        /// <param name="publicationYear"></param>
        /// <param name="publisher"></param>
        /// <param name="shortDescription"></param>
        /// <param name="timeRequired"></param>
        /// <param name="useRightsURL"></param>
        /// <param name="version"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetEducationContentsPartitions(ref bool suppressDefaultLog, IGetEducationContentsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> contentIdentifier, Option<string> learningStandardId, Option<string> contentClassDescriptor, Option<string> costRateDescriptor, Option<string> interactivityStyleDescriptor, Option<bool> additionalAuthorsIndicator, Option<double> cost, Option<string> description, Option<string> id, Option<string> learningResourceMetadataURI, Option<string> varNamespace, Option<DateOnly> publicationDate, Option<int> publicationYear, Option<string> publisher, Option<string> shortDescription, Option<string> timeRequired, Option<string> useRightsURL, Option<string> version, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="contentIdentifier"></param>
        /// <param name="learningStandardId"></param>
        /// <param name="contentClassDescriptor"></param>
        /// <param name="costRateDescriptor"></param>
        /// <param name="interactivityStyleDescriptor"></param>
        /// <param name="additionalAuthorsIndicator"></param>
        /// <param name="cost"></param>
        /// <param name="description"></param>
        /// <param name="id"></param>
        /// <param name="learningResourceMetadataURI"></param>
        /// <param name="varNamespace"></param>
        /// <param name="publicationDate"></param>
        /// <param name="publicationYear"></param>
        /// <param name="publisher"></param>
        /// <param name="shortDescription"></param>
        /// <param name="timeRequired"></param>
        /// <param name="useRightsURL"></param>
        /// <param name="version"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetEducationContentsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> contentIdentifier, Option<string> learningStandardId, Option<string> contentClassDescriptor, Option<string> costRateDescriptor, Option<string> interactivityStyleDescriptor, Option<bool> additionalAuthorsIndicator, Option<double> cost, Option<string> description, Option<string> id, Option<string> learningResourceMetadataURI, Option<string> varNamespace, Option<DateOnly> publicationDate, Option<int> publicationYear, Option<string> publisher, Option<string> shortDescription, Option<string> timeRequired, Option<string> useRightsURL, Option<string> version, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEducationContentsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, additionalAuthorsIndicator, cost, description, id, learningResourceMetadataURI, varNamespace, publicationDate, publicationYear, publisher, shortDescription, timeRequired, useRightsURL, version, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="contentIdentifier"></param>
        /// <param name="learningStandardId"></param>
        /// <param name="contentClassDescriptor"></param>
        /// <param name="costRateDescriptor"></param>
        /// <param name="interactivityStyleDescriptor"></param>
        /// <param name="additionalAuthorsIndicator"></param>
        /// <param name="cost"></param>
        /// <param name="description"></param>
        /// <param name="id"></param>
        /// <param name="learningResourceMetadataURI"></param>
        /// <param name="varNamespace"></param>
        /// <param name="publicationDate"></param>
        /// <param name="publicationYear"></param>
        /// <param name="publisher"></param>
        /// <param name="shortDescription"></param>
        /// <param name="timeRequired"></param>
        /// <param name="useRightsURL"></param>
        /// <param name="version"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetEducationContentsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> contentIdentifier, Option<string> learningStandardId, Option<string> contentClassDescriptor, Option<string> costRateDescriptor, Option<string> interactivityStyleDescriptor, Option<bool> additionalAuthorsIndicator, Option<double> cost, Option<string> description, Option<string> id, Option<string> learningResourceMetadataURI, Option<string> varNamespace, Option<DateOnly> publicationDate, Option<int> publicationYear, Option<string> publisher, Option<string> shortDescription, Option<string> timeRequired, Option<string> useRightsURL, Option<string> version, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="contentIdentifier">A unique identifier for the education content. (optional)</param>
        /// <param name="learningStandardId">The identifier for the specific learning standard (e.g., 111.15.3.1.A). (optional)</param>
        /// <param name="contentClassDescriptor">The predominate type or kind characterizing the learning resource. (optional)</param>
        /// <param name="costRateDescriptor">The rate by which the cost applies. (optional)</param>
        /// <param name="interactivityStyleDescriptor">The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed. (optional)</param>
        /// <param name="additionalAuthorsIndicator">Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \&quot;et al\&quot;. (optional)</param>
        /// <param name="cost">An amount that has to be paid or spent to buy or obtain the education content. (optional)</param>
        /// <param name="description">An extended written representation of the education content. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="learningResourceMetadataURI">The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item. (optional)</param>
        /// <param name="varNamespace">Namespace for the education content. (optional)</param>
        /// <param name="publicationDate">The date on which this content was first published. (optional)</param>
        /// <param name="publicationYear">The year at which this content was first published. (optional)</param>
        /// <param name="publisher">The organization credited with publishing the resource. (optional)</param>
        /// <param name="shortDescription">A short description or name of the entity. (optional)</param>
        /// <param name="timeRequired">Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes. (optional)</param>
        /// <param name="useRightsURL">The URL where the owner specifies permissions for using the resource. (optional)</param>
        /// <param name="version">The version identifier for the content. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetEducationContentsPartitionsApiResponse?> GetEducationContentsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> contentIdentifier = default, Option<string> learningStandardId = default, Option<string> contentClassDescriptor = default, Option<string> costRateDescriptor = default, Option<string> interactivityStyleDescriptor = default, Option<bool> additionalAuthorsIndicator = default, Option<double> cost = default, Option<string> description = default, Option<string> id = default, Option<string> learningResourceMetadataURI = default, Option<string> varNamespace = default, Option<DateOnly> publicationDate = default, Option<int> publicationYear = default, Option<string> publisher = default, Option<string> shortDescription = default, Option<string> timeRequired = default, Option<string> useRightsURL = default, Option<string> version = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEducationContentsPartitionsAsync(number, minChangeVersion, maxChangeVersion, contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, additionalAuthorsIndicator, cost, description, id, learningResourceMetadataURI, varNamespace, publicationDate, publicationYear, publisher, shortDescription, timeRequired, useRightsURL, version, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="contentIdentifier">A unique identifier for the education content. (optional)</param>
        /// <param name="learningStandardId">The identifier for the specific learning standard (e.g., 111.15.3.1.A). (optional)</param>
        /// <param name="contentClassDescriptor">The predominate type or kind characterizing the learning resource. (optional)</param>
        /// <param name="costRateDescriptor">The rate by which the cost applies. (optional)</param>
        /// <param name="interactivityStyleDescriptor">The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed. (optional)</param>
        /// <param name="additionalAuthorsIndicator">Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \&quot;et al\&quot;. (optional)</param>
        /// <param name="cost">An amount that has to be paid or spent to buy or obtain the education content. (optional)</param>
        /// <param name="description">An extended written representation of the education content. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="learningResourceMetadataURI">The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item. (optional)</param>
        /// <param name="varNamespace">Namespace for the education content. (optional)</param>
        /// <param name="publicationDate">The date on which this content was first published. (optional)</param>
        /// <param name="publicationYear">The year at which this content was first published. (optional)</param>
        /// <param name="publisher">The organization credited with publishing the resource. (optional)</param>
        /// <param name="shortDescription">A short description or name of the entity. (optional)</param>
        /// <param name="timeRequired">Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes. (optional)</param>
        /// <param name="useRightsURL">The URL where the owner specifies permissions for using the resource. (optional)</param>
        /// <param name="version">The version identifier for the content. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEducationContentsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetEducationContentsPartitionsApiResponse> GetEducationContentsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> contentIdentifier = default, Option<string> learningStandardId = default, Option<string> contentClassDescriptor = default, Option<string> costRateDescriptor = default, Option<string> interactivityStyleDescriptor = default, Option<bool> additionalAuthorsIndicator = default, Option<double> cost = default, Option<string> description = default, Option<string> id = default, Option<string> learningResourceMetadataURI = default, Option<string> varNamespace = default, Option<DateOnly> publicationDate = default, Option<int> publicationYear = default, Option<string> publisher = default, Option<string> shortDescription = default, Option<string> timeRequired = default, Option<string> useRightsURL = default, Option<string> version = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEducationContentsPartitions(contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, description, id, learningResourceMetadataURI, varNamespace, publisher, shortDescription, timeRequired, useRightsURL, version);

                FormatGetEducationContentsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref contentIdentifier, ref learningStandardId, ref contentClassDescriptor, ref costRateDescriptor, ref interactivityStyleDescriptor, ref additionalAuthorsIndicator, ref cost, ref description, ref id, ref learningResourceMetadataURI, ref varNamespace, ref publicationDate, ref publicationYear, ref publisher, ref shortDescription, ref timeRequired, ref useRightsURL, ref version, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/educationContents/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/educationContents/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (contentIdentifier.IsSet)
                        parseQueryStringLocalVar["contentIdentifier"] = ClientUtils.ParameterToString(contentIdentifier.Value);

                    if (learningStandardId.IsSet)
                        parseQueryStringLocalVar["learningStandardId"] = ClientUtils.ParameterToString(learningStandardId.Value);

                    if (contentClassDescriptor.IsSet)
                        parseQueryStringLocalVar["contentClassDescriptor"] = ClientUtils.ParameterToString(contentClassDescriptor.Value);

                    if (costRateDescriptor.IsSet)
                        parseQueryStringLocalVar["costRateDescriptor"] = ClientUtils.ParameterToString(costRateDescriptor.Value);

                    if (interactivityStyleDescriptor.IsSet)
                        parseQueryStringLocalVar["interactivityStyleDescriptor"] = ClientUtils.ParameterToString(interactivityStyleDescriptor.Value);

                    if (additionalAuthorsIndicator.IsSet)
                        parseQueryStringLocalVar["additionalAuthorsIndicator"] = ClientUtils.ParameterToString(additionalAuthorsIndicator.Value);

                    if (cost.IsSet)
                        parseQueryStringLocalVar["cost"] = ClientUtils.ParameterToString(cost.Value);

                    if (description.IsSet)
                        parseQueryStringLocalVar["description"] = ClientUtils.ParameterToString(description.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (learningResourceMetadataURI.IsSet)
                        parseQueryStringLocalVar["learningResourceMetadataURI"] = ClientUtils.ParameterToString(learningResourceMetadataURI.Value);

                    if (varNamespace.IsSet)
                        parseQueryStringLocalVar["namespace"] = ClientUtils.ParameterToString(varNamespace.Value);

                    if (publicationDate.IsSet)
                        parseQueryStringLocalVar["publicationDate"] = ClientUtils.ParameterToString(publicationDate.Value);

                    if (publicationYear.IsSet)
                        parseQueryStringLocalVar["publicationYear"] = ClientUtils.ParameterToString(publicationYear.Value);

                    if (publisher.IsSet)
                        parseQueryStringLocalVar["publisher"] = ClientUtils.ParameterToString(publisher.Value);

                    if (shortDescription.IsSet)
                        parseQueryStringLocalVar["shortDescription"] = ClientUtils.ParameterToString(shortDescription.Value);

                    if (timeRequired.IsSet)
                        parseQueryStringLocalVar["timeRequired"] = ClientUtils.ParameterToString(timeRequired.Value);

                    if (useRightsURL.IsSet)
                        parseQueryStringLocalVar["useRightsURL"] = ClientUtils.ParameterToString(useRightsURL.Value);

                    if (version.IsSet)
                        parseQueryStringLocalVar["version"] = ClientUtils.ParameterToString(version.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEducationContentsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEducationContentsPartitionsApiResponse>();

                        GetEducationContentsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/educationContents/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEducationContentsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, additionalAuthorsIndicator, cost, description, id, learningResourceMetadataURI, varNamespace, publicationDate, publicationYear, publisher, shortDescription, timeRequired, useRightsURL, version, useSnapshot);

                        Events.ExecuteOnGetEducationContentsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEducationContentsPartitionsDefaultImplementation(e, "/ed-fi/educationContents/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, contentIdentifier, learningStandardId, contentClassDescriptor, costRateDescriptor, interactivityStyleDescriptor, additionalAuthorsIndicator, cost, description, id, learningResourceMetadataURI, varNamespace, publicationDate, publicationYear, publisher, shortDescription, timeRequired, useRightsURL, version, useSnapshot);
                Events.ExecuteOnErrorGetEducationContentsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEducationContentsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetEducationContentsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetEducationContentsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEducationContentsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEducationContentsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEducationContentsPartitionsApiResponse(ILogger<GetEducationContentsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesEducationContents(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesEducationContentsDefaultImplementation(IKeyChangesEducationContentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesEducationContents(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesEducationContents(ref bool suppressDefaultLog, IKeyChangesEducationContentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesEducationContentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesEducationContents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesEducationContents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesEducationContentsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesEducationContentsApiResponse?> KeyChangesEducationContentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesEducationContentsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesEducationContentsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesEducationContentsApiResponse> KeyChangesEducationContentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesEducationContents(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/educationContents/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/educationContents/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesEducationContentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesEducationContentsApiResponse>();

                        KeyChangesEducationContentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/educationContents/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesEducationContentsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesEducationContents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesEducationContentsDefaultImplementation(e, "/ed-fi/educationContents/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesEducationContents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesEducationContentsApiResponse"/>
        /// </summary>
        public partial class KeyChangesEducationContentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesEducationContentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesEducationContentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesEducationContentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesEducationContentsApiResponse(ILogger<KeyChangesEducationContentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiEducationContentKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiEducationContentKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiEducationContentKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostEducationContent(EdFiEducationContent edFiEducationContent);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiEducationContent"></param>
        /// <returns></returns>
        private void ValidatePostEducationContent(EdFiEducationContent edFiEducationContent)
        {
            if (edFiEducationContent == null)
                throw new ArgumentNullException(nameof(edFiEducationContent));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiEducationContent"></param>
        private void AfterPostEducationContentDefaultImplementation(IPostEducationContentApiResponse apiResponseLocalVar, EdFiEducationContent edFiEducationContent)
        {
            bool suppressDefaultLog = false;
            AfterPostEducationContent(ref suppressDefaultLog, apiResponseLocalVar, edFiEducationContent);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiEducationContent"></param>
        partial void AfterPostEducationContent(ref bool suppressDefaultLog, IPostEducationContentApiResponse apiResponseLocalVar, EdFiEducationContent edFiEducationContent);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiEducationContent"></param>
        private void OnErrorPostEducationContentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiEducationContent edFiEducationContent)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostEducationContent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiEducationContent);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiEducationContent"></param>
        partial void OnErrorPostEducationContent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiEducationContent edFiEducationContent);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiEducationContent">The JSON representation of the \&quot;educationContent\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostEducationContentApiResponse"/>&gt;</returns>
        public async Task<IPostEducationContentApiResponse?> PostEducationContentOrDefaultAsync(EdFiEducationContent edFiEducationContent, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostEducationContentAsync(edFiEducationContent, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiEducationContent">The JSON representation of the \&quot;educationContent\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostEducationContentApiResponse"/>&gt;</returns>
        public async Task<IPostEducationContentApiResponse> PostEducationContentAsync(EdFiEducationContent edFiEducationContent, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostEducationContent(edFiEducationContent);

                FormatPostEducationContent(edFiEducationContent);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/educationContents"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/educationContents");

                    httpRequestMessageLocalVar.Content = (edFiEducationContent as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiEducationContent, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostEducationContentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostEducationContentApiResponse>();

                        PostEducationContentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/educationContents", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostEducationContentDefaultImplementation(apiResponseLocalVar, edFiEducationContent);

                        Events.ExecuteOnPostEducationContent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostEducationContentDefaultImplementation(e, "/ed-fi/educationContents", uriBuilderLocalVar.Path, edFiEducationContent);
                Events.ExecuteOnErrorPostEducationContent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostEducationContentApiResponse"/>
        /// </summary>
        public partial class PostEducationContentApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostEducationContentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostEducationContentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostEducationContentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostEducationContentApiResponse(ILogger<PostEducationContentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutEducationContent(ref string id, EdFiEducationContent edFiEducationContent, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiEducationContent"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutEducationContent(string id, EdFiEducationContent edFiEducationContent, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiEducationContent == null)
                throw new ArgumentNullException(nameof(edFiEducationContent));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiEducationContent"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutEducationContentDefaultImplementation(IPutEducationContentApiResponse apiResponseLocalVar, string id, EdFiEducationContent edFiEducationContent, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutEducationContent(ref suppressDefaultLog, apiResponseLocalVar, id, edFiEducationContent, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiEducationContent"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutEducationContent(ref bool suppressDefaultLog, IPutEducationContentApiResponse apiResponseLocalVar, string id, EdFiEducationContent edFiEducationContent, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiEducationContent"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutEducationContentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiEducationContent edFiEducationContent, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutEducationContent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiEducationContent, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiEducationContent"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutEducationContent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiEducationContent edFiEducationContent, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiEducationContent">The JSON representation of the \&quot;educationContent\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutEducationContentApiResponse"/>&gt;</returns>
        public async Task<IPutEducationContentApiResponse?> PutEducationContentOrDefaultAsync(string id, EdFiEducationContent edFiEducationContent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutEducationContentAsync(id, edFiEducationContent, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiEducationContent">The JSON representation of the \&quot;educationContent\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutEducationContentApiResponse"/>&gt;</returns>
        public async Task<IPutEducationContentApiResponse> PutEducationContentAsync(string id, EdFiEducationContent edFiEducationContent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutEducationContent(id, edFiEducationContent, ifMatch);

                FormatPutEducationContent(ref id, edFiEducationContent, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/educationContents/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/educationContents/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiEducationContent as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiEducationContent, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutEducationContentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutEducationContentApiResponse>();

                        PutEducationContentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/educationContents/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutEducationContentDefaultImplementation(apiResponseLocalVar, id, edFiEducationContent, ifMatch);

                        Events.ExecuteOnPutEducationContent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutEducationContentDefaultImplementation(e, "/ed-fi/educationContents/{id}", uriBuilderLocalVar.Path, id, edFiEducationContent, ifMatch);
                Events.ExecuteOnErrorPutEducationContent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutEducationContentApiResponse"/>
        /// </summary>
        public partial class PutEducationContentApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutEducationContentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutEducationContentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutEducationContentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutEducationContentApiResponse(ILogger<PutEducationContentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
