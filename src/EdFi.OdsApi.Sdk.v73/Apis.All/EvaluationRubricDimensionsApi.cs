// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEvaluationRubricDimensionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EvaluationRubricDimensionsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEvaluationRubricDimensionByIdApiResponse"/>&gt;</returns>
        Task<IDeleteEvaluationRubricDimensionByIdApiResponse> DeleteEvaluationRubricDimensionByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEvaluationRubricDimensionByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteEvaluationRubricDimensionByIdApiResponse?> DeleteEvaluationRubricDimensionByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesEvaluationRubricDimensionsApiResponse"/>&gt;</returns>
        Task<IDeletesEvaluationRubricDimensionsApiResponse> DeletesEvaluationRubricDimensionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesEvaluationRubricDimensionsApiResponse"/>?&gt;</returns>
        Task<IDeletesEvaluationRubricDimensionsApiResponse?> DeletesEvaluationRubricDimensionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="evaluationRubricRating">The numeric rating associated with the evaluation rubric dimension. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="evaluationRubricRatingLevelDescriptor">The rating level achieved for the evaluation rubric dimension. (optional)</param>
        /// <param name="evaluationCriterionDescription">The evaluation criterion description for the evaluation rubric dimension. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="rubricDimensionSortOrder">The sort order of the rubric dimension. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsApiResponse"/>&gt;</returns>
        Task<IGetEvaluationRubricDimensionsApiResponse> GetEvaluationRubricDimensionsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<int> evaluationRubricRating = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationElementTitle = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> evaluationRubricRatingLevelDescriptor = default, Option<string> evaluationCriterionDescription = default, Option<string> id = default, Option<int> rubricDimensionSortOrder = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="evaluationRubricRating">The numeric rating associated with the evaluation rubric dimension. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="evaluationRubricRatingLevelDescriptor">The rating level achieved for the evaluation rubric dimension. (optional)</param>
        /// <param name="evaluationCriterionDescription">The evaluation criterion description for the evaluation rubric dimension. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="rubricDimensionSortOrder">The sort order of the rubric dimension. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsApiResponse"/>?&gt;</returns>
        Task<IGetEvaluationRubricDimensionsApiResponse?> GetEvaluationRubricDimensionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<int> evaluationRubricRating = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationElementTitle = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> evaluationRubricRatingLevelDescriptor = default, Option<string> evaluationCriterionDescription = default, Option<string> id = default, Option<int> rubricDimensionSortOrder = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsByIdApiResponse"/>&gt;</returns>
        Task<IGetEvaluationRubricDimensionsByIdApiResponse> GetEvaluationRubricDimensionsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsByIdApiResponse"/>?&gt;</returns>
        Task<IGetEvaluationRubricDimensionsByIdApiResponse?> GetEvaluationRubricDimensionsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="evaluationRubricRating">The numeric rating associated with the evaluation rubric dimension. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="evaluationRubricRatingLevelDescriptor">The rating level achieved for the evaluation rubric dimension. (optional)</param>
        /// <param name="evaluationCriterionDescription">The evaluation criterion description for the evaluation rubric dimension. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="rubricDimensionSortOrder">The sort order of the rubric dimension. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetEvaluationRubricDimensionsPartitionsApiResponse> GetEvaluationRubricDimensionsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<int> evaluationRubricRating = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationElementTitle = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> evaluationRubricRatingLevelDescriptor = default, Option<string> evaluationCriterionDescription = default, Option<string> id = default, Option<int> rubricDimensionSortOrder = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="evaluationRubricRating">The numeric rating associated with the evaluation rubric dimension. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="evaluationRubricRatingLevelDescriptor">The rating level achieved for the evaluation rubric dimension. (optional)</param>
        /// <param name="evaluationCriterionDescription">The evaluation criterion description for the evaluation rubric dimension. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="rubricDimensionSortOrder">The sort order of the rubric dimension. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetEvaluationRubricDimensionsPartitionsApiResponse?> GetEvaluationRubricDimensionsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<int> evaluationRubricRating = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationElementTitle = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> evaluationRubricRatingLevelDescriptor = default, Option<string> evaluationCriterionDescription = default, Option<string> id = default, Option<int> rubricDimensionSortOrder = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesEvaluationRubricDimensionsApiResponse"/>&gt;</returns>
        Task<IKeyChangesEvaluationRubricDimensionsApiResponse> KeyChangesEvaluationRubricDimensionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesEvaluationRubricDimensionsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesEvaluationRubricDimensionsApiResponse?> KeyChangesEvaluationRubricDimensionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiEvaluationRubricDimension">The JSON representation of the \&quot;evaluationRubricDimension\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostEvaluationRubricDimensionApiResponse"/>&gt;</returns>
        Task<IPostEvaluationRubricDimensionApiResponse> PostEvaluationRubricDimensionAsync(EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiEvaluationRubricDimension">The JSON representation of the \&quot;evaluationRubricDimension\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostEvaluationRubricDimensionApiResponse"/>?&gt;</returns>
        Task<IPostEvaluationRubricDimensionApiResponse?> PostEvaluationRubricDimensionOrDefaultAsync(EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiEvaluationRubricDimension">The JSON representation of the \&quot;evaluationRubricDimension\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutEvaluationRubricDimensionApiResponse"/>&gt;</returns>
        Task<IPutEvaluationRubricDimensionApiResponse> PutEvaluationRubricDimensionAsync(string id, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiEvaluationRubricDimension">The JSON representation of the \&quot;evaluationRubricDimension\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutEvaluationRubricDimensionApiResponse"/>?&gt;</returns>
        Task<IPutEvaluationRubricDimensionApiResponse?> PutEvaluationRubricDimensionOrDefaultAsync(string id, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteEvaluationRubricDimensionByIdApiResponse"/>
    /// </summary>
    public interface IDeleteEvaluationRubricDimensionByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesEvaluationRubricDimensionsApiResponse"/>
    /// </summary>
    public interface IDeletesEvaluationRubricDimensionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiEvaluationRubricDimensionDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetEvaluationRubricDimensionsApiResponse"/>
    /// </summary>
    public interface IGetEvaluationRubricDimensionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiEvaluationRubricDimension>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetEvaluationRubricDimensionsByIdApiResponse"/>
    /// </summary>
    public interface IGetEvaluationRubricDimensionsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiEvaluationRubricDimension?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetEvaluationRubricDimensionsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetEvaluationRubricDimensionsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesEvaluationRubricDimensionsApiResponse"/>
    /// </summary>
    public interface IKeyChangesEvaluationRubricDimensionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiEvaluationRubricDimensionKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostEvaluationRubricDimensionApiResponse"/>
    /// </summary>
    public interface IPostEvaluationRubricDimensionApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutEvaluationRubricDimensionApiResponse"/>
    /// </summary>
    public interface IPutEvaluationRubricDimensionApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EvaluationRubricDimensionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteEvaluationRubricDimensionById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteEvaluationRubricDimensionById;

        internal void ExecuteOnDeleteEvaluationRubricDimensionById(EvaluationRubricDimensionsApi.DeleteEvaluationRubricDimensionByIdApiResponse apiResponse)
        {
            OnDeleteEvaluationRubricDimensionById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteEvaluationRubricDimensionById(Exception exception)
        {
            OnErrorDeleteEvaluationRubricDimensionById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesEvaluationRubricDimensions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesEvaluationRubricDimensions;

        internal void ExecuteOnDeletesEvaluationRubricDimensions(EvaluationRubricDimensionsApi.DeletesEvaluationRubricDimensionsApiResponse apiResponse)
        {
            OnDeletesEvaluationRubricDimensions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesEvaluationRubricDimensions(Exception exception)
        {
            OnErrorDeletesEvaluationRubricDimensions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEvaluationRubricDimensions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEvaluationRubricDimensions;

        internal void ExecuteOnGetEvaluationRubricDimensions(EvaluationRubricDimensionsApi.GetEvaluationRubricDimensionsApiResponse apiResponse)
        {
            OnGetEvaluationRubricDimensions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEvaluationRubricDimensions(Exception exception)
        {
            OnErrorGetEvaluationRubricDimensions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEvaluationRubricDimensionsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEvaluationRubricDimensionsById;

        internal void ExecuteOnGetEvaluationRubricDimensionsById(EvaluationRubricDimensionsApi.GetEvaluationRubricDimensionsByIdApiResponse apiResponse)
        {
            OnGetEvaluationRubricDimensionsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEvaluationRubricDimensionsById(Exception exception)
        {
            OnErrorGetEvaluationRubricDimensionsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEvaluationRubricDimensionsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEvaluationRubricDimensionsPartitions;

        internal void ExecuteOnGetEvaluationRubricDimensionsPartitions(EvaluationRubricDimensionsApi.GetEvaluationRubricDimensionsPartitionsApiResponse apiResponse)
        {
            OnGetEvaluationRubricDimensionsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEvaluationRubricDimensionsPartitions(Exception exception)
        {
            OnErrorGetEvaluationRubricDimensionsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesEvaluationRubricDimensions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesEvaluationRubricDimensions;

        internal void ExecuteOnKeyChangesEvaluationRubricDimensions(EvaluationRubricDimensionsApi.KeyChangesEvaluationRubricDimensionsApiResponse apiResponse)
        {
            OnKeyChangesEvaluationRubricDimensions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesEvaluationRubricDimensions(Exception exception)
        {
            OnErrorKeyChangesEvaluationRubricDimensions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostEvaluationRubricDimension;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostEvaluationRubricDimension;

        internal void ExecuteOnPostEvaluationRubricDimension(EvaluationRubricDimensionsApi.PostEvaluationRubricDimensionApiResponse apiResponse)
        {
            OnPostEvaluationRubricDimension?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostEvaluationRubricDimension(Exception exception)
        {
            OnErrorPostEvaluationRubricDimension?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutEvaluationRubricDimension;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutEvaluationRubricDimension;

        internal void ExecuteOnPutEvaluationRubricDimension(EvaluationRubricDimensionsApi.PutEvaluationRubricDimensionApiResponse apiResponse)
        {
            OnPutEvaluationRubricDimension?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutEvaluationRubricDimension(Exception exception)
        {
            OnErrorPutEvaluationRubricDimension?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EvaluationRubricDimensionsApi : IEvaluationRubricDimensionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EvaluationRubricDimensionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EvaluationRubricDimensionsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluationRubricDimensionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EvaluationRubricDimensionsApi(ILogger<EvaluationRubricDimensionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EvaluationRubricDimensionsApiEvents evaluationRubricDimensionsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EvaluationRubricDimensionsApi>();
            HttpClient = httpClient;
            Events = evaluationRubricDimensionsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteEvaluationRubricDimensionById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteEvaluationRubricDimensionById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteEvaluationRubricDimensionByIdDefaultImplementation(IDeleteEvaluationRubricDimensionByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteEvaluationRubricDimensionById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteEvaluationRubricDimensionById(ref bool suppressDefaultLog, IDeleteEvaluationRubricDimensionByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteEvaluationRubricDimensionByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteEvaluationRubricDimensionById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteEvaluationRubricDimensionById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEvaluationRubricDimensionByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteEvaluationRubricDimensionByIdApiResponse?> DeleteEvaluationRubricDimensionByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteEvaluationRubricDimensionByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEvaluationRubricDimensionByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteEvaluationRubricDimensionByIdApiResponse> DeleteEvaluationRubricDimensionByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteEvaluationRubricDimensionById(id, ifMatch);

                FormatDeleteEvaluationRubricDimensionById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/evaluationRubricDimensions/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/evaluationRubricDimensions/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteEvaluationRubricDimensionByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteEvaluationRubricDimensionByIdApiResponse>();

                        DeleteEvaluationRubricDimensionByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/evaluationRubricDimensions/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteEvaluationRubricDimensionByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteEvaluationRubricDimensionById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteEvaluationRubricDimensionByIdDefaultImplementation(e, "/ed-fi/evaluationRubricDimensions/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteEvaluationRubricDimensionById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteEvaluationRubricDimensionByIdApiResponse"/>
        /// </summary>
        public partial class DeleteEvaluationRubricDimensionByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteEvaluationRubricDimensionByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteEvaluationRubricDimensionByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteEvaluationRubricDimensionByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteEvaluationRubricDimensionByIdApiResponse(ILogger<DeleteEvaluationRubricDimensionByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesEvaluationRubricDimensions(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesEvaluationRubricDimensionsDefaultImplementation(IDeletesEvaluationRubricDimensionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesEvaluationRubricDimensions(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesEvaluationRubricDimensions(ref bool suppressDefaultLog, IDeletesEvaluationRubricDimensionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesEvaluationRubricDimensionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesEvaluationRubricDimensions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesEvaluationRubricDimensions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesEvaluationRubricDimensionsApiResponse"/>&gt;</returns>
        public async Task<IDeletesEvaluationRubricDimensionsApiResponse?> DeletesEvaluationRubricDimensionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesEvaluationRubricDimensionsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesEvaluationRubricDimensionsApiResponse"/>&gt;</returns>
        public async Task<IDeletesEvaluationRubricDimensionsApiResponse> DeletesEvaluationRubricDimensionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesEvaluationRubricDimensions(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/evaluationRubricDimensions/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/evaluationRubricDimensions/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesEvaluationRubricDimensionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesEvaluationRubricDimensionsApiResponse>();

                        DeletesEvaluationRubricDimensionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/evaluationRubricDimensions/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesEvaluationRubricDimensionsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesEvaluationRubricDimensions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesEvaluationRubricDimensionsDefaultImplementation(e, "/ed-fi/evaluationRubricDimensions/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesEvaluationRubricDimensions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesEvaluationRubricDimensionsApiResponse"/>
        /// </summary>
        public partial class DeletesEvaluationRubricDimensionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesEvaluationRubricDimensionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesEvaluationRubricDimensionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesEvaluationRubricDimensionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesEvaluationRubricDimensionsApiResponse(ILogger<DeletesEvaluationRubricDimensionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiEvaluationRubricDimensionDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiEvaluationRubricDimensionDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiEvaluationRubricDimensionDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEvaluationRubricDimensions(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<int> evaluationRubricRating, ref Option<long> programEducationOrganizationId, ref Option<string> programEvaluationElementTitle, ref Option<string> programEvaluationPeriodDescriptor, ref Option<string> programEvaluationTitle, ref Option<string> programEvaluationTypeDescriptor, ref Option<string> programName, ref Option<string> programTypeDescriptor, ref Option<string> evaluationRubricRatingLevelDescriptor, ref Option<string> evaluationCriterionDescription, ref Option<string> id, ref Option<int> rubricDimensionSortOrder, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="programEvaluationElementTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="evaluationRubricRatingLevelDescriptor"></param>
        /// <param name="evaluationCriterionDescription"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetEvaluationRubricDimensions(Option<string> pageToken, Option<string> programEvaluationElementTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> evaluationRubricRatingLevelDescriptor, Option<string> evaluationCriterionDescription, Option<string> id)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (programEvaluationElementTitle.IsSet && programEvaluationElementTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationElementTitle));

            if (programEvaluationPeriodDescriptor.IsSet && programEvaluationPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationPeriodDescriptor));

            if (programEvaluationTitle.IsSet && programEvaluationTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTitle));

            if (programEvaluationTypeDescriptor.IsSet && programEvaluationTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTypeDescriptor));

            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName));

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor));

            if (evaluationRubricRatingLevelDescriptor.IsSet && evaluationRubricRatingLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(evaluationRubricRatingLevelDescriptor));

            if (evaluationCriterionDescription.IsSet && evaluationCriterionDescription.Value == null)
                throw new ArgumentNullException(nameof(evaluationCriterionDescription));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="evaluationRubricRating"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationElementTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="evaluationRubricRatingLevelDescriptor"></param>
        /// <param name="evaluationCriterionDescription"></param>
        /// <param name="id"></param>
        /// <param name="rubricDimensionSortOrder"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetEvaluationRubricDimensionsDefaultImplementation(IGetEvaluationRubricDimensionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<int> evaluationRubricRating, Option<long> programEducationOrganizationId, Option<string> programEvaluationElementTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> evaluationRubricRatingLevelDescriptor, Option<string> evaluationCriterionDescription, Option<string> id, Option<int> rubricDimensionSortOrder, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetEvaluationRubricDimensions(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, evaluationRubricRating, programEducationOrganizationId, programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id, rubricDimensionSortOrder, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="evaluationRubricRating"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationElementTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="evaluationRubricRatingLevelDescriptor"></param>
        /// <param name="evaluationCriterionDescription"></param>
        /// <param name="id"></param>
        /// <param name="rubricDimensionSortOrder"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetEvaluationRubricDimensions(ref bool suppressDefaultLog, IGetEvaluationRubricDimensionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<int> evaluationRubricRating, Option<long> programEducationOrganizationId, Option<string> programEvaluationElementTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> evaluationRubricRatingLevelDescriptor, Option<string> evaluationCriterionDescription, Option<string> id, Option<int> rubricDimensionSortOrder, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="evaluationRubricRating"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationElementTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="evaluationRubricRatingLevelDescriptor"></param>
        /// <param name="evaluationCriterionDescription"></param>
        /// <param name="id"></param>
        /// <param name="rubricDimensionSortOrder"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetEvaluationRubricDimensionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<int> evaluationRubricRating, Option<long> programEducationOrganizationId, Option<string> programEvaluationElementTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> evaluationRubricRatingLevelDescriptor, Option<string> evaluationCriterionDescription, Option<string> id, Option<int> rubricDimensionSortOrder, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEvaluationRubricDimensions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, evaluationRubricRating, programEducationOrganizationId, programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id, rubricDimensionSortOrder, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="evaluationRubricRating"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationElementTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="evaluationRubricRatingLevelDescriptor"></param>
        /// <param name="evaluationCriterionDescription"></param>
        /// <param name="id"></param>
        /// <param name="rubricDimensionSortOrder"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetEvaluationRubricDimensions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<int> evaluationRubricRating, Option<long> programEducationOrganizationId, Option<string> programEvaluationElementTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> evaluationRubricRatingLevelDescriptor, Option<string> evaluationCriterionDescription, Option<string> id, Option<int> rubricDimensionSortOrder, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="evaluationRubricRating">The numeric rating associated with the evaluation rubric dimension. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="evaluationRubricRatingLevelDescriptor">The rating level achieved for the evaluation rubric dimension. (optional)</param>
        /// <param name="evaluationCriterionDescription">The evaluation criterion description for the evaluation rubric dimension. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="rubricDimensionSortOrder">The sort order of the rubric dimension. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsApiResponse"/>&gt;</returns>
        public async Task<IGetEvaluationRubricDimensionsApiResponse?> GetEvaluationRubricDimensionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<int> evaluationRubricRating = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationElementTitle = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> evaluationRubricRatingLevelDescriptor = default, Option<string> evaluationCriterionDescription = default, Option<string> id = default, Option<int> rubricDimensionSortOrder = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEvaluationRubricDimensionsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, evaluationRubricRating, programEducationOrganizationId, programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id, rubricDimensionSortOrder, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="evaluationRubricRating">The numeric rating associated with the evaluation rubric dimension. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="evaluationRubricRatingLevelDescriptor">The rating level achieved for the evaluation rubric dimension. (optional)</param>
        /// <param name="evaluationCriterionDescription">The evaluation criterion description for the evaluation rubric dimension. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="rubricDimensionSortOrder">The sort order of the rubric dimension. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsApiResponse"/>&gt;</returns>
        public async Task<IGetEvaluationRubricDimensionsApiResponse> GetEvaluationRubricDimensionsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<int> evaluationRubricRating = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationElementTitle = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> evaluationRubricRatingLevelDescriptor = default, Option<string> evaluationCriterionDescription = default, Option<string> id = default, Option<int> rubricDimensionSortOrder = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEvaluationRubricDimensions(pageToken, programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id);

                FormatGetEvaluationRubricDimensions(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref evaluationRubricRating, ref programEducationOrganizationId, ref programEvaluationElementTitle, ref programEvaluationPeriodDescriptor, ref programEvaluationTitle, ref programEvaluationTypeDescriptor, ref programName, ref programTypeDescriptor, ref evaluationRubricRatingLevelDescriptor, ref evaluationCriterionDescription, ref id, ref rubricDimensionSortOrder, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/evaluationRubricDimensions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/evaluationRubricDimensions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (evaluationRubricRating.IsSet)
                        parseQueryStringLocalVar["evaluationRubricRating"] = ClientUtils.ParameterToString(evaluationRubricRating.Value);

                    if (programEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["programEducationOrganizationId"] = ClientUtils.ParameterToString(programEducationOrganizationId.Value);

                    if (programEvaluationElementTitle.IsSet)
                        parseQueryStringLocalVar["programEvaluationElementTitle"] = ClientUtils.ParameterToString(programEvaluationElementTitle.Value);

                    if (programEvaluationPeriodDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationPeriodDescriptor"] = ClientUtils.ParameterToString(programEvaluationPeriodDescriptor.Value);

                    if (programEvaluationTitle.IsSet)
                        parseQueryStringLocalVar["programEvaluationTitle"] = ClientUtils.ParameterToString(programEvaluationTitle.Value);

                    if (programEvaluationTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationTypeDescriptor"] = ClientUtils.ParameterToString(programEvaluationTypeDescriptor.Value);

                    if (programName.IsSet)
                        parseQueryStringLocalVar["programName"] = ClientUtils.ParameterToString(programName.Value);

                    if (programTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programTypeDescriptor"] = ClientUtils.ParameterToString(programTypeDescriptor.Value);

                    if (evaluationRubricRatingLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["evaluationRubricRatingLevelDescriptor"] = ClientUtils.ParameterToString(evaluationRubricRatingLevelDescriptor.Value);

                    if (evaluationCriterionDescription.IsSet)
                        parseQueryStringLocalVar["evaluationCriterionDescription"] = ClientUtils.ParameterToString(evaluationCriterionDescription.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (rubricDimensionSortOrder.IsSet)
                        parseQueryStringLocalVar["rubricDimensionSortOrder"] = ClientUtils.ParameterToString(rubricDimensionSortOrder.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEvaluationRubricDimensionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEvaluationRubricDimensionsApiResponse>();

                        GetEvaluationRubricDimensionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/evaluationRubricDimensions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEvaluationRubricDimensionsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, evaluationRubricRating, programEducationOrganizationId, programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id, rubricDimensionSortOrder, useSnapshot);

                        Events.ExecuteOnGetEvaluationRubricDimensions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEvaluationRubricDimensionsDefaultImplementation(e, "/ed-fi/evaluationRubricDimensions", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, evaluationRubricRating, programEducationOrganizationId, programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id, rubricDimensionSortOrder, useSnapshot);
                Events.ExecuteOnErrorGetEvaluationRubricDimensions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEvaluationRubricDimensionsApiResponse"/>
        /// </summary>
        public partial class GetEvaluationRubricDimensionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetEvaluationRubricDimensionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEvaluationRubricDimensionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEvaluationRubricDimensionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEvaluationRubricDimensionsApiResponse(ILogger<GetEvaluationRubricDimensionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiEvaluationRubricDimension>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiEvaluationRubricDimension>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiEvaluationRubricDimension>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEvaluationRubricDimensionsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetEvaluationRubricDimensionsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetEvaluationRubricDimensionsByIdDefaultImplementation(IGetEvaluationRubricDimensionsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetEvaluationRubricDimensionsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetEvaluationRubricDimensionsById(ref bool suppressDefaultLog, IGetEvaluationRubricDimensionsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetEvaluationRubricDimensionsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEvaluationRubricDimensionsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetEvaluationRubricDimensionsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetEvaluationRubricDimensionsByIdApiResponse?> GetEvaluationRubricDimensionsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEvaluationRubricDimensionsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetEvaluationRubricDimensionsByIdApiResponse> GetEvaluationRubricDimensionsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEvaluationRubricDimensionsById(id, ifNoneMatch);

                FormatGetEvaluationRubricDimensionsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/evaluationRubricDimensions/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/evaluationRubricDimensions/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEvaluationRubricDimensionsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEvaluationRubricDimensionsByIdApiResponse>();

                        GetEvaluationRubricDimensionsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/evaluationRubricDimensions/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEvaluationRubricDimensionsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetEvaluationRubricDimensionsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEvaluationRubricDimensionsByIdDefaultImplementation(e, "/ed-fi/evaluationRubricDimensions/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetEvaluationRubricDimensionsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEvaluationRubricDimensionsByIdApiResponse"/>
        /// </summary>
        public partial class GetEvaluationRubricDimensionsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetEvaluationRubricDimensionsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEvaluationRubricDimensionsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEvaluationRubricDimensionsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEvaluationRubricDimensionsByIdApiResponse(ILogger<GetEvaluationRubricDimensionsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiEvaluationRubricDimension? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiEvaluationRubricDimension>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiEvaluationRubricDimension? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEvaluationRubricDimensionsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<int> evaluationRubricRating, ref Option<long> programEducationOrganizationId, ref Option<string> programEvaluationElementTitle, ref Option<string> programEvaluationPeriodDescriptor, ref Option<string> programEvaluationTitle, ref Option<string> programEvaluationTypeDescriptor, ref Option<string> programName, ref Option<string> programTypeDescriptor, ref Option<string> evaluationRubricRatingLevelDescriptor, ref Option<string> evaluationCriterionDescription, ref Option<string> id, ref Option<int> rubricDimensionSortOrder, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="programEvaluationElementTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="evaluationRubricRatingLevelDescriptor"></param>
        /// <param name="evaluationCriterionDescription"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetEvaluationRubricDimensionsPartitions(Option<string> programEvaluationElementTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> evaluationRubricRatingLevelDescriptor, Option<string> evaluationCriterionDescription, Option<string> id)
        {
            if (programEvaluationElementTitle.IsSet && programEvaluationElementTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationElementTitle));

            if (programEvaluationPeriodDescriptor.IsSet && programEvaluationPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationPeriodDescriptor));

            if (programEvaluationTitle.IsSet && programEvaluationTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTitle));

            if (programEvaluationTypeDescriptor.IsSet && programEvaluationTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTypeDescriptor));

            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName));

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor));

            if (evaluationRubricRatingLevelDescriptor.IsSet && evaluationRubricRatingLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(evaluationRubricRatingLevelDescriptor));

            if (evaluationCriterionDescription.IsSet && evaluationCriterionDescription.Value == null)
                throw new ArgumentNullException(nameof(evaluationCriterionDescription));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="evaluationRubricRating"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationElementTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="evaluationRubricRatingLevelDescriptor"></param>
        /// <param name="evaluationCriterionDescription"></param>
        /// <param name="id"></param>
        /// <param name="rubricDimensionSortOrder"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetEvaluationRubricDimensionsPartitionsDefaultImplementation(IGetEvaluationRubricDimensionsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<int> evaluationRubricRating, Option<long> programEducationOrganizationId, Option<string> programEvaluationElementTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> evaluationRubricRatingLevelDescriptor, Option<string> evaluationCriterionDescription, Option<string> id, Option<int> rubricDimensionSortOrder, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetEvaluationRubricDimensionsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, evaluationRubricRating, programEducationOrganizationId, programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id, rubricDimensionSortOrder, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="evaluationRubricRating"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationElementTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="evaluationRubricRatingLevelDescriptor"></param>
        /// <param name="evaluationCriterionDescription"></param>
        /// <param name="id"></param>
        /// <param name="rubricDimensionSortOrder"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetEvaluationRubricDimensionsPartitions(ref bool suppressDefaultLog, IGetEvaluationRubricDimensionsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<int> evaluationRubricRating, Option<long> programEducationOrganizationId, Option<string> programEvaluationElementTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> evaluationRubricRatingLevelDescriptor, Option<string> evaluationCriterionDescription, Option<string> id, Option<int> rubricDimensionSortOrder, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="evaluationRubricRating"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationElementTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="evaluationRubricRatingLevelDescriptor"></param>
        /// <param name="evaluationCriterionDescription"></param>
        /// <param name="id"></param>
        /// <param name="rubricDimensionSortOrder"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetEvaluationRubricDimensionsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<int> evaluationRubricRating, Option<long> programEducationOrganizationId, Option<string> programEvaluationElementTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> evaluationRubricRatingLevelDescriptor, Option<string> evaluationCriterionDescription, Option<string> id, Option<int> rubricDimensionSortOrder, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEvaluationRubricDimensionsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, evaluationRubricRating, programEducationOrganizationId, programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id, rubricDimensionSortOrder, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="evaluationRubricRating"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationElementTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="evaluationRubricRatingLevelDescriptor"></param>
        /// <param name="evaluationCriterionDescription"></param>
        /// <param name="id"></param>
        /// <param name="rubricDimensionSortOrder"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetEvaluationRubricDimensionsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<int> evaluationRubricRating, Option<long> programEducationOrganizationId, Option<string> programEvaluationElementTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> evaluationRubricRatingLevelDescriptor, Option<string> evaluationCriterionDescription, Option<string> id, Option<int> rubricDimensionSortOrder, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="evaluationRubricRating">The numeric rating associated with the evaluation rubric dimension. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="evaluationRubricRatingLevelDescriptor">The rating level achieved for the evaluation rubric dimension. (optional)</param>
        /// <param name="evaluationCriterionDescription">The evaluation criterion description for the evaluation rubric dimension. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="rubricDimensionSortOrder">The sort order of the rubric dimension. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetEvaluationRubricDimensionsPartitionsApiResponse?> GetEvaluationRubricDimensionsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<int> evaluationRubricRating = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationElementTitle = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> evaluationRubricRatingLevelDescriptor = default, Option<string> evaluationCriterionDescription = default, Option<string> id = default, Option<int> rubricDimensionSortOrder = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEvaluationRubricDimensionsPartitionsAsync(number, minChangeVersion, maxChangeVersion, evaluationRubricRating, programEducationOrganizationId, programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id, rubricDimensionSortOrder, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="evaluationRubricRating">The numeric rating associated with the evaluation rubric dimension. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="evaluationRubricRatingLevelDescriptor">The rating level achieved for the evaluation rubric dimension. (optional)</param>
        /// <param name="evaluationCriterionDescription">The evaluation criterion description for the evaluation rubric dimension. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="rubricDimensionSortOrder">The sort order of the rubric dimension. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEvaluationRubricDimensionsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetEvaluationRubricDimensionsPartitionsApiResponse> GetEvaluationRubricDimensionsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<int> evaluationRubricRating = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationElementTitle = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> evaluationRubricRatingLevelDescriptor = default, Option<string> evaluationCriterionDescription = default, Option<string> id = default, Option<int> rubricDimensionSortOrder = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEvaluationRubricDimensionsPartitions(programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id);

                FormatGetEvaluationRubricDimensionsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref evaluationRubricRating, ref programEducationOrganizationId, ref programEvaluationElementTitle, ref programEvaluationPeriodDescriptor, ref programEvaluationTitle, ref programEvaluationTypeDescriptor, ref programName, ref programTypeDescriptor, ref evaluationRubricRatingLevelDescriptor, ref evaluationCriterionDescription, ref id, ref rubricDimensionSortOrder, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/evaluationRubricDimensions/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/evaluationRubricDimensions/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (evaluationRubricRating.IsSet)
                        parseQueryStringLocalVar["evaluationRubricRating"] = ClientUtils.ParameterToString(evaluationRubricRating.Value);

                    if (programEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["programEducationOrganizationId"] = ClientUtils.ParameterToString(programEducationOrganizationId.Value);

                    if (programEvaluationElementTitle.IsSet)
                        parseQueryStringLocalVar["programEvaluationElementTitle"] = ClientUtils.ParameterToString(programEvaluationElementTitle.Value);

                    if (programEvaluationPeriodDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationPeriodDescriptor"] = ClientUtils.ParameterToString(programEvaluationPeriodDescriptor.Value);

                    if (programEvaluationTitle.IsSet)
                        parseQueryStringLocalVar["programEvaluationTitle"] = ClientUtils.ParameterToString(programEvaluationTitle.Value);

                    if (programEvaluationTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationTypeDescriptor"] = ClientUtils.ParameterToString(programEvaluationTypeDescriptor.Value);

                    if (programName.IsSet)
                        parseQueryStringLocalVar["programName"] = ClientUtils.ParameterToString(programName.Value);

                    if (programTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programTypeDescriptor"] = ClientUtils.ParameterToString(programTypeDescriptor.Value);

                    if (evaluationRubricRatingLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["evaluationRubricRatingLevelDescriptor"] = ClientUtils.ParameterToString(evaluationRubricRatingLevelDescriptor.Value);

                    if (evaluationCriterionDescription.IsSet)
                        parseQueryStringLocalVar["evaluationCriterionDescription"] = ClientUtils.ParameterToString(evaluationCriterionDescription.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (rubricDimensionSortOrder.IsSet)
                        parseQueryStringLocalVar["rubricDimensionSortOrder"] = ClientUtils.ParameterToString(rubricDimensionSortOrder.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEvaluationRubricDimensionsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEvaluationRubricDimensionsPartitionsApiResponse>();

                        GetEvaluationRubricDimensionsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/evaluationRubricDimensions/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEvaluationRubricDimensionsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, evaluationRubricRating, programEducationOrganizationId, programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id, rubricDimensionSortOrder, useSnapshot);

                        Events.ExecuteOnGetEvaluationRubricDimensionsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEvaluationRubricDimensionsPartitionsDefaultImplementation(e, "/ed-fi/evaluationRubricDimensions/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, evaluationRubricRating, programEducationOrganizationId, programEvaluationElementTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, evaluationRubricRatingLevelDescriptor, evaluationCriterionDescription, id, rubricDimensionSortOrder, useSnapshot);
                Events.ExecuteOnErrorGetEvaluationRubricDimensionsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEvaluationRubricDimensionsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetEvaluationRubricDimensionsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetEvaluationRubricDimensionsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEvaluationRubricDimensionsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEvaluationRubricDimensionsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEvaluationRubricDimensionsPartitionsApiResponse(ILogger<GetEvaluationRubricDimensionsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesEvaluationRubricDimensions(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesEvaluationRubricDimensionsDefaultImplementation(IKeyChangesEvaluationRubricDimensionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesEvaluationRubricDimensions(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesEvaluationRubricDimensions(ref bool suppressDefaultLog, IKeyChangesEvaluationRubricDimensionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesEvaluationRubricDimensionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesEvaluationRubricDimensions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesEvaluationRubricDimensions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesEvaluationRubricDimensionsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesEvaluationRubricDimensionsApiResponse?> KeyChangesEvaluationRubricDimensionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesEvaluationRubricDimensionsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesEvaluationRubricDimensionsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesEvaluationRubricDimensionsApiResponse> KeyChangesEvaluationRubricDimensionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesEvaluationRubricDimensions(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/evaluationRubricDimensions/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/evaluationRubricDimensions/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesEvaluationRubricDimensionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesEvaluationRubricDimensionsApiResponse>();

                        KeyChangesEvaluationRubricDimensionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/evaluationRubricDimensions/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesEvaluationRubricDimensionsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesEvaluationRubricDimensions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesEvaluationRubricDimensionsDefaultImplementation(e, "/ed-fi/evaluationRubricDimensions/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesEvaluationRubricDimensions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesEvaluationRubricDimensionsApiResponse"/>
        /// </summary>
        public partial class KeyChangesEvaluationRubricDimensionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesEvaluationRubricDimensionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesEvaluationRubricDimensionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesEvaluationRubricDimensionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesEvaluationRubricDimensionsApiResponse(ILogger<KeyChangesEvaluationRubricDimensionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiEvaluationRubricDimensionKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiEvaluationRubricDimensionKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiEvaluationRubricDimensionKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostEvaluationRubricDimension(EdFiEvaluationRubricDimension edFiEvaluationRubricDimension);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiEvaluationRubricDimension"></param>
        /// <returns></returns>
        private void ValidatePostEvaluationRubricDimension(EdFiEvaluationRubricDimension edFiEvaluationRubricDimension)
        {
            if (edFiEvaluationRubricDimension == null)
                throw new ArgumentNullException(nameof(edFiEvaluationRubricDimension));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiEvaluationRubricDimension"></param>
        private void AfterPostEvaluationRubricDimensionDefaultImplementation(IPostEvaluationRubricDimensionApiResponse apiResponseLocalVar, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension)
        {
            bool suppressDefaultLog = false;
            AfterPostEvaluationRubricDimension(ref suppressDefaultLog, apiResponseLocalVar, edFiEvaluationRubricDimension);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiEvaluationRubricDimension"></param>
        partial void AfterPostEvaluationRubricDimension(ref bool suppressDefaultLog, IPostEvaluationRubricDimensionApiResponse apiResponseLocalVar, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiEvaluationRubricDimension"></param>
        private void OnErrorPostEvaluationRubricDimensionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostEvaluationRubricDimension(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiEvaluationRubricDimension);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiEvaluationRubricDimension"></param>
        partial void OnErrorPostEvaluationRubricDimension(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiEvaluationRubricDimension">The JSON representation of the \&quot;evaluationRubricDimension\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostEvaluationRubricDimensionApiResponse"/>&gt;</returns>
        public async Task<IPostEvaluationRubricDimensionApiResponse?> PostEvaluationRubricDimensionOrDefaultAsync(EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostEvaluationRubricDimensionAsync(edFiEvaluationRubricDimension, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiEvaluationRubricDimension">The JSON representation of the \&quot;evaluationRubricDimension\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostEvaluationRubricDimensionApiResponse"/>&gt;</returns>
        public async Task<IPostEvaluationRubricDimensionApiResponse> PostEvaluationRubricDimensionAsync(EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostEvaluationRubricDimension(edFiEvaluationRubricDimension);

                FormatPostEvaluationRubricDimension(edFiEvaluationRubricDimension);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/evaluationRubricDimensions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/evaluationRubricDimensions");

                    httpRequestMessageLocalVar.Content = (edFiEvaluationRubricDimension as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiEvaluationRubricDimension, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostEvaluationRubricDimensionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostEvaluationRubricDimensionApiResponse>();

                        PostEvaluationRubricDimensionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/evaluationRubricDimensions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostEvaluationRubricDimensionDefaultImplementation(apiResponseLocalVar, edFiEvaluationRubricDimension);

                        Events.ExecuteOnPostEvaluationRubricDimension(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostEvaluationRubricDimensionDefaultImplementation(e, "/ed-fi/evaluationRubricDimensions", uriBuilderLocalVar.Path, edFiEvaluationRubricDimension);
                Events.ExecuteOnErrorPostEvaluationRubricDimension(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostEvaluationRubricDimensionApiResponse"/>
        /// </summary>
        public partial class PostEvaluationRubricDimensionApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostEvaluationRubricDimensionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostEvaluationRubricDimensionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostEvaluationRubricDimensionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostEvaluationRubricDimensionApiResponse(ILogger<PostEvaluationRubricDimensionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutEvaluationRubricDimension(ref string id, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiEvaluationRubricDimension"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutEvaluationRubricDimension(string id, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiEvaluationRubricDimension == null)
                throw new ArgumentNullException(nameof(edFiEvaluationRubricDimension));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiEvaluationRubricDimension"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutEvaluationRubricDimensionDefaultImplementation(IPutEvaluationRubricDimensionApiResponse apiResponseLocalVar, string id, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutEvaluationRubricDimension(ref suppressDefaultLog, apiResponseLocalVar, id, edFiEvaluationRubricDimension, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiEvaluationRubricDimension"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutEvaluationRubricDimension(ref bool suppressDefaultLog, IPutEvaluationRubricDimensionApiResponse apiResponseLocalVar, string id, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiEvaluationRubricDimension"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutEvaluationRubricDimensionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutEvaluationRubricDimension(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiEvaluationRubricDimension, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiEvaluationRubricDimension"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutEvaluationRubricDimension(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiEvaluationRubricDimension">The JSON representation of the \&quot;evaluationRubricDimension\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutEvaluationRubricDimensionApiResponse"/>&gt;</returns>
        public async Task<IPutEvaluationRubricDimensionApiResponse?> PutEvaluationRubricDimensionOrDefaultAsync(string id, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutEvaluationRubricDimensionAsync(id, edFiEvaluationRubricDimension, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiEvaluationRubricDimension">The JSON representation of the \&quot;evaluationRubricDimension\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutEvaluationRubricDimensionApiResponse"/>&gt;</returns>
        public async Task<IPutEvaluationRubricDimensionApiResponse> PutEvaluationRubricDimensionAsync(string id, EdFiEvaluationRubricDimension edFiEvaluationRubricDimension, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutEvaluationRubricDimension(id, edFiEvaluationRubricDimension, ifMatch);

                FormatPutEvaluationRubricDimension(ref id, edFiEvaluationRubricDimension, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/evaluationRubricDimensions/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/evaluationRubricDimensions/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiEvaluationRubricDimension as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiEvaluationRubricDimension, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutEvaluationRubricDimensionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutEvaluationRubricDimensionApiResponse>();

                        PutEvaluationRubricDimensionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/evaluationRubricDimensions/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutEvaluationRubricDimensionDefaultImplementation(apiResponseLocalVar, id, edFiEvaluationRubricDimension, ifMatch);

                        Events.ExecuteOnPutEvaluationRubricDimension(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutEvaluationRubricDimensionDefaultImplementation(e, "/ed-fi/evaluationRubricDimensions/{id}", uriBuilderLocalVar.Path, id, edFiEvaluationRubricDimension, ifMatch);
                Events.ExecuteOnErrorPutEvaluationRubricDimension(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutEvaluationRubricDimensionApiResponse"/>
        /// </summary>
        public partial class PutEvaluationRubricDimensionApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutEvaluationRubricDimensionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutEvaluationRubricDimensionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutEvaluationRubricDimensionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutEvaluationRubricDimensionApiResponse(ILogger<PutEvaluationRubricDimensionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
