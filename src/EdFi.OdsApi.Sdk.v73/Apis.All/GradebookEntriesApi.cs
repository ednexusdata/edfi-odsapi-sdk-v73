// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IGradebookEntriesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        GradebookEntriesApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGradebookEntryByIdApiResponse"/>&gt;</returns>
        Task<IDeleteGradebookEntryByIdApiResponse> DeleteGradebookEntryByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGradebookEntryByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteGradebookEntryByIdApiResponse?> DeleteGradebookEntryByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesGradebookEntriesApiResponse"/>&gt;</returns>
        Task<IDeletesGradebookEntriesApiResponse> DeletesGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesGradebookEntriesApiResponse"/>?&gt;</returns>
        Task<IDeletesGradebookEntriesApiResponse?> DeletesGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported. (optional)</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="gradebookEntryTypeDescriptor">The type of the gradebook entry. (optional)</param>
        /// <param name="dateAssigned">The date the assignment, homework, or assessment was assigned or executed. (optional)</param>
        /// <param name="description">A description of the assignment, homework, or classroom assessment. (optional)</param>
        /// <param name="dueDate">The date the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="dueTime">The time the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxPoints">The maximum number of points  that can be earned for the submission. (optional)</param>
        /// <param name="sourceSectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="title">The name or title of the activity to be recorded in the gradebook entry. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesApiResponse"/>&gt;</returns>
        Task<IGetGradebookEntriesApiResponse> GetGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> gradingPeriodDescriptor = default, Option<string> gradingPeriodName = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> localCourseCode = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> gradebookEntryTypeDescriptor = default, Option<DateOnly> dateAssigned = default, Option<string> description = default, Option<DateOnly> dueDate = default, Option<string> dueTime = default, Option<string> id = default, Option<double> maxPoints = default, Option<string> sourceSectionIdentifier = default, Option<string> title = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported. (optional)</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="gradebookEntryTypeDescriptor">The type of the gradebook entry. (optional)</param>
        /// <param name="dateAssigned">The date the assignment, homework, or assessment was assigned or executed. (optional)</param>
        /// <param name="description">A description of the assignment, homework, or classroom assessment. (optional)</param>
        /// <param name="dueDate">The date the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="dueTime">The time the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxPoints">The maximum number of points  that can be earned for the submission. (optional)</param>
        /// <param name="sourceSectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="title">The name or title of the activity to be recorded in the gradebook entry. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesApiResponse"/>?&gt;</returns>
        Task<IGetGradebookEntriesApiResponse?> GetGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> gradingPeriodDescriptor = default, Option<string> gradingPeriodName = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> localCourseCode = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> gradebookEntryTypeDescriptor = default, Option<DateOnly> dateAssigned = default, Option<string> description = default, Option<DateOnly> dueDate = default, Option<string> dueTime = default, Option<string> id = default, Option<double> maxPoints = default, Option<string> sourceSectionIdentifier = default, Option<string> title = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesByIdApiResponse"/>&gt;</returns>
        Task<IGetGradebookEntriesByIdApiResponse> GetGradebookEntriesByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesByIdApiResponse"/>?&gt;</returns>
        Task<IGetGradebookEntriesByIdApiResponse?> GetGradebookEntriesByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported. (optional)</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="gradebookEntryTypeDescriptor">The type of the gradebook entry. (optional)</param>
        /// <param name="dateAssigned">The date the assignment, homework, or assessment was assigned or executed. (optional)</param>
        /// <param name="description">A description of the assignment, homework, or classroom assessment. (optional)</param>
        /// <param name="dueDate">The date the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="dueTime">The time the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxPoints">The maximum number of points  that can be earned for the submission. (optional)</param>
        /// <param name="sourceSectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="title">The name or title of the activity to be recorded in the gradebook entry. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesPartitionsApiResponse"/>&gt;</returns>
        Task<IGetGradebookEntriesPartitionsApiResponse> GetGradebookEntriesPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> gradingPeriodDescriptor = default, Option<string> gradingPeriodName = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> localCourseCode = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> gradebookEntryTypeDescriptor = default, Option<DateOnly> dateAssigned = default, Option<string> description = default, Option<DateOnly> dueDate = default, Option<string> dueTime = default, Option<string> id = default, Option<double> maxPoints = default, Option<string> sourceSectionIdentifier = default, Option<string> title = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported. (optional)</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="gradebookEntryTypeDescriptor">The type of the gradebook entry. (optional)</param>
        /// <param name="dateAssigned">The date the assignment, homework, or assessment was assigned or executed. (optional)</param>
        /// <param name="description">A description of the assignment, homework, or classroom assessment. (optional)</param>
        /// <param name="dueDate">The date the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="dueTime">The time the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxPoints">The maximum number of points  that can be earned for the submission. (optional)</param>
        /// <param name="sourceSectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="title">The name or title of the activity to be recorded in the gradebook entry. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetGradebookEntriesPartitionsApiResponse?> GetGradebookEntriesPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> gradingPeriodDescriptor = default, Option<string> gradingPeriodName = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> localCourseCode = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> gradebookEntryTypeDescriptor = default, Option<DateOnly> dateAssigned = default, Option<string> description = default, Option<DateOnly> dueDate = default, Option<string> dueTime = default, Option<string> id = default, Option<double> maxPoints = default, Option<string> sourceSectionIdentifier = default, Option<string> title = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesGradebookEntriesApiResponse"/>&gt;</returns>
        Task<IKeyChangesGradebookEntriesApiResponse> KeyChangesGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesGradebookEntriesApiResponse"/>?&gt;</returns>
        Task<IKeyChangesGradebookEntriesApiResponse?> KeyChangesGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiGradebookEntry">The JSON representation of the \&quot;gradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostGradebookEntryApiResponse"/>&gt;</returns>
        Task<IPostGradebookEntryApiResponse> PostGradebookEntryAsync(EdFiGradebookEntry edFiGradebookEntry, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiGradebookEntry">The JSON representation of the \&quot;gradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostGradebookEntryApiResponse"/>?&gt;</returns>
        Task<IPostGradebookEntryApiResponse?> PostGradebookEntryOrDefaultAsync(EdFiGradebookEntry edFiGradebookEntry, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiGradebookEntry">The JSON representation of the \&quot;gradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutGradebookEntryApiResponse"/>&gt;</returns>
        Task<IPutGradebookEntryApiResponse> PutGradebookEntryAsync(string id, EdFiGradebookEntry edFiGradebookEntry, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiGradebookEntry">The JSON representation of the \&quot;gradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutGradebookEntryApiResponse"/>?&gt;</returns>
        Task<IPutGradebookEntryApiResponse?> PutGradebookEntryOrDefaultAsync(string id, EdFiGradebookEntry edFiGradebookEntry, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteGradebookEntryByIdApiResponse"/>
    /// </summary>
    public interface IDeleteGradebookEntryByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesGradebookEntriesApiResponse"/>
    /// </summary>
    public interface IDeletesGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiGradebookEntryDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetGradebookEntriesApiResponse"/>
    /// </summary>
    public interface IGetGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiGradebookEntry>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetGradebookEntriesByIdApiResponse"/>
    /// </summary>
    public interface IGetGradebookEntriesByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiGradebookEntry?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetGradebookEntriesPartitionsApiResponse"/>
    /// </summary>
    public interface IGetGradebookEntriesPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesGradebookEntriesApiResponse"/>
    /// </summary>
    public interface IKeyChangesGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiGradebookEntryKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostGradebookEntryApiResponse"/>
    /// </summary>
    public interface IPostGradebookEntryApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutGradebookEntryApiResponse"/>
    /// </summary>
    public interface IPutGradebookEntryApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class GradebookEntriesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteGradebookEntryById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteGradebookEntryById;

        internal void ExecuteOnDeleteGradebookEntryById(GradebookEntriesApi.DeleteGradebookEntryByIdApiResponse apiResponse)
        {
            OnDeleteGradebookEntryById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteGradebookEntryById(Exception exception)
        {
            OnErrorDeleteGradebookEntryById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesGradebookEntries;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesGradebookEntries;

        internal void ExecuteOnDeletesGradebookEntries(GradebookEntriesApi.DeletesGradebookEntriesApiResponse apiResponse)
        {
            OnDeletesGradebookEntries?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesGradebookEntries(Exception exception)
        {
            OnErrorDeletesGradebookEntries?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGradebookEntries;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGradebookEntries;

        internal void ExecuteOnGetGradebookEntries(GradebookEntriesApi.GetGradebookEntriesApiResponse apiResponse)
        {
            OnGetGradebookEntries?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGradebookEntries(Exception exception)
        {
            OnErrorGetGradebookEntries?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGradebookEntriesById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGradebookEntriesById;

        internal void ExecuteOnGetGradebookEntriesById(GradebookEntriesApi.GetGradebookEntriesByIdApiResponse apiResponse)
        {
            OnGetGradebookEntriesById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGradebookEntriesById(Exception exception)
        {
            OnErrorGetGradebookEntriesById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGradebookEntriesPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGradebookEntriesPartitions;

        internal void ExecuteOnGetGradebookEntriesPartitions(GradebookEntriesApi.GetGradebookEntriesPartitionsApiResponse apiResponse)
        {
            OnGetGradebookEntriesPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGradebookEntriesPartitions(Exception exception)
        {
            OnErrorGetGradebookEntriesPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesGradebookEntries;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesGradebookEntries;

        internal void ExecuteOnKeyChangesGradebookEntries(GradebookEntriesApi.KeyChangesGradebookEntriesApiResponse apiResponse)
        {
            OnKeyChangesGradebookEntries?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesGradebookEntries(Exception exception)
        {
            OnErrorKeyChangesGradebookEntries?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostGradebookEntry;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostGradebookEntry;

        internal void ExecuteOnPostGradebookEntry(GradebookEntriesApi.PostGradebookEntryApiResponse apiResponse)
        {
            OnPostGradebookEntry?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostGradebookEntry(Exception exception)
        {
            OnErrorPostGradebookEntry?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutGradebookEntry;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutGradebookEntry;

        internal void ExecuteOnPutGradebookEntry(GradebookEntriesApi.PutGradebookEntryApiResponse apiResponse)
        {
            OnPutGradebookEntry?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutGradebookEntry(Exception exception)
        {
            OnErrorPutGradebookEntry?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class GradebookEntriesApi : IGradebookEntriesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<GradebookEntriesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public GradebookEntriesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GradebookEntriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GradebookEntriesApi(ILogger<GradebookEntriesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, GradebookEntriesApiEvents gradebookEntriesApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<GradebookEntriesApi>();
            HttpClient = httpClient;
            Events = gradebookEntriesApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteGradebookEntryById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteGradebookEntryById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteGradebookEntryByIdDefaultImplementation(IDeleteGradebookEntryByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteGradebookEntryById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteGradebookEntryById(ref bool suppressDefaultLog, IDeleteGradebookEntryByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteGradebookEntryByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteGradebookEntryById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteGradebookEntryById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGradebookEntryByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteGradebookEntryByIdApiResponse?> DeleteGradebookEntryByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteGradebookEntryByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGradebookEntryByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteGradebookEntryByIdApiResponse> DeleteGradebookEntryByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteGradebookEntryById(id, ifMatch);

                FormatDeleteGradebookEntryById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/gradebookEntries/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/gradebookEntries/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteGradebookEntryByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteGradebookEntryByIdApiResponse>();

                        DeleteGradebookEntryByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/gradebookEntries/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteGradebookEntryByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteGradebookEntryById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteGradebookEntryByIdDefaultImplementation(e, "/ed-fi/gradebookEntries/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteGradebookEntryById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteGradebookEntryByIdApiResponse"/>
        /// </summary>
        public partial class DeleteGradebookEntryByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteGradebookEntryByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteGradebookEntryByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteGradebookEntryByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteGradebookEntryByIdApiResponse(ILogger<DeleteGradebookEntryByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesGradebookEntries(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesGradebookEntriesDefaultImplementation(IDeletesGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesGradebookEntries(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesGradebookEntries(ref bool suppressDefaultLog, IDeletesGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesGradebookEntriesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesGradebookEntries(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesGradebookEntries(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IDeletesGradebookEntriesApiResponse?> DeletesGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesGradebookEntriesAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IDeletesGradebookEntriesApiResponse> DeletesGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesGradebookEntries(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/gradebookEntries/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/gradebookEntries/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesGradebookEntriesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesGradebookEntriesApiResponse>();

                        DeletesGradebookEntriesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/gradebookEntries/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesGradebookEntriesDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesGradebookEntries(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesGradebookEntriesDefaultImplementation(e, "/ed-fi/gradebookEntries/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesGradebookEntries(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesGradebookEntriesApiResponse"/>
        /// </summary>
        public partial class DeletesGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesGradebookEntriesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesGradebookEntriesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesGradebookEntriesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesGradebookEntriesApiResponse(ILogger<DeletesGradebookEntriesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiGradebookEntryDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiGradebookEntryDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiGradebookEntryDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGradebookEntries(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> gradebookEntryIdentifier, ref Option<string> varNamespace, ref Option<string> gradingPeriodDescriptor, ref Option<string> gradingPeriodName, ref Option<long> schoolId, ref Option<int> schoolYear, ref Option<string> localCourseCode, ref Option<string> sectionIdentifier, ref Option<string> sessionName, ref Option<string> gradebookEntryTypeDescriptor, ref Option<DateOnly> dateAssigned, ref Option<string> description, ref Option<DateOnly> dueDate, ref Option<string> dueTime, ref Option<string> id, ref Option<double> maxPoints, ref Option<string> sourceSectionIdentifier, ref Option<string> title, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="gradingPeriodDescriptor"></param>
        /// <param name="gradingPeriodName"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="gradebookEntryTypeDescriptor"></param>
        /// <param name="description"></param>
        /// <param name="dueTime"></param>
        /// <param name="id"></param>
        /// <param name="sourceSectionIdentifier"></param>
        /// <param name="title"></param>
        /// <returns></returns>
        private void ValidateGetGradebookEntries(Option<string> pageToken, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> gradingPeriodDescriptor, Option<string> gradingPeriodName, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> gradebookEntryTypeDescriptor, Option<string> description, Option<string> dueTime, Option<string> id, Option<string> sourceSectionIdentifier, Option<string> title)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (gradebookEntryIdentifier.IsSet && gradebookEntryIdentifier.Value == null)
                throw new ArgumentNullException(nameof(gradebookEntryIdentifier));

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace));

            if (gradingPeriodDescriptor.IsSet && gradingPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodDescriptor));

            if (gradingPeriodName.IsSet && gradingPeriodName.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodName));

            if (localCourseCode.IsSet && localCourseCode.Value == null)
                throw new ArgumentNullException(nameof(localCourseCode));

            if (sectionIdentifier.IsSet && sectionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(sectionIdentifier));

            if (sessionName.IsSet && sessionName.Value == null)
                throw new ArgumentNullException(nameof(sessionName));

            if (gradebookEntryTypeDescriptor.IsSet && gradebookEntryTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradebookEntryTypeDescriptor));

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description));

            if (dueTime.IsSet && dueTime.Value == null)
                throw new ArgumentNullException(nameof(dueTime));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (sourceSectionIdentifier.IsSet && sourceSectionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(sourceSectionIdentifier));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="gradingPeriodDescriptor"></param>
        /// <param name="gradingPeriodName"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="gradebookEntryTypeDescriptor"></param>
        /// <param name="dateAssigned"></param>
        /// <param name="description"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueTime"></param>
        /// <param name="id"></param>
        /// <param name="maxPoints"></param>
        /// <param name="sourceSectionIdentifier"></param>
        /// <param name="title"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetGradebookEntriesDefaultImplementation(IGetGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> gradingPeriodDescriptor, Option<string> gradingPeriodName, Option<long> schoolId, Option<int> schoolYear, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> gradebookEntryTypeDescriptor, Option<DateOnly> dateAssigned, Option<string> description, Option<DateOnly> dueDate, Option<string> dueTime, Option<string> id, Option<double> maxPoints, Option<string> sourceSectionIdentifier, Option<string> title, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetGradebookEntries(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, schoolId, schoolYear, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, dateAssigned, description, dueDate, dueTime, id, maxPoints, sourceSectionIdentifier, title, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="gradingPeriodDescriptor"></param>
        /// <param name="gradingPeriodName"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="gradebookEntryTypeDescriptor"></param>
        /// <param name="dateAssigned"></param>
        /// <param name="description"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueTime"></param>
        /// <param name="id"></param>
        /// <param name="maxPoints"></param>
        /// <param name="sourceSectionIdentifier"></param>
        /// <param name="title"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetGradebookEntries(ref bool suppressDefaultLog, IGetGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> gradingPeriodDescriptor, Option<string> gradingPeriodName, Option<long> schoolId, Option<int> schoolYear, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> gradebookEntryTypeDescriptor, Option<DateOnly> dateAssigned, Option<string> description, Option<DateOnly> dueDate, Option<string> dueTime, Option<string> id, Option<double> maxPoints, Option<string> sourceSectionIdentifier, Option<string> title, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="gradingPeriodDescriptor"></param>
        /// <param name="gradingPeriodName"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="gradebookEntryTypeDescriptor"></param>
        /// <param name="dateAssigned"></param>
        /// <param name="description"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueTime"></param>
        /// <param name="id"></param>
        /// <param name="maxPoints"></param>
        /// <param name="sourceSectionIdentifier"></param>
        /// <param name="title"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetGradebookEntriesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> gradingPeriodDescriptor, Option<string> gradingPeriodName, Option<long> schoolId, Option<int> schoolYear, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> gradebookEntryTypeDescriptor, Option<DateOnly> dateAssigned, Option<string> description, Option<DateOnly> dueDate, Option<string> dueTime, Option<string> id, Option<double> maxPoints, Option<string> sourceSectionIdentifier, Option<string> title, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGradebookEntries(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, schoolId, schoolYear, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, dateAssigned, description, dueDate, dueTime, id, maxPoints, sourceSectionIdentifier, title, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="gradingPeriodDescriptor"></param>
        /// <param name="gradingPeriodName"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="gradebookEntryTypeDescriptor"></param>
        /// <param name="dateAssigned"></param>
        /// <param name="description"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueTime"></param>
        /// <param name="id"></param>
        /// <param name="maxPoints"></param>
        /// <param name="sourceSectionIdentifier"></param>
        /// <param name="title"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetGradebookEntries(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> gradingPeriodDescriptor, Option<string> gradingPeriodName, Option<long> schoolId, Option<int> schoolYear, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> gradebookEntryTypeDescriptor, Option<DateOnly> dateAssigned, Option<string> description, Option<DateOnly> dueDate, Option<string> dueTime, Option<string> id, Option<double> maxPoints, Option<string> sourceSectionIdentifier, Option<string> title, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported. (optional)</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="gradebookEntryTypeDescriptor">The type of the gradebook entry. (optional)</param>
        /// <param name="dateAssigned">The date the assignment, homework, or assessment was assigned or executed. (optional)</param>
        /// <param name="description">A description of the assignment, homework, or classroom assessment. (optional)</param>
        /// <param name="dueDate">The date the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="dueTime">The time the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxPoints">The maximum number of points  that can be earned for the submission. (optional)</param>
        /// <param name="sourceSectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="title">The name or title of the activity to be recorded in the gradebook entry. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IGetGradebookEntriesApiResponse?> GetGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> gradingPeriodDescriptor = default, Option<string> gradingPeriodName = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> localCourseCode = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> gradebookEntryTypeDescriptor = default, Option<DateOnly> dateAssigned = default, Option<string> description = default, Option<DateOnly> dueDate = default, Option<string> dueTime = default, Option<string> id = default, Option<double> maxPoints = default, Option<string> sourceSectionIdentifier = default, Option<string> title = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGradebookEntriesAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, schoolId, schoolYear, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, dateAssigned, description, dueDate, dueTime, id, maxPoints, sourceSectionIdentifier, title, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported. (optional)</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="gradebookEntryTypeDescriptor">The type of the gradebook entry. (optional)</param>
        /// <param name="dateAssigned">The date the assignment, homework, or assessment was assigned or executed. (optional)</param>
        /// <param name="description">A description of the assignment, homework, or classroom assessment. (optional)</param>
        /// <param name="dueDate">The date the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="dueTime">The time the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxPoints">The maximum number of points  that can be earned for the submission. (optional)</param>
        /// <param name="sourceSectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="title">The name or title of the activity to be recorded in the gradebook entry. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IGetGradebookEntriesApiResponse> GetGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> gradingPeriodDescriptor = default, Option<string> gradingPeriodName = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> localCourseCode = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> gradebookEntryTypeDescriptor = default, Option<DateOnly> dateAssigned = default, Option<string> description = default, Option<DateOnly> dueDate = default, Option<string> dueTime = default, Option<string> id = default, Option<double> maxPoints = default, Option<string> sourceSectionIdentifier = default, Option<string> title = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGradebookEntries(pageToken, gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, description, dueTime, id, sourceSectionIdentifier, title);

                FormatGetGradebookEntries(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref gradebookEntryIdentifier, ref varNamespace, ref gradingPeriodDescriptor, ref gradingPeriodName, ref schoolId, ref schoolYear, ref localCourseCode, ref sectionIdentifier, ref sessionName, ref gradebookEntryTypeDescriptor, ref dateAssigned, ref description, ref dueDate, ref dueTime, ref id, ref maxPoints, ref sourceSectionIdentifier, ref title, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/gradebookEntries"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/gradebookEntries");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (gradebookEntryIdentifier.IsSet)
                        parseQueryStringLocalVar["gradebookEntryIdentifier"] = ClientUtils.ParameterToString(gradebookEntryIdentifier.Value);

                    if (varNamespace.IsSet)
                        parseQueryStringLocalVar["namespace"] = ClientUtils.ParameterToString(varNamespace.Value);

                    if (gradingPeriodDescriptor.IsSet)
                        parseQueryStringLocalVar["gradingPeriodDescriptor"] = ClientUtils.ParameterToString(gradingPeriodDescriptor.Value);

                    if (gradingPeriodName.IsSet)
                        parseQueryStringLocalVar["gradingPeriodName"] = ClientUtils.ParameterToString(gradingPeriodName.Value);

                    if (schoolId.IsSet)
                        parseQueryStringLocalVar["schoolId"] = ClientUtils.ParameterToString(schoolId.Value);

                    if (schoolYear.IsSet)
                        parseQueryStringLocalVar["schoolYear"] = ClientUtils.ParameterToString(schoolYear.Value);

                    if (localCourseCode.IsSet)
                        parseQueryStringLocalVar["localCourseCode"] = ClientUtils.ParameterToString(localCourseCode.Value);

                    if (sectionIdentifier.IsSet)
                        parseQueryStringLocalVar["sectionIdentifier"] = ClientUtils.ParameterToString(sectionIdentifier.Value);

                    if (sessionName.IsSet)
                        parseQueryStringLocalVar["sessionName"] = ClientUtils.ParameterToString(sessionName.Value);

                    if (gradebookEntryTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["gradebookEntryTypeDescriptor"] = ClientUtils.ParameterToString(gradebookEntryTypeDescriptor.Value);

                    if (dateAssigned.IsSet)
                        parseQueryStringLocalVar["dateAssigned"] = ClientUtils.ParameterToString(dateAssigned.Value);

                    if (description.IsSet)
                        parseQueryStringLocalVar["description"] = ClientUtils.ParameterToString(description.Value);

                    if (dueDate.IsSet)
                        parseQueryStringLocalVar["dueDate"] = ClientUtils.ParameterToString(dueDate.Value);

                    if (dueTime.IsSet)
                        parseQueryStringLocalVar["dueTime"] = ClientUtils.ParameterToString(dueTime.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (maxPoints.IsSet)
                        parseQueryStringLocalVar["maxPoints"] = ClientUtils.ParameterToString(maxPoints.Value);

                    if (sourceSectionIdentifier.IsSet)
                        parseQueryStringLocalVar["sourceSectionIdentifier"] = ClientUtils.ParameterToString(sourceSectionIdentifier.Value);

                    if (title.IsSet)
                        parseQueryStringLocalVar["title"] = ClientUtils.ParameterToString(title.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGradebookEntriesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGradebookEntriesApiResponse>();

                        GetGradebookEntriesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/gradebookEntries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGradebookEntriesDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, schoolId, schoolYear, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, dateAssigned, description, dueDate, dueTime, id, maxPoints, sourceSectionIdentifier, title, useSnapshot);

                        Events.ExecuteOnGetGradebookEntries(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGradebookEntriesDefaultImplementation(e, "/ed-fi/gradebookEntries", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, schoolId, schoolYear, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, dateAssigned, description, dueDate, dueTime, id, maxPoints, sourceSectionIdentifier, title, useSnapshot);
                Events.ExecuteOnErrorGetGradebookEntries(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGradebookEntriesApiResponse"/>
        /// </summary>
        public partial class GetGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetGradebookEntriesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGradebookEntriesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGradebookEntriesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGradebookEntriesApiResponse(ILogger<GetGradebookEntriesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiGradebookEntry>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiGradebookEntry>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiGradebookEntry>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGradebookEntriesById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetGradebookEntriesById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetGradebookEntriesByIdDefaultImplementation(IGetGradebookEntriesByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetGradebookEntriesById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetGradebookEntriesById(ref bool suppressDefaultLog, IGetGradebookEntriesByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetGradebookEntriesByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGradebookEntriesById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetGradebookEntriesById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesByIdApiResponse"/>&gt;</returns>
        public async Task<IGetGradebookEntriesByIdApiResponse?> GetGradebookEntriesByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGradebookEntriesByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesByIdApiResponse"/>&gt;</returns>
        public async Task<IGetGradebookEntriesByIdApiResponse> GetGradebookEntriesByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGradebookEntriesById(id, ifNoneMatch);

                FormatGetGradebookEntriesById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/gradebookEntries/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/gradebookEntries/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGradebookEntriesByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGradebookEntriesByIdApiResponse>();

                        GetGradebookEntriesByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/gradebookEntries/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGradebookEntriesByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetGradebookEntriesById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGradebookEntriesByIdDefaultImplementation(e, "/ed-fi/gradebookEntries/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetGradebookEntriesById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGradebookEntriesByIdApiResponse"/>
        /// </summary>
        public partial class GetGradebookEntriesByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetGradebookEntriesByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGradebookEntriesByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGradebookEntriesByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGradebookEntriesByIdApiResponse(ILogger<GetGradebookEntriesByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiGradebookEntry? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiGradebookEntry>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiGradebookEntry? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGradebookEntriesPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> gradebookEntryIdentifier, ref Option<string> varNamespace, ref Option<string> gradingPeriodDescriptor, ref Option<string> gradingPeriodName, ref Option<long> schoolId, ref Option<int> schoolYear, ref Option<string> localCourseCode, ref Option<string> sectionIdentifier, ref Option<string> sessionName, ref Option<string> gradebookEntryTypeDescriptor, ref Option<DateOnly> dateAssigned, ref Option<string> description, ref Option<DateOnly> dueDate, ref Option<string> dueTime, ref Option<string> id, ref Option<double> maxPoints, ref Option<string> sourceSectionIdentifier, ref Option<string> title, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="gradingPeriodDescriptor"></param>
        /// <param name="gradingPeriodName"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="gradebookEntryTypeDescriptor"></param>
        /// <param name="description"></param>
        /// <param name="dueTime"></param>
        /// <param name="id"></param>
        /// <param name="sourceSectionIdentifier"></param>
        /// <param name="title"></param>
        /// <returns></returns>
        private void ValidateGetGradebookEntriesPartitions(Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> gradingPeriodDescriptor, Option<string> gradingPeriodName, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> gradebookEntryTypeDescriptor, Option<string> description, Option<string> dueTime, Option<string> id, Option<string> sourceSectionIdentifier, Option<string> title)
        {
            if (gradebookEntryIdentifier.IsSet && gradebookEntryIdentifier.Value == null)
                throw new ArgumentNullException(nameof(gradebookEntryIdentifier));

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace));

            if (gradingPeriodDescriptor.IsSet && gradingPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodDescriptor));

            if (gradingPeriodName.IsSet && gradingPeriodName.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodName));

            if (localCourseCode.IsSet && localCourseCode.Value == null)
                throw new ArgumentNullException(nameof(localCourseCode));

            if (sectionIdentifier.IsSet && sectionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(sectionIdentifier));

            if (sessionName.IsSet && sessionName.Value == null)
                throw new ArgumentNullException(nameof(sessionName));

            if (gradebookEntryTypeDescriptor.IsSet && gradebookEntryTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradebookEntryTypeDescriptor));

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description));

            if (dueTime.IsSet && dueTime.Value == null)
                throw new ArgumentNullException(nameof(dueTime));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (sourceSectionIdentifier.IsSet && sourceSectionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(sourceSectionIdentifier));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="gradingPeriodDescriptor"></param>
        /// <param name="gradingPeriodName"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="gradebookEntryTypeDescriptor"></param>
        /// <param name="dateAssigned"></param>
        /// <param name="description"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueTime"></param>
        /// <param name="id"></param>
        /// <param name="maxPoints"></param>
        /// <param name="sourceSectionIdentifier"></param>
        /// <param name="title"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetGradebookEntriesPartitionsDefaultImplementation(IGetGradebookEntriesPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> gradingPeriodDescriptor, Option<string> gradingPeriodName, Option<long> schoolId, Option<int> schoolYear, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> gradebookEntryTypeDescriptor, Option<DateOnly> dateAssigned, Option<string> description, Option<DateOnly> dueDate, Option<string> dueTime, Option<string> id, Option<double> maxPoints, Option<string> sourceSectionIdentifier, Option<string> title, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetGradebookEntriesPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, schoolId, schoolYear, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, dateAssigned, description, dueDate, dueTime, id, maxPoints, sourceSectionIdentifier, title, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="gradingPeriodDescriptor"></param>
        /// <param name="gradingPeriodName"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="gradebookEntryTypeDescriptor"></param>
        /// <param name="dateAssigned"></param>
        /// <param name="description"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueTime"></param>
        /// <param name="id"></param>
        /// <param name="maxPoints"></param>
        /// <param name="sourceSectionIdentifier"></param>
        /// <param name="title"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetGradebookEntriesPartitions(ref bool suppressDefaultLog, IGetGradebookEntriesPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> gradingPeriodDescriptor, Option<string> gradingPeriodName, Option<long> schoolId, Option<int> schoolYear, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> gradebookEntryTypeDescriptor, Option<DateOnly> dateAssigned, Option<string> description, Option<DateOnly> dueDate, Option<string> dueTime, Option<string> id, Option<double> maxPoints, Option<string> sourceSectionIdentifier, Option<string> title, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="gradingPeriodDescriptor"></param>
        /// <param name="gradingPeriodName"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="gradebookEntryTypeDescriptor"></param>
        /// <param name="dateAssigned"></param>
        /// <param name="description"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueTime"></param>
        /// <param name="id"></param>
        /// <param name="maxPoints"></param>
        /// <param name="sourceSectionIdentifier"></param>
        /// <param name="title"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetGradebookEntriesPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> gradingPeriodDescriptor, Option<string> gradingPeriodName, Option<long> schoolId, Option<int> schoolYear, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> gradebookEntryTypeDescriptor, Option<DateOnly> dateAssigned, Option<string> description, Option<DateOnly> dueDate, Option<string> dueTime, Option<string> id, Option<double> maxPoints, Option<string> sourceSectionIdentifier, Option<string> title, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGradebookEntriesPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, schoolId, schoolYear, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, dateAssigned, description, dueDate, dueTime, id, maxPoints, sourceSectionIdentifier, title, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="gradingPeriodDescriptor"></param>
        /// <param name="gradingPeriodName"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="gradebookEntryTypeDescriptor"></param>
        /// <param name="dateAssigned"></param>
        /// <param name="description"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueTime"></param>
        /// <param name="id"></param>
        /// <param name="maxPoints"></param>
        /// <param name="sourceSectionIdentifier"></param>
        /// <param name="title"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetGradebookEntriesPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> gradingPeriodDescriptor, Option<string> gradingPeriodName, Option<long> schoolId, Option<int> schoolYear, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> gradebookEntryTypeDescriptor, Option<DateOnly> dateAssigned, Option<string> description, Option<DateOnly> dueDate, Option<string> dueTime, Option<string> id, Option<double> maxPoints, Option<string> sourceSectionIdentifier, Option<string> title, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported. (optional)</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="gradebookEntryTypeDescriptor">The type of the gradebook entry. (optional)</param>
        /// <param name="dateAssigned">The date the assignment, homework, or assessment was assigned or executed. (optional)</param>
        /// <param name="description">A description of the assignment, homework, or classroom assessment. (optional)</param>
        /// <param name="dueDate">The date the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="dueTime">The time the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxPoints">The maximum number of points  that can be earned for the submission. (optional)</param>
        /// <param name="sourceSectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="title">The name or title of the activity to be recorded in the gradebook entry. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetGradebookEntriesPartitionsApiResponse?> GetGradebookEntriesPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> gradingPeriodDescriptor = default, Option<string> gradingPeriodName = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> localCourseCode = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> gradebookEntryTypeDescriptor = default, Option<DateOnly> dateAssigned = default, Option<string> description = default, Option<DateOnly> dueDate = default, Option<string> dueTime = default, Option<string> id = default, Option<double> maxPoints = default, Option<string> sourceSectionIdentifier = default, Option<string> title = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGradebookEntriesPartitionsAsync(number, minChangeVersion, maxChangeVersion, gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, schoolId, schoolYear, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, dateAssigned, description, dueDate, dueTime, id, maxPoints, sourceSectionIdentifier, title, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported. (optional)</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="gradebookEntryTypeDescriptor">The type of the gradebook entry. (optional)</param>
        /// <param name="dateAssigned">The date the assignment, homework, or assessment was assigned or executed. (optional)</param>
        /// <param name="description">A description of the assignment, homework, or classroom assessment. (optional)</param>
        /// <param name="dueDate">The date the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="dueTime">The time the assignment, homework, or assessment is due. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxPoints">The maximum number of points  that can be earned for the submission. (optional)</param>
        /// <param name="sourceSectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="title">The name or title of the activity to be recorded in the gradebook entry. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGradebookEntriesPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetGradebookEntriesPartitionsApiResponse> GetGradebookEntriesPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> gradingPeriodDescriptor = default, Option<string> gradingPeriodName = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> localCourseCode = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> gradebookEntryTypeDescriptor = default, Option<DateOnly> dateAssigned = default, Option<string> description = default, Option<DateOnly> dueDate = default, Option<string> dueTime = default, Option<string> id = default, Option<double> maxPoints = default, Option<string> sourceSectionIdentifier = default, Option<string> title = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGradebookEntriesPartitions(gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, description, dueTime, id, sourceSectionIdentifier, title);

                FormatGetGradebookEntriesPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref gradebookEntryIdentifier, ref varNamespace, ref gradingPeriodDescriptor, ref gradingPeriodName, ref schoolId, ref schoolYear, ref localCourseCode, ref sectionIdentifier, ref sessionName, ref gradebookEntryTypeDescriptor, ref dateAssigned, ref description, ref dueDate, ref dueTime, ref id, ref maxPoints, ref sourceSectionIdentifier, ref title, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/gradebookEntries/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/gradebookEntries/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (gradebookEntryIdentifier.IsSet)
                        parseQueryStringLocalVar["gradebookEntryIdentifier"] = ClientUtils.ParameterToString(gradebookEntryIdentifier.Value);

                    if (varNamespace.IsSet)
                        parseQueryStringLocalVar["namespace"] = ClientUtils.ParameterToString(varNamespace.Value);

                    if (gradingPeriodDescriptor.IsSet)
                        parseQueryStringLocalVar["gradingPeriodDescriptor"] = ClientUtils.ParameterToString(gradingPeriodDescriptor.Value);

                    if (gradingPeriodName.IsSet)
                        parseQueryStringLocalVar["gradingPeriodName"] = ClientUtils.ParameterToString(gradingPeriodName.Value);

                    if (schoolId.IsSet)
                        parseQueryStringLocalVar["schoolId"] = ClientUtils.ParameterToString(schoolId.Value);

                    if (schoolYear.IsSet)
                        parseQueryStringLocalVar["schoolYear"] = ClientUtils.ParameterToString(schoolYear.Value);

                    if (localCourseCode.IsSet)
                        parseQueryStringLocalVar["localCourseCode"] = ClientUtils.ParameterToString(localCourseCode.Value);

                    if (sectionIdentifier.IsSet)
                        parseQueryStringLocalVar["sectionIdentifier"] = ClientUtils.ParameterToString(sectionIdentifier.Value);

                    if (sessionName.IsSet)
                        parseQueryStringLocalVar["sessionName"] = ClientUtils.ParameterToString(sessionName.Value);

                    if (gradebookEntryTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["gradebookEntryTypeDescriptor"] = ClientUtils.ParameterToString(gradebookEntryTypeDescriptor.Value);

                    if (dateAssigned.IsSet)
                        parseQueryStringLocalVar["dateAssigned"] = ClientUtils.ParameterToString(dateAssigned.Value);

                    if (description.IsSet)
                        parseQueryStringLocalVar["description"] = ClientUtils.ParameterToString(description.Value);

                    if (dueDate.IsSet)
                        parseQueryStringLocalVar["dueDate"] = ClientUtils.ParameterToString(dueDate.Value);

                    if (dueTime.IsSet)
                        parseQueryStringLocalVar["dueTime"] = ClientUtils.ParameterToString(dueTime.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (maxPoints.IsSet)
                        parseQueryStringLocalVar["maxPoints"] = ClientUtils.ParameterToString(maxPoints.Value);

                    if (sourceSectionIdentifier.IsSet)
                        parseQueryStringLocalVar["sourceSectionIdentifier"] = ClientUtils.ParameterToString(sourceSectionIdentifier.Value);

                    if (title.IsSet)
                        parseQueryStringLocalVar["title"] = ClientUtils.ParameterToString(title.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGradebookEntriesPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGradebookEntriesPartitionsApiResponse>();

                        GetGradebookEntriesPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/gradebookEntries/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGradebookEntriesPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, schoolId, schoolYear, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, dateAssigned, description, dueDate, dueTime, id, maxPoints, sourceSectionIdentifier, title, useSnapshot);

                        Events.ExecuteOnGetGradebookEntriesPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGradebookEntriesPartitionsDefaultImplementation(e, "/ed-fi/gradebookEntries/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, gradebookEntryIdentifier, varNamespace, gradingPeriodDescriptor, gradingPeriodName, schoolId, schoolYear, localCourseCode, sectionIdentifier, sessionName, gradebookEntryTypeDescriptor, dateAssigned, description, dueDate, dueTime, id, maxPoints, sourceSectionIdentifier, title, useSnapshot);
                Events.ExecuteOnErrorGetGradebookEntriesPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGradebookEntriesPartitionsApiResponse"/>
        /// </summary>
        public partial class GetGradebookEntriesPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetGradebookEntriesPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGradebookEntriesPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGradebookEntriesPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGradebookEntriesPartitionsApiResponse(ILogger<GetGradebookEntriesPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesGradebookEntries(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesGradebookEntriesDefaultImplementation(IKeyChangesGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesGradebookEntries(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesGradebookEntries(ref bool suppressDefaultLog, IKeyChangesGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesGradebookEntriesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesGradebookEntries(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesGradebookEntries(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesGradebookEntriesApiResponse?> KeyChangesGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesGradebookEntriesAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesGradebookEntriesApiResponse> KeyChangesGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesGradebookEntries(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/gradebookEntries/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/gradebookEntries/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesGradebookEntriesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesGradebookEntriesApiResponse>();

                        KeyChangesGradebookEntriesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/gradebookEntries/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesGradebookEntriesDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesGradebookEntries(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesGradebookEntriesDefaultImplementation(e, "/ed-fi/gradebookEntries/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesGradebookEntries(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesGradebookEntriesApiResponse"/>
        /// </summary>
        public partial class KeyChangesGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesGradebookEntriesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesGradebookEntriesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesGradebookEntriesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesGradebookEntriesApiResponse(ILogger<KeyChangesGradebookEntriesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiGradebookEntryKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiGradebookEntryKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiGradebookEntryKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostGradebookEntry(EdFiGradebookEntry edFiGradebookEntry);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiGradebookEntry"></param>
        /// <returns></returns>
        private void ValidatePostGradebookEntry(EdFiGradebookEntry edFiGradebookEntry)
        {
            if (edFiGradebookEntry == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiGradebookEntry"></param>
        private void AfterPostGradebookEntryDefaultImplementation(IPostGradebookEntryApiResponse apiResponseLocalVar, EdFiGradebookEntry edFiGradebookEntry)
        {
            bool suppressDefaultLog = false;
            AfterPostGradebookEntry(ref suppressDefaultLog, apiResponseLocalVar, edFiGradebookEntry);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiGradebookEntry"></param>
        partial void AfterPostGradebookEntry(ref bool suppressDefaultLog, IPostGradebookEntryApiResponse apiResponseLocalVar, EdFiGradebookEntry edFiGradebookEntry);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiGradebookEntry"></param>
        private void OnErrorPostGradebookEntryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiGradebookEntry edFiGradebookEntry)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostGradebookEntry(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiGradebookEntry);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiGradebookEntry"></param>
        partial void OnErrorPostGradebookEntry(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiGradebookEntry edFiGradebookEntry);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiGradebookEntry">The JSON representation of the \&quot;gradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostGradebookEntryApiResponse"/>&gt;</returns>
        public async Task<IPostGradebookEntryApiResponse?> PostGradebookEntryOrDefaultAsync(EdFiGradebookEntry edFiGradebookEntry, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostGradebookEntryAsync(edFiGradebookEntry, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiGradebookEntry">The JSON representation of the \&quot;gradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostGradebookEntryApiResponse"/>&gt;</returns>
        public async Task<IPostGradebookEntryApiResponse> PostGradebookEntryAsync(EdFiGradebookEntry edFiGradebookEntry, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostGradebookEntry(edFiGradebookEntry);

                FormatPostGradebookEntry(edFiGradebookEntry);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/gradebookEntries"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/gradebookEntries");

                    httpRequestMessageLocalVar.Content = (edFiGradebookEntry as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiGradebookEntry, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostGradebookEntryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostGradebookEntryApiResponse>();

                        PostGradebookEntryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/gradebookEntries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostGradebookEntryDefaultImplementation(apiResponseLocalVar, edFiGradebookEntry);

                        Events.ExecuteOnPostGradebookEntry(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostGradebookEntryDefaultImplementation(e, "/ed-fi/gradebookEntries", uriBuilderLocalVar.Path, edFiGradebookEntry);
                Events.ExecuteOnErrorPostGradebookEntry(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostGradebookEntryApiResponse"/>
        /// </summary>
        public partial class PostGradebookEntryApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostGradebookEntryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostGradebookEntryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostGradebookEntryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostGradebookEntryApiResponse(ILogger<PostGradebookEntryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutGradebookEntry(ref string id, EdFiGradebookEntry edFiGradebookEntry, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiGradebookEntry"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutGradebookEntry(string id, EdFiGradebookEntry edFiGradebookEntry, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiGradebookEntry == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiGradebookEntry"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutGradebookEntryDefaultImplementation(IPutGradebookEntryApiResponse apiResponseLocalVar, string id, EdFiGradebookEntry edFiGradebookEntry, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutGradebookEntry(ref suppressDefaultLog, apiResponseLocalVar, id, edFiGradebookEntry, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiGradebookEntry"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutGradebookEntry(ref bool suppressDefaultLog, IPutGradebookEntryApiResponse apiResponseLocalVar, string id, EdFiGradebookEntry edFiGradebookEntry, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiGradebookEntry"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutGradebookEntryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiGradebookEntry edFiGradebookEntry, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutGradebookEntry(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiGradebookEntry, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiGradebookEntry"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutGradebookEntry(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiGradebookEntry edFiGradebookEntry, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiGradebookEntry">The JSON representation of the \&quot;gradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutGradebookEntryApiResponse"/>&gt;</returns>
        public async Task<IPutGradebookEntryApiResponse?> PutGradebookEntryOrDefaultAsync(string id, EdFiGradebookEntry edFiGradebookEntry, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutGradebookEntryAsync(id, edFiGradebookEntry, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiGradebookEntry">The JSON representation of the \&quot;gradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutGradebookEntryApiResponse"/>&gt;</returns>
        public async Task<IPutGradebookEntryApiResponse> PutGradebookEntryAsync(string id, EdFiGradebookEntry edFiGradebookEntry, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutGradebookEntry(id, edFiGradebookEntry, ifMatch);

                FormatPutGradebookEntry(ref id, edFiGradebookEntry, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/gradebookEntries/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/gradebookEntries/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiGradebookEntry as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiGradebookEntry, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutGradebookEntryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutGradebookEntryApiResponse>();

                        PutGradebookEntryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/gradebookEntries/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutGradebookEntryDefaultImplementation(apiResponseLocalVar, id, edFiGradebookEntry, ifMatch);

                        Events.ExecuteOnPutGradebookEntry(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutGradebookEntryDefaultImplementation(e, "/ed-fi/gradebookEntries/{id}", uriBuilderLocalVar.Path, id, edFiGradebookEntry, ifMatch);
                Events.ExecuteOnErrorPutGradebookEntry(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutGradebookEntryApiResponse"/>
        /// </summary>
        public partial class PutGradebookEntryApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutGradebookEntryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutGradebookEntryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutGradebookEntryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutGradebookEntryApiResponse(ILogger<PutGradebookEntryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
