// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPostSecondaryInstitutionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PostSecondaryInstitutionsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePostSecondaryInstitutionByIdApiResponse"/>&gt;</returns>
        Task<IDeletePostSecondaryInstitutionByIdApiResponse> DeletePostSecondaryInstitutionByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePostSecondaryInstitutionByIdApiResponse"/>?&gt;</returns>
        Task<IDeletePostSecondaryInstitutionByIdApiResponse?> DeletePostSecondaryInstitutionByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesPostSecondaryInstitutionsApiResponse"/>&gt;</returns>
        Task<IDeletesPostSecondaryInstitutionsApiResponse> DeletesPostSecondaryInstitutionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesPostSecondaryInstitutionsApiResponse"/>?&gt;</returns>
        Task<IDeletesPostSecondaryInstitutionsApiResponse?> DeletesPostSecondaryInstitutionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="postSecondaryInstitutionId">The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)</param>
        /// <param name="postSecondaryInstitutionLevelDescriptor">A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsApiResponse"/>&gt;</returns>
        Task<IGetPostSecondaryInstitutionsApiResponse> GetPostSecondaryInstitutionsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> postSecondaryInstitutionId = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> postSecondaryInstitutionLevelDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="postSecondaryInstitutionId">The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)</param>
        /// <param name="postSecondaryInstitutionLevelDescriptor">A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsApiResponse"/>?&gt;</returns>
        Task<IGetPostSecondaryInstitutionsApiResponse?> GetPostSecondaryInstitutionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> postSecondaryInstitutionId = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> postSecondaryInstitutionLevelDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsByIdApiResponse"/>&gt;</returns>
        Task<IGetPostSecondaryInstitutionsByIdApiResponse> GetPostSecondaryInstitutionsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsByIdApiResponse"/>?&gt;</returns>
        Task<IGetPostSecondaryInstitutionsByIdApiResponse?> GetPostSecondaryInstitutionsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="postSecondaryInstitutionId">The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)</param>
        /// <param name="postSecondaryInstitutionLevelDescriptor">A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetPostSecondaryInstitutionsPartitionsApiResponse> GetPostSecondaryInstitutionsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> postSecondaryInstitutionId = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> postSecondaryInstitutionLevelDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="postSecondaryInstitutionId">The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)</param>
        /// <param name="postSecondaryInstitutionLevelDescriptor">A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetPostSecondaryInstitutionsPartitionsApiResponse?> GetPostSecondaryInstitutionsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> postSecondaryInstitutionId = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> postSecondaryInstitutionLevelDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesPostSecondaryInstitutionsApiResponse"/>&gt;</returns>
        Task<IKeyChangesPostSecondaryInstitutionsApiResponse> KeyChangesPostSecondaryInstitutionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesPostSecondaryInstitutionsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesPostSecondaryInstitutionsApiResponse?> KeyChangesPostSecondaryInstitutionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiPostSecondaryInstitution">The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPostSecondaryInstitutionApiResponse"/>&gt;</returns>
        Task<IPostPostSecondaryInstitutionApiResponse> PostPostSecondaryInstitutionAsync(EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiPostSecondaryInstitution">The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPostSecondaryInstitutionApiResponse"/>?&gt;</returns>
        Task<IPostPostSecondaryInstitutionApiResponse?> PostPostSecondaryInstitutionOrDefaultAsync(EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiPostSecondaryInstitution">The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPostSecondaryInstitutionApiResponse"/>&gt;</returns>
        Task<IPutPostSecondaryInstitutionApiResponse> PutPostSecondaryInstitutionAsync(string id, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiPostSecondaryInstitution">The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPostSecondaryInstitutionApiResponse"/>?&gt;</returns>
        Task<IPutPostSecondaryInstitutionApiResponse?> PutPostSecondaryInstitutionOrDefaultAsync(string id, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeletePostSecondaryInstitutionByIdApiResponse"/>
    /// </summary>
    public interface IDeletePostSecondaryInstitutionByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesPostSecondaryInstitutionsApiResponse"/>
    /// </summary>
    public interface IDeletesPostSecondaryInstitutionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiPostSecondaryInstitutionDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetPostSecondaryInstitutionsApiResponse"/>
    /// </summary>
    public interface IGetPostSecondaryInstitutionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiPostSecondaryInstitution>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetPostSecondaryInstitutionsByIdApiResponse"/>
    /// </summary>
    public interface IGetPostSecondaryInstitutionsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiPostSecondaryInstitution?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetPostSecondaryInstitutionsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetPostSecondaryInstitutionsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesPostSecondaryInstitutionsApiResponse"/>
    /// </summary>
    public interface IKeyChangesPostSecondaryInstitutionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiPostSecondaryInstitutionKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostPostSecondaryInstitutionApiResponse"/>
    /// </summary>
    public interface IPostPostSecondaryInstitutionApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutPostSecondaryInstitutionApiResponse"/>
    /// </summary>
    public interface IPutPostSecondaryInstitutionApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PostSecondaryInstitutionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletePostSecondaryInstitutionById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletePostSecondaryInstitutionById;

        internal void ExecuteOnDeletePostSecondaryInstitutionById(PostSecondaryInstitutionsApi.DeletePostSecondaryInstitutionByIdApiResponse apiResponse)
        {
            OnDeletePostSecondaryInstitutionById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePostSecondaryInstitutionById(Exception exception)
        {
            OnErrorDeletePostSecondaryInstitutionById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesPostSecondaryInstitutions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesPostSecondaryInstitutions;

        internal void ExecuteOnDeletesPostSecondaryInstitutions(PostSecondaryInstitutionsApi.DeletesPostSecondaryInstitutionsApiResponse apiResponse)
        {
            OnDeletesPostSecondaryInstitutions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesPostSecondaryInstitutions(Exception exception)
        {
            OnErrorDeletesPostSecondaryInstitutions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPostSecondaryInstitutions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPostSecondaryInstitutions;

        internal void ExecuteOnGetPostSecondaryInstitutions(PostSecondaryInstitutionsApi.GetPostSecondaryInstitutionsApiResponse apiResponse)
        {
            OnGetPostSecondaryInstitutions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPostSecondaryInstitutions(Exception exception)
        {
            OnErrorGetPostSecondaryInstitutions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPostSecondaryInstitutionsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPostSecondaryInstitutionsById;

        internal void ExecuteOnGetPostSecondaryInstitutionsById(PostSecondaryInstitutionsApi.GetPostSecondaryInstitutionsByIdApiResponse apiResponse)
        {
            OnGetPostSecondaryInstitutionsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPostSecondaryInstitutionsById(Exception exception)
        {
            OnErrorGetPostSecondaryInstitutionsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPostSecondaryInstitutionsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPostSecondaryInstitutionsPartitions;

        internal void ExecuteOnGetPostSecondaryInstitutionsPartitions(PostSecondaryInstitutionsApi.GetPostSecondaryInstitutionsPartitionsApiResponse apiResponse)
        {
            OnGetPostSecondaryInstitutionsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPostSecondaryInstitutionsPartitions(Exception exception)
        {
            OnErrorGetPostSecondaryInstitutionsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesPostSecondaryInstitutions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesPostSecondaryInstitutions;

        internal void ExecuteOnKeyChangesPostSecondaryInstitutions(PostSecondaryInstitutionsApi.KeyChangesPostSecondaryInstitutionsApiResponse apiResponse)
        {
            OnKeyChangesPostSecondaryInstitutions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesPostSecondaryInstitutions(Exception exception)
        {
            OnErrorKeyChangesPostSecondaryInstitutions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostPostSecondaryInstitution;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostPostSecondaryInstitution;

        internal void ExecuteOnPostPostSecondaryInstitution(PostSecondaryInstitutionsApi.PostPostSecondaryInstitutionApiResponse apiResponse)
        {
            OnPostPostSecondaryInstitution?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostPostSecondaryInstitution(Exception exception)
        {
            OnErrorPostPostSecondaryInstitution?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutPostSecondaryInstitution;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutPostSecondaryInstitution;

        internal void ExecuteOnPutPostSecondaryInstitution(PostSecondaryInstitutionsApi.PutPostSecondaryInstitutionApiResponse apiResponse)
        {
            OnPutPostSecondaryInstitution?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutPostSecondaryInstitution(Exception exception)
        {
            OnErrorPutPostSecondaryInstitution?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PostSecondaryInstitutionsApi : IPostSecondaryInstitutionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PostSecondaryInstitutionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PostSecondaryInstitutionsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostSecondaryInstitutionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PostSecondaryInstitutionsApi(ILogger<PostSecondaryInstitutionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PostSecondaryInstitutionsApiEvents postSecondaryInstitutionsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PostSecondaryInstitutionsApi>();
            HttpClient = httpClient;
            Events = postSecondaryInstitutionsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeletePostSecondaryInstitutionById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeletePostSecondaryInstitutionById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeletePostSecondaryInstitutionByIdDefaultImplementation(IDeletePostSecondaryInstitutionByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeletePostSecondaryInstitutionById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeletePostSecondaryInstitutionById(ref bool suppressDefaultLog, IDeletePostSecondaryInstitutionByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeletePostSecondaryInstitutionByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePostSecondaryInstitutionById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeletePostSecondaryInstitutionById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePostSecondaryInstitutionByIdApiResponse"/>&gt;</returns>
        public async Task<IDeletePostSecondaryInstitutionByIdApiResponse?> DeletePostSecondaryInstitutionByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePostSecondaryInstitutionByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePostSecondaryInstitutionByIdApiResponse"/>&gt;</returns>
        public async Task<IDeletePostSecondaryInstitutionByIdApiResponse> DeletePostSecondaryInstitutionByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletePostSecondaryInstitutionById(id, ifMatch);

                FormatDeletePostSecondaryInstitutionById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/postSecondaryInstitutions/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/postSecondaryInstitutions/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletePostSecondaryInstitutionByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePostSecondaryInstitutionByIdApiResponse>();

                        DeletePostSecondaryInstitutionByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/postSecondaryInstitutions/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePostSecondaryInstitutionByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeletePostSecondaryInstitutionById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePostSecondaryInstitutionByIdDefaultImplementation(e, "/ed-fi/postSecondaryInstitutions/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeletePostSecondaryInstitutionById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePostSecondaryInstitutionByIdApiResponse"/>
        /// </summary>
        public partial class DeletePostSecondaryInstitutionByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletePostSecondaryInstitutionByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePostSecondaryInstitutionByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePostSecondaryInstitutionByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePostSecondaryInstitutionByIdApiResponse(ILogger<DeletePostSecondaryInstitutionByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesPostSecondaryInstitutions(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesPostSecondaryInstitutionsDefaultImplementation(IDeletesPostSecondaryInstitutionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesPostSecondaryInstitutions(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesPostSecondaryInstitutions(ref bool suppressDefaultLog, IDeletesPostSecondaryInstitutionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesPostSecondaryInstitutionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesPostSecondaryInstitutions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesPostSecondaryInstitutions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesPostSecondaryInstitutionsApiResponse"/>&gt;</returns>
        public async Task<IDeletesPostSecondaryInstitutionsApiResponse?> DeletesPostSecondaryInstitutionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesPostSecondaryInstitutionsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesPostSecondaryInstitutionsApiResponse"/>&gt;</returns>
        public async Task<IDeletesPostSecondaryInstitutionsApiResponse> DeletesPostSecondaryInstitutionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesPostSecondaryInstitutions(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/postSecondaryInstitutions/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/postSecondaryInstitutions/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesPostSecondaryInstitutionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesPostSecondaryInstitutionsApiResponse>();

                        DeletesPostSecondaryInstitutionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/postSecondaryInstitutions/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesPostSecondaryInstitutionsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesPostSecondaryInstitutions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesPostSecondaryInstitutionsDefaultImplementation(e, "/ed-fi/postSecondaryInstitutions/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesPostSecondaryInstitutions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesPostSecondaryInstitutionsApiResponse"/>
        /// </summary>
        public partial class DeletesPostSecondaryInstitutionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesPostSecondaryInstitutionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesPostSecondaryInstitutionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesPostSecondaryInstitutionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesPostSecondaryInstitutionsApiResponse(ILogger<DeletesPostSecondaryInstitutionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiPostSecondaryInstitutionDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiPostSecondaryInstitutionDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiPostSecondaryInstitutionDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPostSecondaryInstitutions(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<long> postSecondaryInstitutionId, ref Option<string> administrativeFundingControlDescriptor, ref Option<string> postSecondaryInstitutionLevelDescriptor, ref Option<string> operationalStatusDescriptor, ref Option<string> id, ref Option<string> nameOfInstitution, ref Option<string> shortNameOfInstitution, ref Option<string> webSite, ref Option<bool> useSnapshot, ref Option<string> educationOrganizationIdentificationSystemDescriptor, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="postSecondaryInstitutionLevelDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetPostSecondaryInstitutions(Option<string> pageToken, Option<string> administrativeFundingControlDescriptor, Option<string> postSecondaryInstitutionLevelDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (administrativeFundingControlDescriptor.IsSet && administrativeFundingControlDescriptor.Value == null)
                throw new ArgumentNullException(nameof(administrativeFundingControlDescriptor));

            if (postSecondaryInstitutionLevelDescriptor.IsSet && postSecondaryInstitutionLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(postSecondaryInstitutionLevelDescriptor));

            if (operationalStatusDescriptor.IsSet && operationalStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(operationalStatusDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (nameOfInstitution.IsSet && nameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(nameOfInstitution));

            if (shortNameOfInstitution.IsSet && shortNameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(shortNameOfInstitution));

            if (webSite.IsSet && webSite.Value == null)
                throw new ArgumentNullException(nameof(webSite));

            if (educationOrganizationIdentificationSystemDescriptor.IsSet && educationOrganizationIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationIdentificationSystemDescriptor));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="postSecondaryInstitutionId"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="postSecondaryInstitutionLevelDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetPostSecondaryInstitutionsDefaultImplementation(IGetPostSecondaryInstitutionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> postSecondaryInstitutionId, Option<string> administrativeFundingControlDescriptor, Option<string> postSecondaryInstitutionLevelDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetPostSecondaryInstitutions(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, postSecondaryInstitutionId, administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="postSecondaryInstitutionId"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="postSecondaryInstitutionLevelDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetPostSecondaryInstitutions(ref bool suppressDefaultLog, IGetPostSecondaryInstitutionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> postSecondaryInstitutionId, Option<string> administrativeFundingControlDescriptor, Option<string> postSecondaryInstitutionLevelDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="postSecondaryInstitutionId"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="postSecondaryInstitutionLevelDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetPostSecondaryInstitutionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> postSecondaryInstitutionId, Option<string> administrativeFundingControlDescriptor, Option<string> postSecondaryInstitutionLevelDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPostSecondaryInstitutions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, postSecondaryInstitutionId, administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="postSecondaryInstitutionId"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="postSecondaryInstitutionLevelDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetPostSecondaryInstitutions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> postSecondaryInstitutionId, Option<string> administrativeFundingControlDescriptor, Option<string> postSecondaryInstitutionLevelDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="postSecondaryInstitutionId">The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)</param>
        /// <param name="postSecondaryInstitutionLevelDescriptor">A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsApiResponse"/>&gt;</returns>
        public async Task<IGetPostSecondaryInstitutionsApiResponse?> GetPostSecondaryInstitutionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> postSecondaryInstitutionId = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> postSecondaryInstitutionLevelDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPostSecondaryInstitutionsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, postSecondaryInstitutionId, administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="postSecondaryInstitutionId">The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)</param>
        /// <param name="postSecondaryInstitutionLevelDescriptor">A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsApiResponse"/>&gt;</returns>
        public async Task<IGetPostSecondaryInstitutionsApiResponse> GetPostSecondaryInstitutionsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> postSecondaryInstitutionId = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> postSecondaryInstitutionLevelDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPostSecondaryInstitutions(pageToken, administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, educationOrganizationIdentificationSystemDescriptor, identificationCode);

                FormatGetPostSecondaryInstitutions(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref postSecondaryInstitutionId, ref administrativeFundingControlDescriptor, ref postSecondaryInstitutionLevelDescriptor, ref operationalStatusDescriptor, ref id, ref nameOfInstitution, ref shortNameOfInstitution, ref webSite, ref useSnapshot, ref educationOrganizationIdentificationSystemDescriptor, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/postSecondaryInstitutions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/postSecondaryInstitutions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (postSecondaryInstitutionId.IsSet)
                        parseQueryStringLocalVar["postSecondaryInstitutionId"] = ClientUtils.ParameterToString(postSecondaryInstitutionId.Value);

                    if (administrativeFundingControlDescriptor.IsSet)
                        parseQueryStringLocalVar["administrativeFundingControlDescriptor"] = ClientUtils.ParameterToString(administrativeFundingControlDescriptor.Value);

                    if (postSecondaryInstitutionLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["postSecondaryInstitutionLevelDescriptor"] = ClientUtils.ParameterToString(postSecondaryInstitutionLevelDescriptor.Value);

                    if (operationalStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["operationalStatusDescriptor"] = ClientUtils.ParameterToString(operationalStatusDescriptor.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (nameOfInstitution.IsSet)
                        parseQueryStringLocalVar["nameOfInstitution"] = ClientUtils.ParameterToString(nameOfInstitution.Value);

                    if (shortNameOfInstitution.IsSet)
                        parseQueryStringLocalVar["shortNameOfInstitution"] = ClientUtils.ParameterToString(shortNameOfInstitution.Value);

                    if (webSite.IsSet)
                        parseQueryStringLocalVar["webSite"] = ClientUtils.ParameterToString(webSite.Value);

                    if (educationOrganizationIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["educationOrganizationIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(educationOrganizationIdentificationSystemDescriptor.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPostSecondaryInstitutionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPostSecondaryInstitutionsApiResponse>();

                        GetPostSecondaryInstitutionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/postSecondaryInstitutions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPostSecondaryInstitutionsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, postSecondaryInstitutionId, administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);

                        Events.ExecuteOnGetPostSecondaryInstitutions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPostSecondaryInstitutionsDefaultImplementation(e, "/ed-fi/postSecondaryInstitutions", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, postSecondaryInstitutionId, administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
                Events.ExecuteOnErrorGetPostSecondaryInstitutions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPostSecondaryInstitutionsApiResponse"/>
        /// </summary>
        public partial class GetPostSecondaryInstitutionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetPostSecondaryInstitutionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPostSecondaryInstitutionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPostSecondaryInstitutionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPostSecondaryInstitutionsApiResponse(ILogger<GetPostSecondaryInstitutionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiPostSecondaryInstitution>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiPostSecondaryInstitution>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiPostSecondaryInstitution>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPostSecondaryInstitutionsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetPostSecondaryInstitutionsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetPostSecondaryInstitutionsByIdDefaultImplementation(IGetPostSecondaryInstitutionsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetPostSecondaryInstitutionsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetPostSecondaryInstitutionsById(ref bool suppressDefaultLog, IGetPostSecondaryInstitutionsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetPostSecondaryInstitutionsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPostSecondaryInstitutionsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetPostSecondaryInstitutionsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetPostSecondaryInstitutionsByIdApiResponse?> GetPostSecondaryInstitutionsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPostSecondaryInstitutionsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetPostSecondaryInstitutionsByIdApiResponse> GetPostSecondaryInstitutionsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPostSecondaryInstitutionsById(id, ifNoneMatch);

                FormatGetPostSecondaryInstitutionsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/postSecondaryInstitutions/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/postSecondaryInstitutions/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPostSecondaryInstitutionsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPostSecondaryInstitutionsByIdApiResponse>();

                        GetPostSecondaryInstitutionsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/postSecondaryInstitutions/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPostSecondaryInstitutionsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetPostSecondaryInstitutionsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPostSecondaryInstitutionsByIdDefaultImplementation(e, "/ed-fi/postSecondaryInstitutions/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetPostSecondaryInstitutionsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPostSecondaryInstitutionsByIdApiResponse"/>
        /// </summary>
        public partial class GetPostSecondaryInstitutionsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetPostSecondaryInstitutionsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPostSecondaryInstitutionsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPostSecondaryInstitutionsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPostSecondaryInstitutionsByIdApiResponse(ILogger<GetPostSecondaryInstitutionsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiPostSecondaryInstitution? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiPostSecondaryInstitution>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiPostSecondaryInstitution? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPostSecondaryInstitutionsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<long> postSecondaryInstitutionId, ref Option<string> administrativeFundingControlDescriptor, ref Option<string> postSecondaryInstitutionLevelDescriptor, ref Option<string> operationalStatusDescriptor, ref Option<string> id, ref Option<string> nameOfInstitution, ref Option<string> shortNameOfInstitution, ref Option<string> webSite, ref Option<bool> useSnapshot, ref Option<string> educationOrganizationIdentificationSystemDescriptor, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="postSecondaryInstitutionLevelDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetPostSecondaryInstitutionsPartitions(Option<string> administrativeFundingControlDescriptor, Option<string> postSecondaryInstitutionLevelDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            if (administrativeFundingControlDescriptor.IsSet && administrativeFundingControlDescriptor.Value == null)
                throw new ArgumentNullException(nameof(administrativeFundingControlDescriptor));

            if (postSecondaryInstitutionLevelDescriptor.IsSet && postSecondaryInstitutionLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(postSecondaryInstitutionLevelDescriptor));

            if (operationalStatusDescriptor.IsSet && operationalStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(operationalStatusDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (nameOfInstitution.IsSet && nameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(nameOfInstitution));

            if (shortNameOfInstitution.IsSet && shortNameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(shortNameOfInstitution));

            if (webSite.IsSet && webSite.Value == null)
                throw new ArgumentNullException(nameof(webSite));

            if (educationOrganizationIdentificationSystemDescriptor.IsSet && educationOrganizationIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationIdentificationSystemDescriptor));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="postSecondaryInstitutionId"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="postSecondaryInstitutionLevelDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetPostSecondaryInstitutionsPartitionsDefaultImplementation(IGetPostSecondaryInstitutionsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> postSecondaryInstitutionId, Option<string> administrativeFundingControlDescriptor, Option<string> postSecondaryInstitutionLevelDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetPostSecondaryInstitutionsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, postSecondaryInstitutionId, administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="postSecondaryInstitutionId"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="postSecondaryInstitutionLevelDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetPostSecondaryInstitutionsPartitions(ref bool suppressDefaultLog, IGetPostSecondaryInstitutionsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> postSecondaryInstitutionId, Option<string> administrativeFundingControlDescriptor, Option<string> postSecondaryInstitutionLevelDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="postSecondaryInstitutionId"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="postSecondaryInstitutionLevelDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetPostSecondaryInstitutionsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> postSecondaryInstitutionId, Option<string> administrativeFundingControlDescriptor, Option<string> postSecondaryInstitutionLevelDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPostSecondaryInstitutionsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, postSecondaryInstitutionId, administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="postSecondaryInstitutionId"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="postSecondaryInstitutionLevelDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetPostSecondaryInstitutionsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> postSecondaryInstitutionId, Option<string> administrativeFundingControlDescriptor, Option<string> postSecondaryInstitutionLevelDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="postSecondaryInstitutionId">The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)</param>
        /// <param name="postSecondaryInstitutionLevelDescriptor">A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetPostSecondaryInstitutionsPartitionsApiResponse?> GetPostSecondaryInstitutionsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> postSecondaryInstitutionId = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> postSecondaryInstitutionLevelDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPostSecondaryInstitutionsPartitionsAsync(number, minChangeVersion, maxChangeVersion, postSecondaryInstitutionId, administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="postSecondaryInstitutionId">The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)</param>
        /// <param name="postSecondaryInstitutionLevelDescriptor">A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPostSecondaryInstitutionsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetPostSecondaryInstitutionsPartitionsApiResponse> GetPostSecondaryInstitutionsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> postSecondaryInstitutionId = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> postSecondaryInstitutionLevelDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPostSecondaryInstitutionsPartitions(administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, educationOrganizationIdentificationSystemDescriptor, identificationCode);

                FormatGetPostSecondaryInstitutionsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref postSecondaryInstitutionId, ref administrativeFundingControlDescriptor, ref postSecondaryInstitutionLevelDescriptor, ref operationalStatusDescriptor, ref id, ref nameOfInstitution, ref shortNameOfInstitution, ref webSite, ref useSnapshot, ref educationOrganizationIdentificationSystemDescriptor, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/postSecondaryInstitutions/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/postSecondaryInstitutions/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (postSecondaryInstitutionId.IsSet)
                        parseQueryStringLocalVar["postSecondaryInstitutionId"] = ClientUtils.ParameterToString(postSecondaryInstitutionId.Value);

                    if (administrativeFundingControlDescriptor.IsSet)
                        parseQueryStringLocalVar["administrativeFundingControlDescriptor"] = ClientUtils.ParameterToString(administrativeFundingControlDescriptor.Value);

                    if (postSecondaryInstitutionLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["postSecondaryInstitutionLevelDescriptor"] = ClientUtils.ParameterToString(postSecondaryInstitutionLevelDescriptor.Value);

                    if (operationalStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["operationalStatusDescriptor"] = ClientUtils.ParameterToString(operationalStatusDescriptor.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (nameOfInstitution.IsSet)
                        parseQueryStringLocalVar["nameOfInstitution"] = ClientUtils.ParameterToString(nameOfInstitution.Value);

                    if (shortNameOfInstitution.IsSet)
                        parseQueryStringLocalVar["shortNameOfInstitution"] = ClientUtils.ParameterToString(shortNameOfInstitution.Value);

                    if (webSite.IsSet)
                        parseQueryStringLocalVar["webSite"] = ClientUtils.ParameterToString(webSite.Value);

                    if (educationOrganizationIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["educationOrganizationIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(educationOrganizationIdentificationSystemDescriptor.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPostSecondaryInstitutionsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPostSecondaryInstitutionsPartitionsApiResponse>();

                        GetPostSecondaryInstitutionsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/postSecondaryInstitutions/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPostSecondaryInstitutionsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, postSecondaryInstitutionId, administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);

                        Events.ExecuteOnGetPostSecondaryInstitutionsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPostSecondaryInstitutionsPartitionsDefaultImplementation(e, "/ed-fi/postSecondaryInstitutions/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, postSecondaryInstitutionId, administrativeFundingControlDescriptor, postSecondaryInstitutionLevelDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
                Events.ExecuteOnErrorGetPostSecondaryInstitutionsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPostSecondaryInstitutionsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetPostSecondaryInstitutionsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetPostSecondaryInstitutionsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPostSecondaryInstitutionsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPostSecondaryInstitutionsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPostSecondaryInstitutionsPartitionsApiResponse(ILogger<GetPostSecondaryInstitutionsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesPostSecondaryInstitutions(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesPostSecondaryInstitutionsDefaultImplementation(IKeyChangesPostSecondaryInstitutionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesPostSecondaryInstitutions(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesPostSecondaryInstitutions(ref bool suppressDefaultLog, IKeyChangesPostSecondaryInstitutionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesPostSecondaryInstitutionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesPostSecondaryInstitutions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesPostSecondaryInstitutions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesPostSecondaryInstitutionsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesPostSecondaryInstitutionsApiResponse?> KeyChangesPostSecondaryInstitutionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesPostSecondaryInstitutionsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesPostSecondaryInstitutionsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesPostSecondaryInstitutionsApiResponse> KeyChangesPostSecondaryInstitutionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesPostSecondaryInstitutions(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/postSecondaryInstitutions/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/postSecondaryInstitutions/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesPostSecondaryInstitutionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesPostSecondaryInstitutionsApiResponse>();

                        KeyChangesPostSecondaryInstitutionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/postSecondaryInstitutions/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesPostSecondaryInstitutionsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesPostSecondaryInstitutions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesPostSecondaryInstitutionsDefaultImplementation(e, "/ed-fi/postSecondaryInstitutions/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesPostSecondaryInstitutions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesPostSecondaryInstitutionsApiResponse"/>
        /// </summary>
        public partial class KeyChangesPostSecondaryInstitutionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesPostSecondaryInstitutionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesPostSecondaryInstitutionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesPostSecondaryInstitutionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesPostSecondaryInstitutionsApiResponse(ILogger<KeyChangesPostSecondaryInstitutionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiPostSecondaryInstitutionKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiPostSecondaryInstitutionKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiPostSecondaryInstitutionKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostPostSecondaryInstitution(EdFiPostSecondaryInstitution edFiPostSecondaryInstitution);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiPostSecondaryInstitution"></param>
        /// <returns></returns>
        private void ValidatePostPostSecondaryInstitution(EdFiPostSecondaryInstitution edFiPostSecondaryInstitution)
        {
            if (edFiPostSecondaryInstitution == null)
                throw new ArgumentNullException(nameof(edFiPostSecondaryInstitution));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiPostSecondaryInstitution"></param>
        private void AfterPostPostSecondaryInstitutionDefaultImplementation(IPostPostSecondaryInstitutionApiResponse apiResponseLocalVar, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution)
        {
            bool suppressDefaultLog = false;
            AfterPostPostSecondaryInstitution(ref suppressDefaultLog, apiResponseLocalVar, edFiPostSecondaryInstitution);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiPostSecondaryInstitution"></param>
        partial void AfterPostPostSecondaryInstitution(ref bool suppressDefaultLog, IPostPostSecondaryInstitutionApiResponse apiResponseLocalVar, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiPostSecondaryInstitution"></param>
        private void OnErrorPostPostSecondaryInstitutionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostPostSecondaryInstitution(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiPostSecondaryInstitution);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiPostSecondaryInstitution"></param>
        partial void OnErrorPostPostSecondaryInstitution(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiPostSecondaryInstitution">The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPostSecondaryInstitutionApiResponse"/>&gt;</returns>
        public async Task<IPostPostSecondaryInstitutionApiResponse?> PostPostSecondaryInstitutionOrDefaultAsync(EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostPostSecondaryInstitutionAsync(edFiPostSecondaryInstitution, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiPostSecondaryInstitution">The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPostSecondaryInstitutionApiResponse"/>&gt;</returns>
        public async Task<IPostPostSecondaryInstitutionApiResponse> PostPostSecondaryInstitutionAsync(EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostPostSecondaryInstitution(edFiPostSecondaryInstitution);

                FormatPostPostSecondaryInstitution(edFiPostSecondaryInstitution);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/postSecondaryInstitutions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/postSecondaryInstitutions");

                    httpRequestMessageLocalVar.Content = (edFiPostSecondaryInstitution as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiPostSecondaryInstitution, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostPostSecondaryInstitutionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostPostSecondaryInstitutionApiResponse>();

                        PostPostSecondaryInstitutionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/postSecondaryInstitutions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostPostSecondaryInstitutionDefaultImplementation(apiResponseLocalVar, edFiPostSecondaryInstitution);

                        Events.ExecuteOnPostPostSecondaryInstitution(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostPostSecondaryInstitutionDefaultImplementation(e, "/ed-fi/postSecondaryInstitutions", uriBuilderLocalVar.Path, edFiPostSecondaryInstitution);
                Events.ExecuteOnErrorPostPostSecondaryInstitution(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostPostSecondaryInstitutionApiResponse"/>
        /// </summary>
        public partial class PostPostSecondaryInstitutionApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostPostSecondaryInstitutionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostPostSecondaryInstitutionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostPostSecondaryInstitutionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostPostSecondaryInstitutionApiResponse(ILogger<PostPostSecondaryInstitutionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutPostSecondaryInstitution(ref string id, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiPostSecondaryInstitution"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutPostSecondaryInstitution(string id, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiPostSecondaryInstitution == null)
                throw new ArgumentNullException(nameof(edFiPostSecondaryInstitution));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiPostSecondaryInstitution"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutPostSecondaryInstitutionDefaultImplementation(IPutPostSecondaryInstitutionApiResponse apiResponseLocalVar, string id, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutPostSecondaryInstitution(ref suppressDefaultLog, apiResponseLocalVar, id, edFiPostSecondaryInstitution, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiPostSecondaryInstitution"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutPostSecondaryInstitution(ref bool suppressDefaultLog, IPutPostSecondaryInstitutionApiResponse apiResponseLocalVar, string id, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiPostSecondaryInstitution"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutPostSecondaryInstitutionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutPostSecondaryInstitution(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiPostSecondaryInstitution, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiPostSecondaryInstitution"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutPostSecondaryInstitution(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiPostSecondaryInstitution">The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPostSecondaryInstitutionApiResponse"/>&gt;</returns>
        public async Task<IPutPostSecondaryInstitutionApiResponse?> PutPostSecondaryInstitutionOrDefaultAsync(string id, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutPostSecondaryInstitutionAsync(id, edFiPostSecondaryInstitution, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiPostSecondaryInstitution">The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPostSecondaryInstitutionApiResponse"/>&gt;</returns>
        public async Task<IPutPostSecondaryInstitutionApiResponse> PutPostSecondaryInstitutionAsync(string id, EdFiPostSecondaryInstitution edFiPostSecondaryInstitution, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutPostSecondaryInstitution(id, edFiPostSecondaryInstitution, ifMatch);

                FormatPutPostSecondaryInstitution(ref id, edFiPostSecondaryInstitution, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/postSecondaryInstitutions/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/postSecondaryInstitutions/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiPostSecondaryInstitution as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiPostSecondaryInstitution, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutPostSecondaryInstitutionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutPostSecondaryInstitutionApiResponse>();

                        PutPostSecondaryInstitutionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/postSecondaryInstitutions/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutPostSecondaryInstitutionDefaultImplementation(apiResponseLocalVar, id, edFiPostSecondaryInstitution, ifMatch);

                        Events.ExecuteOnPutPostSecondaryInstitution(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutPostSecondaryInstitutionDefaultImplementation(e, "/ed-fi/postSecondaryInstitutions/{id}", uriBuilderLocalVar.Path, id, edFiPostSecondaryInstitution, ifMatch);
                Events.ExecuteOnErrorPutPostSecondaryInstitution(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutPostSecondaryInstitutionApiResponse"/>
        /// </summary>
        public partial class PutPostSecondaryInstitutionApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutPostSecondaryInstitutionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutPostSecondaryInstitutionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutPostSecondaryInstitutionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutPostSecondaryInstitutionApiResponse(ILogger<PutPostSecondaryInstitutionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
