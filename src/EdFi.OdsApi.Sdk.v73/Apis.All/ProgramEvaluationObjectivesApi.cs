// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IProgramEvaluationObjectivesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ProgramEvaluationObjectivesApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteProgramEvaluationObjectiveByIdApiResponse"/>&gt;</returns>
        Task<IDeleteProgramEvaluationObjectiveByIdApiResponse> DeleteProgramEvaluationObjectiveByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteProgramEvaluationObjectiveByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteProgramEvaluationObjectiveByIdApiResponse?> DeleteProgramEvaluationObjectiveByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesProgramEvaluationObjectivesApiResponse"/>&gt;</returns>
        Task<IDeletesProgramEvaluationObjectivesApiResponse> DeletesProgramEvaluationObjectivesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesProgramEvaluationObjectivesApiResponse"/>?&gt;</returns>
        Task<IDeletesProgramEvaluationObjectivesApiResponse?> DeletesProgramEvaluationObjectivesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="programEvaluationObjectiveTitle">The name or title of the program evaluation objective. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="objectiveMaxNumericRating">The maximum summary numerical rating or score for the program evaluation objective. (optional)</param>
        /// <param name="objectiveMinNumericRating">The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0 (optional)</param>
        /// <param name="objectiveSortOrder">The sort order of this program evaluation objective. (optional)</param>
        /// <param name="programEvaluationObjectiveDescription">The long description of the program evaluation objective. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesApiResponse"/>&gt;</returns>
        Task<IGetProgramEvaluationObjectivesApiResponse> GetProgramEvaluationObjectivesAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> programEvaluationObjectiveTitle = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> id = default, Option<double> objectiveMaxNumericRating = default, Option<double> objectiveMinNumericRating = default, Option<int> objectiveSortOrder = default, Option<string> programEvaluationObjectiveDescription = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="programEvaluationObjectiveTitle">The name or title of the program evaluation objective. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="objectiveMaxNumericRating">The maximum summary numerical rating or score for the program evaluation objective. (optional)</param>
        /// <param name="objectiveMinNumericRating">The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0 (optional)</param>
        /// <param name="objectiveSortOrder">The sort order of this program evaluation objective. (optional)</param>
        /// <param name="programEvaluationObjectiveDescription">The long description of the program evaluation objective. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesApiResponse"/>?&gt;</returns>
        Task<IGetProgramEvaluationObjectivesApiResponse?> GetProgramEvaluationObjectivesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> programEvaluationObjectiveTitle = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> id = default, Option<double> objectiveMaxNumericRating = default, Option<double> objectiveMinNumericRating = default, Option<int> objectiveSortOrder = default, Option<string> programEvaluationObjectiveDescription = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesByIdApiResponse"/>&gt;</returns>
        Task<IGetProgramEvaluationObjectivesByIdApiResponse> GetProgramEvaluationObjectivesByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesByIdApiResponse"/>?&gt;</returns>
        Task<IGetProgramEvaluationObjectivesByIdApiResponse?> GetProgramEvaluationObjectivesByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="programEvaluationObjectiveTitle">The name or title of the program evaluation objective. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="objectiveMaxNumericRating">The maximum summary numerical rating or score for the program evaluation objective. (optional)</param>
        /// <param name="objectiveMinNumericRating">The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0 (optional)</param>
        /// <param name="objectiveSortOrder">The sort order of this program evaluation objective. (optional)</param>
        /// <param name="programEvaluationObjectiveDescription">The long description of the program evaluation objective. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesPartitionsApiResponse"/>&gt;</returns>
        Task<IGetProgramEvaluationObjectivesPartitionsApiResponse> GetProgramEvaluationObjectivesPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> programEvaluationObjectiveTitle = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> id = default, Option<double> objectiveMaxNumericRating = default, Option<double> objectiveMinNumericRating = default, Option<int> objectiveSortOrder = default, Option<string> programEvaluationObjectiveDescription = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="programEvaluationObjectiveTitle">The name or title of the program evaluation objective. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="objectiveMaxNumericRating">The maximum summary numerical rating or score for the program evaluation objective. (optional)</param>
        /// <param name="objectiveMinNumericRating">The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0 (optional)</param>
        /// <param name="objectiveSortOrder">The sort order of this program evaluation objective. (optional)</param>
        /// <param name="programEvaluationObjectiveDescription">The long description of the program evaluation objective. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetProgramEvaluationObjectivesPartitionsApiResponse?> GetProgramEvaluationObjectivesPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> programEvaluationObjectiveTitle = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> id = default, Option<double> objectiveMaxNumericRating = default, Option<double> objectiveMinNumericRating = default, Option<int> objectiveSortOrder = default, Option<string> programEvaluationObjectiveDescription = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesProgramEvaluationObjectivesApiResponse"/>&gt;</returns>
        Task<IKeyChangesProgramEvaluationObjectivesApiResponse> KeyChangesProgramEvaluationObjectivesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesProgramEvaluationObjectivesApiResponse"/>?&gt;</returns>
        Task<IKeyChangesProgramEvaluationObjectivesApiResponse?> KeyChangesProgramEvaluationObjectivesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiProgramEvaluationObjective">The JSON representation of the \&quot;programEvaluationObjective\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostProgramEvaluationObjectiveApiResponse"/>&gt;</returns>
        Task<IPostProgramEvaluationObjectiveApiResponse> PostProgramEvaluationObjectiveAsync(EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiProgramEvaluationObjective">The JSON representation of the \&quot;programEvaluationObjective\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostProgramEvaluationObjectiveApiResponse"/>?&gt;</returns>
        Task<IPostProgramEvaluationObjectiveApiResponse?> PostProgramEvaluationObjectiveOrDefaultAsync(EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiProgramEvaluationObjective">The JSON representation of the \&quot;programEvaluationObjective\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutProgramEvaluationObjectiveApiResponse"/>&gt;</returns>
        Task<IPutProgramEvaluationObjectiveApiResponse> PutProgramEvaluationObjectiveAsync(string id, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiProgramEvaluationObjective">The JSON representation of the \&quot;programEvaluationObjective\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutProgramEvaluationObjectiveApiResponse"/>?&gt;</returns>
        Task<IPutProgramEvaluationObjectiveApiResponse?> PutProgramEvaluationObjectiveOrDefaultAsync(string id, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteProgramEvaluationObjectiveByIdApiResponse"/>
    /// </summary>
    public interface IDeleteProgramEvaluationObjectiveByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesProgramEvaluationObjectivesApiResponse"/>
    /// </summary>
    public interface IDeletesProgramEvaluationObjectivesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiProgramEvaluationObjectiveDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetProgramEvaluationObjectivesApiResponse"/>
    /// </summary>
    public interface IGetProgramEvaluationObjectivesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiProgramEvaluationObjective>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetProgramEvaluationObjectivesByIdApiResponse"/>
    /// </summary>
    public interface IGetProgramEvaluationObjectivesByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiProgramEvaluationObjective?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetProgramEvaluationObjectivesPartitionsApiResponse"/>
    /// </summary>
    public interface IGetProgramEvaluationObjectivesPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesProgramEvaluationObjectivesApiResponse"/>
    /// </summary>
    public interface IKeyChangesProgramEvaluationObjectivesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiProgramEvaluationObjectiveKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostProgramEvaluationObjectiveApiResponse"/>
    /// </summary>
    public interface IPostProgramEvaluationObjectiveApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutProgramEvaluationObjectiveApiResponse"/>
    /// </summary>
    public interface IPutProgramEvaluationObjectiveApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ProgramEvaluationObjectivesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteProgramEvaluationObjectiveById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteProgramEvaluationObjectiveById;

        internal void ExecuteOnDeleteProgramEvaluationObjectiveById(ProgramEvaluationObjectivesApi.DeleteProgramEvaluationObjectiveByIdApiResponse apiResponse)
        {
            OnDeleteProgramEvaluationObjectiveById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteProgramEvaluationObjectiveById(Exception exception)
        {
            OnErrorDeleteProgramEvaluationObjectiveById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesProgramEvaluationObjectives;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesProgramEvaluationObjectives;

        internal void ExecuteOnDeletesProgramEvaluationObjectives(ProgramEvaluationObjectivesApi.DeletesProgramEvaluationObjectivesApiResponse apiResponse)
        {
            OnDeletesProgramEvaluationObjectives?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesProgramEvaluationObjectives(Exception exception)
        {
            OnErrorDeletesProgramEvaluationObjectives?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetProgramEvaluationObjectives;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetProgramEvaluationObjectives;

        internal void ExecuteOnGetProgramEvaluationObjectives(ProgramEvaluationObjectivesApi.GetProgramEvaluationObjectivesApiResponse apiResponse)
        {
            OnGetProgramEvaluationObjectives?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProgramEvaluationObjectives(Exception exception)
        {
            OnErrorGetProgramEvaluationObjectives?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetProgramEvaluationObjectivesById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetProgramEvaluationObjectivesById;

        internal void ExecuteOnGetProgramEvaluationObjectivesById(ProgramEvaluationObjectivesApi.GetProgramEvaluationObjectivesByIdApiResponse apiResponse)
        {
            OnGetProgramEvaluationObjectivesById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProgramEvaluationObjectivesById(Exception exception)
        {
            OnErrorGetProgramEvaluationObjectivesById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetProgramEvaluationObjectivesPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetProgramEvaluationObjectivesPartitions;

        internal void ExecuteOnGetProgramEvaluationObjectivesPartitions(ProgramEvaluationObjectivesApi.GetProgramEvaluationObjectivesPartitionsApiResponse apiResponse)
        {
            OnGetProgramEvaluationObjectivesPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProgramEvaluationObjectivesPartitions(Exception exception)
        {
            OnErrorGetProgramEvaluationObjectivesPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesProgramEvaluationObjectives;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesProgramEvaluationObjectives;

        internal void ExecuteOnKeyChangesProgramEvaluationObjectives(ProgramEvaluationObjectivesApi.KeyChangesProgramEvaluationObjectivesApiResponse apiResponse)
        {
            OnKeyChangesProgramEvaluationObjectives?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesProgramEvaluationObjectives(Exception exception)
        {
            OnErrorKeyChangesProgramEvaluationObjectives?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostProgramEvaluationObjective;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostProgramEvaluationObjective;

        internal void ExecuteOnPostProgramEvaluationObjective(ProgramEvaluationObjectivesApi.PostProgramEvaluationObjectiveApiResponse apiResponse)
        {
            OnPostProgramEvaluationObjective?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostProgramEvaluationObjective(Exception exception)
        {
            OnErrorPostProgramEvaluationObjective?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutProgramEvaluationObjective;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutProgramEvaluationObjective;

        internal void ExecuteOnPutProgramEvaluationObjective(ProgramEvaluationObjectivesApi.PutProgramEvaluationObjectiveApiResponse apiResponse)
        {
            OnPutProgramEvaluationObjective?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutProgramEvaluationObjective(Exception exception)
        {
            OnErrorPutProgramEvaluationObjective?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ProgramEvaluationObjectivesApi : IProgramEvaluationObjectivesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ProgramEvaluationObjectivesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ProgramEvaluationObjectivesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramEvaluationObjectivesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProgramEvaluationObjectivesApi(ILogger<ProgramEvaluationObjectivesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ProgramEvaluationObjectivesApiEvents programEvaluationObjectivesApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ProgramEvaluationObjectivesApi>();
            HttpClient = httpClient;
            Events = programEvaluationObjectivesApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteProgramEvaluationObjectiveById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteProgramEvaluationObjectiveById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteProgramEvaluationObjectiveByIdDefaultImplementation(IDeleteProgramEvaluationObjectiveByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteProgramEvaluationObjectiveById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteProgramEvaluationObjectiveById(ref bool suppressDefaultLog, IDeleteProgramEvaluationObjectiveByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteProgramEvaluationObjectiveByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteProgramEvaluationObjectiveById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteProgramEvaluationObjectiveById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteProgramEvaluationObjectiveByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteProgramEvaluationObjectiveByIdApiResponse?> DeleteProgramEvaluationObjectiveByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteProgramEvaluationObjectiveByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteProgramEvaluationObjectiveByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteProgramEvaluationObjectiveByIdApiResponse> DeleteProgramEvaluationObjectiveByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteProgramEvaluationObjectiveById(id, ifMatch);

                FormatDeleteProgramEvaluationObjectiveById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/programEvaluationObjectives/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/programEvaluationObjectives/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteProgramEvaluationObjectiveByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteProgramEvaluationObjectiveByIdApiResponse>();

                        DeleteProgramEvaluationObjectiveByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/programEvaluationObjectives/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteProgramEvaluationObjectiveByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteProgramEvaluationObjectiveById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteProgramEvaluationObjectiveByIdDefaultImplementation(e, "/ed-fi/programEvaluationObjectives/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteProgramEvaluationObjectiveById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteProgramEvaluationObjectiveByIdApiResponse"/>
        /// </summary>
        public partial class DeleteProgramEvaluationObjectiveByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteProgramEvaluationObjectiveByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteProgramEvaluationObjectiveByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteProgramEvaluationObjectiveByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteProgramEvaluationObjectiveByIdApiResponse(ILogger<DeleteProgramEvaluationObjectiveByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesProgramEvaluationObjectives(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesProgramEvaluationObjectivesDefaultImplementation(IDeletesProgramEvaluationObjectivesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesProgramEvaluationObjectives(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesProgramEvaluationObjectives(ref bool suppressDefaultLog, IDeletesProgramEvaluationObjectivesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesProgramEvaluationObjectivesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesProgramEvaluationObjectives(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesProgramEvaluationObjectives(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesProgramEvaluationObjectivesApiResponse"/>&gt;</returns>
        public async Task<IDeletesProgramEvaluationObjectivesApiResponse?> DeletesProgramEvaluationObjectivesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesProgramEvaluationObjectivesAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesProgramEvaluationObjectivesApiResponse"/>&gt;</returns>
        public async Task<IDeletesProgramEvaluationObjectivesApiResponse> DeletesProgramEvaluationObjectivesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesProgramEvaluationObjectives(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/programEvaluationObjectives/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/programEvaluationObjectives/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesProgramEvaluationObjectivesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesProgramEvaluationObjectivesApiResponse>();

                        DeletesProgramEvaluationObjectivesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/programEvaluationObjectives/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesProgramEvaluationObjectivesDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesProgramEvaluationObjectives(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesProgramEvaluationObjectivesDefaultImplementation(e, "/ed-fi/programEvaluationObjectives/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesProgramEvaluationObjectives(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesProgramEvaluationObjectivesApiResponse"/>
        /// </summary>
        public partial class DeletesProgramEvaluationObjectivesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesProgramEvaluationObjectivesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesProgramEvaluationObjectivesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesProgramEvaluationObjectivesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesProgramEvaluationObjectivesApiResponse(ILogger<DeletesProgramEvaluationObjectivesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiProgramEvaluationObjectiveDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiProgramEvaluationObjectiveDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiProgramEvaluationObjectiveDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProgramEvaluationObjectives(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> programEvaluationObjectiveTitle, ref Option<long> programEducationOrganizationId, ref Option<string> programEvaluationPeriodDescriptor, ref Option<string> programEvaluationTitle, ref Option<string> programEvaluationTypeDescriptor, ref Option<string> programName, ref Option<string> programTypeDescriptor, ref Option<string> id, ref Option<double> objectiveMaxNumericRating, ref Option<double> objectiveMinNumericRating, ref Option<int> objectiveSortOrder, ref Option<string> programEvaluationObjectiveDescription, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="programEvaluationObjectiveTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="programEvaluationObjectiveDescription"></param>
        /// <returns></returns>
        private void ValidateGetProgramEvaluationObjectives(Option<string> pageToken, Option<string> programEvaluationObjectiveTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> id, Option<string> programEvaluationObjectiveDescription)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (programEvaluationObjectiveTitle.IsSet && programEvaluationObjectiveTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationObjectiveTitle));

            if (programEvaluationPeriodDescriptor.IsSet && programEvaluationPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationPeriodDescriptor));

            if (programEvaluationTitle.IsSet && programEvaluationTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTitle));

            if (programEvaluationTypeDescriptor.IsSet && programEvaluationTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTypeDescriptor));

            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName));

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (programEvaluationObjectiveDescription.IsSet && programEvaluationObjectiveDescription.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationObjectiveDescription));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="programEvaluationObjectiveTitle"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="objectiveMaxNumericRating"></param>
        /// <param name="objectiveMinNumericRating"></param>
        /// <param name="objectiveSortOrder"></param>
        /// <param name="programEvaluationObjectiveDescription"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetProgramEvaluationObjectivesDefaultImplementation(IGetProgramEvaluationObjectivesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> programEvaluationObjectiveTitle, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> id, Option<double> objectiveMaxNumericRating, Option<double> objectiveMinNumericRating, Option<int> objectiveSortOrder, Option<string> programEvaluationObjectiveDescription, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetProgramEvaluationObjectives(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, programEvaluationObjectiveTitle, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, objectiveMaxNumericRating, objectiveMinNumericRating, objectiveSortOrder, programEvaluationObjectiveDescription, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="programEvaluationObjectiveTitle"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="objectiveMaxNumericRating"></param>
        /// <param name="objectiveMinNumericRating"></param>
        /// <param name="objectiveSortOrder"></param>
        /// <param name="programEvaluationObjectiveDescription"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetProgramEvaluationObjectives(ref bool suppressDefaultLog, IGetProgramEvaluationObjectivesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> programEvaluationObjectiveTitle, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> id, Option<double> objectiveMaxNumericRating, Option<double> objectiveMinNumericRating, Option<int> objectiveSortOrder, Option<string> programEvaluationObjectiveDescription, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="programEvaluationObjectiveTitle"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="objectiveMaxNumericRating"></param>
        /// <param name="objectiveMinNumericRating"></param>
        /// <param name="objectiveSortOrder"></param>
        /// <param name="programEvaluationObjectiveDescription"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetProgramEvaluationObjectivesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> programEvaluationObjectiveTitle, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> id, Option<double> objectiveMaxNumericRating, Option<double> objectiveMinNumericRating, Option<int> objectiveSortOrder, Option<string> programEvaluationObjectiveDescription, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProgramEvaluationObjectives(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, programEvaluationObjectiveTitle, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, objectiveMaxNumericRating, objectiveMinNumericRating, objectiveSortOrder, programEvaluationObjectiveDescription, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="programEvaluationObjectiveTitle"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="objectiveMaxNumericRating"></param>
        /// <param name="objectiveMinNumericRating"></param>
        /// <param name="objectiveSortOrder"></param>
        /// <param name="programEvaluationObjectiveDescription"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetProgramEvaluationObjectives(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> programEvaluationObjectiveTitle, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> id, Option<double> objectiveMaxNumericRating, Option<double> objectiveMinNumericRating, Option<int> objectiveSortOrder, Option<string> programEvaluationObjectiveDescription, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="programEvaluationObjectiveTitle">The name or title of the program evaluation objective. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="objectiveMaxNumericRating">The maximum summary numerical rating or score for the program evaluation objective. (optional)</param>
        /// <param name="objectiveMinNumericRating">The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0 (optional)</param>
        /// <param name="objectiveSortOrder">The sort order of this program evaluation objective. (optional)</param>
        /// <param name="programEvaluationObjectiveDescription">The long description of the program evaluation objective. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesApiResponse"/>&gt;</returns>
        public async Task<IGetProgramEvaluationObjectivesApiResponse?> GetProgramEvaluationObjectivesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> programEvaluationObjectiveTitle = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> id = default, Option<double> objectiveMaxNumericRating = default, Option<double> objectiveMinNumericRating = default, Option<int> objectiveSortOrder = default, Option<string> programEvaluationObjectiveDescription = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProgramEvaluationObjectivesAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, programEvaluationObjectiveTitle, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, objectiveMaxNumericRating, objectiveMinNumericRating, objectiveSortOrder, programEvaluationObjectiveDescription, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="programEvaluationObjectiveTitle">The name or title of the program evaluation objective. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="objectiveMaxNumericRating">The maximum summary numerical rating or score for the program evaluation objective. (optional)</param>
        /// <param name="objectiveMinNumericRating">The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0 (optional)</param>
        /// <param name="objectiveSortOrder">The sort order of this program evaluation objective. (optional)</param>
        /// <param name="programEvaluationObjectiveDescription">The long description of the program evaluation objective. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesApiResponse"/>&gt;</returns>
        public async Task<IGetProgramEvaluationObjectivesApiResponse> GetProgramEvaluationObjectivesAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> programEvaluationObjectiveTitle = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> id = default, Option<double> objectiveMaxNumericRating = default, Option<double> objectiveMinNumericRating = default, Option<int> objectiveSortOrder = default, Option<string> programEvaluationObjectiveDescription = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProgramEvaluationObjectives(pageToken, programEvaluationObjectiveTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, programEvaluationObjectiveDescription);

                FormatGetProgramEvaluationObjectives(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref programEvaluationObjectiveTitle, ref programEducationOrganizationId, ref programEvaluationPeriodDescriptor, ref programEvaluationTitle, ref programEvaluationTypeDescriptor, ref programName, ref programTypeDescriptor, ref id, ref objectiveMaxNumericRating, ref objectiveMinNumericRating, ref objectiveSortOrder, ref programEvaluationObjectiveDescription, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/programEvaluationObjectives"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/programEvaluationObjectives");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (programEvaluationObjectiveTitle.IsSet)
                        parseQueryStringLocalVar["programEvaluationObjectiveTitle"] = ClientUtils.ParameterToString(programEvaluationObjectiveTitle.Value);

                    if (programEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["programEducationOrganizationId"] = ClientUtils.ParameterToString(programEducationOrganizationId.Value);

                    if (programEvaluationPeriodDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationPeriodDescriptor"] = ClientUtils.ParameterToString(programEvaluationPeriodDescriptor.Value);

                    if (programEvaluationTitle.IsSet)
                        parseQueryStringLocalVar["programEvaluationTitle"] = ClientUtils.ParameterToString(programEvaluationTitle.Value);

                    if (programEvaluationTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationTypeDescriptor"] = ClientUtils.ParameterToString(programEvaluationTypeDescriptor.Value);

                    if (programName.IsSet)
                        parseQueryStringLocalVar["programName"] = ClientUtils.ParameterToString(programName.Value);

                    if (programTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programTypeDescriptor"] = ClientUtils.ParameterToString(programTypeDescriptor.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (objectiveMaxNumericRating.IsSet)
                        parseQueryStringLocalVar["objectiveMaxNumericRating"] = ClientUtils.ParameterToString(objectiveMaxNumericRating.Value);

                    if (objectiveMinNumericRating.IsSet)
                        parseQueryStringLocalVar["objectiveMinNumericRating"] = ClientUtils.ParameterToString(objectiveMinNumericRating.Value);

                    if (objectiveSortOrder.IsSet)
                        parseQueryStringLocalVar["objectiveSortOrder"] = ClientUtils.ParameterToString(objectiveSortOrder.Value);

                    if (programEvaluationObjectiveDescription.IsSet)
                        parseQueryStringLocalVar["programEvaluationObjectiveDescription"] = ClientUtils.ParameterToString(programEvaluationObjectiveDescription.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProgramEvaluationObjectivesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProgramEvaluationObjectivesApiResponse>();

                        GetProgramEvaluationObjectivesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/programEvaluationObjectives", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProgramEvaluationObjectivesDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, programEvaluationObjectiveTitle, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, objectiveMaxNumericRating, objectiveMinNumericRating, objectiveSortOrder, programEvaluationObjectiveDescription, useSnapshot);

                        Events.ExecuteOnGetProgramEvaluationObjectives(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProgramEvaluationObjectivesDefaultImplementation(e, "/ed-fi/programEvaluationObjectives", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, programEvaluationObjectiveTitle, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, objectiveMaxNumericRating, objectiveMinNumericRating, objectiveSortOrder, programEvaluationObjectiveDescription, useSnapshot);
                Events.ExecuteOnErrorGetProgramEvaluationObjectives(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProgramEvaluationObjectivesApiResponse"/>
        /// </summary>
        public partial class GetProgramEvaluationObjectivesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetProgramEvaluationObjectivesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProgramEvaluationObjectivesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProgramEvaluationObjectivesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProgramEvaluationObjectivesApiResponse(ILogger<GetProgramEvaluationObjectivesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiProgramEvaluationObjective>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiProgramEvaluationObjective>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiProgramEvaluationObjective>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProgramEvaluationObjectivesById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetProgramEvaluationObjectivesById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetProgramEvaluationObjectivesByIdDefaultImplementation(IGetProgramEvaluationObjectivesByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetProgramEvaluationObjectivesById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetProgramEvaluationObjectivesById(ref bool suppressDefaultLog, IGetProgramEvaluationObjectivesByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetProgramEvaluationObjectivesByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProgramEvaluationObjectivesById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetProgramEvaluationObjectivesById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesByIdApiResponse"/>&gt;</returns>
        public async Task<IGetProgramEvaluationObjectivesByIdApiResponse?> GetProgramEvaluationObjectivesByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProgramEvaluationObjectivesByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesByIdApiResponse"/>&gt;</returns>
        public async Task<IGetProgramEvaluationObjectivesByIdApiResponse> GetProgramEvaluationObjectivesByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProgramEvaluationObjectivesById(id, ifNoneMatch);

                FormatGetProgramEvaluationObjectivesById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/programEvaluationObjectives/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/programEvaluationObjectives/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProgramEvaluationObjectivesByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProgramEvaluationObjectivesByIdApiResponse>();

                        GetProgramEvaluationObjectivesByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/programEvaluationObjectives/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProgramEvaluationObjectivesByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetProgramEvaluationObjectivesById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProgramEvaluationObjectivesByIdDefaultImplementation(e, "/ed-fi/programEvaluationObjectives/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetProgramEvaluationObjectivesById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProgramEvaluationObjectivesByIdApiResponse"/>
        /// </summary>
        public partial class GetProgramEvaluationObjectivesByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetProgramEvaluationObjectivesByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProgramEvaluationObjectivesByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProgramEvaluationObjectivesByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProgramEvaluationObjectivesByIdApiResponse(ILogger<GetProgramEvaluationObjectivesByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiProgramEvaluationObjective? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiProgramEvaluationObjective>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiProgramEvaluationObjective? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProgramEvaluationObjectivesPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> programEvaluationObjectiveTitle, ref Option<long> programEducationOrganizationId, ref Option<string> programEvaluationPeriodDescriptor, ref Option<string> programEvaluationTitle, ref Option<string> programEvaluationTypeDescriptor, ref Option<string> programName, ref Option<string> programTypeDescriptor, ref Option<string> id, ref Option<double> objectiveMaxNumericRating, ref Option<double> objectiveMinNumericRating, ref Option<int> objectiveSortOrder, ref Option<string> programEvaluationObjectiveDescription, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="programEvaluationObjectiveTitle"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="programEvaluationObjectiveDescription"></param>
        /// <returns></returns>
        private void ValidateGetProgramEvaluationObjectivesPartitions(Option<string> programEvaluationObjectiveTitle, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> id, Option<string> programEvaluationObjectiveDescription)
        {
            if (programEvaluationObjectiveTitle.IsSet && programEvaluationObjectiveTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationObjectiveTitle));

            if (programEvaluationPeriodDescriptor.IsSet && programEvaluationPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationPeriodDescriptor));

            if (programEvaluationTitle.IsSet && programEvaluationTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTitle));

            if (programEvaluationTypeDescriptor.IsSet && programEvaluationTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTypeDescriptor));

            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName));

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (programEvaluationObjectiveDescription.IsSet && programEvaluationObjectiveDescription.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationObjectiveDescription));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="programEvaluationObjectiveTitle"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="objectiveMaxNumericRating"></param>
        /// <param name="objectiveMinNumericRating"></param>
        /// <param name="objectiveSortOrder"></param>
        /// <param name="programEvaluationObjectiveDescription"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetProgramEvaluationObjectivesPartitionsDefaultImplementation(IGetProgramEvaluationObjectivesPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> programEvaluationObjectiveTitle, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> id, Option<double> objectiveMaxNumericRating, Option<double> objectiveMinNumericRating, Option<int> objectiveSortOrder, Option<string> programEvaluationObjectiveDescription, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetProgramEvaluationObjectivesPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, programEvaluationObjectiveTitle, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, objectiveMaxNumericRating, objectiveMinNumericRating, objectiveSortOrder, programEvaluationObjectiveDescription, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="programEvaluationObjectiveTitle"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="objectiveMaxNumericRating"></param>
        /// <param name="objectiveMinNumericRating"></param>
        /// <param name="objectiveSortOrder"></param>
        /// <param name="programEvaluationObjectiveDescription"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetProgramEvaluationObjectivesPartitions(ref bool suppressDefaultLog, IGetProgramEvaluationObjectivesPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> programEvaluationObjectiveTitle, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> id, Option<double> objectiveMaxNumericRating, Option<double> objectiveMinNumericRating, Option<int> objectiveSortOrder, Option<string> programEvaluationObjectiveDescription, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="programEvaluationObjectiveTitle"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="objectiveMaxNumericRating"></param>
        /// <param name="objectiveMinNumericRating"></param>
        /// <param name="objectiveSortOrder"></param>
        /// <param name="programEvaluationObjectiveDescription"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetProgramEvaluationObjectivesPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> programEvaluationObjectiveTitle, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> id, Option<double> objectiveMaxNumericRating, Option<double> objectiveMinNumericRating, Option<int> objectiveSortOrder, Option<string> programEvaluationObjectiveDescription, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProgramEvaluationObjectivesPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, programEvaluationObjectiveTitle, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, objectiveMaxNumericRating, objectiveMinNumericRating, objectiveSortOrder, programEvaluationObjectiveDescription, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="programEvaluationObjectiveTitle"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="objectiveMaxNumericRating"></param>
        /// <param name="objectiveMinNumericRating"></param>
        /// <param name="objectiveSortOrder"></param>
        /// <param name="programEvaluationObjectiveDescription"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetProgramEvaluationObjectivesPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> programEvaluationObjectiveTitle, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> id, Option<double> objectiveMaxNumericRating, Option<double> objectiveMinNumericRating, Option<int> objectiveSortOrder, Option<string> programEvaluationObjectiveDescription, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="programEvaluationObjectiveTitle">The name or title of the program evaluation objective. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="objectiveMaxNumericRating">The maximum summary numerical rating or score for the program evaluation objective. (optional)</param>
        /// <param name="objectiveMinNumericRating">The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0 (optional)</param>
        /// <param name="objectiveSortOrder">The sort order of this program evaluation objective. (optional)</param>
        /// <param name="programEvaluationObjectiveDescription">The long description of the program evaluation objective. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetProgramEvaluationObjectivesPartitionsApiResponse?> GetProgramEvaluationObjectivesPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> programEvaluationObjectiveTitle = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> id = default, Option<double> objectiveMaxNumericRating = default, Option<double> objectiveMinNumericRating = default, Option<int> objectiveSortOrder = default, Option<string> programEvaluationObjectiveDescription = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProgramEvaluationObjectivesPartitionsAsync(number, minChangeVersion, maxChangeVersion, programEvaluationObjectiveTitle, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, objectiveMaxNumericRating, objectiveMinNumericRating, objectiveSortOrder, programEvaluationObjectiveDescription, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="programEvaluationObjectiveTitle">The name or title of the program evaluation objective. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="objectiveMaxNumericRating">The maximum summary numerical rating or score for the program evaluation objective. (optional)</param>
        /// <param name="objectiveMinNumericRating">The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0 (optional)</param>
        /// <param name="objectiveSortOrder">The sort order of this program evaluation objective. (optional)</param>
        /// <param name="programEvaluationObjectiveDescription">The long description of the program evaluation objective. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProgramEvaluationObjectivesPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetProgramEvaluationObjectivesPartitionsApiResponse> GetProgramEvaluationObjectivesPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> programEvaluationObjectiveTitle = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> id = default, Option<double> objectiveMaxNumericRating = default, Option<double> objectiveMinNumericRating = default, Option<int> objectiveSortOrder = default, Option<string> programEvaluationObjectiveDescription = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProgramEvaluationObjectivesPartitions(programEvaluationObjectiveTitle, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, programEvaluationObjectiveDescription);

                FormatGetProgramEvaluationObjectivesPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref programEvaluationObjectiveTitle, ref programEducationOrganizationId, ref programEvaluationPeriodDescriptor, ref programEvaluationTitle, ref programEvaluationTypeDescriptor, ref programName, ref programTypeDescriptor, ref id, ref objectiveMaxNumericRating, ref objectiveMinNumericRating, ref objectiveSortOrder, ref programEvaluationObjectiveDescription, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/programEvaluationObjectives/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/programEvaluationObjectives/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (programEvaluationObjectiveTitle.IsSet)
                        parseQueryStringLocalVar["programEvaluationObjectiveTitle"] = ClientUtils.ParameterToString(programEvaluationObjectiveTitle.Value);

                    if (programEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["programEducationOrganizationId"] = ClientUtils.ParameterToString(programEducationOrganizationId.Value);

                    if (programEvaluationPeriodDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationPeriodDescriptor"] = ClientUtils.ParameterToString(programEvaluationPeriodDescriptor.Value);

                    if (programEvaluationTitle.IsSet)
                        parseQueryStringLocalVar["programEvaluationTitle"] = ClientUtils.ParameterToString(programEvaluationTitle.Value);

                    if (programEvaluationTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationTypeDescriptor"] = ClientUtils.ParameterToString(programEvaluationTypeDescriptor.Value);

                    if (programName.IsSet)
                        parseQueryStringLocalVar["programName"] = ClientUtils.ParameterToString(programName.Value);

                    if (programTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programTypeDescriptor"] = ClientUtils.ParameterToString(programTypeDescriptor.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (objectiveMaxNumericRating.IsSet)
                        parseQueryStringLocalVar["objectiveMaxNumericRating"] = ClientUtils.ParameterToString(objectiveMaxNumericRating.Value);

                    if (objectiveMinNumericRating.IsSet)
                        parseQueryStringLocalVar["objectiveMinNumericRating"] = ClientUtils.ParameterToString(objectiveMinNumericRating.Value);

                    if (objectiveSortOrder.IsSet)
                        parseQueryStringLocalVar["objectiveSortOrder"] = ClientUtils.ParameterToString(objectiveSortOrder.Value);

                    if (programEvaluationObjectiveDescription.IsSet)
                        parseQueryStringLocalVar["programEvaluationObjectiveDescription"] = ClientUtils.ParameterToString(programEvaluationObjectiveDescription.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProgramEvaluationObjectivesPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProgramEvaluationObjectivesPartitionsApiResponse>();

                        GetProgramEvaluationObjectivesPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/programEvaluationObjectives/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProgramEvaluationObjectivesPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, programEvaluationObjectiveTitle, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, objectiveMaxNumericRating, objectiveMinNumericRating, objectiveSortOrder, programEvaluationObjectiveDescription, useSnapshot);

                        Events.ExecuteOnGetProgramEvaluationObjectivesPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProgramEvaluationObjectivesPartitionsDefaultImplementation(e, "/ed-fi/programEvaluationObjectives/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, programEvaluationObjectiveTitle, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, id, objectiveMaxNumericRating, objectiveMinNumericRating, objectiveSortOrder, programEvaluationObjectiveDescription, useSnapshot);
                Events.ExecuteOnErrorGetProgramEvaluationObjectivesPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProgramEvaluationObjectivesPartitionsApiResponse"/>
        /// </summary>
        public partial class GetProgramEvaluationObjectivesPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetProgramEvaluationObjectivesPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProgramEvaluationObjectivesPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProgramEvaluationObjectivesPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProgramEvaluationObjectivesPartitionsApiResponse(ILogger<GetProgramEvaluationObjectivesPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesProgramEvaluationObjectives(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesProgramEvaluationObjectivesDefaultImplementation(IKeyChangesProgramEvaluationObjectivesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesProgramEvaluationObjectives(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesProgramEvaluationObjectives(ref bool suppressDefaultLog, IKeyChangesProgramEvaluationObjectivesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesProgramEvaluationObjectivesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesProgramEvaluationObjectives(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesProgramEvaluationObjectives(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesProgramEvaluationObjectivesApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesProgramEvaluationObjectivesApiResponse?> KeyChangesProgramEvaluationObjectivesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesProgramEvaluationObjectivesAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesProgramEvaluationObjectivesApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesProgramEvaluationObjectivesApiResponse> KeyChangesProgramEvaluationObjectivesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesProgramEvaluationObjectives(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/programEvaluationObjectives/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/programEvaluationObjectives/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesProgramEvaluationObjectivesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesProgramEvaluationObjectivesApiResponse>();

                        KeyChangesProgramEvaluationObjectivesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/programEvaluationObjectives/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesProgramEvaluationObjectivesDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesProgramEvaluationObjectives(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesProgramEvaluationObjectivesDefaultImplementation(e, "/ed-fi/programEvaluationObjectives/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesProgramEvaluationObjectives(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesProgramEvaluationObjectivesApiResponse"/>
        /// </summary>
        public partial class KeyChangesProgramEvaluationObjectivesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesProgramEvaluationObjectivesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesProgramEvaluationObjectivesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesProgramEvaluationObjectivesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesProgramEvaluationObjectivesApiResponse(ILogger<KeyChangesProgramEvaluationObjectivesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiProgramEvaluationObjectiveKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiProgramEvaluationObjectiveKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiProgramEvaluationObjectiveKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostProgramEvaluationObjective(EdFiProgramEvaluationObjective edFiProgramEvaluationObjective);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiProgramEvaluationObjective"></param>
        /// <returns></returns>
        private void ValidatePostProgramEvaluationObjective(EdFiProgramEvaluationObjective edFiProgramEvaluationObjective)
        {
            if (edFiProgramEvaluationObjective == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationObjective));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiProgramEvaluationObjective"></param>
        private void AfterPostProgramEvaluationObjectiveDefaultImplementation(IPostProgramEvaluationObjectiveApiResponse apiResponseLocalVar, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective)
        {
            bool suppressDefaultLog = false;
            AfterPostProgramEvaluationObjective(ref suppressDefaultLog, apiResponseLocalVar, edFiProgramEvaluationObjective);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiProgramEvaluationObjective"></param>
        partial void AfterPostProgramEvaluationObjective(ref bool suppressDefaultLog, IPostProgramEvaluationObjectiveApiResponse apiResponseLocalVar, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiProgramEvaluationObjective"></param>
        private void OnErrorPostProgramEvaluationObjectiveDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostProgramEvaluationObjective(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiProgramEvaluationObjective);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiProgramEvaluationObjective"></param>
        partial void OnErrorPostProgramEvaluationObjective(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiProgramEvaluationObjective">The JSON representation of the \&quot;programEvaluationObjective\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostProgramEvaluationObjectiveApiResponse"/>&gt;</returns>
        public async Task<IPostProgramEvaluationObjectiveApiResponse?> PostProgramEvaluationObjectiveOrDefaultAsync(EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostProgramEvaluationObjectiveAsync(edFiProgramEvaluationObjective, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiProgramEvaluationObjective">The JSON representation of the \&quot;programEvaluationObjective\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostProgramEvaluationObjectiveApiResponse"/>&gt;</returns>
        public async Task<IPostProgramEvaluationObjectiveApiResponse> PostProgramEvaluationObjectiveAsync(EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostProgramEvaluationObjective(edFiProgramEvaluationObjective);

                FormatPostProgramEvaluationObjective(edFiProgramEvaluationObjective);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/programEvaluationObjectives"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/programEvaluationObjectives");

                    httpRequestMessageLocalVar.Content = (edFiProgramEvaluationObjective as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiProgramEvaluationObjective, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostProgramEvaluationObjectiveApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostProgramEvaluationObjectiveApiResponse>();

                        PostProgramEvaluationObjectiveApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/programEvaluationObjectives", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostProgramEvaluationObjectiveDefaultImplementation(apiResponseLocalVar, edFiProgramEvaluationObjective);

                        Events.ExecuteOnPostProgramEvaluationObjective(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostProgramEvaluationObjectiveDefaultImplementation(e, "/ed-fi/programEvaluationObjectives", uriBuilderLocalVar.Path, edFiProgramEvaluationObjective);
                Events.ExecuteOnErrorPostProgramEvaluationObjective(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostProgramEvaluationObjectiveApiResponse"/>
        /// </summary>
        public partial class PostProgramEvaluationObjectiveApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostProgramEvaluationObjectiveApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostProgramEvaluationObjectiveApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostProgramEvaluationObjectiveApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostProgramEvaluationObjectiveApiResponse(ILogger<PostProgramEvaluationObjectiveApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutProgramEvaluationObjective(ref string id, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiProgramEvaluationObjective"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutProgramEvaluationObjective(string id, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiProgramEvaluationObjective == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationObjective));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiProgramEvaluationObjective"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutProgramEvaluationObjectiveDefaultImplementation(IPutProgramEvaluationObjectiveApiResponse apiResponseLocalVar, string id, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutProgramEvaluationObjective(ref suppressDefaultLog, apiResponseLocalVar, id, edFiProgramEvaluationObjective, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiProgramEvaluationObjective"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutProgramEvaluationObjective(ref bool suppressDefaultLog, IPutProgramEvaluationObjectiveApiResponse apiResponseLocalVar, string id, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiProgramEvaluationObjective"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutProgramEvaluationObjectiveDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutProgramEvaluationObjective(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiProgramEvaluationObjective, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiProgramEvaluationObjective"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutProgramEvaluationObjective(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiProgramEvaluationObjective">The JSON representation of the \&quot;programEvaluationObjective\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutProgramEvaluationObjectiveApiResponse"/>&gt;</returns>
        public async Task<IPutProgramEvaluationObjectiveApiResponse?> PutProgramEvaluationObjectiveOrDefaultAsync(string id, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutProgramEvaluationObjectiveAsync(id, edFiProgramEvaluationObjective, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiProgramEvaluationObjective">The JSON representation of the \&quot;programEvaluationObjective\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutProgramEvaluationObjectiveApiResponse"/>&gt;</returns>
        public async Task<IPutProgramEvaluationObjectiveApiResponse> PutProgramEvaluationObjectiveAsync(string id, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutProgramEvaluationObjective(id, edFiProgramEvaluationObjective, ifMatch);

                FormatPutProgramEvaluationObjective(ref id, edFiProgramEvaluationObjective, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/programEvaluationObjectives/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/programEvaluationObjectives/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiProgramEvaluationObjective as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiProgramEvaluationObjective, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutProgramEvaluationObjectiveApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutProgramEvaluationObjectiveApiResponse>();

                        PutProgramEvaluationObjectiveApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/programEvaluationObjectives/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutProgramEvaluationObjectiveDefaultImplementation(apiResponseLocalVar, id, edFiProgramEvaluationObjective, ifMatch);

                        Events.ExecuteOnPutProgramEvaluationObjective(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutProgramEvaluationObjectiveDefaultImplementation(e, "/ed-fi/programEvaluationObjectives/{id}", uriBuilderLocalVar.Path, id, edFiProgramEvaluationObjective, ifMatch);
                Events.ExecuteOnErrorPutProgramEvaluationObjective(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutProgramEvaluationObjectiveApiResponse"/>
        /// </summary>
        public partial class PutProgramEvaluationObjectiveApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutProgramEvaluationObjectiveApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutProgramEvaluationObjectiveApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutProgramEvaluationObjectiveApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutProgramEvaluationObjectiveApiResponse(ILogger<PutProgramEvaluationObjectiveApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
