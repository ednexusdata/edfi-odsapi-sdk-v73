// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISchoolsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SchoolsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSchoolByIdApiResponse"/>&gt;</returns>
        Task<IDeleteSchoolByIdApiResponse> DeleteSchoolByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSchoolByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteSchoolByIdApiResponse?> DeleteSchoolByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesSchoolsApiResponse"/>&gt;</returns>
        Task<IDeletesSchoolsApiResponse> DeletesSchoolsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesSchoolsApiResponse"/>?&gt;</returns>
        Task<IDeletesSchoolsApiResponse?> DeletesSchoolsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="localEducationAgencyId">The identifier assigned to a local education agency. It must be distinct from any other identifier assigned to educational organizations, such as a SchoolId, to prevent duplication. (optional)</param>
        /// <param name="charterApprovalSchoolYear">The school year in which a charter school was initially approved. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">The type of education institution as classified by its funding source, for example public or private. (optional)</param>
        /// <param name="charterApprovalAgencyTypeDescriptor">The type of agency that approved the establishment or continuation of a charter school. (optional)</param>
        /// <param name="charterStatusDescriptor">A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school. (optional)</param>
        /// <param name="internetAccessDescriptor">The type of Internet access available. (optional)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language). (optional)</param>
        /// <param name="schoolTypeDescriptor">The type of education institution as classified by its primary focus. (optional)</param>
        /// <param name="titleIPartASchoolDesignationDescriptor">Denotes the Title I Part A designation for the school. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsApiResponse"/>&gt;</returns>
        Task<IGetSchoolsApiResponse> GetSchoolsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> schoolId = default, Option<long> localEducationAgencyId = default, Option<int> charterApprovalSchoolYear = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> charterApprovalAgencyTypeDescriptor = default, Option<string> charterStatusDescriptor = default, Option<string> internetAccessDescriptor = default, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor = default, Option<string> schoolTypeDescriptor = default, Option<string> titleIPartASchoolDesignationDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="localEducationAgencyId">The identifier assigned to a local education agency. It must be distinct from any other identifier assigned to educational organizations, such as a SchoolId, to prevent duplication. (optional)</param>
        /// <param name="charterApprovalSchoolYear">The school year in which a charter school was initially approved. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">The type of education institution as classified by its funding source, for example public or private. (optional)</param>
        /// <param name="charterApprovalAgencyTypeDescriptor">The type of agency that approved the establishment or continuation of a charter school. (optional)</param>
        /// <param name="charterStatusDescriptor">A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school. (optional)</param>
        /// <param name="internetAccessDescriptor">The type of Internet access available. (optional)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language). (optional)</param>
        /// <param name="schoolTypeDescriptor">The type of education institution as classified by its primary focus. (optional)</param>
        /// <param name="titleIPartASchoolDesignationDescriptor">Denotes the Title I Part A designation for the school. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsApiResponse"/>?&gt;</returns>
        Task<IGetSchoolsApiResponse?> GetSchoolsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> schoolId = default, Option<long> localEducationAgencyId = default, Option<int> charterApprovalSchoolYear = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> charterApprovalAgencyTypeDescriptor = default, Option<string> charterStatusDescriptor = default, Option<string> internetAccessDescriptor = default, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor = default, Option<string> schoolTypeDescriptor = default, Option<string> titleIPartASchoolDesignationDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsByIdApiResponse"/>&gt;</returns>
        Task<IGetSchoolsByIdApiResponse> GetSchoolsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsByIdApiResponse"/>?&gt;</returns>
        Task<IGetSchoolsByIdApiResponse?> GetSchoolsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="localEducationAgencyId">The identifier assigned to a local education agency. It must be distinct from any other identifier assigned to educational organizations, such as a SchoolId, to prevent duplication. (optional)</param>
        /// <param name="charterApprovalSchoolYear">The school year in which a charter school was initially approved. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">The type of education institution as classified by its funding source, for example public or private. (optional)</param>
        /// <param name="charterApprovalAgencyTypeDescriptor">The type of agency that approved the establishment or continuation of a charter school. (optional)</param>
        /// <param name="charterStatusDescriptor">A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school. (optional)</param>
        /// <param name="internetAccessDescriptor">The type of Internet access available. (optional)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language). (optional)</param>
        /// <param name="schoolTypeDescriptor">The type of education institution as classified by its primary focus. (optional)</param>
        /// <param name="titleIPartASchoolDesignationDescriptor">Denotes the Title I Part A designation for the school. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetSchoolsPartitionsApiResponse> GetSchoolsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> schoolId = default, Option<long> localEducationAgencyId = default, Option<int> charterApprovalSchoolYear = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> charterApprovalAgencyTypeDescriptor = default, Option<string> charterStatusDescriptor = default, Option<string> internetAccessDescriptor = default, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor = default, Option<string> schoolTypeDescriptor = default, Option<string> titleIPartASchoolDesignationDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="localEducationAgencyId">The identifier assigned to a local education agency. It must be distinct from any other identifier assigned to educational organizations, such as a SchoolId, to prevent duplication. (optional)</param>
        /// <param name="charterApprovalSchoolYear">The school year in which a charter school was initially approved. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">The type of education institution as classified by its funding source, for example public or private. (optional)</param>
        /// <param name="charterApprovalAgencyTypeDescriptor">The type of agency that approved the establishment or continuation of a charter school. (optional)</param>
        /// <param name="charterStatusDescriptor">A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school. (optional)</param>
        /// <param name="internetAccessDescriptor">The type of Internet access available. (optional)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language). (optional)</param>
        /// <param name="schoolTypeDescriptor">The type of education institution as classified by its primary focus. (optional)</param>
        /// <param name="titleIPartASchoolDesignationDescriptor">Denotes the Title I Part A designation for the school. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetSchoolsPartitionsApiResponse?> GetSchoolsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> schoolId = default, Option<long> localEducationAgencyId = default, Option<int> charterApprovalSchoolYear = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> charterApprovalAgencyTypeDescriptor = default, Option<string> charterStatusDescriptor = default, Option<string> internetAccessDescriptor = default, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor = default, Option<string> schoolTypeDescriptor = default, Option<string> titleIPartASchoolDesignationDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesSchoolsApiResponse"/>&gt;</returns>
        Task<IKeyChangesSchoolsApiResponse> KeyChangesSchoolsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesSchoolsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesSchoolsApiResponse?> KeyChangesSchoolsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiSchool">The JSON representation of the \&quot;school\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSchoolApiResponse"/>&gt;</returns>
        Task<IPostSchoolApiResponse> PostSchoolAsync(EdFiSchool edFiSchool, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiSchool">The JSON representation of the \&quot;school\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSchoolApiResponse"/>?&gt;</returns>
        Task<IPostSchoolApiResponse?> PostSchoolOrDefaultAsync(EdFiSchool edFiSchool, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiSchool">The JSON representation of the \&quot;school\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutSchoolApiResponse"/>&gt;</returns>
        Task<IPutSchoolApiResponse> PutSchoolAsync(string id, EdFiSchool edFiSchool, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiSchool">The JSON representation of the \&quot;school\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutSchoolApiResponse"/>?&gt;</returns>
        Task<IPutSchoolApiResponse?> PutSchoolOrDefaultAsync(string id, EdFiSchool edFiSchool, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteSchoolByIdApiResponse"/>
    /// </summary>
    public interface IDeleteSchoolByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesSchoolsApiResponse"/>
    /// </summary>
    public interface IDeletesSchoolsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiSchoolDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetSchoolsApiResponse"/>
    /// </summary>
    public interface IGetSchoolsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiSchool>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetSchoolsByIdApiResponse"/>
    /// </summary>
    public interface IGetSchoolsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiSchool?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetSchoolsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetSchoolsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesSchoolsApiResponse"/>
    /// </summary>
    public interface IKeyChangesSchoolsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiSchoolKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostSchoolApiResponse"/>
    /// </summary>
    public interface IPostSchoolApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutSchoolApiResponse"/>
    /// </summary>
    public interface IPutSchoolApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SchoolsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteSchoolById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteSchoolById;

        internal void ExecuteOnDeleteSchoolById(SchoolsApi.DeleteSchoolByIdApiResponse apiResponse)
        {
            OnDeleteSchoolById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSchoolById(Exception exception)
        {
            OnErrorDeleteSchoolById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesSchools;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesSchools;

        internal void ExecuteOnDeletesSchools(SchoolsApi.DeletesSchoolsApiResponse apiResponse)
        {
            OnDeletesSchools?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesSchools(Exception exception)
        {
            OnErrorDeletesSchools?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSchools;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSchools;

        internal void ExecuteOnGetSchools(SchoolsApi.GetSchoolsApiResponse apiResponse)
        {
            OnGetSchools?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSchools(Exception exception)
        {
            OnErrorGetSchools?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSchoolsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSchoolsById;

        internal void ExecuteOnGetSchoolsById(SchoolsApi.GetSchoolsByIdApiResponse apiResponse)
        {
            OnGetSchoolsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSchoolsById(Exception exception)
        {
            OnErrorGetSchoolsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSchoolsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSchoolsPartitions;

        internal void ExecuteOnGetSchoolsPartitions(SchoolsApi.GetSchoolsPartitionsApiResponse apiResponse)
        {
            OnGetSchoolsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSchoolsPartitions(Exception exception)
        {
            OnErrorGetSchoolsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesSchools;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesSchools;

        internal void ExecuteOnKeyChangesSchools(SchoolsApi.KeyChangesSchoolsApiResponse apiResponse)
        {
            OnKeyChangesSchools?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesSchools(Exception exception)
        {
            OnErrorKeyChangesSchools?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostSchool;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostSchool;

        internal void ExecuteOnPostSchool(SchoolsApi.PostSchoolApiResponse apiResponse)
        {
            OnPostSchool?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostSchool(Exception exception)
        {
            OnErrorPostSchool?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutSchool;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutSchool;

        internal void ExecuteOnPutSchool(SchoolsApi.PutSchoolApiResponse apiResponse)
        {
            OnPutSchool?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutSchool(Exception exception)
        {
            OnErrorPutSchool?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SchoolsApi : ISchoolsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SchoolsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SchoolsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchoolsApi(ILogger<SchoolsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SchoolsApiEvents schoolsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SchoolsApi>();
            HttpClient = httpClient;
            Events = schoolsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteSchoolById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteSchoolById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteSchoolByIdDefaultImplementation(IDeleteSchoolByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSchoolById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteSchoolById(ref bool suppressDefaultLog, IDeleteSchoolByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteSchoolByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSchoolById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteSchoolById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSchoolByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteSchoolByIdApiResponse?> DeleteSchoolByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSchoolByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSchoolByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteSchoolByIdApiResponse> DeleteSchoolByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteSchoolById(id, ifMatch);

                FormatDeleteSchoolById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/schools/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/schools/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteSchoolByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSchoolByIdApiResponse>();

                        DeleteSchoolByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/schools/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSchoolByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteSchoolById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSchoolByIdDefaultImplementation(e, "/ed-fi/schools/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteSchoolById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSchoolByIdApiResponse"/>
        /// </summary>
        public partial class DeleteSchoolByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteSchoolByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSchoolByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSchoolByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSchoolByIdApiResponse(ILogger<DeleteSchoolByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesSchools(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesSchoolsDefaultImplementation(IDeletesSchoolsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesSchools(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesSchools(ref bool suppressDefaultLog, IDeletesSchoolsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesSchoolsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesSchools(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesSchools(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesSchoolsApiResponse"/>&gt;</returns>
        public async Task<IDeletesSchoolsApiResponse?> DeletesSchoolsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesSchoolsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesSchoolsApiResponse"/>&gt;</returns>
        public async Task<IDeletesSchoolsApiResponse> DeletesSchoolsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesSchools(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/schools/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/schools/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesSchoolsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesSchoolsApiResponse>();

                        DeletesSchoolsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/schools/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesSchoolsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesSchools(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesSchoolsDefaultImplementation(e, "/ed-fi/schools/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesSchools(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesSchoolsApiResponse"/>
        /// </summary>
        public partial class DeletesSchoolsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesSchoolsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesSchoolsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesSchoolsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesSchoolsApiResponse(ILogger<DeletesSchoolsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiSchoolDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiSchoolDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiSchoolDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSchools(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<long> schoolId, ref Option<long> localEducationAgencyId, ref Option<int> charterApprovalSchoolYear, ref Option<string> administrativeFundingControlDescriptor, ref Option<string> charterApprovalAgencyTypeDescriptor, ref Option<string> charterStatusDescriptor, ref Option<string> internetAccessDescriptor, ref Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, ref Option<string> schoolTypeDescriptor, ref Option<string> titleIPartASchoolDesignationDescriptor, ref Option<string> operationalStatusDescriptor, ref Option<string> id, ref Option<string> nameOfInstitution, ref Option<string> shortNameOfInstitution, ref Option<string> webSite, ref Option<bool> useSnapshot, ref Option<string> educationOrganizationIdentificationSystemDescriptor, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="charterApprovalAgencyTypeDescriptor"></param>
        /// <param name="charterStatusDescriptor"></param>
        /// <param name="internetAccessDescriptor"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="schoolTypeDescriptor"></param>
        /// <param name="titleIPartASchoolDesignationDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetSchools(Option<string> pageToken, Option<string> administrativeFundingControlDescriptor, Option<string> charterApprovalAgencyTypeDescriptor, Option<string> charterStatusDescriptor, Option<string> internetAccessDescriptor, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> schoolTypeDescriptor, Option<string> titleIPartASchoolDesignationDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (administrativeFundingControlDescriptor.IsSet && administrativeFundingControlDescriptor.Value == null)
                throw new ArgumentNullException(nameof(administrativeFundingControlDescriptor));

            if (charterApprovalAgencyTypeDescriptor.IsSet && charterApprovalAgencyTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(charterApprovalAgencyTypeDescriptor));

            if (charterStatusDescriptor.IsSet && charterStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(charterStatusDescriptor));

            if (internetAccessDescriptor.IsSet && internetAccessDescriptor.Value == null)
                throw new ArgumentNullException(nameof(internetAccessDescriptor));

            if (magnetSpecialProgramEmphasisSchoolDescriptor.IsSet && magnetSpecialProgramEmphasisSchoolDescriptor.Value == null)
                throw new ArgumentNullException(nameof(magnetSpecialProgramEmphasisSchoolDescriptor));

            if (schoolTypeDescriptor.IsSet && schoolTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(schoolTypeDescriptor));

            if (titleIPartASchoolDesignationDescriptor.IsSet && titleIPartASchoolDesignationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(titleIPartASchoolDesignationDescriptor));

            if (operationalStatusDescriptor.IsSet && operationalStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(operationalStatusDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (nameOfInstitution.IsSet && nameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(nameOfInstitution));

            if (shortNameOfInstitution.IsSet && shortNameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(shortNameOfInstitution));

            if (webSite.IsSet && webSite.Value == null)
                throw new ArgumentNullException(nameof(webSite));

            if (educationOrganizationIdentificationSystemDescriptor.IsSet && educationOrganizationIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationIdentificationSystemDescriptor));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="schoolId"></param>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="charterApprovalSchoolYear"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="charterApprovalAgencyTypeDescriptor"></param>
        /// <param name="charterStatusDescriptor"></param>
        /// <param name="internetAccessDescriptor"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="schoolTypeDescriptor"></param>
        /// <param name="titleIPartASchoolDesignationDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetSchoolsDefaultImplementation(IGetSchoolsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> schoolId, Option<long> localEducationAgencyId, Option<int> charterApprovalSchoolYear, Option<string> administrativeFundingControlDescriptor, Option<string> charterApprovalAgencyTypeDescriptor, Option<string> charterStatusDescriptor, Option<string> internetAccessDescriptor, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> schoolTypeDescriptor, Option<string> titleIPartASchoolDesignationDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetSchools(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, schoolId, localEducationAgencyId, charterApprovalSchoolYear, administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="schoolId"></param>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="charterApprovalSchoolYear"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="charterApprovalAgencyTypeDescriptor"></param>
        /// <param name="charterStatusDescriptor"></param>
        /// <param name="internetAccessDescriptor"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="schoolTypeDescriptor"></param>
        /// <param name="titleIPartASchoolDesignationDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetSchools(ref bool suppressDefaultLog, IGetSchoolsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> schoolId, Option<long> localEducationAgencyId, Option<int> charterApprovalSchoolYear, Option<string> administrativeFundingControlDescriptor, Option<string> charterApprovalAgencyTypeDescriptor, Option<string> charterStatusDescriptor, Option<string> internetAccessDescriptor, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> schoolTypeDescriptor, Option<string> titleIPartASchoolDesignationDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="schoolId"></param>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="charterApprovalSchoolYear"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="charterApprovalAgencyTypeDescriptor"></param>
        /// <param name="charterStatusDescriptor"></param>
        /// <param name="internetAccessDescriptor"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="schoolTypeDescriptor"></param>
        /// <param name="titleIPartASchoolDesignationDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetSchoolsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> schoolId, Option<long> localEducationAgencyId, Option<int> charterApprovalSchoolYear, Option<string> administrativeFundingControlDescriptor, Option<string> charterApprovalAgencyTypeDescriptor, Option<string> charterStatusDescriptor, Option<string> internetAccessDescriptor, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> schoolTypeDescriptor, Option<string> titleIPartASchoolDesignationDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSchools(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, schoolId, localEducationAgencyId, charterApprovalSchoolYear, administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="schoolId"></param>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="charterApprovalSchoolYear"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="charterApprovalAgencyTypeDescriptor"></param>
        /// <param name="charterStatusDescriptor"></param>
        /// <param name="internetAccessDescriptor"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="schoolTypeDescriptor"></param>
        /// <param name="titleIPartASchoolDesignationDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetSchools(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> schoolId, Option<long> localEducationAgencyId, Option<int> charterApprovalSchoolYear, Option<string> administrativeFundingControlDescriptor, Option<string> charterApprovalAgencyTypeDescriptor, Option<string> charterStatusDescriptor, Option<string> internetAccessDescriptor, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> schoolTypeDescriptor, Option<string> titleIPartASchoolDesignationDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="localEducationAgencyId">The identifier assigned to a local education agency. It must be distinct from any other identifier assigned to educational organizations, such as a SchoolId, to prevent duplication. (optional)</param>
        /// <param name="charterApprovalSchoolYear">The school year in which a charter school was initially approved. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">The type of education institution as classified by its funding source, for example public or private. (optional)</param>
        /// <param name="charterApprovalAgencyTypeDescriptor">The type of agency that approved the establishment or continuation of a charter school. (optional)</param>
        /// <param name="charterStatusDescriptor">A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school. (optional)</param>
        /// <param name="internetAccessDescriptor">The type of Internet access available. (optional)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language). (optional)</param>
        /// <param name="schoolTypeDescriptor">The type of education institution as classified by its primary focus. (optional)</param>
        /// <param name="titleIPartASchoolDesignationDescriptor">Denotes the Title I Part A designation for the school. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsApiResponse"/>&gt;</returns>
        public async Task<IGetSchoolsApiResponse?> GetSchoolsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> schoolId = default, Option<long> localEducationAgencyId = default, Option<int> charterApprovalSchoolYear = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> charterApprovalAgencyTypeDescriptor = default, Option<string> charterStatusDescriptor = default, Option<string> internetAccessDescriptor = default, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor = default, Option<string> schoolTypeDescriptor = default, Option<string> titleIPartASchoolDesignationDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSchoolsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, schoolId, localEducationAgencyId, charterApprovalSchoolYear, administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="localEducationAgencyId">The identifier assigned to a local education agency. It must be distinct from any other identifier assigned to educational organizations, such as a SchoolId, to prevent duplication. (optional)</param>
        /// <param name="charterApprovalSchoolYear">The school year in which a charter school was initially approved. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">The type of education institution as classified by its funding source, for example public or private. (optional)</param>
        /// <param name="charterApprovalAgencyTypeDescriptor">The type of agency that approved the establishment or continuation of a charter school. (optional)</param>
        /// <param name="charterStatusDescriptor">A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school. (optional)</param>
        /// <param name="internetAccessDescriptor">The type of Internet access available. (optional)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language). (optional)</param>
        /// <param name="schoolTypeDescriptor">The type of education institution as classified by its primary focus. (optional)</param>
        /// <param name="titleIPartASchoolDesignationDescriptor">Denotes the Title I Part A designation for the school. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsApiResponse"/>&gt;</returns>
        public async Task<IGetSchoolsApiResponse> GetSchoolsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> schoolId = default, Option<long> localEducationAgencyId = default, Option<int> charterApprovalSchoolYear = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> charterApprovalAgencyTypeDescriptor = default, Option<string> charterStatusDescriptor = default, Option<string> internetAccessDescriptor = default, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor = default, Option<string> schoolTypeDescriptor = default, Option<string> titleIPartASchoolDesignationDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSchools(pageToken, administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, educationOrganizationIdentificationSystemDescriptor, identificationCode);

                FormatGetSchools(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref schoolId, ref localEducationAgencyId, ref charterApprovalSchoolYear, ref administrativeFundingControlDescriptor, ref charterApprovalAgencyTypeDescriptor, ref charterStatusDescriptor, ref internetAccessDescriptor, ref magnetSpecialProgramEmphasisSchoolDescriptor, ref schoolTypeDescriptor, ref titleIPartASchoolDesignationDescriptor, ref operationalStatusDescriptor, ref id, ref nameOfInstitution, ref shortNameOfInstitution, ref webSite, ref useSnapshot, ref educationOrganizationIdentificationSystemDescriptor, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/schools"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/schools");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (schoolId.IsSet)
                        parseQueryStringLocalVar["schoolId"] = ClientUtils.ParameterToString(schoolId.Value);

                    if (localEducationAgencyId.IsSet)
                        parseQueryStringLocalVar["localEducationAgencyId"] = ClientUtils.ParameterToString(localEducationAgencyId.Value);

                    if (charterApprovalSchoolYear.IsSet)
                        parseQueryStringLocalVar["charterApprovalSchoolYear"] = ClientUtils.ParameterToString(charterApprovalSchoolYear.Value);

                    if (administrativeFundingControlDescriptor.IsSet)
                        parseQueryStringLocalVar["administrativeFundingControlDescriptor"] = ClientUtils.ParameterToString(administrativeFundingControlDescriptor.Value);

                    if (charterApprovalAgencyTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["charterApprovalAgencyTypeDescriptor"] = ClientUtils.ParameterToString(charterApprovalAgencyTypeDescriptor.Value);

                    if (charterStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["charterStatusDescriptor"] = ClientUtils.ParameterToString(charterStatusDescriptor.Value);

                    if (internetAccessDescriptor.IsSet)
                        parseQueryStringLocalVar["internetAccessDescriptor"] = ClientUtils.ParameterToString(internetAccessDescriptor.Value);

                    if (magnetSpecialProgramEmphasisSchoolDescriptor.IsSet)
                        parseQueryStringLocalVar["magnetSpecialProgramEmphasisSchoolDescriptor"] = ClientUtils.ParameterToString(magnetSpecialProgramEmphasisSchoolDescriptor.Value);

                    if (schoolTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["schoolTypeDescriptor"] = ClientUtils.ParameterToString(schoolTypeDescriptor.Value);

                    if (titleIPartASchoolDesignationDescriptor.IsSet)
                        parseQueryStringLocalVar["titleIPartASchoolDesignationDescriptor"] = ClientUtils.ParameterToString(titleIPartASchoolDesignationDescriptor.Value);

                    if (operationalStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["operationalStatusDescriptor"] = ClientUtils.ParameterToString(operationalStatusDescriptor.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (nameOfInstitution.IsSet)
                        parseQueryStringLocalVar["nameOfInstitution"] = ClientUtils.ParameterToString(nameOfInstitution.Value);

                    if (shortNameOfInstitution.IsSet)
                        parseQueryStringLocalVar["shortNameOfInstitution"] = ClientUtils.ParameterToString(shortNameOfInstitution.Value);

                    if (webSite.IsSet)
                        parseQueryStringLocalVar["webSite"] = ClientUtils.ParameterToString(webSite.Value);

                    if (educationOrganizationIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["educationOrganizationIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(educationOrganizationIdentificationSystemDescriptor.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSchoolsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSchoolsApiResponse>();

                        GetSchoolsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/schools", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSchoolsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, schoolId, localEducationAgencyId, charterApprovalSchoolYear, administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);

                        Events.ExecuteOnGetSchools(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSchoolsDefaultImplementation(e, "/ed-fi/schools", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, schoolId, localEducationAgencyId, charterApprovalSchoolYear, administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
                Events.ExecuteOnErrorGetSchools(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSchoolsApiResponse"/>
        /// </summary>
        public partial class GetSchoolsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetSchoolsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSchoolsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSchoolsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSchoolsApiResponse(ILogger<GetSchoolsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiSchool>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiSchool>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiSchool>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSchoolsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetSchoolsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetSchoolsByIdDefaultImplementation(IGetSchoolsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetSchoolsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetSchoolsById(ref bool suppressDefaultLog, IGetSchoolsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetSchoolsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSchoolsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetSchoolsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetSchoolsByIdApiResponse?> GetSchoolsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSchoolsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetSchoolsByIdApiResponse> GetSchoolsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSchoolsById(id, ifNoneMatch);

                FormatGetSchoolsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/schools/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/schools/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSchoolsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSchoolsByIdApiResponse>();

                        GetSchoolsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/schools/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSchoolsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetSchoolsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSchoolsByIdDefaultImplementation(e, "/ed-fi/schools/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetSchoolsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSchoolsByIdApiResponse"/>
        /// </summary>
        public partial class GetSchoolsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetSchoolsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSchoolsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSchoolsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSchoolsByIdApiResponse(ILogger<GetSchoolsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiSchool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiSchool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiSchool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSchoolsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<long> schoolId, ref Option<long> localEducationAgencyId, ref Option<int> charterApprovalSchoolYear, ref Option<string> administrativeFundingControlDescriptor, ref Option<string> charterApprovalAgencyTypeDescriptor, ref Option<string> charterStatusDescriptor, ref Option<string> internetAccessDescriptor, ref Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, ref Option<string> schoolTypeDescriptor, ref Option<string> titleIPartASchoolDesignationDescriptor, ref Option<string> operationalStatusDescriptor, ref Option<string> id, ref Option<string> nameOfInstitution, ref Option<string> shortNameOfInstitution, ref Option<string> webSite, ref Option<bool> useSnapshot, ref Option<string> educationOrganizationIdentificationSystemDescriptor, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="charterApprovalAgencyTypeDescriptor"></param>
        /// <param name="charterStatusDescriptor"></param>
        /// <param name="internetAccessDescriptor"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="schoolTypeDescriptor"></param>
        /// <param name="titleIPartASchoolDesignationDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetSchoolsPartitions(Option<string> administrativeFundingControlDescriptor, Option<string> charterApprovalAgencyTypeDescriptor, Option<string> charterStatusDescriptor, Option<string> internetAccessDescriptor, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> schoolTypeDescriptor, Option<string> titleIPartASchoolDesignationDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            if (administrativeFundingControlDescriptor.IsSet && administrativeFundingControlDescriptor.Value == null)
                throw new ArgumentNullException(nameof(administrativeFundingControlDescriptor));

            if (charterApprovalAgencyTypeDescriptor.IsSet && charterApprovalAgencyTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(charterApprovalAgencyTypeDescriptor));

            if (charterStatusDescriptor.IsSet && charterStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(charterStatusDescriptor));

            if (internetAccessDescriptor.IsSet && internetAccessDescriptor.Value == null)
                throw new ArgumentNullException(nameof(internetAccessDescriptor));

            if (magnetSpecialProgramEmphasisSchoolDescriptor.IsSet && magnetSpecialProgramEmphasisSchoolDescriptor.Value == null)
                throw new ArgumentNullException(nameof(magnetSpecialProgramEmphasisSchoolDescriptor));

            if (schoolTypeDescriptor.IsSet && schoolTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(schoolTypeDescriptor));

            if (titleIPartASchoolDesignationDescriptor.IsSet && titleIPartASchoolDesignationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(titleIPartASchoolDesignationDescriptor));

            if (operationalStatusDescriptor.IsSet && operationalStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(operationalStatusDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (nameOfInstitution.IsSet && nameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(nameOfInstitution));

            if (shortNameOfInstitution.IsSet && shortNameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(shortNameOfInstitution));

            if (webSite.IsSet && webSite.Value == null)
                throw new ArgumentNullException(nameof(webSite));

            if (educationOrganizationIdentificationSystemDescriptor.IsSet && educationOrganizationIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationIdentificationSystemDescriptor));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="schoolId"></param>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="charterApprovalSchoolYear"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="charterApprovalAgencyTypeDescriptor"></param>
        /// <param name="charterStatusDescriptor"></param>
        /// <param name="internetAccessDescriptor"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="schoolTypeDescriptor"></param>
        /// <param name="titleIPartASchoolDesignationDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetSchoolsPartitionsDefaultImplementation(IGetSchoolsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> schoolId, Option<long> localEducationAgencyId, Option<int> charterApprovalSchoolYear, Option<string> administrativeFundingControlDescriptor, Option<string> charterApprovalAgencyTypeDescriptor, Option<string> charterStatusDescriptor, Option<string> internetAccessDescriptor, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> schoolTypeDescriptor, Option<string> titleIPartASchoolDesignationDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetSchoolsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, schoolId, localEducationAgencyId, charterApprovalSchoolYear, administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="schoolId"></param>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="charterApprovalSchoolYear"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="charterApprovalAgencyTypeDescriptor"></param>
        /// <param name="charterStatusDescriptor"></param>
        /// <param name="internetAccessDescriptor"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="schoolTypeDescriptor"></param>
        /// <param name="titleIPartASchoolDesignationDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetSchoolsPartitions(ref bool suppressDefaultLog, IGetSchoolsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> schoolId, Option<long> localEducationAgencyId, Option<int> charterApprovalSchoolYear, Option<string> administrativeFundingControlDescriptor, Option<string> charterApprovalAgencyTypeDescriptor, Option<string> charterStatusDescriptor, Option<string> internetAccessDescriptor, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> schoolTypeDescriptor, Option<string> titleIPartASchoolDesignationDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="schoolId"></param>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="charterApprovalSchoolYear"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="charterApprovalAgencyTypeDescriptor"></param>
        /// <param name="charterStatusDescriptor"></param>
        /// <param name="internetAccessDescriptor"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="schoolTypeDescriptor"></param>
        /// <param name="titleIPartASchoolDesignationDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetSchoolsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> schoolId, Option<long> localEducationAgencyId, Option<int> charterApprovalSchoolYear, Option<string> administrativeFundingControlDescriptor, Option<string> charterApprovalAgencyTypeDescriptor, Option<string> charterStatusDescriptor, Option<string> internetAccessDescriptor, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> schoolTypeDescriptor, Option<string> titleIPartASchoolDesignationDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSchoolsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, schoolId, localEducationAgencyId, charterApprovalSchoolYear, administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="schoolId"></param>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="charterApprovalSchoolYear"></param>
        /// <param name="administrativeFundingControlDescriptor"></param>
        /// <param name="charterApprovalAgencyTypeDescriptor"></param>
        /// <param name="charterStatusDescriptor"></param>
        /// <param name="internetAccessDescriptor"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="schoolTypeDescriptor"></param>
        /// <param name="titleIPartASchoolDesignationDescriptor"></param>
        /// <param name="operationalStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="nameOfInstitution"></param>
        /// <param name="shortNameOfInstitution"></param>
        /// <param name="webSite"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetSchoolsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> schoolId, Option<long> localEducationAgencyId, Option<int> charterApprovalSchoolYear, Option<string> administrativeFundingControlDescriptor, Option<string> charterApprovalAgencyTypeDescriptor, Option<string> charterStatusDescriptor, Option<string> internetAccessDescriptor, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> schoolTypeDescriptor, Option<string> titleIPartASchoolDesignationDescriptor, Option<string> operationalStatusDescriptor, Option<string> id, Option<string> nameOfInstitution, Option<string> shortNameOfInstitution, Option<string> webSite, Option<bool> useSnapshot, Option<string> educationOrganizationIdentificationSystemDescriptor, Option<string> identificationCode);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="localEducationAgencyId">The identifier assigned to a local education agency. It must be distinct from any other identifier assigned to educational organizations, such as a SchoolId, to prevent duplication. (optional)</param>
        /// <param name="charterApprovalSchoolYear">The school year in which a charter school was initially approved. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">The type of education institution as classified by its funding source, for example public or private. (optional)</param>
        /// <param name="charterApprovalAgencyTypeDescriptor">The type of agency that approved the establishment or continuation of a charter school. (optional)</param>
        /// <param name="charterStatusDescriptor">A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school. (optional)</param>
        /// <param name="internetAccessDescriptor">The type of Internet access available. (optional)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language). (optional)</param>
        /// <param name="schoolTypeDescriptor">The type of education institution as classified by its primary focus. (optional)</param>
        /// <param name="titleIPartASchoolDesignationDescriptor">Denotes the Title I Part A designation for the school. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetSchoolsPartitionsApiResponse?> GetSchoolsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> schoolId = default, Option<long> localEducationAgencyId = default, Option<int> charterApprovalSchoolYear = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> charterApprovalAgencyTypeDescriptor = default, Option<string> charterStatusDescriptor = default, Option<string> internetAccessDescriptor = default, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor = default, Option<string> schoolTypeDescriptor = default, Option<string> titleIPartASchoolDesignationDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSchoolsPartitionsAsync(number, minChangeVersion, maxChangeVersion, schoolId, localEducationAgencyId, charterApprovalSchoolYear, administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="localEducationAgencyId">The identifier assigned to a local education agency. It must be distinct from any other identifier assigned to educational organizations, such as a SchoolId, to prevent duplication. (optional)</param>
        /// <param name="charterApprovalSchoolYear">The school year in which a charter school was initially approved. (optional)</param>
        /// <param name="administrativeFundingControlDescriptor">The type of education institution as classified by its funding source, for example public or private. (optional)</param>
        /// <param name="charterApprovalAgencyTypeDescriptor">The type of agency that approved the establishment or continuation of a charter school. (optional)</param>
        /// <param name="charterStatusDescriptor">A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school. (optional)</param>
        /// <param name="internetAccessDescriptor">The type of Internet access available. (optional)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language). (optional)</param>
        /// <param name="schoolTypeDescriptor">The type of education institution as classified by its primary focus. (optional)</param>
        /// <param name="titleIPartASchoolDesignationDescriptor">Denotes the Title I Part A designation for the school. (optional)</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution. (optional)</param>
        /// <param name="shortNameOfInstitution">A short name for the institution. (optional)</param>
        /// <param name="webSite">The public web site address (URL) for the education organization. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="educationOrganizationIdentificationSystemDescriptor">The school system, state, or agency assigning the identification code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchoolsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetSchoolsPartitionsApiResponse> GetSchoolsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> schoolId = default, Option<long> localEducationAgencyId = default, Option<int> charterApprovalSchoolYear = default, Option<string> administrativeFundingControlDescriptor = default, Option<string> charterApprovalAgencyTypeDescriptor = default, Option<string> charterStatusDescriptor = default, Option<string> internetAccessDescriptor = default, Option<string> magnetSpecialProgramEmphasisSchoolDescriptor = default, Option<string> schoolTypeDescriptor = default, Option<string> titleIPartASchoolDesignationDescriptor = default, Option<string> operationalStatusDescriptor = default, Option<string> id = default, Option<string> nameOfInstitution = default, Option<string> shortNameOfInstitution = default, Option<string> webSite = default, Option<bool> useSnapshot = default, Option<string> educationOrganizationIdentificationSystemDescriptor = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSchoolsPartitions(administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, educationOrganizationIdentificationSystemDescriptor, identificationCode);

                FormatGetSchoolsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref schoolId, ref localEducationAgencyId, ref charterApprovalSchoolYear, ref administrativeFundingControlDescriptor, ref charterApprovalAgencyTypeDescriptor, ref charterStatusDescriptor, ref internetAccessDescriptor, ref magnetSpecialProgramEmphasisSchoolDescriptor, ref schoolTypeDescriptor, ref titleIPartASchoolDesignationDescriptor, ref operationalStatusDescriptor, ref id, ref nameOfInstitution, ref shortNameOfInstitution, ref webSite, ref useSnapshot, ref educationOrganizationIdentificationSystemDescriptor, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/schools/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/schools/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (schoolId.IsSet)
                        parseQueryStringLocalVar["schoolId"] = ClientUtils.ParameterToString(schoolId.Value);

                    if (localEducationAgencyId.IsSet)
                        parseQueryStringLocalVar["localEducationAgencyId"] = ClientUtils.ParameterToString(localEducationAgencyId.Value);

                    if (charterApprovalSchoolYear.IsSet)
                        parseQueryStringLocalVar["charterApprovalSchoolYear"] = ClientUtils.ParameterToString(charterApprovalSchoolYear.Value);

                    if (administrativeFundingControlDescriptor.IsSet)
                        parseQueryStringLocalVar["administrativeFundingControlDescriptor"] = ClientUtils.ParameterToString(administrativeFundingControlDescriptor.Value);

                    if (charterApprovalAgencyTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["charterApprovalAgencyTypeDescriptor"] = ClientUtils.ParameterToString(charterApprovalAgencyTypeDescriptor.Value);

                    if (charterStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["charterStatusDescriptor"] = ClientUtils.ParameterToString(charterStatusDescriptor.Value);

                    if (internetAccessDescriptor.IsSet)
                        parseQueryStringLocalVar["internetAccessDescriptor"] = ClientUtils.ParameterToString(internetAccessDescriptor.Value);

                    if (magnetSpecialProgramEmphasisSchoolDescriptor.IsSet)
                        parseQueryStringLocalVar["magnetSpecialProgramEmphasisSchoolDescriptor"] = ClientUtils.ParameterToString(magnetSpecialProgramEmphasisSchoolDescriptor.Value);

                    if (schoolTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["schoolTypeDescriptor"] = ClientUtils.ParameterToString(schoolTypeDescriptor.Value);

                    if (titleIPartASchoolDesignationDescriptor.IsSet)
                        parseQueryStringLocalVar["titleIPartASchoolDesignationDescriptor"] = ClientUtils.ParameterToString(titleIPartASchoolDesignationDescriptor.Value);

                    if (operationalStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["operationalStatusDescriptor"] = ClientUtils.ParameterToString(operationalStatusDescriptor.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (nameOfInstitution.IsSet)
                        parseQueryStringLocalVar["nameOfInstitution"] = ClientUtils.ParameterToString(nameOfInstitution.Value);

                    if (shortNameOfInstitution.IsSet)
                        parseQueryStringLocalVar["shortNameOfInstitution"] = ClientUtils.ParameterToString(shortNameOfInstitution.Value);

                    if (webSite.IsSet)
                        parseQueryStringLocalVar["webSite"] = ClientUtils.ParameterToString(webSite.Value);

                    if (educationOrganizationIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["educationOrganizationIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(educationOrganizationIdentificationSystemDescriptor.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSchoolsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSchoolsPartitionsApiResponse>();

                        GetSchoolsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/schools/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSchoolsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, schoolId, localEducationAgencyId, charterApprovalSchoolYear, administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);

                        Events.ExecuteOnGetSchoolsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSchoolsPartitionsDefaultImplementation(e, "/ed-fi/schools/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, schoolId, localEducationAgencyId, charterApprovalSchoolYear, administrativeFundingControlDescriptor, charterApprovalAgencyTypeDescriptor, charterStatusDescriptor, internetAccessDescriptor, magnetSpecialProgramEmphasisSchoolDescriptor, schoolTypeDescriptor, titleIPartASchoolDesignationDescriptor, operationalStatusDescriptor, id, nameOfInstitution, shortNameOfInstitution, webSite, useSnapshot, educationOrganizationIdentificationSystemDescriptor, identificationCode);
                Events.ExecuteOnErrorGetSchoolsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSchoolsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetSchoolsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetSchoolsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSchoolsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSchoolsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSchoolsPartitionsApiResponse(ILogger<GetSchoolsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesSchools(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesSchoolsDefaultImplementation(IKeyChangesSchoolsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesSchools(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesSchools(ref bool suppressDefaultLog, IKeyChangesSchoolsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesSchoolsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesSchools(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesSchools(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesSchoolsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesSchoolsApiResponse?> KeyChangesSchoolsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesSchoolsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesSchoolsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesSchoolsApiResponse> KeyChangesSchoolsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesSchools(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/schools/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/schools/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesSchoolsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesSchoolsApiResponse>();

                        KeyChangesSchoolsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/schools/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesSchoolsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesSchools(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesSchoolsDefaultImplementation(e, "/ed-fi/schools/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesSchools(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesSchoolsApiResponse"/>
        /// </summary>
        public partial class KeyChangesSchoolsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesSchoolsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesSchoolsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesSchoolsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesSchoolsApiResponse(ILogger<KeyChangesSchoolsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiSchoolKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiSchoolKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiSchoolKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostSchool(EdFiSchool edFiSchool);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiSchool"></param>
        /// <returns></returns>
        private void ValidatePostSchool(EdFiSchool edFiSchool)
        {
            if (edFiSchool == null)
                throw new ArgumentNullException(nameof(edFiSchool));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiSchool"></param>
        private void AfterPostSchoolDefaultImplementation(IPostSchoolApiResponse apiResponseLocalVar, EdFiSchool edFiSchool)
        {
            bool suppressDefaultLog = false;
            AfterPostSchool(ref suppressDefaultLog, apiResponseLocalVar, edFiSchool);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiSchool"></param>
        partial void AfterPostSchool(ref bool suppressDefaultLog, IPostSchoolApiResponse apiResponseLocalVar, EdFiSchool edFiSchool);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiSchool"></param>
        private void OnErrorPostSchoolDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiSchool edFiSchool)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostSchool(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiSchool);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiSchool"></param>
        partial void OnErrorPostSchool(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiSchool edFiSchool);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiSchool">The JSON representation of the \&quot;school\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSchoolApiResponse"/>&gt;</returns>
        public async Task<IPostSchoolApiResponse?> PostSchoolOrDefaultAsync(EdFiSchool edFiSchool, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostSchoolAsync(edFiSchool, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiSchool">The JSON representation of the \&quot;school\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSchoolApiResponse"/>&gt;</returns>
        public async Task<IPostSchoolApiResponse> PostSchoolAsync(EdFiSchool edFiSchool, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostSchool(edFiSchool);

                FormatPostSchool(edFiSchool);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/schools"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/schools");

                    httpRequestMessageLocalVar.Content = (edFiSchool as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiSchool, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostSchoolApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostSchoolApiResponse>();

                        PostSchoolApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/schools", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostSchoolDefaultImplementation(apiResponseLocalVar, edFiSchool);

                        Events.ExecuteOnPostSchool(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostSchoolDefaultImplementation(e, "/ed-fi/schools", uriBuilderLocalVar.Path, edFiSchool);
                Events.ExecuteOnErrorPostSchool(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostSchoolApiResponse"/>
        /// </summary>
        public partial class PostSchoolApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostSchoolApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostSchoolApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostSchoolApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostSchoolApiResponse(ILogger<PostSchoolApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutSchool(ref string id, EdFiSchool edFiSchool, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiSchool"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutSchool(string id, EdFiSchool edFiSchool, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiSchool == null)
                throw new ArgumentNullException(nameof(edFiSchool));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiSchool"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutSchoolDefaultImplementation(IPutSchoolApiResponse apiResponseLocalVar, string id, EdFiSchool edFiSchool, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutSchool(ref suppressDefaultLog, apiResponseLocalVar, id, edFiSchool, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiSchool"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutSchool(ref bool suppressDefaultLog, IPutSchoolApiResponse apiResponseLocalVar, string id, EdFiSchool edFiSchool, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiSchool"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutSchoolDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiSchool edFiSchool, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutSchool(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiSchool, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiSchool"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutSchool(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiSchool edFiSchool, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiSchool">The JSON representation of the \&quot;school\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutSchoolApiResponse"/>&gt;</returns>
        public async Task<IPutSchoolApiResponse?> PutSchoolOrDefaultAsync(string id, EdFiSchool edFiSchool, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutSchoolAsync(id, edFiSchool, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiSchool">The JSON representation of the \&quot;school\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutSchoolApiResponse"/>&gt;</returns>
        public async Task<IPutSchoolApiResponse> PutSchoolAsync(string id, EdFiSchool edFiSchool, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutSchool(id, edFiSchool, ifMatch);

                FormatPutSchool(ref id, edFiSchool, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/schools/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/schools/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiSchool as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiSchool, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutSchoolApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutSchoolApiResponse>();

                        PutSchoolApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/schools/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutSchoolDefaultImplementation(apiResponseLocalVar, id, edFiSchool, ifMatch);

                        Events.ExecuteOnPutSchool(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutSchoolDefaultImplementation(e, "/ed-fi/schools/{id}", uriBuilderLocalVar.Path, id, edFiSchool, ifMatch);
                Events.ExecuteOnErrorPutSchool(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutSchoolApiResponse"/>
        /// </summary>
        public partial class PutSchoolApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutSchoolApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutSchoolApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutSchoolApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutSchoolApiResponse(ILogger<PutSchoolApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
