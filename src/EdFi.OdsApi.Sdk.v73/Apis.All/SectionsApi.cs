// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISectionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SectionsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSectionByIdApiResponse"/>&gt;</returns>
        Task<IDeleteSectionByIdApiResponse> DeleteSectionByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSectionByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteSectionByIdApiResponse?> DeleteSectionByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesSectionsApiResponse"/>&gt;</returns>
        Task<IDeletesSectionsApiResponse> DeletesSectionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesSectionsApiResponse"/>?&gt;</returns>
        Task<IDeletesSectionsApiResponse?> DeletesSectionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="locationClassroomIdentificationCode">A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="locationSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="availableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a student receives education and related services. (optional)</param>
        /// <param name="instructionLanguageDescriptor">The primary language of instruction. If omitted, English is assumed. (optional)</param>
        /// <param name="mediumOfInstructionDescriptor">The media through which teachers provide instruction to students and students and teachers communicate about instructional matters. (optional)</param>
        /// <param name="populationServedDescriptor">The type of students the section is offered and tailored to. (optional)</param>
        /// <param name="sectionTypeDescriptor">Specifies whether the section is for attendance only, credit only, or both. (optional)</param>
        /// <param name="availableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="availableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="officialAttendancePeriod">Indicator of whether this section is used for official daily attendance. Alternatively, official daily attendance may be tied to a class period. (optional)</param>
        /// <param name="sectionName">A locally-defined name for the section, generally created to make the section more recognizable in informal contexts and generally distinct from the section identifier. (optional)</param>
        /// <param name="sequenceOfCourse">When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsApiResponse"/>&gt;</returns>
        Task<IGetSectionsApiResponse> GetSectionsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> sectionIdentifier = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sessionName = default, Option<string> locationClassroomIdentificationCode = default, Option<long> locationSchoolId = default, Option<string> availableCreditTypeDescriptor = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> instructionLanguageDescriptor = default, Option<string> mediumOfInstructionDescriptor = default, Option<string> populationServedDescriptor = default, Option<string> sectionTypeDescriptor = default, Option<double> availableCreditConversion = default, Option<double> availableCredits = default, Option<string> id = default, Option<bool> officialAttendancePeriod = default, Option<string> sectionName = default, Option<int> sequenceOfCourse = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="locationClassroomIdentificationCode">A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="locationSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="availableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a student receives education and related services. (optional)</param>
        /// <param name="instructionLanguageDescriptor">The primary language of instruction. If omitted, English is assumed. (optional)</param>
        /// <param name="mediumOfInstructionDescriptor">The media through which teachers provide instruction to students and students and teachers communicate about instructional matters. (optional)</param>
        /// <param name="populationServedDescriptor">The type of students the section is offered and tailored to. (optional)</param>
        /// <param name="sectionTypeDescriptor">Specifies whether the section is for attendance only, credit only, or both. (optional)</param>
        /// <param name="availableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="availableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="officialAttendancePeriod">Indicator of whether this section is used for official daily attendance. Alternatively, official daily attendance may be tied to a class period. (optional)</param>
        /// <param name="sectionName">A locally-defined name for the section, generally created to make the section more recognizable in informal contexts and generally distinct from the section identifier. (optional)</param>
        /// <param name="sequenceOfCourse">When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsApiResponse"/>?&gt;</returns>
        Task<IGetSectionsApiResponse?> GetSectionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> sectionIdentifier = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sessionName = default, Option<string> locationClassroomIdentificationCode = default, Option<long> locationSchoolId = default, Option<string> availableCreditTypeDescriptor = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> instructionLanguageDescriptor = default, Option<string> mediumOfInstructionDescriptor = default, Option<string> populationServedDescriptor = default, Option<string> sectionTypeDescriptor = default, Option<double> availableCreditConversion = default, Option<double> availableCredits = default, Option<string> id = default, Option<bool> officialAttendancePeriod = default, Option<string> sectionName = default, Option<int> sequenceOfCourse = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsByIdApiResponse"/>&gt;</returns>
        Task<IGetSectionsByIdApiResponse> GetSectionsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsByIdApiResponse"/>?&gt;</returns>
        Task<IGetSectionsByIdApiResponse?> GetSectionsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="locationClassroomIdentificationCode">A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="locationSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="availableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a student receives education and related services. (optional)</param>
        /// <param name="instructionLanguageDescriptor">The primary language of instruction. If omitted, English is assumed. (optional)</param>
        /// <param name="mediumOfInstructionDescriptor">The media through which teachers provide instruction to students and students and teachers communicate about instructional matters. (optional)</param>
        /// <param name="populationServedDescriptor">The type of students the section is offered and tailored to. (optional)</param>
        /// <param name="sectionTypeDescriptor">Specifies whether the section is for attendance only, credit only, or both. (optional)</param>
        /// <param name="availableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="availableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="officialAttendancePeriod">Indicator of whether this section is used for official daily attendance. Alternatively, official daily attendance may be tied to a class period. (optional)</param>
        /// <param name="sectionName">A locally-defined name for the section, generally created to make the section more recognizable in informal contexts and generally distinct from the section identifier. (optional)</param>
        /// <param name="sequenceOfCourse">When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetSectionsPartitionsApiResponse> GetSectionsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> sectionIdentifier = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sessionName = default, Option<string> locationClassroomIdentificationCode = default, Option<long> locationSchoolId = default, Option<string> availableCreditTypeDescriptor = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> instructionLanguageDescriptor = default, Option<string> mediumOfInstructionDescriptor = default, Option<string> populationServedDescriptor = default, Option<string> sectionTypeDescriptor = default, Option<double> availableCreditConversion = default, Option<double> availableCredits = default, Option<string> id = default, Option<bool> officialAttendancePeriod = default, Option<string> sectionName = default, Option<int> sequenceOfCourse = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="locationClassroomIdentificationCode">A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="locationSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="availableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a student receives education and related services. (optional)</param>
        /// <param name="instructionLanguageDescriptor">The primary language of instruction. If omitted, English is assumed. (optional)</param>
        /// <param name="mediumOfInstructionDescriptor">The media through which teachers provide instruction to students and students and teachers communicate about instructional matters. (optional)</param>
        /// <param name="populationServedDescriptor">The type of students the section is offered and tailored to. (optional)</param>
        /// <param name="sectionTypeDescriptor">Specifies whether the section is for attendance only, credit only, or both. (optional)</param>
        /// <param name="availableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="availableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="officialAttendancePeriod">Indicator of whether this section is used for official daily attendance. Alternatively, official daily attendance may be tied to a class period. (optional)</param>
        /// <param name="sectionName">A locally-defined name for the section, generally created to make the section more recognizable in informal contexts and generally distinct from the section identifier. (optional)</param>
        /// <param name="sequenceOfCourse">When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetSectionsPartitionsApiResponse?> GetSectionsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> sectionIdentifier = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sessionName = default, Option<string> locationClassroomIdentificationCode = default, Option<long> locationSchoolId = default, Option<string> availableCreditTypeDescriptor = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> instructionLanguageDescriptor = default, Option<string> mediumOfInstructionDescriptor = default, Option<string> populationServedDescriptor = default, Option<string> sectionTypeDescriptor = default, Option<double> availableCreditConversion = default, Option<double> availableCredits = default, Option<string> id = default, Option<bool> officialAttendancePeriod = default, Option<string> sectionName = default, Option<int> sequenceOfCourse = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesSectionsApiResponse"/>&gt;</returns>
        Task<IKeyChangesSectionsApiResponse> KeyChangesSectionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesSectionsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesSectionsApiResponse?> KeyChangesSectionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiSection">The JSON representation of the \&quot;section\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSectionApiResponse"/>&gt;</returns>
        Task<IPostSectionApiResponse> PostSectionAsync(EdFiSection edFiSection, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiSection">The JSON representation of the \&quot;section\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSectionApiResponse"/>?&gt;</returns>
        Task<IPostSectionApiResponse?> PostSectionOrDefaultAsync(EdFiSection edFiSection, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiSection">The JSON representation of the \&quot;section\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutSectionApiResponse"/>&gt;</returns>
        Task<IPutSectionApiResponse> PutSectionAsync(string id, EdFiSection edFiSection, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiSection">The JSON representation of the \&quot;section\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutSectionApiResponse"/>?&gt;</returns>
        Task<IPutSectionApiResponse?> PutSectionOrDefaultAsync(string id, EdFiSection edFiSection, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteSectionByIdApiResponse"/>
    /// </summary>
    public interface IDeleteSectionByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesSectionsApiResponse"/>
    /// </summary>
    public interface IDeletesSectionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiSectionDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetSectionsApiResponse"/>
    /// </summary>
    public interface IGetSectionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiSection>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetSectionsByIdApiResponse"/>
    /// </summary>
    public interface IGetSectionsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiSection?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetSectionsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetSectionsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesSectionsApiResponse"/>
    /// </summary>
    public interface IKeyChangesSectionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiSectionKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostSectionApiResponse"/>
    /// </summary>
    public interface IPostSectionApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutSectionApiResponse"/>
    /// </summary>
    public interface IPutSectionApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SectionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteSectionById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteSectionById;

        internal void ExecuteOnDeleteSectionById(SectionsApi.DeleteSectionByIdApiResponse apiResponse)
        {
            OnDeleteSectionById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSectionById(Exception exception)
        {
            OnErrorDeleteSectionById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesSections;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesSections;

        internal void ExecuteOnDeletesSections(SectionsApi.DeletesSectionsApiResponse apiResponse)
        {
            OnDeletesSections?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesSections(Exception exception)
        {
            OnErrorDeletesSections?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSections;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSections;

        internal void ExecuteOnGetSections(SectionsApi.GetSectionsApiResponse apiResponse)
        {
            OnGetSections?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSections(Exception exception)
        {
            OnErrorGetSections?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSectionsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSectionsById;

        internal void ExecuteOnGetSectionsById(SectionsApi.GetSectionsByIdApiResponse apiResponse)
        {
            OnGetSectionsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSectionsById(Exception exception)
        {
            OnErrorGetSectionsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSectionsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSectionsPartitions;

        internal void ExecuteOnGetSectionsPartitions(SectionsApi.GetSectionsPartitionsApiResponse apiResponse)
        {
            OnGetSectionsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSectionsPartitions(Exception exception)
        {
            OnErrorGetSectionsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesSections;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesSections;

        internal void ExecuteOnKeyChangesSections(SectionsApi.KeyChangesSectionsApiResponse apiResponse)
        {
            OnKeyChangesSections?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesSections(Exception exception)
        {
            OnErrorKeyChangesSections?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostSection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostSection;

        internal void ExecuteOnPostSection(SectionsApi.PostSectionApiResponse apiResponse)
        {
            OnPostSection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostSection(Exception exception)
        {
            OnErrorPostSection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutSection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutSection;

        internal void ExecuteOnPutSection(SectionsApi.PutSectionApiResponse apiResponse)
        {
            OnPutSection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutSection(Exception exception)
        {
            OnErrorPutSection?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SectionsApi : ISectionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SectionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SectionsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SectionsApi(ILogger<SectionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SectionsApiEvents sectionsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SectionsApi>();
            HttpClient = httpClient;
            Events = sectionsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteSectionById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteSectionById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteSectionByIdDefaultImplementation(IDeleteSectionByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSectionById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteSectionById(ref bool suppressDefaultLog, IDeleteSectionByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteSectionByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSectionById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteSectionById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSectionByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteSectionByIdApiResponse?> DeleteSectionByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSectionByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSectionByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteSectionByIdApiResponse> DeleteSectionByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteSectionById(id, ifMatch);

                FormatDeleteSectionById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/sections/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/sections/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteSectionByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSectionByIdApiResponse>();

                        DeleteSectionByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/sections/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSectionByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteSectionById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSectionByIdDefaultImplementation(e, "/ed-fi/sections/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteSectionById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSectionByIdApiResponse"/>
        /// </summary>
        public partial class DeleteSectionByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteSectionByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSectionByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSectionByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSectionByIdApiResponse(ILogger<DeleteSectionByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesSections(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesSectionsDefaultImplementation(IDeletesSectionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesSections(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesSections(ref bool suppressDefaultLog, IDeletesSectionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesSectionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesSections(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesSections(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesSectionsApiResponse"/>&gt;</returns>
        public async Task<IDeletesSectionsApiResponse?> DeletesSectionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesSectionsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesSectionsApiResponse"/>&gt;</returns>
        public async Task<IDeletesSectionsApiResponse> DeletesSectionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesSections(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/sections/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/sections/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesSectionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesSectionsApiResponse>();

                        DeletesSectionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/sections/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesSectionsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesSections(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesSectionsDefaultImplementation(e, "/ed-fi/sections/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesSections(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesSectionsApiResponse"/>
        /// </summary>
        public partial class DeletesSectionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesSectionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesSectionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesSectionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesSectionsApiResponse(ILogger<DeletesSectionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiSectionDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiSectionDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiSectionDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSections(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> sectionIdentifier, ref Option<string> localCourseCode, ref Option<long> schoolId, ref Option<int> schoolYear, ref Option<string> sessionName, ref Option<string> locationClassroomIdentificationCode, ref Option<long> locationSchoolId, ref Option<string> availableCreditTypeDescriptor, ref Option<string> educationalEnvironmentDescriptor, ref Option<string> instructionLanguageDescriptor, ref Option<string> mediumOfInstructionDescriptor, ref Option<string> populationServedDescriptor, ref Option<string> sectionTypeDescriptor, ref Option<double> availableCreditConversion, ref Option<double> availableCredits, ref Option<string> id, ref Option<bool> officialAttendancePeriod, ref Option<string> sectionName, ref Option<int> sequenceOfCourse, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sessionName"></param>
        /// <param name="locationClassroomIdentificationCode"></param>
        /// <param name="availableCreditTypeDescriptor"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="instructionLanguageDescriptor"></param>
        /// <param name="mediumOfInstructionDescriptor"></param>
        /// <param name="populationServedDescriptor"></param>
        /// <param name="sectionTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="sectionName"></param>
        /// <returns></returns>
        private void ValidateGetSections(Option<string> pageToken, Option<string> sectionIdentifier, Option<string> localCourseCode, Option<string> sessionName, Option<string> locationClassroomIdentificationCode, Option<string> availableCreditTypeDescriptor, Option<string> educationalEnvironmentDescriptor, Option<string> instructionLanguageDescriptor, Option<string> mediumOfInstructionDescriptor, Option<string> populationServedDescriptor, Option<string> sectionTypeDescriptor, Option<string> id, Option<string> sectionName)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (sectionIdentifier.IsSet && sectionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(sectionIdentifier));

            if (localCourseCode.IsSet && localCourseCode.Value == null)
                throw new ArgumentNullException(nameof(localCourseCode));

            if (sessionName.IsSet && sessionName.Value == null)
                throw new ArgumentNullException(nameof(sessionName));

            if (locationClassroomIdentificationCode.IsSet && locationClassroomIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(locationClassroomIdentificationCode));

            if (availableCreditTypeDescriptor.IsSet && availableCreditTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(availableCreditTypeDescriptor));

            if (educationalEnvironmentDescriptor.IsSet && educationalEnvironmentDescriptor.Value == null)
                throw new ArgumentNullException(nameof(educationalEnvironmentDescriptor));

            if (instructionLanguageDescriptor.IsSet && instructionLanguageDescriptor.Value == null)
                throw new ArgumentNullException(nameof(instructionLanguageDescriptor));

            if (mediumOfInstructionDescriptor.IsSet && mediumOfInstructionDescriptor.Value == null)
                throw new ArgumentNullException(nameof(mediumOfInstructionDescriptor));

            if (populationServedDescriptor.IsSet && populationServedDescriptor.Value == null)
                throw new ArgumentNullException(nameof(populationServedDescriptor));

            if (sectionTypeDescriptor.IsSet && sectionTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(sectionTypeDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (sectionName.IsSet && sectionName.Value == null)
                throw new ArgumentNullException(nameof(sectionName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sessionName"></param>
        /// <param name="locationClassroomIdentificationCode"></param>
        /// <param name="locationSchoolId"></param>
        /// <param name="availableCreditTypeDescriptor"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="instructionLanguageDescriptor"></param>
        /// <param name="mediumOfInstructionDescriptor"></param>
        /// <param name="populationServedDescriptor"></param>
        /// <param name="sectionTypeDescriptor"></param>
        /// <param name="availableCreditConversion"></param>
        /// <param name="availableCredits"></param>
        /// <param name="id"></param>
        /// <param name="officialAttendancePeriod"></param>
        /// <param name="sectionName"></param>
        /// <param name="sequenceOfCourse"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetSectionsDefaultImplementation(IGetSectionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> sectionIdentifier, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sessionName, Option<string> locationClassroomIdentificationCode, Option<long> locationSchoolId, Option<string> availableCreditTypeDescriptor, Option<string> educationalEnvironmentDescriptor, Option<string> instructionLanguageDescriptor, Option<string> mediumOfInstructionDescriptor, Option<string> populationServedDescriptor, Option<string> sectionTypeDescriptor, Option<double> availableCreditConversion, Option<double> availableCredits, Option<string> id, Option<bool> officialAttendancePeriod, Option<string> sectionName, Option<int> sequenceOfCourse, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetSections(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, locationClassroomIdentificationCode, locationSchoolId, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, availableCreditConversion, availableCredits, id, officialAttendancePeriod, sectionName, sequenceOfCourse, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sessionName"></param>
        /// <param name="locationClassroomIdentificationCode"></param>
        /// <param name="locationSchoolId"></param>
        /// <param name="availableCreditTypeDescriptor"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="instructionLanguageDescriptor"></param>
        /// <param name="mediumOfInstructionDescriptor"></param>
        /// <param name="populationServedDescriptor"></param>
        /// <param name="sectionTypeDescriptor"></param>
        /// <param name="availableCreditConversion"></param>
        /// <param name="availableCredits"></param>
        /// <param name="id"></param>
        /// <param name="officialAttendancePeriod"></param>
        /// <param name="sectionName"></param>
        /// <param name="sequenceOfCourse"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetSections(ref bool suppressDefaultLog, IGetSectionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> sectionIdentifier, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sessionName, Option<string> locationClassroomIdentificationCode, Option<long> locationSchoolId, Option<string> availableCreditTypeDescriptor, Option<string> educationalEnvironmentDescriptor, Option<string> instructionLanguageDescriptor, Option<string> mediumOfInstructionDescriptor, Option<string> populationServedDescriptor, Option<string> sectionTypeDescriptor, Option<double> availableCreditConversion, Option<double> availableCredits, Option<string> id, Option<bool> officialAttendancePeriod, Option<string> sectionName, Option<int> sequenceOfCourse, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sessionName"></param>
        /// <param name="locationClassroomIdentificationCode"></param>
        /// <param name="locationSchoolId"></param>
        /// <param name="availableCreditTypeDescriptor"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="instructionLanguageDescriptor"></param>
        /// <param name="mediumOfInstructionDescriptor"></param>
        /// <param name="populationServedDescriptor"></param>
        /// <param name="sectionTypeDescriptor"></param>
        /// <param name="availableCreditConversion"></param>
        /// <param name="availableCredits"></param>
        /// <param name="id"></param>
        /// <param name="officialAttendancePeriod"></param>
        /// <param name="sectionName"></param>
        /// <param name="sequenceOfCourse"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetSectionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> sectionIdentifier, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sessionName, Option<string> locationClassroomIdentificationCode, Option<long> locationSchoolId, Option<string> availableCreditTypeDescriptor, Option<string> educationalEnvironmentDescriptor, Option<string> instructionLanguageDescriptor, Option<string> mediumOfInstructionDescriptor, Option<string> populationServedDescriptor, Option<string> sectionTypeDescriptor, Option<double> availableCreditConversion, Option<double> availableCredits, Option<string> id, Option<bool> officialAttendancePeriod, Option<string> sectionName, Option<int> sequenceOfCourse, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSections(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, locationClassroomIdentificationCode, locationSchoolId, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, availableCreditConversion, availableCredits, id, officialAttendancePeriod, sectionName, sequenceOfCourse, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sessionName"></param>
        /// <param name="locationClassroomIdentificationCode"></param>
        /// <param name="locationSchoolId"></param>
        /// <param name="availableCreditTypeDescriptor"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="instructionLanguageDescriptor"></param>
        /// <param name="mediumOfInstructionDescriptor"></param>
        /// <param name="populationServedDescriptor"></param>
        /// <param name="sectionTypeDescriptor"></param>
        /// <param name="availableCreditConversion"></param>
        /// <param name="availableCredits"></param>
        /// <param name="id"></param>
        /// <param name="officialAttendancePeriod"></param>
        /// <param name="sectionName"></param>
        /// <param name="sequenceOfCourse"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetSections(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> sectionIdentifier, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sessionName, Option<string> locationClassroomIdentificationCode, Option<long> locationSchoolId, Option<string> availableCreditTypeDescriptor, Option<string> educationalEnvironmentDescriptor, Option<string> instructionLanguageDescriptor, Option<string> mediumOfInstructionDescriptor, Option<string> populationServedDescriptor, Option<string> sectionTypeDescriptor, Option<double> availableCreditConversion, Option<double> availableCredits, Option<string> id, Option<bool> officialAttendancePeriod, Option<string> sectionName, Option<int> sequenceOfCourse, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="locationClassroomIdentificationCode">A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="locationSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="availableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a student receives education and related services. (optional)</param>
        /// <param name="instructionLanguageDescriptor">The primary language of instruction. If omitted, English is assumed. (optional)</param>
        /// <param name="mediumOfInstructionDescriptor">The media through which teachers provide instruction to students and students and teachers communicate about instructional matters. (optional)</param>
        /// <param name="populationServedDescriptor">The type of students the section is offered and tailored to. (optional)</param>
        /// <param name="sectionTypeDescriptor">Specifies whether the section is for attendance only, credit only, or both. (optional)</param>
        /// <param name="availableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="availableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="officialAttendancePeriod">Indicator of whether this section is used for official daily attendance. Alternatively, official daily attendance may be tied to a class period. (optional)</param>
        /// <param name="sectionName">A locally-defined name for the section, generally created to make the section more recognizable in informal contexts and generally distinct from the section identifier. (optional)</param>
        /// <param name="sequenceOfCourse">When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsApiResponse"/>&gt;</returns>
        public async Task<IGetSectionsApiResponse?> GetSectionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> sectionIdentifier = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sessionName = default, Option<string> locationClassroomIdentificationCode = default, Option<long> locationSchoolId = default, Option<string> availableCreditTypeDescriptor = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> instructionLanguageDescriptor = default, Option<string> mediumOfInstructionDescriptor = default, Option<string> populationServedDescriptor = default, Option<string> sectionTypeDescriptor = default, Option<double> availableCreditConversion = default, Option<double> availableCredits = default, Option<string> id = default, Option<bool> officialAttendancePeriod = default, Option<string> sectionName = default, Option<int> sequenceOfCourse = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSectionsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, locationClassroomIdentificationCode, locationSchoolId, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, availableCreditConversion, availableCredits, id, officialAttendancePeriod, sectionName, sequenceOfCourse, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="locationClassroomIdentificationCode">A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="locationSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="availableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a student receives education and related services. (optional)</param>
        /// <param name="instructionLanguageDescriptor">The primary language of instruction. If omitted, English is assumed. (optional)</param>
        /// <param name="mediumOfInstructionDescriptor">The media through which teachers provide instruction to students and students and teachers communicate about instructional matters. (optional)</param>
        /// <param name="populationServedDescriptor">The type of students the section is offered and tailored to. (optional)</param>
        /// <param name="sectionTypeDescriptor">Specifies whether the section is for attendance only, credit only, or both. (optional)</param>
        /// <param name="availableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="availableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="officialAttendancePeriod">Indicator of whether this section is used for official daily attendance. Alternatively, official daily attendance may be tied to a class period. (optional)</param>
        /// <param name="sectionName">A locally-defined name for the section, generally created to make the section more recognizable in informal contexts and generally distinct from the section identifier. (optional)</param>
        /// <param name="sequenceOfCourse">When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsApiResponse"/>&gt;</returns>
        public async Task<IGetSectionsApiResponse> GetSectionsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> sectionIdentifier = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sessionName = default, Option<string> locationClassroomIdentificationCode = default, Option<long> locationSchoolId = default, Option<string> availableCreditTypeDescriptor = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> instructionLanguageDescriptor = default, Option<string> mediumOfInstructionDescriptor = default, Option<string> populationServedDescriptor = default, Option<string> sectionTypeDescriptor = default, Option<double> availableCreditConversion = default, Option<double> availableCredits = default, Option<string> id = default, Option<bool> officialAttendancePeriod = default, Option<string> sectionName = default, Option<int> sequenceOfCourse = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSections(pageToken, sectionIdentifier, localCourseCode, sessionName, locationClassroomIdentificationCode, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, id, sectionName);

                FormatGetSections(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref sectionIdentifier, ref localCourseCode, ref schoolId, ref schoolYear, ref sessionName, ref locationClassroomIdentificationCode, ref locationSchoolId, ref availableCreditTypeDescriptor, ref educationalEnvironmentDescriptor, ref instructionLanguageDescriptor, ref mediumOfInstructionDescriptor, ref populationServedDescriptor, ref sectionTypeDescriptor, ref availableCreditConversion, ref availableCredits, ref id, ref officialAttendancePeriod, ref sectionName, ref sequenceOfCourse, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/sections"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/sections");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (sectionIdentifier.IsSet)
                        parseQueryStringLocalVar["sectionIdentifier"] = ClientUtils.ParameterToString(sectionIdentifier.Value);

                    if (localCourseCode.IsSet)
                        parseQueryStringLocalVar["localCourseCode"] = ClientUtils.ParameterToString(localCourseCode.Value);

                    if (schoolId.IsSet)
                        parseQueryStringLocalVar["schoolId"] = ClientUtils.ParameterToString(schoolId.Value);

                    if (schoolYear.IsSet)
                        parseQueryStringLocalVar["schoolYear"] = ClientUtils.ParameterToString(schoolYear.Value);

                    if (sessionName.IsSet)
                        parseQueryStringLocalVar["sessionName"] = ClientUtils.ParameterToString(sessionName.Value);

                    if (locationClassroomIdentificationCode.IsSet)
                        parseQueryStringLocalVar["locationClassroomIdentificationCode"] = ClientUtils.ParameterToString(locationClassroomIdentificationCode.Value);

                    if (locationSchoolId.IsSet)
                        parseQueryStringLocalVar["locationSchoolId"] = ClientUtils.ParameterToString(locationSchoolId.Value);

                    if (availableCreditTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["availableCreditTypeDescriptor"] = ClientUtils.ParameterToString(availableCreditTypeDescriptor.Value);

                    if (educationalEnvironmentDescriptor.IsSet)
                        parseQueryStringLocalVar["educationalEnvironmentDescriptor"] = ClientUtils.ParameterToString(educationalEnvironmentDescriptor.Value);

                    if (instructionLanguageDescriptor.IsSet)
                        parseQueryStringLocalVar["instructionLanguageDescriptor"] = ClientUtils.ParameterToString(instructionLanguageDescriptor.Value);

                    if (mediumOfInstructionDescriptor.IsSet)
                        parseQueryStringLocalVar["mediumOfInstructionDescriptor"] = ClientUtils.ParameterToString(mediumOfInstructionDescriptor.Value);

                    if (populationServedDescriptor.IsSet)
                        parseQueryStringLocalVar["populationServedDescriptor"] = ClientUtils.ParameterToString(populationServedDescriptor.Value);

                    if (sectionTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["sectionTypeDescriptor"] = ClientUtils.ParameterToString(sectionTypeDescriptor.Value);

                    if (availableCreditConversion.IsSet)
                        parseQueryStringLocalVar["availableCreditConversion"] = ClientUtils.ParameterToString(availableCreditConversion.Value);

                    if (availableCredits.IsSet)
                        parseQueryStringLocalVar["availableCredits"] = ClientUtils.ParameterToString(availableCredits.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (officialAttendancePeriod.IsSet)
                        parseQueryStringLocalVar["officialAttendancePeriod"] = ClientUtils.ParameterToString(officialAttendancePeriod.Value);

                    if (sectionName.IsSet)
                        parseQueryStringLocalVar["sectionName"] = ClientUtils.ParameterToString(sectionName.Value);

                    if (sequenceOfCourse.IsSet)
                        parseQueryStringLocalVar["sequenceOfCourse"] = ClientUtils.ParameterToString(sequenceOfCourse.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSectionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSectionsApiResponse>();

                        GetSectionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/sections", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSectionsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, locationClassroomIdentificationCode, locationSchoolId, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, availableCreditConversion, availableCredits, id, officialAttendancePeriod, sectionName, sequenceOfCourse, useSnapshot);

                        Events.ExecuteOnGetSections(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSectionsDefaultImplementation(e, "/ed-fi/sections", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, locationClassroomIdentificationCode, locationSchoolId, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, availableCreditConversion, availableCredits, id, officialAttendancePeriod, sectionName, sequenceOfCourse, useSnapshot);
                Events.ExecuteOnErrorGetSections(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSectionsApiResponse"/>
        /// </summary>
        public partial class GetSectionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetSectionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSectionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSectionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSectionsApiResponse(ILogger<GetSectionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiSection>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiSection>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiSection>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSectionsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetSectionsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetSectionsByIdDefaultImplementation(IGetSectionsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetSectionsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetSectionsById(ref bool suppressDefaultLog, IGetSectionsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetSectionsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSectionsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetSectionsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetSectionsByIdApiResponse?> GetSectionsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSectionsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetSectionsByIdApiResponse> GetSectionsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSectionsById(id, ifNoneMatch);

                FormatGetSectionsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/sections/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/sections/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSectionsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSectionsByIdApiResponse>();

                        GetSectionsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/sections/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSectionsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetSectionsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSectionsByIdDefaultImplementation(e, "/ed-fi/sections/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetSectionsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSectionsByIdApiResponse"/>
        /// </summary>
        public partial class GetSectionsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetSectionsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSectionsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSectionsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSectionsByIdApiResponse(ILogger<GetSectionsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiSection? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiSection>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiSection? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSectionsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> sectionIdentifier, ref Option<string> localCourseCode, ref Option<long> schoolId, ref Option<int> schoolYear, ref Option<string> sessionName, ref Option<string> locationClassroomIdentificationCode, ref Option<long> locationSchoolId, ref Option<string> availableCreditTypeDescriptor, ref Option<string> educationalEnvironmentDescriptor, ref Option<string> instructionLanguageDescriptor, ref Option<string> mediumOfInstructionDescriptor, ref Option<string> populationServedDescriptor, ref Option<string> sectionTypeDescriptor, ref Option<double> availableCreditConversion, ref Option<double> availableCredits, ref Option<string> id, ref Option<bool> officialAttendancePeriod, ref Option<string> sectionName, ref Option<int> sequenceOfCourse, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sectionIdentifier"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sessionName"></param>
        /// <param name="locationClassroomIdentificationCode"></param>
        /// <param name="availableCreditTypeDescriptor"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="instructionLanguageDescriptor"></param>
        /// <param name="mediumOfInstructionDescriptor"></param>
        /// <param name="populationServedDescriptor"></param>
        /// <param name="sectionTypeDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="sectionName"></param>
        /// <returns></returns>
        private void ValidateGetSectionsPartitions(Option<string> sectionIdentifier, Option<string> localCourseCode, Option<string> sessionName, Option<string> locationClassroomIdentificationCode, Option<string> availableCreditTypeDescriptor, Option<string> educationalEnvironmentDescriptor, Option<string> instructionLanguageDescriptor, Option<string> mediumOfInstructionDescriptor, Option<string> populationServedDescriptor, Option<string> sectionTypeDescriptor, Option<string> id, Option<string> sectionName)
        {
            if (sectionIdentifier.IsSet && sectionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(sectionIdentifier));

            if (localCourseCode.IsSet && localCourseCode.Value == null)
                throw new ArgumentNullException(nameof(localCourseCode));

            if (sessionName.IsSet && sessionName.Value == null)
                throw new ArgumentNullException(nameof(sessionName));

            if (locationClassroomIdentificationCode.IsSet && locationClassroomIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(locationClassroomIdentificationCode));

            if (availableCreditTypeDescriptor.IsSet && availableCreditTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(availableCreditTypeDescriptor));

            if (educationalEnvironmentDescriptor.IsSet && educationalEnvironmentDescriptor.Value == null)
                throw new ArgumentNullException(nameof(educationalEnvironmentDescriptor));

            if (instructionLanguageDescriptor.IsSet && instructionLanguageDescriptor.Value == null)
                throw new ArgumentNullException(nameof(instructionLanguageDescriptor));

            if (mediumOfInstructionDescriptor.IsSet && mediumOfInstructionDescriptor.Value == null)
                throw new ArgumentNullException(nameof(mediumOfInstructionDescriptor));

            if (populationServedDescriptor.IsSet && populationServedDescriptor.Value == null)
                throw new ArgumentNullException(nameof(populationServedDescriptor));

            if (sectionTypeDescriptor.IsSet && sectionTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(sectionTypeDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (sectionName.IsSet && sectionName.Value == null)
                throw new ArgumentNullException(nameof(sectionName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sessionName"></param>
        /// <param name="locationClassroomIdentificationCode"></param>
        /// <param name="locationSchoolId"></param>
        /// <param name="availableCreditTypeDescriptor"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="instructionLanguageDescriptor"></param>
        /// <param name="mediumOfInstructionDescriptor"></param>
        /// <param name="populationServedDescriptor"></param>
        /// <param name="sectionTypeDescriptor"></param>
        /// <param name="availableCreditConversion"></param>
        /// <param name="availableCredits"></param>
        /// <param name="id"></param>
        /// <param name="officialAttendancePeriod"></param>
        /// <param name="sectionName"></param>
        /// <param name="sequenceOfCourse"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetSectionsPartitionsDefaultImplementation(IGetSectionsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> sectionIdentifier, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sessionName, Option<string> locationClassroomIdentificationCode, Option<long> locationSchoolId, Option<string> availableCreditTypeDescriptor, Option<string> educationalEnvironmentDescriptor, Option<string> instructionLanguageDescriptor, Option<string> mediumOfInstructionDescriptor, Option<string> populationServedDescriptor, Option<string> sectionTypeDescriptor, Option<double> availableCreditConversion, Option<double> availableCredits, Option<string> id, Option<bool> officialAttendancePeriod, Option<string> sectionName, Option<int> sequenceOfCourse, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetSectionsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, locationClassroomIdentificationCode, locationSchoolId, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, availableCreditConversion, availableCredits, id, officialAttendancePeriod, sectionName, sequenceOfCourse, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sessionName"></param>
        /// <param name="locationClassroomIdentificationCode"></param>
        /// <param name="locationSchoolId"></param>
        /// <param name="availableCreditTypeDescriptor"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="instructionLanguageDescriptor"></param>
        /// <param name="mediumOfInstructionDescriptor"></param>
        /// <param name="populationServedDescriptor"></param>
        /// <param name="sectionTypeDescriptor"></param>
        /// <param name="availableCreditConversion"></param>
        /// <param name="availableCredits"></param>
        /// <param name="id"></param>
        /// <param name="officialAttendancePeriod"></param>
        /// <param name="sectionName"></param>
        /// <param name="sequenceOfCourse"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetSectionsPartitions(ref bool suppressDefaultLog, IGetSectionsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> sectionIdentifier, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sessionName, Option<string> locationClassroomIdentificationCode, Option<long> locationSchoolId, Option<string> availableCreditTypeDescriptor, Option<string> educationalEnvironmentDescriptor, Option<string> instructionLanguageDescriptor, Option<string> mediumOfInstructionDescriptor, Option<string> populationServedDescriptor, Option<string> sectionTypeDescriptor, Option<double> availableCreditConversion, Option<double> availableCredits, Option<string> id, Option<bool> officialAttendancePeriod, Option<string> sectionName, Option<int> sequenceOfCourse, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sessionName"></param>
        /// <param name="locationClassroomIdentificationCode"></param>
        /// <param name="locationSchoolId"></param>
        /// <param name="availableCreditTypeDescriptor"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="instructionLanguageDescriptor"></param>
        /// <param name="mediumOfInstructionDescriptor"></param>
        /// <param name="populationServedDescriptor"></param>
        /// <param name="sectionTypeDescriptor"></param>
        /// <param name="availableCreditConversion"></param>
        /// <param name="availableCredits"></param>
        /// <param name="id"></param>
        /// <param name="officialAttendancePeriod"></param>
        /// <param name="sectionName"></param>
        /// <param name="sequenceOfCourse"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetSectionsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> sectionIdentifier, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sessionName, Option<string> locationClassroomIdentificationCode, Option<long> locationSchoolId, Option<string> availableCreditTypeDescriptor, Option<string> educationalEnvironmentDescriptor, Option<string> instructionLanguageDescriptor, Option<string> mediumOfInstructionDescriptor, Option<string> populationServedDescriptor, Option<string> sectionTypeDescriptor, Option<double> availableCreditConversion, Option<double> availableCredits, Option<string> id, Option<bool> officialAttendancePeriod, Option<string> sectionName, Option<int> sequenceOfCourse, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSectionsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, locationClassroomIdentificationCode, locationSchoolId, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, availableCreditConversion, availableCredits, id, officialAttendancePeriod, sectionName, sequenceOfCourse, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sessionName"></param>
        /// <param name="locationClassroomIdentificationCode"></param>
        /// <param name="locationSchoolId"></param>
        /// <param name="availableCreditTypeDescriptor"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="instructionLanguageDescriptor"></param>
        /// <param name="mediumOfInstructionDescriptor"></param>
        /// <param name="populationServedDescriptor"></param>
        /// <param name="sectionTypeDescriptor"></param>
        /// <param name="availableCreditConversion"></param>
        /// <param name="availableCredits"></param>
        /// <param name="id"></param>
        /// <param name="officialAttendancePeriod"></param>
        /// <param name="sectionName"></param>
        /// <param name="sequenceOfCourse"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetSectionsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> sectionIdentifier, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sessionName, Option<string> locationClassroomIdentificationCode, Option<long> locationSchoolId, Option<string> availableCreditTypeDescriptor, Option<string> educationalEnvironmentDescriptor, Option<string> instructionLanguageDescriptor, Option<string> mediumOfInstructionDescriptor, Option<string> populationServedDescriptor, Option<string> sectionTypeDescriptor, Option<double> availableCreditConversion, Option<double> availableCredits, Option<string> id, Option<bool> officialAttendancePeriod, Option<string> sectionName, Option<int> sequenceOfCourse, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="locationClassroomIdentificationCode">A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="locationSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="availableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a student receives education and related services. (optional)</param>
        /// <param name="instructionLanguageDescriptor">The primary language of instruction. If omitted, English is assumed. (optional)</param>
        /// <param name="mediumOfInstructionDescriptor">The media through which teachers provide instruction to students and students and teachers communicate about instructional matters. (optional)</param>
        /// <param name="populationServedDescriptor">The type of students the section is offered and tailored to. (optional)</param>
        /// <param name="sectionTypeDescriptor">Specifies whether the section is for attendance only, credit only, or both. (optional)</param>
        /// <param name="availableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="availableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="officialAttendancePeriod">Indicator of whether this section is used for official daily attendance. Alternatively, official daily attendance may be tied to a class period. (optional)</param>
        /// <param name="sectionName">A locally-defined name for the section, generally created to make the section more recognizable in informal contexts and generally distinct from the section identifier. (optional)</param>
        /// <param name="sequenceOfCourse">When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetSectionsPartitionsApiResponse?> GetSectionsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> sectionIdentifier = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sessionName = default, Option<string> locationClassroomIdentificationCode = default, Option<long> locationSchoolId = default, Option<string> availableCreditTypeDescriptor = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> instructionLanguageDescriptor = default, Option<string> mediumOfInstructionDescriptor = default, Option<string> populationServedDescriptor = default, Option<string> sectionTypeDescriptor = default, Option<double> availableCreditConversion = default, Option<double> availableCredits = default, Option<string> id = default, Option<bool> officialAttendancePeriod = default, Option<string> sectionName = default, Option<int> sequenceOfCourse = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSectionsPartitionsAsync(number, minChangeVersion, maxChangeVersion, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, locationClassroomIdentificationCode, locationSchoolId, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, availableCreditConversion, availableCredits, id, officialAttendancePeriod, sectionName, sequenceOfCourse, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="locationClassroomIdentificationCode">A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity. (optional)</param>
        /// <param name="locationSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="availableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a student receives education and related services. (optional)</param>
        /// <param name="instructionLanguageDescriptor">The primary language of instruction. If omitted, English is assumed. (optional)</param>
        /// <param name="mediumOfInstructionDescriptor">The media through which teachers provide instruction to students and students and teachers communicate about instructional matters. (optional)</param>
        /// <param name="populationServedDescriptor">The type of students the section is offered and tailored to. (optional)</param>
        /// <param name="sectionTypeDescriptor">Specifies whether the section is for attendance only, credit only, or both. (optional)</param>
        /// <param name="availableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="availableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="officialAttendancePeriod">Indicator of whether this section is used for official daily attendance. Alternatively, official daily attendance may be tied to a class period. (optional)</param>
        /// <param name="sectionName">A locally-defined name for the section, generally created to make the section more recognizable in informal contexts and generally distinct from the section identifier. (optional)</param>
        /// <param name="sequenceOfCourse">When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSectionsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetSectionsPartitionsApiResponse> GetSectionsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> sectionIdentifier = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sessionName = default, Option<string> locationClassroomIdentificationCode = default, Option<long> locationSchoolId = default, Option<string> availableCreditTypeDescriptor = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> instructionLanguageDescriptor = default, Option<string> mediumOfInstructionDescriptor = default, Option<string> populationServedDescriptor = default, Option<string> sectionTypeDescriptor = default, Option<double> availableCreditConversion = default, Option<double> availableCredits = default, Option<string> id = default, Option<bool> officialAttendancePeriod = default, Option<string> sectionName = default, Option<int> sequenceOfCourse = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSectionsPartitions(sectionIdentifier, localCourseCode, sessionName, locationClassroomIdentificationCode, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, id, sectionName);

                FormatGetSectionsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref sectionIdentifier, ref localCourseCode, ref schoolId, ref schoolYear, ref sessionName, ref locationClassroomIdentificationCode, ref locationSchoolId, ref availableCreditTypeDescriptor, ref educationalEnvironmentDescriptor, ref instructionLanguageDescriptor, ref mediumOfInstructionDescriptor, ref populationServedDescriptor, ref sectionTypeDescriptor, ref availableCreditConversion, ref availableCredits, ref id, ref officialAttendancePeriod, ref sectionName, ref sequenceOfCourse, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/sections/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/sections/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (sectionIdentifier.IsSet)
                        parseQueryStringLocalVar["sectionIdentifier"] = ClientUtils.ParameterToString(sectionIdentifier.Value);

                    if (localCourseCode.IsSet)
                        parseQueryStringLocalVar["localCourseCode"] = ClientUtils.ParameterToString(localCourseCode.Value);

                    if (schoolId.IsSet)
                        parseQueryStringLocalVar["schoolId"] = ClientUtils.ParameterToString(schoolId.Value);

                    if (schoolYear.IsSet)
                        parseQueryStringLocalVar["schoolYear"] = ClientUtils.ParameterToString(schoolYear.Value);

                    if (sessionName.IsSet)
                        parseQueryStringLocalVar["sessionName"] = ClientUtils.ParameterToString(sessionName.Value);

                    if (locationClassroomIdentificationCode.IsSet)
                        parseQueryStringLocalVar["locationClassroomIdentificationCode"] = ClientUtils.ParameterToString(locationClassroomIdentificationCode.Value);

                    if (locationSchoolId.IsSet)
                        parseQueryStringLocalVar["locationSchoolId"] = ClientUtils.ParameterToString(locationSchoolId.Value);

                    if (availableCreditTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["availableCreditTypeDescriptor"] = ClientUtils.ParameterToString(availableCreditTypeDescriptor.Value);

                    if (educationalEnvironmentDescriptor.IsSet)
                        parseQueryStringLocalVar["educationalEnvironmentDescriptor"] = ClientUtils.ParameterToString(educationalEnvironmentDescriptor.Value);

                    if (instructionLanguageDescriptor.IsSet)
                        parseQueryStringLocalVar["instructionLanguageDescriptor"] = ClientUtils.ParameterToString(instructionLanguageDescriptor.Value);

                    if (mediumOfInstructionDescriptor.IsSet)
                        parseQueryStringLocalVar["mediumOfInstructionDescriptor"] = ClientUtils.ParameterToString(mediumOfInstructionDescriptor.Value);

                    if (populationServedDescriptor.IsSet)
                        parseQueryStringLocalVar["populationServedDescriptor"] = ClientUtils.ParameterToString(populationServedDescriptor.Value);

                    if (sectionTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["sectionTypeDescriptor"] = ClientUtils.ParameterToString(sectionTypeDescriptor.Value);

                    if (availableCreditConversion.IsSet)
                        parseQueryStringLocalVar["availableCreditConversion"] = ClientUtils.ParameterToString(availableCreditConversion.Value);

                    if (availableCredits.IsSet)
                        parseQueryStringLocalVar["availableCredits"] = ClientUtils.ParameterToString(availableCredits.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (officialAttendancePeriod.IsSet)
                        parseQueryStringLocalVar["officialAttendancePeriod"] = ClientUtils.ParameterToString(officialAttendancePeriod.Value);

                    if (sectionName.IsSet)
                        parseQueryStringLocalVar["sectionName"] = ClientUtils.ParameterToString(sectionName.Value);

                    if (sequenceOfCourse.IsSet)
                        parseQueryStringLocalVar["sequenceOfCourse"] = ClientUtils.ParameterToString(sequenceOfCourse.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSectionsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSectionsPartitionsApiResponse>();

                        GetSectionsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/sections/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSectionsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, locationClassroomIdentificationCode, locationSchoolId, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, availableCreditConversion, availableCredits, id, officialAttendancePeriod, sectionName, sequenceOfCourse, useSnapshot);

                        Events.ExecuteOnGetSectionsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSectionsPartitionsDefaultImplementation(e, "/ed-fi/sections/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, locationClassroomIdentificationCode, locationSchoolId, availableCreditTypeDescriptor, educationalEnvironmentDescriptor, instructionLanguageDescriptor, mediumOfInstructionDescriptor, populationServedDescriptor, sectionTypeDescriptor, availableCreditConversion, availableCredits, id, officialAttendancePeriod, sectionName, sequenceOfCourse, useSnapshot);
                Events.ExecuteOnErrorGetSectionsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSectionsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetSectionsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetSectionsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSectionsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSectionsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSectionsPartitionsApiResponse(ILogger<GetSectionsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesSections(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesSectionsDefaultImplementation(IKeyChangesSectionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesSections(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesSections(ref bool suppressDefaultLog, IKeyChangesSectionsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesSectionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesSections(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesSections(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesSectionsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesSectionsApiResponse?> KeyChangesSectionsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesSectionsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesSectionsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesSectionsApiResponse> KeyChangesSectionsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesSections(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/sections/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/sections/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesSectionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesSectionsApiResponse>();

                        KeyChangesSectionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/sections/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesSectionsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesSections(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesSectionsDefaultImplementation(e, "/ed-fi/sections/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesSections(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesSectionsApiResponse"/>
        /// </summary>
        public partial class KeyChangesSectionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesSectionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesSectionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesSectionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesSectionsApiResponse(ILogger<KeyChangesSectionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiSectionKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiSectionKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiSectionKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostSection(EdFiSection edFiSection);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiSection"></param>
        /// <returns></returns>
        private void ValidatePostSection(EdFiSection edFiSection)
        {
            if (edFiSection == null)
                throw new ArgumentNullException(nameof(edFiSection));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiSection"></param>
        private void AfterPostSectionDefaultImplementation(IPostSectionApiResponse apiResponseLocalVar, EdFiSection edFiSection)
        {
            bool suppressDefaultLog = false;
            AfterPostSection(ref suppressDefaultLog, apiResponseLocalVar, edFiSection);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiSection"></param>
        partial void AfterPostSection(ref bool suppressDefaultLog, IPostSectionApiResponse apiResponseLocalVar, EdFiSection edFiSection);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiSection"></param>
        private void OnErrorPostSectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiSection edFiSection)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostSection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiSection);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiSection"></param>
        partial void OnErrorPostSection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiSection edFiSection);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiSection">The JSON representation of the \&quot;section\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSectionApiResponse"/>&gt;</returns>
        public async Task<IPostSectionApiResponse?> PostSectionOrDefaultAsync(EdFiSection edFiSection, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostSectionAsync(edFiSection, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiSection">The JSON representation of the \&quot;section\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSectionApiResponse"/>&gt;</returns>
        public async Task<IPostSectionApiResponse> PostSectionAsync(EdFiSection edFiSection, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostSection(edFiSection);

                FormatPostSection(edFiSection);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/sections"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/sections");

                    httpRequestMessageLocalVar.Content = (edFiSection as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiSection, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostSectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostSectionApiResponse>();

                        PostSectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/sections", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostSectionDefaultImplementation(apiResponseLocalVar, edFiSection);

                        Events.ExecuteOnPostSection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostSectionDefaultImplementation(e, "/ed-fi/sections", uriBuilderLocalVar.Path, edFiSection);
                Events.ExecuteOnErrorPostSection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostSectionApiResponse"/>
        /// </summary>
        public partial class PostSectionApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostSectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostSectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostSectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostSectionApiResponse(ILogger<PostSectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutSection(ref string id, EdFiSection edFiSection, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiSection"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutSection(string id, EdFiSection edFiSection, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiSection == null)
                throw new ArgumentNullException(nameof(edFiSection));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiSection"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutSectionDefaultImplementation(IPutSectionApiResponse apiResponseLocalVar, string id, EdFiSection edFiSection, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutSection(ref suppressDefaultLog, apiResponseLocalVar, id, edFiSection, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiSection"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutSection(ref bool suppressDefaultLog, IPutSectionApiResponse apiResponseLocalVar, string id, EdFiSection edFiSection, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiSection"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutSectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiSection edFiSection, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutSection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiSection, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiSection"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutSection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiSection edFiSection, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiSection">The JSON representation of the \&quot;section\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutSectionApiResponse"/>&gt;</returns>
        public async Task<IPutSectionApiResponse?> PutSectionOrDefaultAsync(string id, EdFiSection edFiSection, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutSectionAsync(id, edFiSection, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiSection">The JSON representation of the \&quot;section\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutSectionApiResponse"/>&gt;</returns>
        public async Task<IPutSectionApiResponse> PutSectionAsync(string id, EdFiSection edFiSection, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutSection(id, edFiSection, ifMatch);

                FormatPutSection(ref id, edFiSection, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/sections/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/sections/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiSection as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiSection, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutSectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutSectionApiResponse>();

                        PutSectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/sections/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutSectionDefaultImplementation(apiResponseLocalVar, id, edFiSection, ifMatch);

                        Events.ExecuteOnPutSection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutSectionDefaultImplementation(e, "/ed-fi/sections/{id}", uriBuilderLocalVar.Path, id, edFiSection, ifMatch);
                Events.ExecuteOnErrorPutSection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutSectionApiResponse"/>
        /// </summary>
        public partial class PutSectionApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutSectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutSectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutSectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutSectionApiResponse(ILogger<PutSectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
