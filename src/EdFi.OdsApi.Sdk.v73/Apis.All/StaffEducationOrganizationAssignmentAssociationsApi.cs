// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStaffEducationOrganizationAssignmentAssociationsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StaffEducationOrganizationAssignmentAssociationsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse"/>&gt;</returns>
        Task<IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse> DeleteStaffEducationOrganizationAssignmentAssociationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse?> DeleteStaffEducationOrganizationAssignmentAssociationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>&gt;</returns>
        Task<IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse> DeletesStaffEducationOrganizationAssignmentAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>?&gt;</returns>
        Task<IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse?> DeletesStaffEducationOrganizationAssignmentAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff. (optional)</param>
        /// <param name="beginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="credentialIdentifier">Identifier or serial number assigned to the credential. (optional)</param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued. (optional)</param>
        /// <param name="employmentEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract. (optional)</param>
        /// <param name="employmentHireDate">The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="endDate">Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="orderOfAssignment">Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc. (optional)</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsApiResponse"/>&gt;</returns>
        Task<IGetStaffEducationOrganizationAssignmentAssociationsApiResponse> GetStaffEducationOrganizationAssignmentAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> staffClassificationDescriptor = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<string> staffUniqueId = default, Option<string> credentialIdentifier = default, Option<string> stateOfIssueStateAbbreviationDescriptor = default, Option<long> employmentEducationOrganizationId = default, Option<string> employmentStatusDescriptor = default, Option<DateOnly> employmentHireDate = default, Option<DateOnly> endDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<int> orderOfAssignment = default, Option<string> positionTitle = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff. (optional)</param>
        /// <param name="beginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="credentialIdentifier">Identifier or serial number assigned to the credential. (optional)</param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued. (optional)</param>
        /// <param name="employmentEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract. (optional)</param>
        /// <param name="employmentHireDate">The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="endDate">Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="orderOfAssignment">Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc. (optional)</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsApiResponse"/>?&gt;</returns>
        Task<IGetStaffEducationOrganizationAssignmentAssociationsApiResponse?> GetStaffEducationOrganizationAssignmentAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> staffClassificationDescriptor = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<string> staffUniqueId = default, Option<string> credentialIdentifier = default, Option<string> stateOfIssueStateAbbreviationDescriptor = default, Option<long> employmentEducationOrganizationId = default, Option<string> employmentStatusDescriptor = default, Option<DateOnly> employmentHireDate = default, Option<DateOnly> endDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<int> orderOfAssignment = default, Option<string> positionTitle = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse"/>&gt;</returns>
        Task<IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse> GetStaffEducationOrganizationAssignmentAssociationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse"/>?&gt;</returns>
        Task<IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse?> GetStaffEducationOrganizationAssignmentAssociationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff. (optional)</param>
        /// <param name="beginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="credentialIdentifier">Identifier or serial number assigned to the credential. (optional)</param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued. (optional)</param>
        /// <param name="employmentEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract. (optional)</param>
        /// <param name="employmentHireDate">The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="endDate">Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="orderOfAssignment">Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc. (optional)</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse> GetStaffEducationOrganizationAssignmentAssociationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> staffClassificationDescriptor = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<string> staffUniqueId = default, Option<string> credentialIdentifier = default, Option<string> stateOfIssueStateAbbreviationDescriptor = default, Option<long> employmentEducationOrganizationId = default, Option<string> employmentStatusDescriptor = default, Option<DateOnly> employmentHireDate = default, Option<DateOnly> endDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<int> orderOfAssignment = default, Option<string> positionTitle = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff. (optional)</param>
        /// <param name="beginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="credentialIdentifier">Identifier or serial number assigned to the credential. (optional)</param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued. (optional)</param>
        /// <param name="employmentEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract. (optional)</param>
        /// <param name="employmentHireDate">The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="endDate">Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="orderOfAssignment">Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc. (optional)</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse?> GetStaffEducationOrganizationAssignmentAssociationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> staffClassificationDescriptor = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<string> staffUniqueId = default, Option<string> credentialIdentifier = default, Option<string> stateOfIssueStateAbbreviationDescriptor = default, Option<long> employmentEducationOrganizationId = default, Option<string> employmentStatusDescriptor = default, Option<DateOnly> employmentHireDate = default, Option<DateOnly> endDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<int> orderOfAssignment = default, Option<string> positionTitle = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>&gt;</returns>
        Task<IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse> KeyChangesStaffEducationOrganizationAssignmentAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse?> KeyChangesStaffEducationOrganizationAssignmentAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation">The JSON representation of the \&quot;staffEducationOrganizationAssignmentAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStaffEducationOrganizationAssignmentAssociationApiResponse"/>&gt;</returns>
        Task<IPostStaffEducationOrganizationAssignmentAssociationApiResponse> PostStaffEducationOrganizationAssignmentAssociationAsync(EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation">The JSON representation of the \&quot;staffEducationOrganizationAssignmentAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStaffEducationOrganizationAssignmentAssociationApiResponse"/>?&gt;</returns>
        Task<IPostStaffEducationOrganizationAssignmentAssociationApiResponse?> PostStaffEducationOrganizationAssignmentAssociationOrDefaultAsync(EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation">The JSON representation of the \&quot;staffEducationOrganizationAssignmentAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStaffEducationOrganizationAssignmentAssociationApiResponse"/>&gt;</returns>
        Task<IPutStaffEducationOrganizationAssignmentAssociationApiResponse> PutStaffEducationOrganizationAssignmentAssociationAsync(string id, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation">The JSON representation of the \&quot;staffEducationOrganizationAssignmentAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStaffEducationOrganizationAssignmentAssociationApiResponse"/>?&gt;</returns>
        Task<IPutStaffEducationOrganizationAssignmentAssociationApiResponse?> PutStaffEducationOrganizationAssignmentAssociationOrDefaultAsync(string id, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse"/>
    /// </summary>
    public interface IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>
    /// </summary>
    public interface IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStaffEducationOrganizationAssignmentAssociationsApiResponse"/>
    /// </summary>
    public interface IGetStaffEducationOrganizationAssignmentAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiStaffEducationOrganizationAssignmentAssociation>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse"/>
    /// </summary>
    public interface IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStaffEducationOrganizationAssignmentAssociation?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>
    /// </summary>
    public interface IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostStaffEducationOrganizationAssignmentAssociationApiResponse"/>
    /// </summary>
    public interface IPostStaffEducationOrganizationAssignmentAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutStaffEducationOrganizationAssignmentAssociationApiResponse"/>
    /// </summary>
    public interface IPutStaffEducationOrganizationAssignmentAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StaffEducationOrganizationAssignmentAssociationsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteStaffEducationOrganizationAssignmentAssociationById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteStaffEducationOrganizationAssignmentAssociationById;

        internal void ExecuteOnDeleteStaffEducationOrganizationAssignmentAssociationById(StaffEducationOrganizationAssignmentAssociationsApi.DeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse apiResponse)
        {
            OnDeleteStaffEducationOrganizationAssignmentAssociationById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteStaffEducationOrganizationAssignmentAssociationById(Exception exception)
        {
            OnErrorDeleteStaffEducationOrganizationAssignmentAssociationById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesStaffEducationOrganizationAssignmentAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesStaffEducationOrganizationAssignmentAssociations;

        internal void ExecuteOnDeletesStaffEducationOrganizationAssignmentAssociations(StaffEducationOrganizationAssignmentAssociationsApi.DeletesStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponse)
        {
            OnDeletesStaffEducationOrganizationAssignmentAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesStaffEducationOrganizationAssignmentAssociations(Exception exception)
        {
            OnErrorDeletesStaffEducationOrganizationAssignmentAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStaffEducationOrganizationAssignmentAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStaffEducationOrganizationAssignmentAssociations;

        internal void ExecuteOnGetStaffEducationOrganizationAssignmentAssociations(StaffEducationOrganizationAssignmentAssociationsApi.GetStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponse)
        {
            OnGetStaffEducationOrganizationAssignmentAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStaffEducationOrganizationAssignmentAssociations(Exception exception)
        {
            OnErrorGetStaffEducationOrganizationAssignmentAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStaffEducationOrganizationAssignmentAssociationsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStaffEducationOrganizationAssignmentAssociationsById;

        internal void ExecuteOnGetStaffEducationOrganizationAssignmentAssociationsById(StaffEducationOrganizationAssignmentAssociationsApi.GetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse apiResponse)
        {
            OnGetStaffEducationOrganizationAssignmentAssociationsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStaffEducationOrganizationAssignmentAssociationsById(Exception exception)
        {
            OnErrorGetStaffEducationOrganizationAssignmentAssociationsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStaffEducationOrganizationAssignmentAssociationsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStaffEducationOrganizationAssignmentAssociationsPartitions;

        internal void ExecuteOnGetStaffEducationOrganizationAssignmentAssociationsPartitions(StaffEducationOrganizationAssignmentAssociationsApi.GetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse apiResponse)
        {
            OnGetStaffEducationOrganizationAssignmentAssociationsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStaffEducationOrganizationAssignmentAssociationsPartitions(Exception exception)
        {
            OnErrorGetStaffEducationOrganizationAssignmentAssociationsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesStaffEducationOrganizationAssignmentAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesStaffEducationOrganizationAssignmentAssociations;

        internal void ExecuteOnKeyChangesStaffEducationOrganizationAssignmentAssociations(StaffEducationOrganizationAssignmentAssociationsApi.KeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponse)
        {
            OnKeyChangesStaffEducationOrganizationAssignmentAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesStaffEducationOrganizationAssignmentAssociations(Exception exception)
        {
            OnErrorKeyChangesStaffEducationOrganizationAssignmentAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostStaffEducationOrganizationAssignmentAssociation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostStaffEducationOrganizationAssignmentAssociation;

        internal void ExecuteOnPostStaffEducationOrganizationAssignmentAssociation(StaffEducationOrganizationAssignmentAssociationsApi.PostStaffEducationOrganizationAssignmentAssociationApiResponse apiResponse)
        {
            OnPostStaffEducationOrganizationAssignmentAssociation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostStaffEducationOrganizationAssignmentAssociation(Exception exception)
        {
            OnErrorPostStaffEducationOrganizationAssignmentAssociation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutStaffEducationOrganizationAssignmentAssociation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutStaffEducationOrganizationAssignmentAssociation;

        internal void ExecuteOnPutStaffEducationOrganizationAssignmentAssociation(StaffEducationOrganizationAssignmentAssociationsApi.PutStaffEducationOrganizationAssignmentAssociationApiResponse apiResponse)
        {
            OnPutStaffEducationOrganizationAssignmentAssociation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutStaffEducationOrganizationAssignmentAssociation(Exception exception)
        {
            OnErrorPutStaffEducationOrganizationAssignmentAssociation?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StaffEducationOrganizationAssignmentAssociationsApi : IStaffEducationOrganizationAssignmentAssociationsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StaffEducationOrganizationAssignmentAssociationsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StaffEducationOrganizationAssignmentAssociationsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffEducationOrganizationAssignmentAssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StaffEducationOrganizationAssignmentAssociationsApi(ILogger<StaffEducationOrganizationAssignmentAssociationsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StaffEducationOrganizationAssignmentAssociationsApiEvents staffEducationOrganizationAssignmentAssociationsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StaffEducationOrganizationAssignmentAssociationsApi>();
            HttpClient = httpClient;
            Events = staffEducationOrganizationAssignmentAssociationsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteStaffEducationOrganizationAssignmentAssociationById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteStaffEducationOrganizationAssignmentAssociationById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteStaffEducationOrganizationAssignmentAssociationByIdDefaultImplementation(IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteStaffEducationOrganizationAssignmentAssociationById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteStaffEducationOrganizationAssignmentAssociationById(ref bool suppressDefaultLog, IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteStaffEducationOrganizationAssignmentAssociationByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteStaffEducationOrganizationAssignmentAssociationById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteStaffEducationOrganizationAssignmentAssociationById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse?> DeleteStaffEducationOrganizationAssignmentAssociationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteStaffEducationOrganizationAssignmentAssociationByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse> DeleteStaffEducationOrganizationAssignmentAssociationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteStaffEducationOrganizationAssignmentAssociationById(id, ifMatch);

                FormatDeleteStaffEducationOrganizationAssignmentAssociationById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse>();

                        DeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteStaffEducationOrganizationAssignmentAssociationByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteStaffEducationOrganizationAssignmentAssociationById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteStaffEducationOrganizationAssignmentAssociationByIdDefaultImplementation(e, "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteStaffEducationOrganizationAssignmentAssociationById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse"/>
        /// </summary>
        public partial class DeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse(ILogger<DeleteStaffEducationOrganizationAssignmentAssociationByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesStaffEducationOrganizationAssignmentAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesStaffEducationOrganizationAssignmentAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesStaffEducationOrganizationAssignmentAssociations(ref bool suppressDefaultLog, IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesStaffEducationOrganizationAssignmentAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesStaffEducationOrganizationAssignmentAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse?> DeletesStaffEducationOrganizationAssignmentAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesStaffEducationOrganizationAssignmentAssociationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse> DeletesStaffEducationOrganizationAssignmentAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesStaffEducationOrganizationAssignmentAssociations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffEducationOrganizationAssignmentAssociations/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffEducationOrganizationAssignmentAssociations/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesStaffEducationOrganizationAssignmentAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesStaffEducationOrganizationAssignmentAssociationsApiResponse>();

                        DeletesStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffEducationOrganizationAssignmentAssociations/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesStaffEducationOrganizationAssignmentAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(e, "/ed-fi/staffEducationOrganizationAssignmentAssociations/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesStaffEducationOrganizationAssignmentAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>
        /// </summary>
        public partial class DeletesStaffEducationOrganizationAssignmentAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesStaffEducationOrganizationAssignmentAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesStaffEducationOrganizationAssignmentAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesStaffEducationOrganizationAssignmentAssociationsApiResponse(ILogger<DeletesStaffEducationOrganizationAssignmentAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStaffEducationOrganizationAssignmentAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> staffClassificationDescriptor, ref Option<DateOnly> beginDate, ref Option<long> educationOrganizationId, ref Option<string> staffUniqueId, ref Option<string> credentialIdentifier, ref Option<string> stateOfIssueStateAbbreviationDescriptor, ref Option<long> employmentEducationOrganizationId, ref Option<string> employmentStatusDescriptor, ref Option<DateOnly> employmentHireDate, ref Option<DateOnly> endDate, ref Option<double> fullTimeEquivalency, ref Option<string> id, ref Option<int> orderOfAssignment, ref Option<string> positionTitle, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="staffClassificationDescriptor"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="credentialIdentifier"></param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor"></param>
        /// <param name="employmentStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="positionTitle"></param>
        /// <returns></returns>
        private void ValidateGetStaffEducationOrganizationAssignmentAssociations(Option<string> pageToken, Option<string> staffClassificationDescriptor, Option<string> staffUniqueId, Option<string> credentialIdentifier, Option<string> stateOfIssueStateAbbreviationDescriptor, Option<string> employmentStatusDescriptor, Option<string> id, Option<string> positionTitle)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (staffClassificationDescriptor.IsSet && staffClassificationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(staffClassificationDescriptor));

            if (staffUniqueId.IsSet && staffUniqueId.Value == null)
                throw new ArgumentNullException(nameof(staffUniqueId));

            if (credentialIdentifier.IsSet && credentialIdentifier.Value == null)
                throw new ArgumentNullException(nameof(credentialIdentifier));

            if (stateOfIssueStateAbbreviationDescriptor.IsSet && stateOfIssueStateAbbreviationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(stateOfIssueStateAbbreviationDescriptor));

            if (employmentStatusDescriptor.IsSet && employmentStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(employmentStatusDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (positionTitle.IsSet && positionTitle.Value == null)
                throw new ArgumentNullException(nameof(positionTitle));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="staffClassificationDescriptor"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="credentialIdentifier"></param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor"></param>
        /// <param name="employmentEducationOrganizationId"></param>
        /// <param name="employmentStatusDescriptor"></param>
        /// <param name="employmentHireDate"></param>
        /// <param name="endDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="orderOfAssignment"></param>
        /// <param name="positionTitle"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(IGetStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> staffClassificationDescriptor, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<string> staffUniqueId, Option<string> credentialIdentifier, Option<string> stateOfIssueStateAbbreviationDescriptor, Option<long> employmentEducationOrganizationId, Option<string> employmentStatusDescriptor, Option<DateOnly> employmentHireDate, Option<DateOnly> endDate, Option<double> fullTimeEquivalency, Option<string> id, Option<int> orderOfAssignment, Option<string> positionTitle, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStaffEducationOrganizationAssignmentAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, staffClassificationDescriptor, beginDate, educationOrganizationId, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentEducationOrganizationId, employmentStatusDescriptor, employmentHireDate, endDate, fullTimeEquivalency, id, orderOfAssignment, positionTitle, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="staffClassificationDescriptor"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="credentialIdentifier"></param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor"></param>
        /// <param name="employmentEducationOrganizationId"></param>
        /// <param name="employmentStatusDescriptor"></param>
        /// <param name="employmentHireDate"></param>
        /// <param name="endDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="orderOfAssignment"></param>
        /// <param name="positionTitle"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStaffEducationOrganizationAssignmentAssociations(ref bool suppressDefaultLog, IGetStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> staffClassificationDescriptor, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<string> staffUniqueId, Option<string> credentialIdentifier, Option<string> stateOfIssueStateAbbreviationDescriptor, Option<long> employmentEducationOrganizationId, Option<string> employmentStatusDescriptor, Option<DateOnly> employmentHireDate, Option<DateOnly> endDate, Option<double> fullTimeEquivalency, Option<string> id, Option<int> orderOfAssignment, Option<string> positionTitle, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="staffClassificationDescriptor"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="credentialIdentifier"></param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor"></param>
        /// <param name="employmentEducationOrganizationId"></param>
        /// <param name="employmentStatusDescriptor"></param>
        /// <param name="employmentHireDate"></param>
        /// <param name="endDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="orderOfAssignment"></param>
        /// <param name="positionTitle"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> staffClassificationDescriptor, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<string> staffUniqueId, Option<string> credentialIdentifier, Option<string> stateOfIssueStateAbbreviationDescriptor, Option<long> employmentEducationOrganizationId, Option<string> employmentStatusDescriptor, Option<DateOnly> employmentHireDate, Option<DateOnly> endDate, Option<double> fullTimeEquivalency, Option<string> id, Option<int> orderOfAssignment, Option<string> positionTitle, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStaffEducationOrganizationAssignmentAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, staffClassificationDescriptor, beginDate, educationOrganizationId, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentEducationOrganizationId, employmentStatusDescriptor, employmentHireDate, endDate, fullTimeEquivalency, id, orderOfAssignment, positionTitle, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="staffClassificationDescriptor"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="credentialIdentifier"></param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor"></param>
        /// <param name="employmentEducationOrganizationId"></param>
        /// <param name="employmentStatusDescriptor"></param>
        /// <param name="employmentHireDate"></param>
        /// <param name="endDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="orderOfAssignment"></param>
        /// <param name="positionTitle"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStaffEducationOrganizationAssignmentAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> staffClassificationDescriptor, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<string> staffUniqueId, Option<string> credentialIdentifier, Option<string> stateOfIssueStateAbbreviationDescriptor, Option<long> employmentEducationOrganizationId, Option<string> employmentStatusDescriptor, Option<DateOnly> employmentHireDate, Option<DateOnly> endDate, Option<double> fullTimeEquivalency, Option<string> id, Option<int> orderOfAssignment, Option<string> positionTitle, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff. (optional)</param>
        /// <param name="beginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="credentialIdentifier">Identifier or serial number assigned to the credential. (optional)</param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued. (optional)</param>
        /// <param name="employmentEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract. (optional)</param>
        /// <param name="employmentHireDate">The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="endDate">Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="orderOfAssignment">Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc. (optional)</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsApiResponse"/>&gt;</returns>
        public async Task<IGetStaffEducationOrganizationAssignmentAssociationsApiResponse?> GetStaffEducationOrganizationAssignmentAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> staffClassificationDescriptor = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<string> staffUniqueId = default, Option<string> credentialIdentifier = default, Option<string> stateOfIssueStateAbbreviationDescriptor = default, Option<long> employmentEducationOrganizationId = default, Option<string> employmentStatusDescriptor = default, Option<DateOnly> employmentHireDate = default, Option<DateOnly> endDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<int> orderOfAssignment = default, Option<string> positionTitle = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStaffEducationOrganizationAssignmentAssociationsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, staffClassificationDescriptor, beginDate, educationOrganizationId, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentEducationOrganizationId, employmentStatusDescriptor, employmentHireDate, endDate, fullTimeEquivalency, id, orderOfAssignment, positionTitle, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff. (optional)</param>
        /// <param name="beginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="credentialIdentifier">Identifier or serial number assigned to the credential. (optional)</param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued. (optional)</param>
        /// <param name="employmentEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract. (optional)</param>
        /// <param name="employmentHireDate">The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="endDate">Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="orderOfAssignment">Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc. (optional)</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsApiResponse"/>&gt;</returns>
        public async Task<IGetStaffEducationOrganizationAssignmentAssociationsApiResponse> GetStaffEducationOrganizationAssignmentAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> staffClassificationDescriptor = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<string> staffUniqueId = default, Option<string> credentialIdentifier = default, Option<string> stateOfIssueStateAbbreviationDescriptor = default, Option<long> employmentEducationOrganizationId = default, Option<string> employmentStatusDescriptor = default, Option<DateOnly> employmentHireDate = default, Option<DateOnly> endDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<int> orderOfAssignment = default, Option<string> positionTitle = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStaffEducationOrganizationAssignmentAssociations(pageToken, staffClassificationDescriptor, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentStatusDescriptor, id, positionTitle);

                FormatGetStaffEducationOrganizationAssignmentAssociations(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref staffClassificationDescriptor, ref beginDate, ref educationOrganizationId, ref staffUniqueId, ref credentialIdentifier, ref stateOfIssueStateAbbreviationDescriptor, ref employmentEducationOrganizationId, ref employmentStatusDescriptor, ref employmentHireDate, ref endDate, ref fullTimeEquivalency, ref id, ref orderOfAssignment, ref positionTitle, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffEducationOrganizationAssignmentAssociations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffEducationOrganizationAssignmentAssociations");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (staffClassificationDescriptor.IsSet)
                        parseQueryStringLocalVar["staffClassificationDescriptor"] = ClientUtils.ParameterToString(staffClassificationDescriptor.Value);

                    if (beginDate.IsSet)
                        parseQueryStringLocalVar["beginDate"] = ClientUtils.ParameterToString(beginDate.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (staffUniqueId.IsSet)
                        parseQueryStringLocalVar["staffUniqueId"] = ClientUtils.ParameterToString(staffUniqueId.Value);

                    if (credentialIdentifier.IsSet)
                        parseQueryStringLocalVar["credentialIdentifier"] = ClientUtils.ParameterToString(credentialIdentifier.Value);

                    if (stateOfIssueStateAbbreviationDescriptor.IsSet)
                        parseQueryStringLocalVar["stateOfIssueStateAbbreviationDescriptor"] = ClientUtils.ParameterToString(stateOfIssueStateAbbreviationDescriptor.Value);

                    if (employmentEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["employmentEducationOrganizationId"] = ClientUtils.ParameterToString(employmentEducationOrganizationId.Value);

                    if (employmentStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["employmentStatusDescriptor"] = ClientUtils.ParameterToString(employmentStatusDescriptor.Value);

                    if (employmentHireDate.IsSet)
                        parseQueryStringLocalVar["employmentHireDate"] = ClientUtils.ParameterToString(employmentHireDate.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    if (fullTimeEquivalency.IsSet)
                        parseQueryStringLocalVar["fullTimeEquivalency"] = ClientUtils.ParameterToString(fullTimeEquivalency.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (orderOfAssignment.IsSet)
                        parseQueryStringLocalVar["orderOfAssignment"] = ClientUtils.ParameterToString(orderOfAssignment.Value);

                    if (positionTitle.IsSet)
                        parseQueryStringLocalVar["positionTitle"] = ClientUtils.ParameterToString(positionTitle.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStaffEducationOrganizationAssignmentAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStaffEducationOrganizationAssignmentAssociationsApiResponse>();

                        GetStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffEducationOrganizationAssignmentAssociations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, staffClassificationDescriptor, beginDate, educationOrganizationId, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentEducationOrganizationId, employmentStatusDescriptor, employmentHireDate, endDate, fullTimeEquivalency, id, orderOfAssignment, positionTitle, useSnapshot);

                        Events.ExecuteOnGetStaffEducationOrganizationAssignmentAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(e, "/ed-fi/staffEducationOrganizationAssignmentAssociations", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, staffClassificationDescriptor, beginDate, educationOrganizationId, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentEducationOrganizationId, employmentStatusDescriptor, employmentHireDate, endDate, fullTimeEquivalency, id, orderOfAssignment, positionTitle, useSnapshot);
                Events.ExecuteOnErrorGetStaffEducationOrganizationAssignmentAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStaffEducationOrganizationAssignmentAssociationsApiResponse"/>
        /// </summary>
        public partial class GetStaffEducationOrganizationAssignmentAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStaffEducationOrganizationAssignmentAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStaffEducationOrganizationAssignmentAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStaffEducationOrganizationAssignmentAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStaffEducationOrganizationAssignmentAssociationsApiResponse(ILogger<GetStaffEducationOrganizationAssignmentAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiStaffEducationOrganizationAssignmentAssociation>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiStaffEducationOrganizationAssignmentAssociation>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiStaffEducationOrganizationAssignmentAssociation>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStaffEducationOrganizationAssignmentAssociationsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetStaffEducationOrganizationAssignmentAssociationsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStaffEducationOrganizationAssignmentAssociationsByIdDefaultImplementation(IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStaffEducationOrganizationAssignmentAssociationsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStaffEducationOrganizationAssignmentAssociationsById(ref bool suppressDefaultLog, IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStaffEducationOrganizationAssignmentAssociationsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStaffEducationOrganizationAssignmentAssociationsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStaffEducationOrganizationAssignmentAssociationsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse?> GetStaffEducationOrganizationAssignmentAssociationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStaffEducationOrganizationAssignmentAssociationsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse> GetStaffEducationOrganizationAssignmentAssociationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStaffEducationOrganizationAssignmentAssociationsById(id, ifNoneMatch);

                FormatGetStaffEducationOrganizationAssignmentAssociationsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse>();

                        GetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStaffEducationOrganizationAssignmentAssociationsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetStaffEducationOrganizationAssignmentAssociationsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStaffEducationOrganizationAssignmentAssociationsByIdDefaultImplementation(e, "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetStaffEducationOrganizationAssignmentAssociationsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse"/>
        /// </summary>
        public partial class GetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse(ILogger<GetStaffEducationOrganizationAssignmentAssociationsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiStaffEducationOrganizationAssignmentAssociation? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStaffEducationOrganizationAssignmentAssociation>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiStaffEducationOrganizationAssignmentAssociation? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStaffEducationOrganizationAssignmentAssociationsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> staffClassificationDescriptor, ref Option<DateOnly> beginDate, ref Option<long> educationOrganizationId, ref Option<string> staffUniqueId, ref Option<string> credentialIdentifier, ref Option<string> stateOfIssueStateAbbreviationDescriptor, ref Option<long> employmentEducationOrganizationId, ref Option<string> employmentStatusDescriptor, ref Option<DateOnly> employmentHireDate, ref Option<DateOnly> endDate, ref Option<double> fullTimeEquivalency, ref Option<string> id, ref Option<int> orderOfAssignment, ref Option<string> positionTitle, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="staffClassificationDescriptor"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="credentialIdentifier"></param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor"></param>
        /// <param name="employmentStatusDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="positionTitle"></param>
        /// <returns></returns>
        private void ValidateGetStaffEducationOrganizationAssignmentAssociationsPartitions(Option<string> staffClassificationDescriptor, Option<string> staffUniqueId, Option<string> credentialIdentifier, Option<string> stateOfIssueStateAbbreviationDescriptor, Option<string> employmentStatusDescriptor, Option<string> id, Option<string> positionTitle)
        {
            if (staffClassificationDescriptor.IsSet && staffClassificationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(staffClassificationDescriptor));

            if (staffUniqueId.IsSet && staffUniqueId.Value == null)
                throw new ArgumentNullException(nameof(staffUniqueId));

            if (credentialIdentifier.IsSet && credentialIdentifier.Value == null)
                throw new ArgumentNullException(nameof(credentialIdentifier));

            if (stateOfIssueStateAbbreviationDescriptor.IsSet && stateOfIssueStateAbbreviationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(stateOfIssueStateAbbreviationDescriptor));

            if (employmentStatusDescriptor.IsSet && employmentStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(employmentStatusDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (positionTitle.IsSet && positionTitle.Value == null)
                throw new ArgumentNullException(nameof(positionTitle));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="staffClassificationDescriptor"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="credentialIdentifier"></param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor"></param>
        /// <param name="employmentEducationOrganizationId"></param>
        /// <param name="employmentStatusDescriptor"></param>
        /// <param name="employmentHireDate"></param>
        /// <param name="endDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="orderOfAssignment"></param>
        /// <param name="positionTitle"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStaffEducationOrganizationAssignmentAssociationsPartitionsDefaultImplementation(IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> staffClassificationDescriptor, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<string> staffUniqueId, Option<string> credentialIdentifier, Option<string> stateOfIssueStateAbbreviationDescriptor, Option<long> employmentEducationOrganizationId, Option<string> employmentStatusDescriptor, Option<DateOnly> employmentHireDate, Option<DateOnly> endDate, Option<double> fullTimeEquivalency, Option<string> id, Option<int> orderOfAssignment, Option<string> positionTitle, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStaffEducationOrganizationAssignmentAssociationsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, staffClassificationDescriptor, beginDate, educationOrganizationId, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentEducationOrganizationId, employmentStatusDescriptor, employmentHireDate, endDate, fullTimeEquivalency, id, orderOfAssignment, positionTitle, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="staffClassificationDescriptor"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="credentialIdentifier"></param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor"></param>
        /// <param name="employmentEducationOrganizationId"></param>
        /// <param name="employmentStatusDescriptor"></param>
        /// <param name="employmentHireDate"></param>
        /// <param name="endDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="orderOfAssignment"></param>
        /// <param name="positionTitle"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStaffEducationOrganizationAssignmentAssociationsPartitions(ref bool suppressDefaultLog, IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> staffClassificationDescriptor, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<string> staffUniqueId, Option<string> credentialIdentifier, Option<string> stateOfIssueStateAbbreviationDescriptor, Option<long> employmentEducationOrganizationId, Option<string> employmentStatusDescriptor, Option<DateOnly> employmentHireDate, Option<DateOnly> endDate, Option<double> fullTimeEquivalency, Option<string> id, Option<int> orderOfAssignment, Option<string> positionTitle, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="staffClassificationDescriptor"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="credentialIdentifier"></param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor"></param>
        /// <param name="employmentEducationOrganizationId"></param>
        /// <param name="employmentStatusDescriptor"></param>
        /// <param name="employmentHireDate"></param>
        /// <param name="endDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="orderOfAssignment"></param>
        /// <param name="positionTitle"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStaffEducationOrganizationAssignmentAssociationsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> staffClassificationDescriptor, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<string> staffUniqueId, Option<string> credentialIdentifier, Option<string> stateOfIssueStateAbbreviationDescriptor, Option<long> employmentEducationOrganizationId, Option<string> employmentStatusDescriptor, Option<DateOnly> employmentHireDate, Option<DateOnly> endDate, Option<double> fullTimeEquivalency, Option<string> id, Option<int> orderOfAssignment, Option<string> positionTitle, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStaffEducationOrganizationAssignmentAssociationsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, staffClassificationDescriptor, beginDate, educationOrganizationId, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentEducationOrganizationId, employmentStatusDescriptor, employmentHireDate, endDate, fullTimeEquivalency, id, orderOfAssignment, positionTitle, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="staffClassificationDescriptor"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="credentialIdentifier"></param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor"></param>
        /// <param name="employmentEducationOrganizationId"></param>
        /// <param name="employmentStatusDescriptor"></param>
        /// <param name="employmentHireDate"></param>
        /// <param name="endDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="orderOfAssignment"></param>
        /// <param name="positionTitle"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStaffEducationOrganizationAssignmentAssociationsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> staffClassificationDescriptor, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<string> staffUniqueId, Option<string> credentialIdentifier, Option<string> stateOfIssueStateAbbreviationDescriptor, Option<long> employmentEducationOrganizationId, Option<string> employmentStatusDescriptor, Option<DateOnly> employmentHireDate, Option<DateOnly> endDate, Option<double> fullTimeEquivalency, Option<string> id, Option<int> orderOfAssignment, Option<string> positionTitle, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff. (optional)</param>
        /// <param name="beginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="credentialIdentifier">Identifier or serial number assigned to the credential. (optional)</param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued. (optional)</param>
        /// <param name="employmentEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract. (optional)</param>
        /// <param name="employmentHireDate">The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="endDate">Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="orderOfAssignment">Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc. (optional)</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse?> GetStaffEducationOrganizationAssignmentAssociationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> staffClassificationDescriptor = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<string> staffUniqueId = default, Option<string> credentialIdentifier = default, Option<string> stateOfIssueStateAbbreviationDescriptor = default, Option<long> employmentEducationOrganizationId = default, Option<string> employmentStatusDescriptor = default, Option<DateOnly> employmentHireDate = default, Option<DateOnly> endDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<int> orderOfAssignment = default, Option<string> positionTitle = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStaffEducationOrganizationAssignmentAssociationsPartitionsAsync(number, minChangeVersion, maxChangeVersion, staffClassificationDescriptor, beginDate, educationOrganizationId, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentEducationOrganizationId, employmentStatusDescriptor, employmentHireDate, endDate, fullTimeEquivalency, id, orderOfAssignment, positionTitle, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff. (optional)</param>
        /// <param name="beginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="credentialIdentifier">Identifier or serial number assigned to the credential. (optional)</param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued. (optional)</param>
        /// <param name="employmentEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract. (optional)</param>
        /// <param name="employmentHireDate">The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="endDate">Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="orderOfAssignment">Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc. (optional)</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse> GetStaffEducationOrganizationAssignmentAssociationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> staffClassificationDescriptor = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<string> staffUniqueId = default, Option<string> credentialIdentifier = default, Option<string> stateOfIssueStateAbbreviationDescriptor = default, Option<long> employmentEducationOrganizationId = default, Option<string> employmentStatusDescriptor = default, Option<DateOnly> employmentHireDate = default, Option<DateOnly> endDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<int> orderOfAssignment = default, Option<string> positionTitle = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStaffEducationOrganizationAssignmentAssociationsPartitions(staffClassificationDescriptor, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentStatusDescriptor, id, positionTitle);

                FormatGetStaffEducationOrganizationAssignmentAssociationsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref staffClassificationDescriptor, ref beginDate, ref educationOrganizationId, ref staffUniqueId, ref credentialIdentifier, ref stateOfIssueStateAbbreviationDescriptor, ref employmentEducationOrganizationId, ref employmentStatusDescriptor, ref employmentHireDate, ref endDate, ref fullTimeEquivalency, ref id, ref orderOfAssignment, ref positionTitle, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffEducationOrganizationAssignmentAssociations/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffEducationOrganizationAssignmentAssociations/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (staffClassificationDescriptor.IsSet)
                        parseQueryStringLocalVar["staffClassificationDescriptor"] = ClientUtils.ParameterToString(staffClassificationDescriptor.Value);

                    if (beginDate.IsSet)
                        parseQueryStringLocalVar["beginDate"] = ClientUtils.ParameterToString(beginDate.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (staffUniqueId.IsSet)
                        parseQueryStringLocalVar["staffUniqueId"] = ClientUtils.ParameterToString(staffUniqueId.Value);

                    if (credentialIdentifier.IsSet)
                        parseQueryStringLocalVar["credentialIdentifier"] = ClientUtils.ParameterToString(credentialIdentifier.Value);

                    if (stateOfIssueStateAbbreviationDescriptor.IsSet)
                        parseQueryStringLocalVar["stateOfIssueStateAbbreviationDescriptor"] = ClientUtils.ParameterToString(stateOfIssueStateAbbreviationDescriptor.Value);

                    if (employmentEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["employmentEducationOrganizationId"] = ClientUtils.ParameterToString(employmentEducationOrganizationId.Value);

                    if (employmentStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["employmentStatusDescriptor"] = ClientUtils.ParameterToString(employmentStatusDescriptor.Value);

                    if (employmentHireDate.IsSet)
                        parseQueryStringLocalVar["employmentHireDate"] = ClientUtils.ParameterToString(employmentHireDate.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    if (fullTimeEquivalency.IsSet)
                        parseQueryStringLocalVar["fullTimeEquivalency"] = ClientUtils.ParameterToString(fullTimeEquivalency.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (orderOfAssignment.IsSet)
                        parseQueryStringLocalVar["orderOfAssignment"] = ClientUtils.ParameterToString(orderOfAssignment.Value);

                    if (positionTitle.IsSet)
                        parseQueryStringLocalVar["positionTitle"] = ClientUtils.ParameterToString(positionTitle.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse>();

                        GetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffEducationOrganizationAssignmentAssociations/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStaffEducationOrganizationAssignmentAssociationsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, staffClassificationDescriptor, beginDate, educationOrganizationId, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentEducationOrganizationId, employmentStatusDescriptor, employmentHireDate, endDate, fullTimeEquivalency, id, orderOfAssignment, positionTitle, useSnapshot);

                        Events.ExecuteOnGetStaffEducationOrganizationAssignmentAssociationsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStaffEducationOrganizationAssignmentAssociationsPartitionsDefaultImplementation(e, "/ed-fi/staffEducationOrganizationAssignmentAssociations/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, staffClassificationDescriptor, beginDate, educationOrganizationId, staffUniqueId, credentialIdentifier, stateOfIssueStateAbbreviationDescriptor, employmentEducationOrganizationId, employmentStatusDescriptor, employmentHireDate, endDate, fullTimeEquivalency, id, orderOfAssignment, positionTitle, useSnapshot);
                Events.ExecuteOnErrorGetStaffEducationOrganizationAssignmentAssociationsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse(ILogger<GetStaffEducationOrganizationAssignmentAssociationsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesStaffEducationOrganizationAssignmentAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesStaffEducationOrganizationAssignmentAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesStaffEducationOrganizationAssignmentAssociations(ref bool suppressDefaultLog, IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesStaffEducationOrganizationAssignmentAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesStaffEducationOrganizationAssignmentAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse?> KeyChangesStaffEducationOrganizationAssignmentAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesStaffEducationOrganizationAssignmentAssociationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse> KeyChangesStaffEducationOrganizationAssignmentAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesStaffEducationOrganizationAssignmentAssociations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffEducationOrganizationAssignmentAssociations/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffEducationOrganizationAssignmentAssociations/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse>();

                        KeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffEducationOrganizationAssignmentAssociations/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesStaffEducationOrganizationAssignmentAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesStaffEducationOrganizationAssignmentAssociationsDefaultImplementation(e, "/ed-fi/staffEducationOrganizationAssignmentAssociations/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesStaffEducationOrganizationAssignmentAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>
        /// </summary>
        public partial class KeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse(ILogger<KeyChangesStaffEducationOrganizationAssignmentAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostStaffEducationOrganizationAssignmentAssociation(EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        /// <returns></returns>
        private void ValidatePostStaffEducationOrganizationAssignmentAssociation(EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation)
        {
            if (edFiStaffEducationOrganizationAssignmentAssociation == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationAssignmentAssociation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        private void AfterPostStaffEducationOrganizationAssignmentAssociationDefaultImplementation(IPostStaffEducationOrganizationAssignmentAssociationApiResponse apiResponseLocalVar, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation)
        {
            bool suppressDefaultLog = false;
            AfterPostStaffEducationOrganizationAssignmentAssociation(ref suppressDefaultLog, apiResponseLocalVar, edFiStaffEducationOrganizationAssignmentAssociation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        partial void AfterPostStaffEducationOrganizationAssignmentAssociation(ref bool suppressDefaultLog, IPostStaffEducationOrganizationAssignmentAssociationApiResponse apiResponseLocalVar, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        private void OnErrorPostStaffEducationOrganizationAssignmentAssociationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostStaffEducationOrganizationAssignmentAssociation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiStaffEducationOrganizationAssignmentAssociation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        partial void OnErrorPostStaffEducationOrganizationAssignmentAssociation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation">The JSON representation of the \&quot;staffEducationOrganizationAssignmentAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStaffEducationOrganizationAssignmentAssociationApiResponse"/>&gt;</returns>
        public async Task<IPostStaffEducationOrganizationAssignmentAssociationApiResponse?> PostStaffEducationOrganizationAssignmentAssociationOrDefaultAsync(EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostStaffEducationOrganizationAssignmentAssociationAsync(edFiStaffEducationOrganizationAssignmentAssociation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation">The JSON representation of the \&quot;staffEducationOrganizationAssignmentAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStaffEducationOrganizationAssignmentAssociationApiResponse"/>&gt;</returns>
        public async Task<IPostStaffEducationOrganizationAssignmentAssociationApiResponse> PostStaffEducationOrganizationAssignmentAssociationAsync(EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostStaffEducationOrganizationAssignmentAssociation(edFiStaffEducationOrganizationAssignmentAssociation);

                FormatPostStaffEducationOrganizationAssignmentAssociation(edFiStaffEducationOrganizationAssignmentAssociation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffEducationOrganizationAssignmentAssociations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffEducationOrganizationAssignmentAssociations");

                    httpRequestMessageLocalVar.Content = (edFiStaffEducationOrganizationAssignmentAssociation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStaffEducationOrganizationAssignmentAssociation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostStaffEducationOrganizationAssignmentAssociationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostStaffEducationOrganizationAssignmentAssociationApiResponse>();

                        PostStaffEducationOrganizationAssignmentAssociationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffEducationOrganizationAssignmentAssociations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostStaffEducationOrganizationAssignmentAssociationDefaultImplementation(apiResponseLocalVar, edFiStaffEducationOrganizationAssignmentAssociation);

                        Events.ExecuteOnPostStaffEducationOrganizationAssignmentAssociation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostStaffEducationOrganizationAssignmentAssociationDefaultImplementation(e, "/ed-fi/staffEducationOrganizationAssignmentAssociations", uriBuilderLocalVar.Path, edFiStaffEducationOrganizationAssignmentAssociation);
                Events.ExecuteOnErrorPostStaffEducationOrganizationAssignmentAssociation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostStaffEducationOrganizationAssignmentAssociationApiResponse"/>
        /// </summary>
        public partial class PostStaffEducationOrganizationAssignmentAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostStaffEducationOrganizationAssignmentAssociationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostStaffEducationOrganizationAssignmentAssociationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostStaffEducationOrganizationAssignmentAssociationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostStaffEducationOrganizationAssignmentAssociationApiResponse(ILogger<PostStaffEducationOrganizationAssignmentAssociationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutStaffEducationOrganizationAssignmentAssociation(ref string id, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutStaffEducationOrganizationAssignmentAssociation(string id, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiStaffEducationOrganizationAssignmentAssociation == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationAssignmentAssociation));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutStaffEducationOrganizationAssignmentAssociationDefaultImplementation(IPutStaffEducationOrganizationAssignmentAssociationApiResponse apiResponseLocalVar, string id, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutStaffEducationOrganizationAssignmentAssociation(ref suppressDefaultLog, apiResponseLocalVar, id, edFiStaffEducationOrganizationAssignmentAssociation, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutStaffEducationOrganizationAssignmentAssociation(ref bool suppressDefaultLog, IPutStaffEducationOrganizationAssignmentAssociationApiResponse apiResponseLocalVar, string id, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutStaffEducationOrganizationAssignmentAssociationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutStaffEducationOrganizationAssignmentAssociation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiStaffEducationOrganizationAssignmentAssociation, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutStaffEducationOrganizationAssignmentAssociation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation">The JSON representation of the \&quot;staffEducationOrganizationAssignmentAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStaffEducationOrganizationAssignmentAssociationApiResponse"/>&gt;</returns>
        public async Task<IPutStaffEducationOrganizationAssignmentAssociationApiResponse?> PutStaffEducationOrganizationAssignmentAssociationOrDefaultAsync(string id, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutStaffEducationOrganizationAssignmentAssociationAsync(id, edFiStaffEducationOrganizationAssignmentAssociation, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation">The JSON representation of the \&quot;staffEducationOrganizationAssignmentAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStaffEducationOrganizationAssignmentAssociationApiResponse"/>&gt;</returns>
        public async Task<IPutStaffEducationOrganizationAssignmentAssociationApiResponse> PutStaffEducationOrganizationAssignmentAssociationAsync(string id, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutStaffEducationOrganizationAssignmentAssociation(id, edFiStaffEducationOrganizationAssignmentAssociation, ifMatch);

                FormatPutStaffEducationOrganizationAssignmentAssociation(ref id, edFiStaffEducationOrganizationAssignmentAssociation, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiStaffEducationOrganizationAssignmentAssociation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStaffEducationOrganizationAssignmentAssociation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutStaffEducationOrganizationAssignmentAssociationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutStaffEducationOrganizationAssignmentAssociationApiResponse>();

                        PutStaffEducationOrganizationAssignmentAssociationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutStaffEducationOrganizationAssignmentAssociationDefaultImplementation(apiResponseLocalVar, id, edFiStaffEducationOrganizationAssignmentAssociation, ifMatch);

                        Events.ExecuteOnPutStaffEducationOrganizationAssignmentAssociation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutStaffEducationOrganizationAssignmentAssociationDefaultImplementation(e, "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}", uriBuilderLocalVar.Path, id, edFiStaffEducationOrganizationAssignmentAssociation, ifMatch);
                Events.ExecuteOnErrorPutStaffEducationOrganizationAssignmentAssociation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutStaffEducationOrganizationAssignmentAssociationApiResponse"/>
        /// </summary>
        public partial class PutStaffEducationOrganizationAssignmentAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutStaffEducationOrganizationAssignmentAssociationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutStaffEducationOrganizationAssignmentAssociationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutStaffEducationOrganizationAssignmentAssociationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutStaffEducationOrganizationAssignmentAssociationApiResponse(ILogger<PutStaffEducationOrganizationAssignmentAssociationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
