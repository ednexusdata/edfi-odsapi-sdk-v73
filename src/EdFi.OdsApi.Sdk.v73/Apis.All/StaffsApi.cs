// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStaffsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StaffsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStaffByIdApiResponse"/>&gt;</returns>
        Task<IDeleteStaffByIdApiResponse> DeleteStaffByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStaffByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteStaffByIdApiResponse?> DeleteStaffByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStaffsApiResponse"/>&gt;</returns>
        Task<IDeletesStaffsApiResponse> DeletesStaffsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStaffsApiResponse"/>?&gt;</returns>
        Task<IDeletesStaffsApiResponse?> DeletesStaffsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)</param>
        /// <param name="sexDescriptor">The birth sex of the staff member. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="genderIdentity">The gender the staff member identifies themselves as. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="staffIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the staff Identification Code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsApiResponse"/>&gt;</returns>
        Task<IGetStaffsApiResponse> GetStaffsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> staffUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> highestCompletedLevelOfEducationDescriptor = default, Option<string> sexDescriptor = default, Option<DateOnly> birthDate = default, Option<string> firstName = default, Option<string> genderIdentity = default, Option<string> generationCodeSuffix = default, Option<bool> highlyQualifiedTeacher = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> loginId = default, Option<string> maidenName = default, Option<string> middleName = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<double> yearsOfPriorProfessionalExperience = default, Option<double> yearsOfPriorTeachingExperience = default, Option<bool> useSnapshot = default, Option<string> staffIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)</param>
        /// <param name="sexDescriptor">The birth sex of the staff member. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="genderIdentity">The gender the staff member identifies themselves as. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="staffIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the staff Identification Code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsApiResponse"/>?&gt;</returns>
        Task<IGetStaffsApiResponse?> GetStaffsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> staffUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> highestCompletedLevelOfEducationDescriptor = default, Option<string> sexDescriptor = default, Option<DateOnly> birthDate = default, Option<string> firstName = default, Option<string> genderIdentity = default, Option<string> generationCodeSuffix = default, Option<bool> highlyQualifiedTeacher = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> loginId = default, Option<string> maidenName = default, Option<string> middleName = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<double> yearsOfPriorProfessionalExperience = default, Option<double> yearsOfPriorTeachingExperience = default, Option<bool> useSnapshot = default, Option<string> staffIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsByIdApiResponse"/>&gt;</returns>
        Task<IGetStaffsByIdApiResponse> GetStaffsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsByIdApiResponse"/>?&gt;</returns>
        Task<IGetStaffsByIdApiResponse?> GetStaffsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)</param>
        /// <param name="sexDescriptor">The birth sex of the staff member. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="genderIdentity">The gender the staff member identifies themselves as. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="staffIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the staff Identification Code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetStaffsPartitionsApiResponse> GetStaffsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> staffUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> highestCompletedLevelOfEducationDescriptor = default, Option<string> sexDescriptor = default, Option<DateOnly> birthDate = default, Option<string> firstName = default, Option<string> genderIdentity = default, Option<string> generationCodeSuffix = default, Option<bool> highlyQualifiedTeacher = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> loginId = default, Option<string> maidenName = default, Option<string> middleName = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<double> yearsOfPriorProfessionalExperience = default, Option<double> yearsOfPriorTeachingExperience = default, Option<bool> useSnapshot = default, Option<string> staffIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)</param>
        /// <param name="sexDescriptor">The birth sex of the staff member. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="genderIdentity">The gender the staff member identifies themselves as. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="staffIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the staff Identification Code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetStaffsPartitionsApiResponse?> GetStaffsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> staffUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> highestCompletedLevelOfEducationDescriptor = default, Option<string> sexDescriptor = default, Option<DateOnly> birthDate = default, Option<string> firstName = default, Option<string> genderIdentity = default, Option<string> generationCodeSuffix = default, Option<bool> highlyQualifiedTeacher = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> loginId = default, Option<string> maidenName = default, Option<string> middleName = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<double> yearsOfPriorProfessionalExperience = default, Option<double> yearsOfPriorTeachingExperience = default, Option<bool> useSnapshot = default, Option<string> staffIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStaffsApiResponse"/>&gt;</returns>
        Task<IKeyChangesStaffsApiResponse> KeyChangesStaffsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStaffsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesStaffsApiResponse?> KeyChangesStaffsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStaff">The JSON representation of the \&quot;staff\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStaffApiResponse"/>&gt;</returns>
        Task<IPostStaffApiResponse> PostStaffAsync(EdFiStaff edFiStaff, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiStaff">The JSON representation of the \&quot;staff\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStaffApiResponse"/>?&gt;</returns>
        Task<IPostStaffApiResponse?> PostStaffOrDefaultAsync(EdFiStaff edFiStaff, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStaff">The JSON representation of the \&quot;staff\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStaffApiResponse"/>&gt;</returns>
        Task<IPutStaffApiResponse> PutStaffAsync(string id, EdFiStaff edFiStaff, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStaff">The JSON representation of the \&quot;staff\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStaffApiResponse"/>?&gt;</returns>
        Task<IPutStaffApiResponse?> PutStaffOrDefaultAsync(string id, EdFiStaff edFiStaff, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteStaffByIdApiResponse"/>
    /// </summary>
    public interface IDeleteStaffByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesStaffsApiResponse"/>
    /// </summary>
    public interface IDeletesStaffsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStaffDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStaffsApiResponse"/>
    /// </summary>
    public interface IGetStaffsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiStaff>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStaffsByIdApiResponse"/>
    /// </summary>
    public interface IGetStaffsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStaff?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStaffsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetStaffsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesStaffsApiResponse"/>
    /// </summary>
    public interface IKeyChangesStaffsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStaffKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostStaffApiResponse"/>
    /// </summary>
    public interface IPostStaffApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutStaffApiResponse"/>
    /// </summary>
    public interface IPutStaffApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StaffsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteStaffById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteStaffById;

        internal void ExecuteOnDeleteStaffById(StaffsApi.DeleteStaffByIdApiResponse apiResponse)
        {
            OnDeleteStaffById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteStaffById(Exception exception)
        {
            OnErrorDeleteStaffById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesStaffs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesStaffs;

        internal void ExecuteOnDeletesStaffs(StaffsApi.DeletesStaffsApiResponse apiResponse)
        {
            OnDeletesStaffs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesStaffs(Exception exception)
        {
            OnErrorDeletesStaffs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStaffs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStaffs;

        internal void ExecuteOnGetStaffs(StaffsApi.GetStaffsApiResponse apiResponse)
        {
            OnGetStaffs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStaffs(Exception exception)
        {
            OnErrorGetStaffs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStaffsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStaffsById;

        internal void ExecuteOnGetStaffsById(StaffsApi.GetStaffsByIdApiResponse apiResponse)
        {
            OnGetStaffsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStaffsById(Exception exception)
        {
            OnErrorGetStaffsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStaffsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStaffsPartitions;

        internal void ExecuteOnGetStaffsPartitions(StaffsApi.GetStaffsPartitionsApiResponse apiResponse)
        {
            OnGetStaffsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStaffsPartitions(Exception exception)
        {
            OnErrorGetStaffsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesStaffs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesStaffs;

        internal void ExecuteOnKeyChangesStaffs(StaffsApi.KeyChangesStaffsApiResponse apiResponse)
        {
            OnKeyChangesStaffs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesStaffs(Exception exception)
        {
            OnErrorKeyChangesStaffs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostStaff;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostStaff;

        internal void ExecuteOnPostStaff(StaffsApi.PostStaffApiResponse apiResponse)
        {
            OnPostStaff?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostStaff(Exception exception)
        {
            OnErrorPostStaff?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutStaff;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutStaff;

        internal void ExecuteOnPutStaff(StaffsApi.PutStaffApiResponse apiResponse)
        {
            OnPutStaff?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutStaff(Exception exception)
        {
            OnErrorPutStaff?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StaffsApi : IStaffsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StaffsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StaffsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StaffsApi(ILogger<StaffsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StaffsApiEvents staffsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StaffsApi>();
            HttpClient = httpClient;
            Events = staffsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteStaffById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteStaffById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteStaffByIdDefaultImplementation(IDeleteStaffByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteStaffById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteStaffById(ref bool suppressDefaultLog, IDeleteStaffByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteStaffByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteStaffById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteStaffById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStaffByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStaffByIdApiResponse?> DeleteStaffByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteStaffByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStaffByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStaffByIdApiResponse> DeleteStaffByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteStaffById(id, ifMatch);

                FormatDeleteStaffById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffs/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffs/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteStaffByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteStaffByIdApiResponse>();

                        DeleteStaffByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffs/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteStaffByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteStaffById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteStaffByIdDefaultImplementation(e, "/ed-fi/staffs/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteStaffById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteStaffByIdApiResponse"/>
        /// </summary>
        public partial class DeleteStaffByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteStaffByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteStaffByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteStaffByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteStaffByIdApiResponse(ILogger<DeleteStaffByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesStaffs(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesStaffsDefaultImplementation(IDeletesStaffsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesStaffs(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesStaffs(ref bool suppressDefaultLog, IDeletesStaffsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesStaffsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesStaffs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesStaffs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStaffsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStaffsApiResponse?> DeletesStaffsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesStaffsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStaffsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStaffsApiResponse> DeletesStaffsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesStaffs(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffs/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffs/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesStaffsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesStaffsApiResponse>();

                        DeletesStaffsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffs/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesStaffsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesStaffs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesStaffsDefaultImplementation(e, "/ed-fi/staffs/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesStaffs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesStaffsApiResponse"/>
        /// </summary>
        public partial class DeletesStaffsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesStaffsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesStaffsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesStaffsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesStaffsApiResponse(ILogger<DeletesStaffsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStaffDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStaffDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStaffDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStaffs(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> staffUniqueId, ref Option<string> personId, ref Option<string> sourceSystemDescriptor, ref Option<string> citizenshipStatusDescriptor, ref Option<string> highestCompletedLevelOfEducationDescriptor, ref Option<string> sexDescriptor, ref Option<DateOnly> birthDate, ref Option<string> firstName, ref Option<string> genderIdentity, ref Option<string> generationCodeSuffix, ref Option<bool> highlyQualifiedTeacher, ref Option<bool> hispanicLatinoEthnicity, ref Option<string> id, ref Option<string> lastSurname, ref Option<string> loginId, ref Option<string> maidenName, ref Option<string> middleName, ref Option<string> personalTitlePrefix, ref Option<string> preferredFirstName, ref Option<string> preferredLastSurname, ref Option<double> yearsOfPriorProfessionalExperience, ref Option<double> yearsOfPriorTeachingExperience, ref Option<bool> useSnapshot, ref Option<string> staffIdentificationSystemDescriptor, ref Option<string> assigningOrganizationIdentificationCode, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="highestCompletedLevelOfEducationDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="firstName"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="loginId"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="staffIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetStaffs(Option<string> pageToken, Option<string> staffUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> highestCompletedLevelOfEducationDescriptor, Option<string> sexDescriptor, Option<string> firstName, Option<string> genderIdentity, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> loginId, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<string> staffIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (staffUniqueId.IsSet && staffUniqueId.Value == null)
                throw new ArgumentNullException(nameof(staffUniqueId));

            if (personId.IsSet && personId.Value == null)
                throw new ArgumentNullException(nameof(personId));

            if (sourceSystemDescriptor.IsSet && sourceSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(sourceSystemDescriptor));

            if (citizenshipStatusDescriptor.IsSet && citizenshipStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(citizenshipStatusDescriptor));

            if (highestCompletedLevelOfEducationDescriptor.IsSet && highestCompletedLevelOfEducationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(highestCompletedLevelOfEducationDescriptor));

            if (sexDescriptor.IsSet && sexDescriptor.Value == null)
                throw new ArgumentNullException(nameof(sexDescriptor));

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName));

            if (genderIdentity.IsSet && genderIdentity.Value == null)
                throw new ArgumentNullException(nameof(genderIdentity));

            if (generationCodeSuffix.IsSet && generationCodeSuffix.Value == null)
                throw new ArgumentNullException(nameof(generationCodeSuffix));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (lastSurname.IsSet && lastSurname.Value == null)
                throw new ArgumentNullException(nameof(lastSurname));

            if (loginId.IsSet && loginId.Value == null)
                throw new ArgumentNullException(nameof(loginId));

            if (maidenName.IsSet && maidenName.Value == null)
                throw new ArgumentNullException(nameof(maidenName));

            if (middleName.IsSet && middleName.Value == null)
                throw new ArgumentNullException(nameof(middleName));

            if (personalTitlePrefix.IsSet && personalTitlePrefix.Value == null)
                throw new ArgumentNullException(nameof(personalTitlePrefix));

            if (preferredFirstName.IsSet && preferredFirstName.Value == null)
                throw new ArgumentNullException(nameof(preferredFirstName));

            if (preferredLastSurname.IsSet && preferredLastSurname.Value == null)
                throw new ArgumentNullException(nameof(preferredLastSurname));

            if (staffIdentificationSystemDescriptor.IsSet && staffIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(staffIdentificationSystemDescriptor));

            if (assigningOrganizationIdentificationCode.IsSet && assigningOrganizationIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="highestCompletedLevelOfEducationDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="birthDate"></param>
        /// <param name="firstName"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="highlyQualifiedTeacher"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="loginId"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="yearsOfPriorProfessionalExperience"></param>
        /// <param name="yearsOfPriorTeachingExperience"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="staffIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetStaffsDefaultImplementation(IGetStaffsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> staffUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> highestCompletedLevelOfEducationDescriptor, Option<string> sexDescriptor, Option<DateOnly> birthDate, Option<string> firstName, Option<string> genderIdentity, Option<string> generationCodeSuffix, Option<bool> highlyQualifiedTeacher, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<string> lastSurname, Option<string> loginId, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<double> yearsOfPriorProfessionalExperience, Option<double> yearsOfPriorTeachingExperience, Option<bool> useSnapshot, Option<string> staffIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetStaffs(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, firstName, genderIdentity, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, useSnapshot, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="highestCompletedLevelOfEducationDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="birthDate"></param>
        /// <param name="firstName"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="highlyQualifiedTeacher"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="loginId"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="yearsOfPriorProfessionalExperience"></param>
        /// <param name="yearsOfPriorTeachingExperience"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="staffIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetStaffs(ref bool suppressDefaultLog, IGetStaffsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> staffUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> highestCompletedLevelOfEducationDescriptor, Option<string> sexDescriptor, Option<DateOnly> birthDate, Option<string> firstName, Option<string> genderIdentity, Option<string> generationCodeSuffix, Option<bool> highlyQualifiedTeacher, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<string> lastSurname, Option<string> loginId, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<double> yearsOfPriorProfessionalExperience, Option<double> yearsOfPriorTeachingExperience, Option<bool> useSnapshot, Option<string> staffIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="highestCompletedLevelOfEducationDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="birthDate"></param>
        /// <param name="firstName"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="highlyQualifiedTeacher"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="loginId"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="yearsOfPriorProfessionalExperience"></param>
        /// <param name="yearsOfPriorTeachingExperience"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="staffIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetStaffsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> staffUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> highestCompletedLevelOfEducationDescriptor, Option<string> sexDescriptor, Option<DateOnly> birthDate, Option<string> firstName, Option<string> genderIdentity, Option<string> generationCodeSuffix, Option<bool> highlyQualifiedTeacher, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<string> lastSurname, Option<string> loginId, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<double> yearsOfPriorProfessionalExperience, Option<double> yearsOfPriorTeachingExperience, Option<bool> useSnapshot, Option<string> staffIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStaffs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, firstName, genderIdentity, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, useSnapshot, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="highestCompletedLevelOfEducationDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="birthDate"></param>
        /// <param name="firstName"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="highlyQualifiedTeacher"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="loginId"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="yearsOfPriorProfessionalExperience"></param>
        /// <param name="yearsOfPriorTeachingExperience"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="staffIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetStaffs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> staffUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> highestCompletedLevelOfEducationDescriptor, Option<string> sexDescriptor, Option<DateOnly> birthDate, Option<string> firstName, Option<string> genderIdentity, Option<string> generationCodeSuffix, Option<bool> highlyQualifiedTeacher, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<string> lastSurname, Option<string> loginId, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<double> yearsOfPriorProfessionalExperience, Option<double> yearsOfPriorTeachingExperience, Option<bool> useSnapshot, Option<string> staffIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)</param>
        /// <param name="sexDescriptor">The birth sex of the staff member. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="genderIdentity">The gender the staff member identifies themselves as. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="staffIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the staff Identification Code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsApiResponse"/>&gt;</returns>
        public async Task<IGetStaffsApiResponse?> GetStaffsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> staffUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> highestCompletedLevelOfEducationDescriptor = default, Option<string> sexDescriptor = default, Option<DateOnly> birthDate = default, Option<string> firstName = default, Option<string> genderIdentity = default, Option<string> generationCodeSuffix = default, Option<bool> highlyQualifiedTeacher = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> loginId = default, Option<string> maidenName = default, Option<string> middleName = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<double> yearsOfPriorProfessionalExperience = default, Option<double> yearsOfPriorTeachingExperience = default, Option<bool> useSnapshot = default, Option<string> staffIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStaffsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, firstName, genderIdentity, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, useSnapshot, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)</param>
        /// <param name="sexDescriptor">The birth sex of the staff member. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="genderIdentity">The gender the staff member identifies themselves as. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="staffIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the staff Identification Code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsApiResponse"/>&gt;</returns>
        public async Task<IGetStaffsApiResponse> GetStaffsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> staffUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> highestCompletedLevelOfEducationDescriptor = default, Option<string> sexDescriptor = default, Option<DateOnly> birthDate = default, Option<string> firstName = default, Option<string> genderIdentity = default, Option<string> generationCodeSuffix = default, Option<bool> highlyQualifiedTeacher = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> loginId = default, Option<string> maidenName = default, Option<string> middleName = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<double> yearsOfPriorProfessionalExperience = default, Option<double> yearsOfPriorTeachingExperience = default, Option<bool> useSnapshot = default, Option<string> staffIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStaffs(pageToken, staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, firstName, genderIdentity, generationCodeSuffix, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                FormatGetStaffs(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref staffUniqueId, ref personId, ref sourceSystemDescriptor, ref citizenshipStatusDescriptor, ref highestCompletedLevelOfEducationDescriptor, ref sexDescriptor, ref birthDate, ref firstName, ref genderIdentity, ref generationCodeSuffix, ref highlyQualifiedTeacher, ref hispanicLatinoEthnicity, ref id, ref lastSurname, ref loginId, ref maidenName, ref middleName, ref personalTitlePrefix, ref preferredFirstName, ref preferredLastSurname, ref yearsOfPriorProfessionalExperience, ref yearsOfPriorTeachingExperience, ref useSnapshot, ref staffIdentificationSystemDescriptor, ref assigningOrganizationIdentificationCode, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffs"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffs");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (staffUniqueId.IsSet)
                        parseQueryStringLocalVar["staffUniqueId"] = ClientUtils.ParameterToString(staffUniqueId.Value);

                    if (personId.IsSet)
                        parseQueryStringLocalVar["personId"] = ClientUtils.ParameterToString(personId.Value);

                    if (sourceSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["sourceSystemDescriptor"] = ClientUtils.ParameterToString(sourceSystemDescriptor.Value);

                    if (citizenshipStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["citizenshipStatusDescriptor"] = ClientUtils.ParameterToString(citizenshipStatusDescriptor.Value);

                    if (highestCompletedLevelOfEducationDescriptor.IsSet)
                        parseQueryStringLocalVar["highestCompletedLevelOfEducationDescriptor"] = ClientUtils.ParameterToString(highestCompletedLevelOfEducationDescriptor.Value);

                    if (sexDescriptor.IsSet)
                        parseQueryStringLocalVar["sexDescriptor"] = ClientUtils.ParameterToString(sexDescriptor.Value);

                    if (birthDate.IsSet)
                        parseQueryStringLocalVar["birthDate"] = ClientUtils.ParameterToString(birthDate.Value);

                    if (firstName.IsSet)
                        parseQueryStringLocalVar["firstName"] = ClientUtils.ParameterToString(firstName.Value);

                    if (genderIdentity.IsSet)
                        parseQueryStringLocalVar["genderIdentity"] = ClientUtils.ParameterToString(genderIdentity.Value);

                    if (generationCodeSuffix.IsSet)
                        parseQueryStringLocalVar["generationCodeSuffix"] = ClientUtils.ParameterToString(generationCodeSuffix.Value);

                    if (highlyQualifiedTeacher.IsSet)
                        parseQueryStringLocalVar["highlyQualifiedTeacher"] = ClientUtils.ParameterToString(highlyQualifiedTeacher.Value);

                    if (hispanicLatinoEthnicity.IsSet)
                        parseQueryStringLocalVar["hispanicLatinoEthnicity"] = ClientUtils.ParameterToString(hispanicLatinoEthnicity.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (lastSurname.IsSet)
                        parseQueryStringLocalVar["lastSurname"] = ClientUtils.ParameterToString(lastSurname.Value);

                    if (loginId.IsSet)
                        parseQueryStringLocalVar["loginId"] = ClientUtils.ParameterToString(loginId.Value);

                    if (maidenName.IsSet)
                        parseQueryStringLocalVar["maidenName"] = ClientUtils.ParameterToString(maidenName.Value);

                    if (middleName.IsSet)
                        parseQueryStringLocalVar["middleName"] = ClientUtils.ParameterToString(middleName.Value);

                    if (personalTitlePrefix.IsSet)
                        parseQueryStringLocalVar["personalTitlePrefix"] = ClientUtils.ParameterToString(personalTitlePrefix.Value);

                    if (preferredFirstName.IsSet)
                        parseQueryStringLocalVar["preferredFirstName"] = ClientUtils.ParameterToString(preferredFirstName.Value);

                    if (preferredLastSurname.IsSet)
                        parseQueryStringLocalVar["preferredLastSurname"] = ClientUtils.ParameterToString(preferredLastSurname.Value);

                    if (yearsOfPriorProfessionalExperience.IsSet)
                        parseQueryStringLocalVar["yearsOfPriorProfessionalExperience"] = ClientUtils.ParameterToString(yearsOfPriorProfessionalExperience.Value);

                    if (yearsOfPriorTeachingExperience.IsSet)
                        parseQueryStringLocalVar["yearsOfPriorTeachingExperience"] = ClientUtils.ParameterToString(yearsOfPriorTeachingExperience.Value);

                    if (staffIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["staffIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(staffIdentificationSystemDescriptor.Value);

                    if (assigningOrganizationIdentificationCode.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStaffsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStaffsApiResponse>();

                        GetStaffsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStaffsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, firstName, genderIdentity, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, useSnapshot, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                        Events.ExecuteOnGetStaffs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStaffsDefaultImplementation(e, "/ed-fi/staffs", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, firstName, genderIdentity, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, useSnapshot, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
                Events.ExecuteOnErrorGetStaffs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStaffsApiResponse"/>
        /// </summary>
        public partial class GetStaffsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStaffsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStaffsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStaffsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStaffsApiResponse(ILogger<GetStaffsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiStaff>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiStaff>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiStaff>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStaffsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetStaffsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStaffsByIdDefaultImplementation(IGetStaffsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStaffsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStaffsById(ref bool suppressDefaultLog, IGetStaffsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStaffsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStaffsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStaffsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStaffsByIdApiResponse?> GetStaffsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStaffsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStaffsByIdApiResponse> GetStaffsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStaffsById(id, ifNoneMatch);

                FormatGetStaffsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffs/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffs/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStaffsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStaffsByIdApiResponse>();

                        GetStaffsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffs/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStaffsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetStaffsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStaffsByIdDefaultImplementation(e, "/ed-fi/staffs/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetStaffsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStaffsByIdApiResponse"/>
        /// </summary>
        public partial class GetStaffsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStaffsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStaffsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStaffsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStaffsByIdApiResponse(ILogger<GetStaffsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiStaff? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStaff>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiStaff? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStaffsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> staffUniqueId, ref Option<string> personId, ref Option<string> sourceSystemDescriptor, ref Option<string> citizenshipStatusDescriptor, ref Option<string> highestCompletedLevelOfEducationDescriptor, ref Option<string> sexDescriptor, ref Option<DateOnly> birthDate, ref Option<string> firstName, ref Option<string> genderIdentity, ref Option<string> generationCodeSuffix, ref Option<bool> highlyQualifiedTeacher, ref Option<bool> hispanicLatinoEthnicity, ref Option<string> id, ref Option<string> lastSurname, ref Option<string> loginId, ref Option<string> maidenName, ref Option<string> middleName, ref Option<string> personalTitlePrefix, ref Option<string> preferredFirstName, ref Option<string> preferredLastSurname, ref Option<double> yearsOfPriorProfessionalExperience, ref Option<double> yearsOfPriorTeachingExperience, ref Option<bool> useSnapshot, ref Option<string> staffIdentificationSystemDescriptor, ref Option<string> assigningOrganizationIdentificationCode, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="staffUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="highestCompletedLevelOfEducationDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="firstName"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="loginId"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="staffIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetStaffsPartitions(Option<string> staffUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> highestCompletedLevelOfEducationDescriptor, Option<string> sexDescriptor, Option<string> firstName, Option<string> genderIdentity, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> loginId, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<string> staffIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            if (staffUniqueId.IsSet && staffUniqueId.Value == null)
                throw new ArgumentNullException(nameof(staffUniqueId));

            if (personId.IsSet && personId.Value == null)
                throw new ArgumentNullException(nameof(personId));

            if (sourceSystemDescriptor.IsSet && sourceSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(sourceSystemDescriptor));

            if (citizenshipStatusDescriptor.IsSet && citizenshipStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(citizenshipStatusDescriptor));

            if (highestCompletedLevelOfEducationDescriptor.IsSet && highestCompletedLevelOfEducationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(highestCompletedLevelOfEducationDescriptor));

            if (sexDescriptor.IsSet && sexDescriptor.Value == null)
                throw new ArgumentNullException(nameof(sexDescriptor));

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName));

            if (genderIdentity.IsSet && genderIdentity.Value == null)
                throw new ArgumentNullException(nameof(genderIdentity));

            if (generationCodeSuffix.IsSet && generationCodeSuffix.Value == null)
                throw new ArgumentNullException(nameof(generationCodeSuffix));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (lastSurname.IsSet && lastSurname.Value == null)
                throw new ArgumentNullException(nameof(lastSurname));

            if (loginId.IsSet && loginId.Value == null)
                throw new ArgumentNullException(nameof(loginId));

            if (maidenName.IsSet && maidenName.Value == null)
                throw new ArgumentNullException(nameof(maidenName));

            if (middleName.IsSet && middleName.Value == null)
                throw new ArgumentNullException(nameof(middleName));

            if (personalTitlePrefix.IsSet && personalTitlePrefix.Value == null)
                throw new ArgumentNullException(nameof(personalTitlePrefix));

            if (preferredFirstName.IsSet && preferredFirstName.Value == null)
                throw new ArgumentNullException(nameof(preferredFirstName));

            if (preferredLastSurname.IsSet && preferredLastSurname.Value == null)
                throw new ArgumentNullException(nameof(preferredLastSurname));

            if (staffIdentificationSystemDescriptor.IsSet && staffIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(staffIdentificationSystemDescriptor));

            if (assigningOrganizationIdentificationCode.IsSet && assigningOrganizationIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="highestCompletedLevelOfEducationDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="birthDate"></param>
        /// <param name="firstName"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="highlyQualifiedTeacher"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="loginId"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="yearsOfPriorProfessionalExperience"></param>
        /// <param name="yearsOfPriorTeachingExperience"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="staffIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetStaffsPartitionsDefaultImplementation(IGetStaffsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> staffUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> highestCompletedLevelOfEducationDescriptor, Option<string> sexDescriptor, Option<DateOnly> birthDate, Option<string> firstName, Option<string> genderIdentity, Option<string> generationCodeSuffix, Option<bool> highlyQualifiedTeacher, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<string> lastSurname, Option<string> loginId, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<double> yearsOfPriorProfessionalExperience, Option<double> yearsOfPriorTeachingExperience, Option<bool> useSnapshot, Option<string> staffIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetStaffsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, firstName, genderIdentity, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, useSnapshot, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="highestCompletedLevelOfEducationDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="birthDate"></param>
        /// <param name="firstName"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="highlyQualifiedTeacher"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="loginId"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="yearsOfPriorProfessionalExperience"></param>
        /// <param name="yearsOfPriorTeachingExperience"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="staffIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetStaffsPartitions(ref bool suppressDefaultLog, IGetStaffsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> staffUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> highestCompletedLevelOfEducationDescriptor, Option<string> sexDescriptor, Option<DateOnly> birthDate, Option<string> firstName, Option<string> genderIdentity, Option<string> generationCodeSuffix, Option<bool> highlyQualifiedTeacher, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<string> lastSurname, Option<string> loginId, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<double> yearsOfPriorProfessionalExperience, Option<double> yearsOfPriorTeachingExperience, Option<bool> useSnapshot, Option<string> staffIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="highestCompletedLevelOfEducationDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="birthDate"></param>
        /// <param name="firstName"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="highlyQualifiedTeacher"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="loginId"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="yearsOfPriorProfessionalExperience"></param>
        /// <param name="yearsOfPriorTeachingExperience"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="staffIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetStaffsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> staffUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> highestCompletedLevelOfEducationDescriptor, Option<string> sexDescriptor, Option<DateOnly> birthDate, Option<string> firstName, Option<string> genderIdentity, Option<string> generationCodeSuffix, Option<bool> highlyQualifiedTeacher, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<string> lastSurname, Option<string> loginId, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<double> yearsOfPriorProfessionalExperience, Option<double> yearsOfPriorTeachingExperience, Option<bool> useSnapshot, Option<string> staffIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStaffsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, firstName, genderIdentity, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, useSnapshot, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="staffUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="highestCompletedLevelOfEducationDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="birthDate"></param>
        /// <param name="firstName"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="highlyQualifiedTeacher"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="loginId"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="yearsOfPriorProfessionalExperience"></param>
        /// <param name="yearsOfPriorTeachingExperience"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="staffIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetStaffsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> staffUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> highestCompletedLevelOfEducationDescriptor, Option<string> sexDescriptor, Option<DateOnly> birthDate, Option<string> firstName, Option<string> genderIdentity, Option<string> generationCodeSuffix, Option<bool> highlyQualifiedTeacher, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<string> lastSurname, Option<string> loginId, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<double> yearsOfPriorProfessionalExperience, Option<double> yearsOfPriorTeachingExperience, Option<bool> useSnapshot, Option<string> staffIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)</param>
        /// <param name="sexDescriptor">The birth sex of the staff member. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="genderIdentity">The gender the staff member identifies themselves as. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="staffIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the staff Identification Code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStaffsPartitionsApiResponse?> GetStaffsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> staffUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> highestCompletedLevelOfEducationDescriptor = default, Option<string> sexDescriptor = default, Option<DateOnly> birthDate = default, Option<string> firstName = default, Option<string> genderIdentity = default, Option<string> generationCodeSuffix = default, Option<bool> highlyQualifiedTeacher = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> loginId = default, Option<string> maidenName = default, Option<string> middleName = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<double> yearsOfPriorProfessionalExperience = default, Option<double> yearsOfPriorTeachingExperience = default, Option<bool> useSnapshot = default, Option<string> staffIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStaffsPartitionsAsync(number, minChangeVersion, maxChangeVersion, staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, firstName, genderIdentity, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, useSnapshot, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)</param>
        /// <param name="sexDescriptor">The birth sex of the staff member. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="genderIdentity">The gender the staff member identifies themselves as. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="staffIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the staff Identification Code. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStaffsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStaffsPartitionsApiResponse> GetStaffsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> staffUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> highestCompletedLevelOfEducationDescriptor = default, Option<string> sexDescriptor = default, Option<DateOnly> birthDate = default, Option<string> firstName = default, Option<string> genderIdentity = default, Option<string> generationCodeSuffix = default, Option<bool> highlyQualifiedTeacher = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> loginId = default, Option<string> maidenName = default, Option<string> middleName = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<double> yearsOfPriorProfessionalExperience = default, Option<double> yearsOfPriorTeachingExperience = default, Option<bool> useSnapshot = default, Option<string> staffIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStaffsPartitions(staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, firstName, genderIdentity, generationCodeSuffix, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                FormatGetStaffsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref staffUniqueId, ref personId, ref sourceSystemDescriptor, ref citizenshipStatusDescriptor, ref highestCompletedLevelOfEducationDescriptor, ref sexDescriptor, ref birthDate, ref firstName, ref genderIdentity, ref generationCodeSuffix, ref highlyQualifiedTeacher, ref hispanicLatinoEthnicity, ref id, ref lastSurname, ref loginId, ref maidenName, ref middleName, ref personalTitlePrefix, ref preferredFirstName, ref preferredLastSurname, ref yearsOfPriorProfessionalExperience, ref yearsOfPriorTeachingExperience, ref useSnapshot, ref staffIdentificationSystemDescriptor, ref assigningOrganizationIdentificationCode, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffs/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffs/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (staffUniqueId.IsSet)
                        parseQueryStringLocalVar["staffUniqueId"] = ClientUtils.ParameterToString(staffUniqueId.Value);

                    if (personId.IsSet)
                        parseQueryStringLocalVar["personId"] = ClientUtils.ParameterToString(personId.Value);

                    if (sourceSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["sourceSystemDescriptor"] = ClientUtils.ParameterToString(sourceSystemDescriptor.Value);

                    if (citizenshipStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["citizenshipStatusDescriptor"] = ClientUtils.ParameterToString(citizenshipStatusDescriptor.Value);

                    if (highestCompletedLevelOfEducationDescriptor.IsSet)
                        parseQueryStringLocalVar["highestCompletedLevelOfEducationDescriptor"] = ClientUtils.ParameterToString(highestCompletedLevelOfEducationDescriptor.Value);

                    if (sexDescriptor.IsSet)
                        parseQueryStringLocalVar["sexDescriptor"] = ClientUtils.ParameterToString(sexDescriptor.Value);

                    if (birthDate.IsSet)
                        parseQueryStringLocalVar["birthDate"] = ClientUtils.ParameterToString(birthDate.Value);

                    if (firstName.IsSet)
                        parseQueryStringLocalVar["firstName"] = ClientUtils.ParameterToString(firstName.Value);

                    if (genderIdentity.IsSet)
                        parseQueryStringLocalVar["genderIdentity"] = ClientUtils.ParameterToString(genderIdentity.Value);

                    if (generationCodeSuffix.IsSet)
                        parseQueryStringLocalVar["generationCodeSuffix"] = ClientUtils.ParameterToString(generationCodeSuffix.Value);

                    if (highlyQualifiedTeacher.IsSet)
                        parseQueryStringLocalVar["highlyQualifiedTeacher"] = ClientUtils.ParameterToString(highlyQualifiedTeacher.Value);

                    if (hispanicLatinoEthnicity.IsSet)
                        parseQueryStringLocalVar["hispanicLatinoEthnicity"] = ClientUtils.ParameterToString(hispanicLatinoEthnicity.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (lastSurname.IsSet)
                        parseQueryStringLocalVar["lastSurname"] = ClientUtils.ParameterToString(lastSurname.Value);

                    if (loginId.IsSet)
                        parseQueryStringLocalVar["loginId"] = ClientUtils.ParameterToString(loginId.Value);

                    if (maidenName.IsSet)
                        parseQueryStringLocalVar["maidenName"] = ClientUtils.ParameterToString(maidenName.Value);

                    if (middleName.IsSet)
                        parseQueryStringLocalVar["middleName"] = ClientUtils.ParameterToString(middleName.Value);

                    if (personalTitlePrefix.IsSet)
                        parseQueryStringLocalVar["personalTitlePrefix"] = ClientUtils.ParameterToString(personalTitlePrefix.Value);

                    if (preferredFirstName.IsSet)
                        parseQueryStringLocalVar["preferredFirstName"] = ClientUtils.ParameterToString(preferredFirstName.Value);

                    if (preferredLastSurname.IsSet)
                        parseQueryStringLocalVar["preferredLastSurname"] = ClientUtils.ParameterToString(preferredLastSurname.Value);

                    if (yearsOfPriorProfessionalExperience.IsSet)
                        parseQueryStringLocalVar["yearsOfPriorProfessionalExperience"] = ClientUtils.ParameterToString(yearsOfPriorProfessionalExperience.Value);

                    if (yearsOfPriorTeachingExperience.IsSet)
                        parseQueryStringLocalVar["yearsOfPriorTeachingExperience"] = ClientUtils.ParameterToString(yearsOfPriorTeachingExperience.Value);

                    if (staffIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["staffIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(staffIdentificationSystemDescriptor.Value);

                    if (assigningOrganizationIdentificationCode.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStaffsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStaffsPartitionsApiResponse>();

                        GetStaffsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffs/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStaffsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, firstName, genderIdentity, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, useSnapshot, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                        Events.ExecuteOnGetStaffsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStaffsPartitionsDefaultImplementation(e, "/ed-fi/staffs/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, staffUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, firstName, genderIdentity, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, useSnapshot, staffIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
                Events.ExecuteOnErrorGetStaffsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStaffsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetStaffsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStaffsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStaffsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStaffsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStaffsPartitionsApiResponse(ILogger<GetStaffsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesStaffs(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesStaffsDefaultImplementation(IKeyChangesStaffsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesStaffs(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesStaffs(ref bool suppressDefaultLog, IKeyChangesStaffsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesStaffsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesStaffs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesStaffs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStaffsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStaffsApiResponse?> KeyChangesStaffsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesStaffsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStaffsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStaffsApiResponse> KeyChangesStaffsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesStaffs(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffs/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffs/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesStaffsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesStaffsApiResponse>();

                        KeyChangesStaffsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffs/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesStaffsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesStaffs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesStaffsDefaultImplementation(e, "/ed-fi/staffs/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesStaffs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesStaffsApiResponse"/>
        /// </summary>
        public partial class KeyChangesStaffsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesStaffsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesStaffsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesStaffsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesStaffsApiResponse(ILogger<KeyChangesStaffsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStaffKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStaffKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStaffKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostStaff(EdFiStaff edFiStaff);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiStaff"></param>
        /// <returns></returns>
        private void ValidatePostStaff(EdFiStaff edFiStaff)
        {
            if (edFiStaff == null)
                throw new ArgumentNullException(nameof(edFiStaff));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStaff"></param>
        private void AfterPostStaffDefaultImplementation(IPostStaffApiResponse apiResponseLocalVar, EdFiStaff edFiStaff)
        {
            bool suppressDefaultLog = false;
            AfterPostStaff(ref suppressDefaultLog, apiResponseLocalVar, edFiStaff);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStaff"></param>
        partial void AfterPostStaff(ref bool suppressDefaultLog, IPostStaffApiResponse apiResponseLocalVar, EdFiStaff edFiStaff);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStaff"></param>
        private void OnErrorPostStaffDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStaff edFiStaff)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostStaff(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiStaff);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStaff"></param>
        partial void OnErrorPostStaff(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStaff edFiStaff);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiStaff">The JSON representation of the \&quot;staff\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStaffApiResponse"/>&gt;</returns>
        public async Task<IPostStaffApiResponse?> PostStaffOrDefaultAsync(EdFiStaff edFiStaff, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostStaffAsync(edFiStaff, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStaff">The JSON representation of the \&quot;staff\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStaffApiResponse"/>&gt;</returns>
        public async Task<IPostStaffApiResponse> PostStaffAsync(EdFiStaff edFiStaff, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostStaff(edFiStaff);

                FormatPostStaff(edFiStaff);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffs"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffs");

                    httpRequestMessageLocalVar.Content = (edFiStaff as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStaff, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostStaffApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostStaffApiResponse>();

                        PostStaffApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostStaffDefaultImplementation(apiResponseLocalVar, edFiStaff);

                        Events.ExecuteOnPostStaff(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostStaffDefaultImplementation(e, "/ed-fi/staffs", uriBuilderLocalVar.Path, edFiStaff);
                Events.ExecuteOnErrorPostStaff(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostStaffApiResponse"/>
        /// </summary>
        public partial class PostStaffApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostStaffApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostStaffApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostStaffApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostStaffApiResponse(ILogger<PostStaffApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutStaff(ref string id, EdFiStaff edFiStaff, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiStaff"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutStaff(string id, EdFiStaff edFiStaff, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiStaff == null)
                throw new ArgumentNullException(nameof(edFiStaff));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStaff"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutStaffDefaultImplementation(IPutStaffApiResponse apiResponseLocalVar, string id, EdFiStaff edFiStaff, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutStaff(ref suppressDefaultLog, apiResponseLocalVar, id, edFiStaff, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStaff"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutStaff(ref bool suppressDefaultLog, IPutStaffApiResponse apiResponseLocalVar, string id, EdFiStaff edFiStaff, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStaff"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutStaffDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStaff edFiStaff, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutStaff(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiStaff, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStaff"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutStaff(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStaff edFiStaff, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStaff">The JSON representation of the \&quot;staff\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStaffApiResponse"/>&gt;</returns>
        public async Task<IPutStaffApiResponse?> PutStaffOrDefaultAsync(string id, EdFiStaff edFiStaff, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutStaffAsync(id, edFiStaff, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStaff">The JSON representation of the \&quot;staff\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStaffApiResponse"/>&gt;</returns>
        public async Task<IPutStaffApiResponse> PutStaffAsync(string id, EdFiStaff edFiStaff, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutStaff(id, edFiStaff, ifMatch);

                FormatPutStaff(ref id, edFiStaff, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/staffs/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/staffs/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiStaff as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStaff, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutStaffApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutStaffApiResponse>();

                        PutStaffApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/staffs/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutStaffDefaultImplementation(apiResponseLocalVar, id, edFiStaff, ifMatch);

                        Events.ExecuteOnPutStaff(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutStaffDefaultImplementation(e, "/ed-fi/staffs/{id}", uriBuilderLocalVar.Path, id, edFiStaff, ifMatch);
                Events.ExecuteOnErrorPutStaff(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutStaffApiResponse"/>
        /// </summary>
        public partial class PutStaffApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutStaffApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutStaffApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutStaffApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutStaffApiResponse(ILogger<PutStaffApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
