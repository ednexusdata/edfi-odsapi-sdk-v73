// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStudentEducationOrganizationAssociationsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StudentEducationOrganizationAssociationsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentEducationOrganizationAssociationByIdApiResponse"/>&gt;</returns>
        Task<IDeleteStudentEducationOrganizationAssociationByIdApiResponse> DeleteStudentEducationOrganizationAssociationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentEducationOrganizationAssociationByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteStudentEducationOrganizationAssociationByIdApiResponse?> DeleteStudentEducationOrganizationAssociationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentEducationOrganizationAssociationsApiResponse"/>&gt;</returns>
        Task<IDeletesStudentEducationOrganizationAssociationsApiResponse> DeletesStudentEducationOrganizationAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentEducationOrganizationAssociationsApiResponse"/>?&gt;</returns>
        Task<IDeletesStudentEducationOrganizationAssociationsApiResponse?> DeletesStudentEducationOrganizationAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor">An indication of the barrier to having internet access in the student s primary place of residence. (optional)</param>
        /// <param name="internetAccessTypeInResidenceDescriptor">The primary type of internet service used in the student s primary place of residence. (optional)</param>
        /// <param name="internetPerformanceInResidenceDescriptor">An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="primaryLearningDeviceAccessDescriptor">An indication of whether the primary learning device is shared or not shared with another individual. (optional)</param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor">The type of device the student uses most often to complete learning activities away from school. (optional)</param>
        /// <param name="primaryLearningDeviceProviderDescriptor">The provider of the primary learning device. (optional)</param>
        /// <param name="sexDescriptor">The student&#39;s birth sex as reported to the education organization. (optional)</param>
        /// <param name="supporterMilitaryConnectionDescriptor">Military connection of the person/people whom the student is a dependent of. (optional)</param>
        /// <param name="genderIdentity">The student&#39;s gender as last reported to the education organization. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="internetAccessInResidence">An indication of whether the student is able to access the internet in their primary place of residence. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="profileThumbnail">Locator reference for the student photo. The specification for that reference is left to local definition. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="studentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the StudentIdentificationCode. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsApiResponse"/>&gt;</returns>
        Task<IGetStudentEducationOrganizationAssociationsApiResponse> GetStudentEducationOrganizationAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> educationOrganizationId = default, Option<string> studentUniqueId = default, Option<string> barrierToInternetAccessInResidenceDescriptor = default, Option<string> internetAccessTypeInResidenceDescriptor = default, Option<string> internetPerformanceInResidenceDescriptor = default, Option<string> limitedEnglishProficiencyDescriptor = default, Option<string> primaryLearningDeviceAccessDescriptor = default, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor = default, Option<string> primaryLearningDeviceProviderDescriptor = default, Option<string> sexDescriptor = default, Option<string> supporterMilitaryConnectionDescriptor = default, Option<string> genderIdentity = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<bool> internetAccessInResidence = default, Option<string> loginId = default, Option<string> profileThumbnail = default, Option<bool> useSnapshot = default, Option<string> studentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor">An indication of the barrier to having internet access in the student s primary place of residence. (optional)</param>
        /// <param name="internetAccessTypeInResidenceDescriptor">The primary type of internet service used in the student s primary place of residence. (optional)</param>
        /// <param name="internetPerformanceInResidenceDescriptor">An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="primaryLearningDeviceAccessDescriptor">An indication of whether the primary learning device is shared or not shared with another individual. (optional)</param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor">The type of device the student uses most often to complete learning activities away from school. (optional)</param>
        /// <param name="primaryLearningDeviceProviderDescriptor">The provider of the primary learning device. (optional)</param>
        /// <param name="sexDescriptor">The student&#39;s birth sex as reported to the education organization. (optional)</param>
        /// <param name="supporterMilitaryConnectionDescriptor">Military connection of the person/people whom the student is a dependent of. (optional)</param>
        /// <param name="genderIdentity">The student&#39;s gender as last reported to the education organization. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="internetAccessInResidence">An indication of whether the student is able to access the internet in their primary place of residence. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="profileThumbnail">Locator reference for the student photo. The specification for that reference is left to local definition. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="studentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the StudentIdentificationCode. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsApiResponse"/>?&gt;</returns>
        Task<IGetStudentEducationOrganizationAssociationsApiResponse?> GetStudentEducationOrganizationAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> educationOrganizationId = default, Option<string> studentUniqueId = default, Option<string> barrierToInternetAccessInResidenceDescriptor = default, Option<string> internetAccessTypeInResidenceDescriptor = default, Option<string> internetPerformanceInResidenceDescriptor = default, Option<string> limitedEnglishProficiencyDescriptor = default, Option<string> primaryLearningDeviceAccessDescriptor = default, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor = default, Option<string> primaryLearningDeviceProviderDescriptor = default, Option<string> sexDescriptor = default, Option<string> supporterMilitaryConnectionDescriptor = default, Option<string> genderIdentity = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<bool> internetAccessInResidence = default, Option<string> loginId = default, Option<string> profileThumbnail = default, Option<bool> useSnapshot = default, Option<string> studentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsByIdApiResponse"/>&gt;</returns>
        Task<IGetStudentEducationOrganizationAssociationsByIdApiResponse> GetStudentEducationOrganizationAssociationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsByIdApiResponse"/>?&gt;</returns>
        Task<IGetStudentEducationOrganizationAssociationsByIdApiResponse?> GetStudentEducationOrganizationAssociationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor">An indication of the barrier to having internet access in the student s primary place of residence. (optional)</param>
        /// <param name="internetAccessTypeInResidenceDescriptor">The primary type of internet service used in the student s primary place of residence. (optional)</param>
        /// <param name="internetPerformanceInResidenceDescriptor">An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="primaryLearningDeviceAccessDescriptor">An indication of whether the primary learning device is shared or not shared with another individual. (optional)</param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor">The type of device the student uses most often to complete learning activities away from school. (optional)</param>
        /// <param name="primaryLearningDeviceProviderDescriptor">The provider of the primary learning device. (optional)</param>
        /// <param name="sexDescriptor">The student&#39;s birth sex as reported to the education organization. (optional)</param>
        /// <param name="supporterMilitaryConnectionDescriptor">Military connection of the person/people whom the student is a dependent of. (optional)</param>
        /// <param name="genderIdentity">The student&#39;s gender as last reported to the education organization. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="internetAccessInResidence">An indication of whether the student is able to access the internet in their primary place of residence. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="profileThumbnail">Locator reference for the student photo. The specification for that reference is left to local definition. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="studentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the StudentIdentificationCode. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetStudentEducationOrganizationAssociationsPartitionsApiResponse> GetStudentEducationOrganizationAssociationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> educationOrganizationId = default, Option<string> studentUniqueId = default, Option<string> barrierToInternetAccessInResidenceDescriptor = default, Option<string> internetAccessTypeInResidenceDescriptor = default, Option<string> internetPerformanceInResidenceDescriptor = default, Option<string> limitedEnglishProficiencyDescriptor = default, Option<string> primaryLearningDeviceAccessDescriptor = default, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor = default, Option<string> primaryLearningDeviceProviderDescriptor = default, Option<string> sexDescriptor = default, Option<string> supporterMilitaryConnectionDescriptor = default, Option<string> genderIdentity = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<bool> internetAccessInResidence = default, Option<string> loginId = default, Option<string> profileThumbnail = default, Option<bool> useSnapshot = default, Option<string> studentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor">An indication of the barrier to having internet access in the student s primary place of residence. (optional)</param>
        /// <param name="internetAccessTypeInResidenceDescriptor">The primary type of internet service used in the student s primary place of residence. (optional)</param>
        /// <param name="internetPerformanceInResidenceDescriptor">An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="primaryLearningDeviceAccessDescriptor">An indication of whether the primary learning device is shared or not shared with another individual. (optional)</param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor">The type of device the student uses most often to complete learning activities away from school. (optional)</param>
        /// <param name="primaryLearningDeviceProviderDescriptor">The provider of the primary learning device. (optional)</param>
        /// <param name="sexDescriptor">The student&#39;s birth sex as reported to the education organization. (optional)</param>
        /// <param name="supporterMilitaryConnectionDescriptor">Military connection of the person/people whom the student is a dependent of. (optional)</param>
        /// <param name="genderIdentity">The student&#39;s gender as last reported to the education organization. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="internetAccessInResidence">An indication of whether the student is able to access the internet in their primary place of residence. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="profileThumbnail">Locator reference for the student photo. The specification for that reference is left to local definition. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="studentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the StudentIdentificationCode. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetStudentEducationOrganizationAssociationsPartitionsApiResponse?> GetStudentEducationOrganizationAssociationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> educationOrganizationId = default, Option<string> studentUniqueId = default, Option<string> barrierToInternetAccessInResidenceDescriptor = default, Option<string> internetAccessTypeInResidenceDescriptor = default, Option<string> internetPerformanceInResidenceDescriptor = default, Option<string> limitedEnglishProficiencyDescriptor = default, Option<string> primaryLearningDeviceAccessDescriptor = default, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor = default, Option<string> primaryLearningDeviceProviderDescriptor = default, Option<string> sexDescriptor = default, Option<string> supporterMilitaryConnectionDescriptor = default, Option<string> genderIdentity = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<bool> internetAccessInResidence = default, Option<string> loginId = default, Option<string> profileThumbnail = default, Option<bool> useSnapshot = default, Option<string> studentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentEducationOrganizationAssociationsApiResponse"/>&gt;</returns>
        Task<IKeyChangesStudentEducationOrganizationAssociationsApiResponse> KeyChangesStudentEducationOrganizationAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentEducationOrganizationAssociationsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesStudentEducationOrganizationAssociationsApiResponse?> KeyChangesStudentEducationOrganizationAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentEducationOrganizationAssociation">The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentEducationOrganizationAssociationApiResponse"/>&gt;</returns>
        Task<IPostStudentEducationOrganizationAssociationApiResponse> PostStudentEducationOrganizationAssociationAsync(EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiStudentEducationOrganizationAssociation">The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentEducationOrganizationAssociationApiResponse"/>?&gt;</returns>
        Task<IPostStudentEducationOrganizationAssociationApiResponse?> PostStudentEducationOrganizationAssociationOrDefaultAsync(EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentEducationOrganizationAssociation">The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentEducationOrganizationAssociationApiResponse"/>&gt;</returns>
        Task<IPutStudentEducationOrganizationAssociationApiResponse> PutStudentEducationOrganizationAssociationAsync(string id, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentEducationOrganizationAssociation">The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentEducationOrganizationAssociationApiResponse"/>?&gt;</returns>
        Task<IPutStudentEducationOrganizationAssociationApiResponse?> PutStudentEducationOrganizationAssociationOrDefaultAsync(string id, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteStudentEducationOrganizationAssociationByIdApiResponse"/>
    /// </summary>
    public interface IDeleteStudentEducationOrganizationAssociationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesStudentEducationOrganizationAssociationsApiResponse"/>
    /// </summary>
    public interface IDeletesStudentEducationOrganizationAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentEducationOrganizationAssociationDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentEducationOrganizationAssociationsApiResponse"/>
    /// </summary>
    public interface IGetStudentEducationOrganizationAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiStudentEducationOrganizationAssociation>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentEducationOrganizationAssociationsByIdApiResponse"/>
    /// </summary>
    public interface IGetStudentEducationOrganizationAssociationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentEducationOrganizationAssociation?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentEducationOrganizationAssociationsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetStudentEducationOrganizationAssociationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesStudentEducationOrganizationAssociationsApiResponse"/>
    /// </summary>
    public interface IKeyChangesStudentEducationOrganizationAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostStudentEducationOrganizationAssociationApiResponse"/>
    /// </summary>
    public interface IPostStudentEducationOrganizationAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutStudentEducationOrganizationAssociationApiResponse"/>
    /// </summary>
    public interface IPutStudentEducationOrganizationAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StudentEducationOrganizationAssociationsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteStudentEducationOrganizationAssociationById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteStudentEducationOrganizationAssociationById;

        internal void ExecuteOnDeleteStudentEducationOrganizationAssociationById(StudentEducationOrganizationAssociationsApi.DeleteStudentEducationOrganizationAssociationByIdApiResponse apiResponse)
        {
            OnDeleteStudentEducationOrganizationAssociationById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteStudentEducationOrganizationAssociationById(Exception exception)
        {
            OnErrorDeleteStudentEducationOrganizationAssociationById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesStudentEducationOrganizationAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesStudentEducationOrganizationAssociations;

        internal void ExecuteOnDeletesStudentEducationOrganizationAssociations(StudentEducationOrganizationAssociationsApi.DeletesStudentEducationOrganizationAssociationsApiResponse apiResponse)
        {
            OnDeletesStudentEducationOrganizationAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesStudentEducationOrganizationAssociations(Exception exception)
        {
            OnErrorDeletesStudentEducationOrganizationAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentEducationOrganizationAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentEducationOrganizationAssociations;

        internal void ExecuteOnGetStudentEducationOrganizationAssociations(StudentEducationOrganizationAssociationsApi.GetStudentEducationOrganizationAssociationsApiResponse apiResponse)
        {
            OnGetStudentEducationOrganizationAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentEducationOrganizationAssociations(Exception exception)
        {
            OnErrorGetStudentEducationOrganizationAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentEducationOrganizationAssociationsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentEducationOrganizationAssociationsById;

        internal void ExecuteOnGetStudentEducationOrganizationAssociationsById(StudentEducationOrganizationAssociationsApi.GetStudentEducationOrganizationAssociationsByIdApiResponse apiResponse)
        {
            OnGetStudentEducationOrganizationAssociationsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentEducationOrganizationAssociationsById(Exception exception)
        {
            OnErrorGetStudentEducationOrganizationAssociationsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentEducationOrganizationAssociationsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentEducationOrganizationAssociationsPartitions;

        internal void ExecuteOnGetStudentEducationOrganizationAssociationsPartitions(StudentEducationOrganizationAssociationsApi.GetStudentEducationOrganizationAssociationsPartitionsApiResponse apiResponse)
        {
            OnGetStudentEducationOrganizationAssociationsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentEducationOrganizationAssociationsPartitions(Exception exception)
        {
            OnErrorGetStudentEducationOrganizationAssociationsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesStudentEducationOrganizationAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesStudentEducationOrganizationAssociations;

        internal void ExecuteOnKeyChangesStudentEducationOrganizationAssociations(StudentEducationOrganizationAssociationsApi.KeyChangesStudentEducationOrganizationAssociationsApiResponse apiResponse)
        {
            OnKeyChangesStudentEducationOrganizationAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesStudentEducationOrganizationAssociations(Exception exception)
        {
            OnErrorKeyChangesStudentEducationOrganizationAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostStudentEducationOrganizationAssociation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostStudentEducationOrganizationAssociation;

        internal void ExecuteOnPostStudentEducationOrganizationAssociation(StudentEducationOrganizationAssociationsApi.PostStudentEducationOrganizationAssociationApiResponse apiResponse)
        {
            OnPostStudentEducationOrganizationAssociation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostStudentEducationOrganizationAssociation(Exception exception)
        {
            OnErrorPostStudentEducationOrganizationAssociation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutStudentEducationOrganizationAssociation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutStudentEducationOrganizationAssociation;

        internal void ExecuteOnPutStudentEducationOrganizationAssociation(StudentEducationOrganizationAssociationsApi.PutStudentEducationOrganizationAssociationApiResponse apiResponse)
        {
            OnPutStudentEducationOrganizationAssociation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutStudentEducationOrganizationAssociation(Exception exception)
        {
            OnErrorPutStudentEducationOrganizationAssociation?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StudentEducationOrganizationAssociationsApi : IStudentEducationOrganizationAssociationsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StudentEducationOrganizationAssociationsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StudentEducationOrganizationAssociationsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentEducationOrganizationAssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentEducationOrganizationAssociationsApi(ILogger<StudentEducationOrganizationAssociationsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StudentEducationOrganizationAssociationsApiEvents studentEducationOrganizationAssociationsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StudentEducationOrganizationAssociationsApi>();
            HttpClient = httpClient;
            Events = studentEducationOrganizationAssociationsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteStudentEducationOrganizationAssociationById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteStudentEducationOrganizationAssociationById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteStudentEducationOrganizationAssociationByIdDefaultImplementation(IDeleteStudentEducationOrganizationAssociationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteStudentEducationOrganizationAssociationById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteStudentEducationOrganizationAssociationById(ref bool suppressDefaultLog, IDeleteStudentEducationOrganizationAssociationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteStudentEducationOrganizationAssociationByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteStudentEducationOrganizationAssociationById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteStudentEducationOrganizationAssociationById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentEducationOrganizationAssociationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentEducationOrganizationAssociationByIdApiResponse?> DeleteStudentEducationOrganizationAssociationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteStudentEducationOrganizationAssociationByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentEducationOrganizationAssociationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentEducationOrganizationAssociationByIdApiResponse> DeleteStudentEducationOrganizationAssociationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteStudentEducationOrganizationAssociationById(id, ifMatch);

                FormatDeleteStudentEducationOrganizationAssociationById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentEducationOrganizationAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentEducationOrganizationAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteStudentEducationOrganizationAssociationByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteStudentEducationOrganizationAssociationByIdApiResponse>();

                        DeleteStudentEducationOrganizationAssociationByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentEducationOrganizationAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteStudentEducationOrganizationAssociationByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteStudentEducationOrganizationAssociationById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteStudentEducationOrganizationAssociationByIdDefaultImplementation(e, "/ed-fi/studentEducationOrganizationAssociations/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteStudentEducationOrganizationAssociationById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteStudentEducationOrganizationAssociationByIdApiResponse"/>
        /// </summary>
        public partial class DeleteStudentEducationOrganizationAssociationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteStudentEducationOrganizationAssociationByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteStudentEducationOrganizationAssociationByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteStudentEducationOrganizationAssociationByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteStudentEducationOrganizationAssociationByIdApiResponse(ILogger<DeleteStudentEducationOrganizationAssociationByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesStudentEducationOrganizationAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesStudentEducationOrganizationAssociationsDefaultImplementation(IDeletesStudentEducationOrganizationAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesStudentEducationOrganizationAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesStudentEducationOrganizationAssociations(ref bool suppressDefaultLog, IDeletesStudentEducationOrganizationAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesStudentEducationOrganizationAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesStudentEducationOrganizationAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesStudentEducationOrganizationAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentEducationOrganizationAssociationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentEducationOrganizationAssociationsApiResponse?> DeletesStudentEducationOrganizationAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesStudentEducationOrganizationAssociationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentEducationOrganizationAssociationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentEducationOrganizationAssociationsApiResponse> DeletesStudentEducationOrganizationAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesStudentEducationOrganizationAssociations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentEducationOrganizationAssociations/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentEducationOrganizationAssociations/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesStudentEducationOrganizationAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesStudentEducationOrganizationAssociationsApiResponse>();

                        DeletesStudentEducationOrganizationAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentEducationOrganizationAssociations/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesStudentEducationOrganizationAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesStudentEducationOrganizationAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesStudentEducationOrganizationAssociationsDefaultImplementation(e, "/ed-fi/studentEducationOrganizationAssociations/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesStudentEducationOrganizationAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesStudentEducationOrganizationAssociationsApiResponse"/>
        /// </summary>
        public partial class DeletesStudentEducationOrganizationAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesStudentEducationOrganizationAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesStudentEducationOrganizationAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesStudentEducationOrganizationAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesStudentEducationOrganizationAssociationsApiResponse(ILogger<DeletesStudentEducationOrganizationAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentEducationOrganizationAssociationDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentEducationOrganizationAssociationDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentEducationOrganizationAssociationDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentEducationOrganizationAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<long> educationOrganizationId, ref Option<string> studentUniqueId, ref Option<string> barrierToInternetAccessInResidenceDescriptor, ref Option<string> internetAccessTypeInResidenceDescriptor, ref Option<string> internetPerformanceInResidenceDescriptor, ref Option<string> limitedEnglishProficiencyDescriptor, ref Option<string> primaryLearningDeviceAccessDescriptor, ref Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, ref Option<string> primaryLearningDeviceProviderDescriptor, ref Option<string> sexDescriptor, ref Option<string> supporterMilitaryConnectionDescriptor, ref Option<string> genderIdentity, ref Option<bool> hispanicLatinoEthnicity, ref Option<string> id, ref Option<bool> internetAccessInResidence, ref Option<string> loginId, ref Option<string> profileThumbnail, ref Option<bool> useSnapshot, ref Option<string> studentIdentificationSystemDescriptor, ref Option<string> assigningOrganizationIdentificationCode, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor"></param>
        /// <param name="internetAccessTypeInResidenceDescriptor"></param>
        /// <param name="internetPerformanceInResidenceDescriptor"></param>
        /// <param name="limitedEnglishProficiencyDescriptor"></param>
        /// <param name="primaryLearningDeviceAccessDescriptor"></param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor"></param>
        /// <param name="primaryLearningDeviceProviderDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="supporterMilitaryConnectionDescriptor"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="id"></param>
        /// <param name="loginId"></param>
        /// <param name="profileThumbnail"></param>
        /// <param name="studentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetStudentEducationOrganizationAssociations(Option<string> pageToken, Option<string> studentUniqueId, Option<string> barrierToInternetAccessInResidenceDescriptor, Option<string> internetAccessTypeInResidenceDescriptor, Option<string> internetPerformanceInResidenceDescriptor, Option<string> limitedEnglishProficiencyDescriptor, Option<string> primaryLearningDeviceAccessDescriptor, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, Option<string> primaryLearningDeviceProviderDescriptor, Option<string> sexDescriptor, Option<string> supporterMilitaryConnectionDescriptor, Option<string> genderIdentity, Option<string> id, Option<string> loginId, Option<string> profileThumbnail, Option<string> studentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (barrierToInternetAccessInResidenceDescriptor.IsSet && barrierToInternetAccessInResidenceDescriptor.Value == null)
                throw new ArgumentNullException(nameof(barrierToInternetAccessInResidenceDescriptor));

            if (internetAccessTypeInResidenceDescriptor.IsSet && internetAccessTypeInResidenceDescriptor.Value == null)
                throw new ArgumentNullException(nameof(internetAccessTypeInResidenceDescriptor));

            if (internetPerformanceInResidenceDescriptor.IsSet && internetPerformanceInResidenceDescriptor.Value == null)
                throw new ArgumentNullException(nameof(internetPerformanceInResidenceDescriptor));

            if (limitedEnglishProficiencyDescriptor.IsSet && limitedEnglishProficiencyDescriptor.Value == null)
                throw new ArgumentNullException(nameof(limitedEnglishProficiencyDescriptor));

            if (primaryLearningDeviceAccessDescriptor.IsSet && primaryLearningDeviceAccessDescriptor.Value == null)
                throw new ArgumentNullException(nameof(primaryLearningDeviceAccessDescriptor));

            if (primaryLearningDeviceAwayFromSchoolDescriptor.IsSet && primaryLearningDeviceAwayFromSchoolDescriptor.Value == null)
                throw new ArgumentNullException(nameof(primaryLearningDeviceAwayFromSchoolDescriptor));

            if (primaryLearningDeviceProviderDescriptor.IsSet && primaryLearningDeviceProviderDescriptor.Value == null)
                throw new ArgumentNullException(nameof(primaryLearningDeviceProviderDescriptor));

            if (sexDescriptor.IsSet && sexDescriptor.Value == null)
                throw new ArgumentNullException(nameof(sexDescriptor));

            if (supporterMilitaryConnectionDescriptor.IsSet && supporterMilitaryConnectionDescriptor.Value == null)
                throw new ArgumentNullException(nameof(supporterMilitaryConnectionDescriptor));

            if (genderIdentity.IsSet && genderIdentity.Value == null)
                throw new ArgumentNullException(nameof(genderIdentity));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (loginId.IsSet && loginId.Value == null)
                throw new ArgumentNullException(nameof(loginId));

            if (profileThumbnail.IsSet && profileThumbnail.Value == null)
                throw new ArgumentNullException(nameof(profileThumbnail));

            if (studentIdentificationSystemDescriptor.IsSet && studentIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(studentIdentificationSystemDescriptor));

            if (assigningOrganizationIdentificationCode.IsSet && assigningOrganizationIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor"></param>
        /// <param name="internetAccessTypeInResidenceDescriptor"></param>
        /// <param name="internetPerformanceInResidenceDescriptor"></param>
        /// <param name="limitedEnglishProficiencyDescriptor"></param>
        /// <param name="primaryLearningDeviceAccessDescriptor"></param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor"></param>
        /// <param name="primaryLearningDeviceProviderDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="supporterMilitaryConnectionDescriptor"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="internetAccessInResidence"></param>
        /// <param name="loginId"></param>
        /// <param name="profileThumbnail"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="studentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetStudentEducationOrganizationAssociationsDefaultImplementation(IGetStudentEducationOrganizationAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> educationOrganizationId, Option<string> studentUniqueId, Option<string> barrierToInternetAccessInResidenceDescriptor, Option<string> internetAccessTypeInResidenceDescriptor, Option<string> internetPerformanceInResidenceDescriptor, Option<string> limitedEnglishProficiencyDescriptor, Option<string> primaryLearningDeviceAccessDescriptor, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, Option<string> primaryLearningDeviceProviderDescriptor, Option<string> sexDescriptor, Option<string> supporterMilitaryConnectionDescriptor, Option<string> genderIdentity, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<bool> internetAccessInResidence, Option<string> loginId, Option<string> profileThumbnail, Option<bool> useSnapshot, Option<string> studentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentEducationOrganizationAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, educationOrganizationId, studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, hispanicLatinoEthnicity, id, internetAccessInResidence, loginId, profileThumbnail, useSnapshot, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor"></param>
        /// <param name="internetAccessTypeInResidenceDescriptor"></param>
        /// <param name="internetPerformanceInResidenceDescriptor"></param>
        /// <param name="limitedEnglishProficiencyDescriptor"></param>
        /// <param name="primaryLearningDeviceAccessDescriptor"></param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor"></param>
        /// <param name="primaryLearningDeviceProviderDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="supporterMilitaryConnectionDescriptor"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="internetAccessInResidence"></param>
        /// <param name="loginId"></param>
        /// <param name="profileThumbnail"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="studentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetStudentEducationOrganizationAssociations(ref bool suppressDefaultLog, IGetStudentEducationOrganizationAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> educationOrganizationId, Option<string> studentUniqueId, Option<string> barrierToInternetAccessInResidenceDescriptor, Option<string> internetAccessTypeInResidenceDescriptor, Option<string> internetPerformanceInResidenceDescriptor, Option<string> limitedEnglishProficiencyDescriptor, Option<string> primaryLearningDeviceAccessDescriptor, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, Option<string> primaryLearningDeviceProviderDescriptor, Option<string> sexDescriptor, Option<string> supporterMilitaryConnectionDescriptor, Option<string> genderIdentity, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<bool> internetAccessInResidence, Option<string> loginId, Option<string> profileThumbnail, Option<bool> useSnapshot, Option<string> studentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor"></param>
        /// <param name="internetAccessTypeInResidenceDescriptor"></param>
        /// <param name="internetPerformanceInResidenceDescriptor"></param>
        /// <param name="limitedEnglishProficiencyDescriptor"></param>
        /// <param name="primaryLearningDeviceAccessDescriptor"></param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor"></param>
        /// <param name="primaryLearningDeviceProviderDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="supporterMilitaryConnectionDescriptor"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="internetAccessInResidence"></param>
        /// <param name="loginId"></param>
        /// <param name="profileThumbnail"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="studentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetStudentEducationOrganizationAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> educationOrganizationId, Option<string> studentUniqueId, Option<string> barrierToInternetAccessInResidenceDescriptor, Option<string> internetAccessTypeInResidenceDescriptor, Option<string> internetPerformanceInResidenceDescriptor, Option<string> limitedEnglishProficiencyDescriptor, Option<string> primaryLearningDeviceAccessDescriptor, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, Option<string> primaryLearningDeviceProviderDescriptor, Option<string> sexDescriptor, Option<string> supporterMilitaryConnectionDescriptor, Option<string> genderIdentity, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<bool> internetAccessInResidence, Option<string> loginId, Option<string> profileThumbnail, Option<bool> useSnapshot, Option<string> studentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentEducationOrganizationAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, educationOrganizationId, studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, hispanicLatinoEthnicity, id, internetAccessInResidence, loginId, profileThumbnail, useSnapshot, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor"></param>
        /// <param name="internetAccessTypeInResidenceDescriptor"></param>
        /// <param name="internetPerformanceInResidenceDescriptor"></param>
        /// <param name="limitedEnglishProficiencyDescriptor"></param>
        /// <param name="primaryLearningDeviceAccessDescriptor"></param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor"></param>
        /// <param name="primaryLearningDeviceProviderDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="supporterMilitaryConnectionDescriptor"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="internetAccessInResidence"></param>
        /// <param name="loginId"></param>
        /// <param name="profileThumbnail"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="studentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetStudentEducationOrganizationAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<long> educationOrganizationId, Option<string> studentUniqueId, Option<string> barrierToInternetAccessInResidenceDescriptor, Option<string> internetAccessTypeInResidenceDescriptor, Option<string> internetPerformanceInResidenceDescriptor, Option<string> limitedEnglishProficiencyDescriptor, Option<string> primaryLearningDeviceAccessDescriptor, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, Option<string> primaryLearningDeviceProviderDescriptor, Option<string> sexDescriptor, Option<string> supporterMilitaryConnectionDescriptor, Option<string> genderIdentity, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<bool> internetAccessInResidence, Option<string> loginId, Option<string> profileThumbnail, Option<bool> useSnapshot, Option<string> studentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor">An indication of the barrier to having internet access in the student s primary place of residence. (optional)</param>
        /// <param name="internetAccessTypeInResidenceDescriptor">The primary type of internet service used in the student s primary place of residence. (optional)</param>
        /// <param name="internetPerformanceInResidenceDescriptor">An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="primaryLearningDeviceAccessDescriptor">An indication of whether the primary learning device is shared or not shared with another individual. (optional)</param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor">The type of device the student uses most often to complete learning activities away from school. (optional)</param>
        /// <param name="primaryLearningDeviceProviderDescriptor">The provider of the primary learning device. (optional)</param>
        /// <param name="sexDescriptor">The student&#39;s birth sex as reported to the education organization. (optional)</param>
        /// <param name="supporterMilitaryConnectionDescriptor">Military connection of the person/people whom the student is a dependent of. (optional)</param>
        /// <param name="genderIdentity">The student&#39;s gender as last reported to the education organization. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="internetAccessInResidence">An indication of whether the student is able to access the internet in their primary place of residence. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="profileThumbnail">Locator reference for the student photo. The specification for that reference is left to local definition. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="studentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the StudentIdentificationCode. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentEducationOrganizationAssociationsApiResponse?> GetStudentEducationOrganizationAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> educationOrganizationId = default, Option<string> studentUniqueId = default, Option<string> barrierToInternetAccessInResidenceDescriptor = default, Option<string> internetAccessTypeInResidenceDescriptor = default, Option<string> internetPerformanceInResidenceDescriptor = default, Option<string> limitedEnglishProficiencyDescriptor = default, Option<string> primaryLearningDeviceAccessDescriptor = default, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor = default, Option<string> primaryLearningDeviceProviderDescriptor = default, Option<string> sexDescriptor = default, Option<string> supporterMilitaryConnectionDescriptor = default, Option<string> genderIdentity = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<bool> internetAccessInResidence = default, Option<string> loginId = default, Option<string> profileThumbnail = default, Option<bool> useSnapshot = default, Option<string> studentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentEducationOrganizationAssociationsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, educationOrganizationId, studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, hispanicLatinoEthnicity, id, internetAccessInResidence, loginId, profileThumbnail, useSnapshot, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor">An indication of the barrier to having internet access in the student s primary place of residence. (optional)</param>
        /// <param name="internetAccessTypeInResidenceDescriptor">The primary type of internet service used in the student s primary place of residence. (optional)</param>
        /// <param name="internetPerformanceInResidenceDescriptor">An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="primaryLearningDeviceAccessDescriptor">An indication of whether the primary learning device is shared or not shared with another individual. (optional)</param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor">The type of device the student uses most often to complete learning activities away from school. (optional)</param>
        /// <param name="primaryLearningDeviceProviderDescriptor">The provider of the primary learning device. (optional)</param>
        /// <param name="sexDescriptor">The student&#39;s birth sex as reported to the education organization. (optional)</param>
        /// <param name="supporterMilitaryConnectionDescriptor">Military connection of the person/people whom the student is a dependent of. (optional)</param>
        /// <param name="genderIdentity">The student&#39;s gender as last reported to the education organization. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="internetAccessInResidence">An indication of whether the student is able to access the internet in their primary place of residence. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="profileThumbnail">Locator reference for the student photo. The specification for that reference is left to local definition. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="studentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the StudentIdentificationCode. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentEducationOrganizationAssociationsApiResponse> GetStudentEducationOrganizationAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<long> educationOrganizationId = default, Option<string> studentUniqueId = default, Option<string> barrierToInternetAccessInResidenceDescriptor = default, Option<string> internetAccessTypeInResidenceDescriptor = default, Option<string> internetPerformanceInResidenceDescriptor = default, Option<string> limitedEnglishProficiencyDescriptor = default, Option<string> primaryLearningDeviceAccessDescriptor = default, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor = default, Option<string> primaryLearningDeviceProviderDescriptor = default, Option<string> sexDescriptor = default, Option<string> supporterMilitaryConnectionDescriptor = default, Option<string> genderIdentity = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<bool> internetAccessInResidence = default, Option<string> loginId = default, Option<string> profileThumbnail = default, Option<bool> useSnapshot = default, Option<string> studentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentEducationOrganizationAssociations(pageToken, studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, id, loginId, profileThumbnail, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                FormatGetStudentEducationOrganizationAssociations(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref educationOrganizationId, ref studentUniqueId, ref barrierToInternetAccessInResidenceDescriptor, ref internetAccessTypeInResidenceDescriptor, ref internetPerformanceInResidenceDescriptor, ref limitedEnglishProficiencyDescriptor, ref primaryLearningDeviceAccessDescriptor, ref primaryLearningDeviceAwayFromSchoolDescriptor, ref primaryLearningDeviceProviderDescriptor, ref sexDescriptor, ref supporterMilitaryConnectionDescriptor, ref genderIdentity, ref hispanicLatinoEthnicity, ref id, ref internetAccessInResidence, ref loginId, ref profileThumbnail, ref useSnapshot, ref studentIdentificationSystemDescriptor, ref assigningOrganizationIdentificationCode, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentEducationOrganizationAssociations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentEducationOrganizationAssociations");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (barrierToInternetAccessInResidenceDescriptor.IsSet)
                        parseQueryStringLocalVar["barrierToInternetAccessInResidenceDescriptor"] = ClientUtils.ParameterToString(barrierToInternetAccessInResidenceDescriptor.Value);

                    if (internetAccessTypeInResidenceDescriptor.IsSet)
                        parseQueryStringLocalVar["internetAccessTypeInResidenceDescriptor"] = ClientUtils.ParameterToString(internetAccessTypeInResidenceDescriptor.Value);

                    if (internetPerformanceInResidenceDescriptor.IsSet)
                        parseQueryStringLocalVar["internetPerformanceInResidenceDescriptor"] = ClientUtils.ParameterToString(internetPerformanceInResidenceDescriptor.Value);

                    if (limitedEnglishProficiencyDescriptor.IsSet)
                        parseQueryStringLocalVar["limitedEnglishProficiencyDescriptor"] = ClientUtils.ParameterToString(limitedEnglishProficiencyDescriptor.Value);

                    if (primaryLearningDeviceAccessDescriptor.IsSet)
                        parseQueryStringLocalVar["primaryLearningDeviceAccessDescriptor"] = ClientUtils.ParameterToString(primaryLearningDeviceAccessDescriptor.Value);

                    if (primaryLearningDeviceAwayFromSchoolDescriptor.IsSet)
                        parseQueryStringLocalVar["primaryLearningDeviceAwayFromSchoolDescriptor"] = ClientUtils.ParameterToString(primaryLearningDeviceAwayFromSchoolDescriptor.Value);

                    if (primaryLearningDeviceProviderDescriptor.IsSet)
                        parseQueryStringLocalVar["primaryLearningDeviceProviderDescriptor"] = ClientUtils.ParameterToString(primaryLearningDeviceProviderDescriptor.Value);

                    if (sexDescriptor.IsSet)
                        parseQueryStringLocalVar["sexDescriptor"] = ClientUtils.ParameterToString(sexDescriptor.Value);

                    if (supporterMilitaryConnectionDescriptor.IsSet)
                        parseQueryStringLocalVar["supporterMilitaryConnectionDescriptor"] = ClientUtils.ParameterToString(supporterMilitaryConnectionDescriptor.Value);

                    if (genderIdentity.IsSet)
                        parseQueryStringLocalVar["genderIdentity"] = ClientUtils.ParameterToString(genderIdentity.Value);

                    if (hispanicLatinoEthnicity.IsSet)
                        parseQueryStringLocalVar["hispanicLatinoEthnicity"] = ClientUtils.ParameterToString(hispanicLatinoEthnicity.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (internetAccessInResidence.IsSet)
                        parseQueryStringLocalVar["internetAccessInResidence"] = ClientUtils.ParameterToString(internetAccessInResidence.Value);

                    if (loginId.IsSet)
                        parseQueryStringLocalVar["loginId"] = ClientUtils.ParameterToString(loginId.Value);

                    if (profileThumbnail.IsSet)
                        parseQueryStringLocalVar["profileThumbnail"] = ClientUtils.ParameterToString(profileThumbnail.Value);

                    if (studentIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["studentIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(studentIdentificationSystemDescriptor.Value);

                    if (assigningOrganizationIdentificationCode.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentEducationOrganizationAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentEducationOrganizationAssociationsApiResponse>();

                        GetStudentEducationOrganizationAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentEducationOrganizationAssociations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentEducationOrganizationAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, educationOrganizationId, studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, hispanicLatinoEthnicity, id, internetAccessInResidence, loginId, profileThumbnail, useSnapshot, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                        Events.ExecuteOnGetStudentEducationOrganizationAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentEducationOrganizationAssociationsDefaultImplementation(e, "/ed-fi/studentEducationOrganizationAssociations", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, educationOrganizationId, studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, hispanicLatinoEthnicity, id, internetAccessInResidence, loginId, profileThumbnail, useSnapshot, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
                Events.ExecuteOnErrorGetStudentEducationOrganizationAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentEducationOrganizationAssociationsApiResponse"/>
        /// </summary>
        public partial class GetStudentEducationOrganizationAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentEducationOrganizationAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentEducationOrganizationAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentEducationOrganizationAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentEducationOrganizationAssociationsApiResponse(ILogger<GetStudentEducationOrganizationAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiStudentEducationOrganizationAssociation>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiStudentEducationOrganizationAssociation>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiStudentEducationOrganizationAssociation>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentEducationOrganizationAssociationsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetStudentEducationOrganizationAssociationsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentEducationOrganizationAssociationsByIdDefaultImplementation(IGetStudentEducationOrganizationAssociationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentEducationOrganizationAssociationsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentEducationOrganizationAssociationsById(ref bool suppressDefaultLog, IGetStudentEducationOrganizationAssociationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentEducationOrganizationAssociationsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentEducationOrganizationAssociationsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentEducationOrganizationAssociationsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentEducationOrganizationAssociationsByIdApiResponse?> GetStudentEducationOrganizationAssociationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentEducationOrganizationAssociationsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentEducationOrganizationAssociationsByIdApiResponse> GetStudentEducationOrganizationAssociationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentEducationOrganizationAssociationsById(id, ifNoneMatch);

                FormatGetStudentEducationOrganizationAssociationsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentEducationOrganizationAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentEducationOrganizationAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentEducationOrganizationAssociationsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentEducationOrganizationAssociationsByIdApiResponse>();

                        GetStudentEducationOrganizationAssociationsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentEducationOrganizationAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentEducationOrganizationAssociationsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetStudentEducationOrganizationAssociationsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentEducationOrganizationAssociationsByIdDefaultImplementation(e, "/ed-fi/studentEducationOrganizationAssociations/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetStudentEducationOrganizationAssociationsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentEducationOrganizationAssociationsByIdApiResponse"/>
        /// </summary>
        public partial class GetStudentEducationOrganizationAssociationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentEducationOrganizationAssociationsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentEducationOrganizationAssociationsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentEducationOrganizationAssociationsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentEducationOrganizationAssociationsByIdApiResponse(ILogger<GetStudentEducationOrganizationAssociationsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentEducationOrganizationAssociation? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentEducationOrganizationAssociation>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentEducationOrganizationAssociation? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentEducationOrganizationAssociationsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<long> educationOrganizationId, ref Option<string> studentUniqueId, ref Option<string> barrierToInternetAccessInResidenceDescriptor, ref Option<string> internetAccessTypeInResidenceDescriptor, ref Option<string> internetPerformanceInResidenceDescriptor, ref Option<string> limitedEnglishProficiencyDescriptor, ref Option<string> primaryLearningDeviceAccessDescriptor, ref Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, ref Option<string> primaryLearningDeviceProviderDescriptor, ref Option<string> sexDescriptor, ref Option<string> supporterMilitaryConnectionDescriptor, ref Option<string> genderIdentity, ref Option<bool> hispanicLatinoEthnicity, ref Option<string> id, ref Option<bool> internetAccessInResidence, ref Option<string> loginId, ref Option<string> profileThumbnail, ref Option<bool> useSnapshot, ref Option<string> studentIdentificationSystemDescriptor, ref Option<string> assigningOrganizationIdentificationCode, ref Option<string> identificationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="studentUniqueId"></param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor"></param>
        /// <param name="internetAccessTypeInResidenceDescriptor"></param>
        /// <param name="internetPerformanceInResidenceDescriptor"></param>
        /// <param name="limitedEnglishProficiencyDescriptor"></param>
        /// <param name="primaryLearningDeviceAccessDescriptor"></param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor"></param>
        /// <param name="primaryLearningDeviceProviderDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="supporterMilitaryConnectionDescriptor"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="id"></param>
        /// <param name="loginId"></param>
        /// <param name="profileThumbnail"></param>
        /// <param name="studentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        /// <returns></returns>
        private void ValidateGetStudentEducationOrganizationAssociationsPartitions(Option<string> studentUniqueId, Option<string> barrierToInternetAccessInResidenceDescriptor, Option<string> internetAccessTypeInResidenceDescriptor, Option<string> internetPerformanceInResidenceDescriptor, Option<string> limitedEnglishProficiencyDescriptor, Option<string> primaryLearningDeviceAccessDescriptor, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, Option<string> primaryLearningDeviceProviderDescriptor, Option<string> sexDescriptor, Option<string> supporterMilitaryConnectionDescriptor, Option<string> genderIdentity, Option<string> id, Option<string> loginId, Option<string> profileThumbnail, Option<string> studentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (barrierToInternetAccessInResidenceDescriptor.IsSet && barrierToInternetAccessInResidenceDescriptor.Value == null)
                throw new ArgumentNullException(nameof(barrierToInternetAccessInResidenceDescriptor));

            if (internetAccessTypeInResidenceDescriptor.IsSet && internetAccessTypeInResidenceDescriptor.Value == null)
                throw new ArgumentNullException(nameof(internetAccessTypeInResidenceDescriptor));

            if (internetPerformanceInResidenceDescriptor.IsSet && internetPerformanceInResidenceDescriptor.Value == null)
                throw new ArgumentNullException(nameof(internetPerformanceInResidenceDescriptor));

            if (limitedEnglishProficiencyDescriptor.IsSet && limitedEnglishProficiencyDescriptor.Value == null)
                throw new ArgumentNullException(nameof(limitedEnglishProficiencyDescriptor));

            if (primaryLearningDeviceAccessDescriptor.IsSet && primaryLearningDeviceAccessDescriptor.Value == null)
                throw new ArgumentNullException(nameof(primaryLearningDeviceAccessDescriptor));

            if (primaryLearningDeviceAwayFromSchoolDescriptor.IsSet && primaryLearningDeviceAwayFromSchoolDescriptor.Value == null)
                throw new ArgumentNullException(nameof(primaryLearningDeviceAwayFromSchoolDescriptor));

            if (primaryLearningDeviceProviderDescriptor.IsSet && primaryLearningDeviceProviderDescriptor.Value == null)
                throw new ArgumentNullException(nameof(primaryLearningDeviceProviderDescriptor));

            if (sexDescriptor.IsSet && sexDescriptor.Value == null)
                throw new ArgumentNullException(nameof(sexDescriptor));

            if (supporterMilitaryConnectionDescriptor.IsSet && supporterMilitaryConnectionDescriptor.Value == null)
                throw new ArgumentNullException(nameof(supporterMilitaryConnectionDescriptor));

            if (genderIdentity.IsSet && genderIdentity.Value == null)
                throw new ArgumentNullException(nameof(genderIdentity));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (loginId.IsSet && loginId.Value == null)
                throw new ArgumentNullException(nameof(loginId));

            if (profileThumbnail.IsSet && profileThumbnail.Value == null)
                throw new ArgumentNullException(nameof(profileThumbnail));

            if (studentIdentificationSystemDescriptor.IsSet && studentIdentificationSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(studentIdentificationSystemDescriptor));

            if (assigningOrganizationIdentificationCode.IsSet && assigningOrganizationIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(assigningOrganizationIdentificationCode));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor"></param>
        /// <param name="internetAccessTypeInResidenceDescriptor"></param>
        /// <param name="internetPerformanceInResidenceDescriptor"></param>
        /// <param name="limitedEnglishProficiencyDescriptor"></param>
        /// <param name="primaryLearningDeviceAccessDescriptor"></param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor"></param>
        /// <param name="primaryLearningDeviceProviderDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="supporterMilitaryConnectionDescriptor"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="internetAccessInResidence"></param>
        /// <param name="loginId"></param>
        /// <param name="profileThumbnail"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="studentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void AfterGetStudentEducationOrganizationAssociationsPartitionsDefaultImplementation(IGetStudentEducationOrganizationAssociationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> educationOrganizationId, Option<string> studentUniqueId, Option<string> barrierToInternetAccessInResidenceDescriptor, Option<string> internetAccessTypeInResidenceDescriptor, Option<string> internetPerformanceInResidenceDescriptor, Option<string> limitedEnglishProficiencyDescriptor, Option<string> primaryLearningDeviceAccessDescriptor, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, Option<string> primaryLearningDeviceProviderDescriptor, Option<string> sexDescriptor, Option<string> supporterMilitaryConnectionDescriptor, Option<string> genderIdentity, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<bool> internetAccessInResidence, Option<string> loginId, Option<string> profileThumbnail, Option<bool> useSnapshot, Option<string> studentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentEducationOrganizationAssociationsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, educationOrganizationId, studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, hispanicLatinoEthnicity, id, internetAccessInResidence, loginId, profileThumbnail, useSnapshot, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor"></param>
        /// <param name="internetAccessTypeInResidenceDescriptor"></param>
        /// <param name="internetPerformanceInResidenceDescriptor"></param>
        /// <param name="limitedEnglishProficiencyDescriptor"></param>
        /// <param name="primaryLearningDeviceAccessDescriptor"></param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor"></param>
        /// <param name="primaryLearningDeviceProviderDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="supporterMilitaryConnectionDescriptor"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="internetAccessInResidence"></param>
        /// <param name="loginId"></param>
        /// <param name="profileThumbnail"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="studentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void AfterGetStudentEducationOrganizationAssociationsPartitions(ref bool suppressDefaultLog, IGetStudentEducationOrganizationAssociationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> educationOrganizationId, Option<string> studentUniqueId, Option<string> barrierToInternetAccessInResidenceDescriptor, Option<string> internetAccessTypeInResidenceDescriptor, Option<string> internetPerformanceInResidenceDescriptor, Option<string> limitedEnglishProficiencyDescriptor, Option<string> primaryLearningDeviceAccessDescriptor, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, Option<string> primaryLearningDeviceProviderDescriptor, Option<string> sexDescriptor, Option<string> supporterMilitaryConnectionDescriptor, Option<string> genderIdentity, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<bool> internetAccessInResidence, Option<string> loginId, Option<string> profileThumbnail, Option<bool> useSnapshot, Option<string> studentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor"></param>
        /// <param name="internetAccessTypeInResidenceDescriptor"></param>
        /// <param name="internetPerformanceInResidenceDescriptor"></param>
        /// <param name="limitedEnglishProficiencyDescriptor"></param>
        /// <param name="primaryLearningDeviceAccessDescriptor"></param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor"></param>
        /// <param name="primaryLearningDeviceProviderDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="supporterMilitaryConnectionDescriptor"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="internetAccessInResidence"></param>
        /// <param name="loginId"></param>
        /// <param name="profileThumbnail"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="studentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        private void OnErrorGetStudentEducationOrganizationAssociationsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> educationOrganizationId, Option<string> studentUniqueId, Option<string> barrierToInternetAccessInResidenceDescriptor, Option<string> internetAccessTypeInResidenceDescriptor, Option<string> internetPerformanceInResidenceDescriptor, Option<string> limitedEnglishProficiencyDescriptor, Option<string> primaryLearningDeviceAccessDescriptor, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, Option<string> primaryLearningDeviceProviderDescriptor, Option<string> sexDescriptor, Option<string> supporterMilitaryConnectionDescriptor, Option<string> genderIdentity, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<bool> internetAccessInResidence, Option<string> loginId, Option<string> profileThumbnail, Option<bool> useSnapshot, Option<string> studentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentEducationOrganizationAssociationsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, educationOrganizationId, studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, hispanicLatinoEthnicity, id, internetAccessInResidence, loginId, profileThumbnail, useSnapshot, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor"></param>
        /// <param name="internetAccessTypeInResidenceDescriptor"></param>
        /// <param name="internetPerformanceInResidenceDescriptor"></param>
        /// <param name="limitedEnglishProficiencyDescriptor"></param>
        /// <param name="primaryLearningDeviceAccessDescriptor"></param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor"></param>
        /// <param name="primaryLearningDeviceProviderDescriptor"></param>
        /// <param name="sexDescriptor"></param>
        /// <param name="supporterMilitaryConnectionDescriptor"></param>
        /// <param name="genderIdentity"></param>
        /// <param name="hispanicLatinoEthnicity"></param>
        /// <param name="id"></param>
        /// <param name="internetAccessInResidence"></param>
        /// <param name="loginId"></param>
        /// <param name="profileThumbnail"></param>
        /// <param name="useSnapshot"></param>
        /// <param name="studentIdentificationSystemDescriptor"></param>
        /// <param name="assigningOrganizationIdentificationCode"></param>
        /// <param name="identificationCode"></param>
        partial void OnErrorGetStudentEducationOrganizationAssociationsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<long> educationOrganizationId, Option<string> studentUniqueId, Option<string> barrierToInternetAccessInResidenceDescriptor, Option<string> internetAccessTypeInResidenceDescriptor, Option<string> internetPerformanceInResidenceDescriptor, Option<string> limitedEnglishProficiencyDescriptor, Option<string> primaryLearningDeviceAccessDescriptor, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor, Option<string> primaryLearningDeviceProviderDescriptor, Option<string> sexDescriptor, Option<string> supporterMilitaryConnectionDescriptor, Option<string> genderIdentity, Option<bool> hispanicLatinoEthnicity, Option<string> id, Option<bool> internetAccessInResidence, Option<string> loginId, Option<string> profileThumbnail, Option<bool> useSnapshot, Option<string> studentIdentificationSystemDescriptor, Option<string> assigningOrganizationIdentificationCode, Option<string> identificationCode);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor">An indication of the barrier to having internet access in the student s primary place of residence. (optional)</param>
        /// <param name="internetAccessTypeInResidenceDescriptor">The primary type of internet service used in the student s primary place of residence. (optional)</param>
        /// <param name="internetPerformanceInResidenceDescriptor">An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="primaryLearningDeviceAccessDescriptor">An indication of whether the primary learning device is shared or not shared with another individual. (optional)</param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor">The type of device the student uses most often to complete learning activities away from school. (optional)</param>
        /// <param name="primaryLearningDeviceProviderDescriptor">The provider of the primary learning device. (optional)</param>
        /// <param name="sexDescriptor">The student&#39;s birth sex as reported to the education organization. (optional)</param>
        /// <param name="supporterMilitaryConnectionDescriptor">Military connection of the person/people whom the student is a dependent of. (optional)</param>
        /// <param name="genderIdentity">The student&#39;s gender as last reported to the education organization. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="internetAccessInResidence">An indication of whether the student is able to access the internet in their primary place of residence. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="profileThumbnail">Locator reference for the student photo. The specification for that reference is left to local definition. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="studentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the StudentIdentificationCode. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentEducationOrganizationAssociationsPartitionsApiResponse?> GetStudentEducationOrganizationAssociationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> educationOrganizationId = default, Option<string> studentUniqueId = default, Option<string> barrierToInternetAccessInResidenceDescriptor = default, Option<string> internetAccessTypeInResidenceDescriptor = default, Option<string> internetPerformanceInResidenceDescriptor = default, Option<string> limitedEnglishProficiencyDescriptor = default, Option<string> primaryLearningDeviceAccessDescriptor = default, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor = default, Option<string> primaryLearningDeviceProviderDescriptor = default, Option<string> sexDescriptor = default, Option<string> supporterMilitaryConnectionDescriptor = default, Option<string> genderIdentity = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<bool> internetAccessInResidence = default, Option<string> loginId = default, Option<string> profileThumbnail = default, Option<bool> useSnapshot = default, Option<string> studentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentEducationOrganizationAssociationsPartitionsAsync(number, minChangeVersion, maxChangeVersion, educationOrganizationId, studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, hispanicLatinoEthnicity, id, internetAccessInResidence, loginId, profileThumbnail, useSnapshot, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="barrierToInternetAccessInResidenceDescriptor">An indication of the barrier to having internet access in the student s primary place of residence. (optional)</param>
        /// <param name="internetAccessTypeInResidenceDescriptor">The primary type of internet service used in the student s primary place of residence. (optional)</param>
        /// <param name="internetPerformanceInResidenceDescriptor">An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="primaryLearningDeviceAccessDescriptor">An indication of whether the primary learning device is shared or not shared with another individual. (optional)</param>
        /// <param name="primaryLearningDeviceAwayFromSchoolDescriptor">The type of device the student uses most often to complete learning activities away from school. (optional)</param>
        /// <param name="primaryLearningDeviceProviderDescriptor">The provider of the primary learning device. (optional)</param>
        /// <param name="sexDescriptor">The student&#39;s birth sex as reported to the education organization. (optional)</param>
        /// <param name="supporterMilitaryConnectionDescriptor">Military connection of the person/people whom the student is a dependent of. (optional)</param>
        /// <param name="genderIdentity">The student&#39;s gender as last reported to the education organization. (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="internetAccessInResidence">An indication of whether the student is able to access the internet in their primary place of residence. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="profileThumbnail">Locator reference for the student photo. The specification for that reference is left to local definition. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="studentIdentificationSystemDescriptor">A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the StudentIdentificationCode. (optional)</param>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentEducationOrganizationAssociationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentEducationOrganizationAssociationsPartitionsApiResponse> GetStudentEducationOrganizationAssociationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<long> educationOrganizationId = default, Option<string> studentUniqueId = default, Option<string> barrierToInternetAccessInResidenceDescriptor = default, Option<string> internetAccessTypeInResidenceDescriptor = default, Option<string> internetPerformanceInResidenceDescriptor = default, Option<string> limitedEnglishProficiencyDescriptor = default, Option<string> primaryLearningDeviceAccessDescriptor = default, Option<string> primaryLearningDeviceAwayFromSchoolDescriptor = default, Option<string> primaryLearningDeviceProviderDescriptor = default, Option<string> sexDescriptor = default, Option<string> supporterMilitaryConnectionDescriptor = default, Option<string> genderIdentity = default, Option<bool> hispanicLatinoEthnicity = default, Option<string> id = default, Option<bool> internetAccessInResidence = default, Option<string> loginId = default, Option<string> profileThumbnail = default, Option<bool> useSnapshot = default, Option<string> studentIdentificationSystemDescriptor = default, Option<string> assigningOrganizationIdentificationCode = default, Option<string> identificationCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentEducationOrganizationAssociationsPartitions(studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, id, loginId, profileThumbnail, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                FormatGetStudentEducationOrganizationAssociationsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref educationOrganizationId, ref studentUniqueId, ref barrierToInternetAccessInResidenceDescriptor, ref internetAccessTypeInResidenceDescriptor, ref internetPerformanceInResidenceDescriptor, ref limitedEnglishProficiencyDescriptor, ref primaryLearningDeviceAccessDescriptor, ref primaryLearningDeviceAwayFromSchoolDescriptor, ref primaryLearningDeviceProviderDescriptor, ref sexDescriptor, ref supporterMilitaryConnectionDescriptor, ref genderIdentity, ref hispanicLatinoEthnicity, ref id, ref internetAccessInResidence, ref loginId, ref profileThumbnail, ref useSnapshot, ref studentIdentificationSystemDescriptor, ref assigningOrganizationIdentificationCode, ref identificationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentEducationOrganizationAssociations/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentEducationOrganizationAssociations/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (barrierToInternetAccessInResidenceDescriptor.IsSet)
                        parseQueryStringLocalVar["barrierToInternetAccessInResidenceDescriptor"] = ClientUtils.ParameterToString(barrierToInternetAccessInResidenceDescriptor.Value);

                    if (internetAccessTypeInResidenceDescriptor.IsSet)
                        parseQueryStringLocalVar["internetAccessTypeInResidenceDescriptor"] = ClientUtils.ParameterToString(internetAccessTypeInResidenceDescriptor.Value);

                    if (internetPerformanceInResidenceDescriptor.IsSet)
                        parseQueryStringLocalVar["internetPerformanceInResidenceDescriptor"] = ClientUtils.ParameterToString(internetPerformanceInResidenceDescriptor.Value);

                    if (limitedEnglishProficiencyDescriptor.IsSet)
                        parseQueryStringLocalVar["limitedEnglishProficiencyDescriptor"] = ClientUtils.ParameterToString(limitedEnglishProficiencyDescriptor.Value);

                    if (primaryLearningDeviceAccessDescriptor.IsSet)
                        parseQueryStringLocalVar["primaryLearningDeviceAccessDescriptor"] = ClientUtils.ParameterToString(primaryLearningDeviceAccessDescriptor.Value);

                    if (primaryLearningDeviceAwayFromSchoolDescriptor.IsSet)
                        parseQueryStringLocalVar["primaryLearningDeviceAwayFromSchoolDescriptor"] = ClientUtils.ParameterToString(primaryLearningDeviceAwayFromSchoolDescriptor.Value);

                    if (primaryLearningDeviceProviderDescriptor.IsSet)
                        parseQueryStringLocalVar["primaryLearningDeviceProviderDescriptor"] = ClientUtils.ParameterToString(primaryLearningDeviceProviderDescriptor.Value);

                    if (sexDescriptor.IsSet)
                        parseQueryStringLocalVar["sexDescriptor"] = ClientUtils.ParameterToString(sexDescriptor.Value);

                    if (supporterMilitaryConnectionDescriptor.IsSet)
                        parseQueryStringLocalVar["supporterMilitaryConnectionDescriptor"] = ClientUtils.ParameterToString(supporterMilitaryConnectionDescriptor.Value);

                    if (genderIdentity.IsSet)
                        parseQueryStringLocalVar["genderIdentity"] = ClientUtils.ParameterToString(genderIdentity.Value);

                    if (hispanicLatinoEthnicity.IsSet)
                        parseQueryStringLocalVar["hispanicLatinoEthnicity"] = ClientUtils.ParameterToString(hispanicLatinoEthnicity.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (internetAccessInResidence.IsSet)
                        parseQueryStringLocalVar["internetAccessInResidence"] = ClientUtils.ParameterToString(internetAccessInResidence.Value);

                    if (loginId.IsSet)
                        parseQueryStringLocalVar["loginId"] = ClientUtils.ParameterToString(loginId.Value);

                    if (profileThumbnail.IsSet)
                        parseQueryStringLocalVar["profileThumbnail"] = ClientUtils.ParameterToString(profileThumbnail.Value);

                    if (studentIdentificationSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["studentIdentificationSystemDescriptor"] = ClientUtils.ParameterToString(studentIdentificationSystemDescriptor.Value);

                    if (assigningOrganizationIdentificationCode.IsSet)
                        parseQueryStringLocalVar["assigningOrganizationIdentificationCode"] = ClientUtils.ParameterToString(assigningOrganizationIdentificationCode.Value);

                    if (identificationCode.IsSet)
                        parseQueryStringLocalVar["identificationCode"] = ClientUtils.ParameterToString(identificationCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentEducationOrganizationAssociationsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentEducationOrganizationAssociationsPartitionsApiResponse>();

                        GetStudentEducationOrganizationAssociationsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentEducationOrganizationAssociations/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentEducationOrganizationAssociationsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, educationOrganizationId, studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, hispanicLatinoEthnicity, id, internetAccessInResidence, loginId, profileThumbnail, useSnapshot, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);

                        Events.ExecuteOnGetStudentEducationOrganizationAssociationsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentEducationOrganizationAssociationsPartitionsDefaultImplementation(e, "/ed-fi/studentEducationOrganizationAssociations/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, educationOrganizationId, studentUniqueId, barrierToInternetAccessInResidenceDescriptor, internetAccessTypeInResidenceDescriptor, internetPerformanceInResidenceDescriptor, limitedEnglishProficiencyDescriptor, primaryLearningDeviceAccessDescriptor, primaryLearningDeviceAwayFromSchoolDescriptor, primaryLearningDeviceProviderDescriptor, sexDescriptor, supporterMilitaryConnectionDescriptor, genderIdentity, hispanicLatinoEthnicity, id, internetAccessInResidence, loginId, profileThumbnail, useSnapshot, studentIdentificationSystemDescriptor, assigningOrganizationIdentificationCode, identificationCode);
                Events.ExecuteOnErrorGetStudentEducationOrganizationAssociationsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentEducationOrganizationAssociationsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetStudentEducationOrganizationAssociationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentEducationOrganizationAssociationsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentEducationOrganizationAssociationsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentEducationOrganizationAssociationsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentEducationOrganizationAssociationsPartitionsApiResponse(ILogger<GetStudentEducationOrganizationAssociationsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesStudentEducationOrganizationAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesStudentEducationOrganizationAssociationsDefaultImplementation(IKeyChangesStudentEducationOrganizationAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesStudentEducationOrganizationAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesStudentEducationOrganizationAssociations(ref bool suppressDefaultLog, IKeyChangesStudentEducationOrganizationAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesStudentEducationOrganizationAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesStudentEducationOrganizationAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesStudentEducationOrganizationAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentEducationOrganizationAssociationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentEducationOrganizationAssociationsApiResponse?> KeyChangesStudentEducationOrganizationAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesStudentEducationOrganizationAssociationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentEducationOrganizationAssociationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentEducationOrganizationAssociationsApiResponse> KeyChangesStudentEducationOrganizationAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesStudentEducationOrganizationAssociations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentEducationOrganizationAssociations/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentEducationOrganizationAssociations/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesStudentEducationOrganizationAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesStudentEducationOrganizationAssociationsApiResponse>();

                        KeyChangesStudentEducationOrganizationAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentEducationOrganizationAssociations/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesStudentEducationOrganizationAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesStudentEducationOrganizationAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesStudentEducationOrganizationAssociationsDefaultImplementation(e, "/ed-fi/studentEducationOrganizationAssociations/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesStudentEducationOrganizationAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesStudentEducationOrganizationAssociationsApiResponse"/>
        /// </summary>
        public partial class KeyChangesStudentEducationOrganizationAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesStudentEducationOrganizationAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesStudentEducationOrganizationAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesStudentEducationOrganizationAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesStudentEducationOrganizationAssociationsApiResponse(ILogger<KeyChangesStudentEducationOrganizationAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostStudentEducationOrganizationAssociation(EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiStudentEducationOrganizationAssociation"></param>
        /// <returns></returns>
        private void ValidatePostStudentEducationOrganizationAssociation(EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation)
        {
            if (edFiStudentEducationOrganizationAssociation == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentEducationOrganizationAssociation"></param>
        private void AfterPostStudentEducationOrganizationAssociationDefaultImplementation(IPostStudentEducationOrganizationAssociationApiResponse apiResponseLocalVar, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation)
        {
            bool suppressDefaultLog = false;
            AfterPostStudentEducationOrganizationAssociation(ref suppressDefaultLog, apiResponseLocalVar, edFiStudentEducationOrganizationAssociation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentEducationOrganizationAssociation"></param>
        partial void AfterPostStudentEducationOrganizationAssociation(ref bool suppressDefaultLog, IPostStudentEducationOrganizationAssociationApiResponse apiResponseLocalVar, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentEducationOrganizationAssociation"></param>
        private void OnErrorPostStudentEducationOrganizationAssociationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostStudentEducationOrganizationAssociation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiStudentEducationOrganizationAssociation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentEducationOrganizationAssociation"></param>
        partial void OnErrorPostStudentEducationOrganizationAssociation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiStudentEducationOrganizationAssociation">The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentEducationOrganizationAssociationApiResponse"/>&gt;</returns>
        public async Task<IPostStudentEducationOrganizationAssociationApiResponse?> PostStudentEducationOrganizationAssociationOrDefaultAsync(EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostStudentEducationOrganizationAssociationAsync(edFiStudentEducationOrganizationAssociation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentEducationOrganizationAssociation">The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentEducationOrganizationAssociationApiResponse"/>&gt;</returns>
        public async Task<IPostStudentEducationOrganizationAssociationApiResponse> PostStudentEducationOrganizationAssociationAsync(EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostStudentEducationOrganizationAssociation(edFiStudentEducationOrganizationAssociation);

                FormatPostStudentEducationOrganizationAssociation(edFiStudentEducationOrganizationAssociation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentEducationOrganizationAssociations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentEducationOrganizationAssociations");

                    httpRequestMessageLocalVar.Content = (edFiStudentEducationOrganizationAssociation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentEducationOrganizationAssociation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostStudentEducationOrganizationAssociationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostStudentEducationOrganizationAssociationApiResponse>();

                        PostStudentEducationOrganizationAssociationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentEducationOrganizationAssociations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostStudentEducationOrganizationAssociationDefaultImplementation(apiResponseLocalVar, edFiStudentEducationOrganizationAssociation);

                        Events.ExecuteOnPostStudentEducationOrganizationAssociation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostStudentEducationOrganizationAssociationDefaultImplementation(e, "/ed-fi/studentEducationOrganizationAssociations", uriBuilderLocalVar.Path, edFiStudentEducationOrganizationAssociation);
                Events.ExecuteOnErrorPostStudentEducationOrganizationAssociation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostStudentEducationOrganizationAssociationApiResponse"/>
        /// </summary>
        public partial class PostStudentEducationOrganizationAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostStudentEducationOrganizationAssociationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostStudentEducationOrganizationAssociationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostStudentEducationOrganizationAssociationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostStudentEducationOrganizationAssociationApiResponse(ILogger<PostStudentEducationOrganizationAssociationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutStudentEducationOrganizationAssociation(ref string id, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiStudentEducationOrganizationAssociation"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutStudentEducationOrganizationAssociation(string id, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiStudentEducationOrganizationAssociation == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociation));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentEducationOrganizationAssociation"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutStudentEducationOrganizationAssociationDefaultImplementation(IPutStudentEducationOrganizationAssociationApiResponse apiResponseLocalVar, string id, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutStudentEducationOrganizationAssociation(ref suppressDefaultLog, apiResponseLocalVar, id, edFiStudentEducationOrganizationAssociation, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentEducationOrganizationAssociation"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutStudentEducationOrganizationAssociation(ref bool suppressDefaultLog, IPutStudentEducationOrganizationAssociationApiResponse apiResponseLocalVar, string id, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentEducationOrganizationAssociation"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutStudentEducationOrganizationAssociationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutStudentEducationOrganizationAssociation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiStudentEducationOrganizationAssociation, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentEducationOrganizationAssociation"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutStudentEducationOrganizationAssociation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentEducationOrganizationAssociation">The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentEducationOrganizationAssociationApiResponse"/>&gt;</returns>
        public async Task<IPutStudentEducationOrganizationAssociationApiResponse?> PutStudentEducationOrganizationAssociationOrDefaultAsync(string id, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutStudentEducationOrganizationAssociationAsync(id, edFiStudentEducationOrganizationAssociation, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentEducationOrganizationAssociation">The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentEducationOrganizationAssociationApiResponse"/>&gt;</returns>
        public async Task<IPutStudentEducationOrganizationAssociationApiResponse> PutStudentEducationOrganizationAssociationAsync(string id, EdFiStudentEducationOrganizationAssociation edFiStudentEducationOrganizationAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutStudentEducationOrganizationAssociation(id, edFiStudentEducationOrganizationAssociation, ifMatch);

                FormatPutStudentEducationOrganizationAssociation(ref id, edFiStudentEducationOrganizationAssociation, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentEducationOrganizationAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentEducationOrganizationAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiStudentEducationOrganizationAssociation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentEducationOrganizationAssociation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutStudentEducationOrganizationAssociationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutStudentEducationOrganizationAssociationApiResponse>();

                        PutStudentEducationOrganizationAssociationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentEducationOrganizationAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutStudentEducationOrganizationAssociationDefaultImplementation(apiResponseLocalVar, id, edFiStudentEducationOrganizationAssociation, ifMatch);

                        Events.ExecuteOnPutStudentEducationOrganizationAssociation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutStudentEducationOrganizationAssociationDefaultImplementation(e, "/ed-fi/studentEducationOrganizationAssociations/{id}", uriBuilderLocalVar.Path, id, edFiStudentEducationOrganizationAssociation, ifMatch);
                Events.ExecuteOnErrorPutStudentEducationOrganizationAssociation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutStudentEducationOrganizationAssociationApiResponse"/>
        /// </summary>
        public partial class PutStudentEducationOrganizationAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutStudentEducationOrganizationAssociationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutStudentEducationOrganizationAssociationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutStudentEducationOrganizationAssociationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutStudentEducationOrganizationAssociationApiResponse(ILogger<PutStudentEducationOrganizationAssociationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
