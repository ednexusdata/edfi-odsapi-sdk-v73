// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStudentGradebookEntriesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StudentGradebookEntriesApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentGradebookEntryByIdApiResponse"/>&gt;</returns>
        Task<IDeleteStudentGradebookEntryByIdApiResponse> DeleteStudentGradebookEntryByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentGradebookEntryByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteStudentGradebookEntryByIdApiResponse?> DeleteStudentGradebookEntryByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentGradebookEntriesApiResponse"/>&gt;</returns>
        Task<IDeletesStudentGradebookEntriesApiResponse> DeletesStudentGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentGradebookEntriesApiResponse"/>?&gt;</returns>
        Task<IDeletesStudentGradebookEntriesApiResponse?> DeletesStudentGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="assignmentLateStatusDescriptor">Status of whether the assignment was submitted after the due date and/or marked as. (optional)</param>
        /// <param name="competencyLevelDescriptor">The competency level assessed for the student for the referenced learning objective. (optional)</param>
        /// <param name="submissionStatusDescriptor">The status of the student&#39;s submission. (optional)</param>
        /// <param name="dateFulfilled">The date an assignment was turned in or the date of an assessment. (optional)</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="pointsEarned">The points earned for the submission. With extra credit, the points earned may exceed the max points. (optional)</param>
        /// <param name="timeFulfilled">The time an assignment was turned in on the date fulfilled. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesApiResponse"/>&gt;</returns>
        Task<IGetStudentGradebookEntriesApiResponse> GetStudentGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<string> assignmentLateStatusDescriptor = default, Option<string> competencyLevelDescriptor = default, Option<string> submissionStatusDescriptor = default, Option<DateOnly> dateFulfilled = default, Option<string> diagnosticStatement = default, Option<string> id = default, Option<string> letterGradeEarned = default, Option<double> numericGradeEarned = default, Option<double> pointsEarned = default, Option<string> timeFulfilled = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="assignmentLateStatusDescriptor">Status of whether the assignment was submitted after the due date and/or marked as. (optional)</param>
        /// <param name="competencyLevelDescriptor">The competency level assessed for the student for the referenced learning objective. (optional)</param>
        /// <param name="submissionStatusDescriptor">The status of the student&#39;s submission. (optional)</param>
        /// <param name="dateFulfilled">The date an assignment was turned in or the date of an assessment. (optional)</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="pointsEarned">The points earned for the submission. With extra credit, the points earned may exceed the max points. (optional)</param>
        /// <param name="timeFulfilled">The time an assignment was turned in on the date fulfilled. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesApiResponse"/>?&gt;</returns>
        Task<IGetStudentGradebookEntriesApiResponse?> GetStudentGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<string> assignmentLateStatusDescriptor = default, Option<string> competencyLevelDescriptor = default, Option<string> submissionStatusDescriptor = default, Option<DateOnly> dateFulfilled = default, Option<string> diagnosticStatement = default, Option<string> id = default, Option<string> letterGradeEarned = default, Option<double> numericGradeEarned = default, Option<double> pointsEarned = default, Option<string> timeFulfilled = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesByIdApiResponse"/>&gt;</returns>
        Task<IGetStudentGradebookEntriesByIdApiResponse> GetStudentGradebookEntriesByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesByIdApiResponse"/>?&gt;</returns>
        Task<IGetStudentGradebookEntriesByIdApiResponse?> GetStudentGradebookEntriesByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="assignmentLateStatusDescriptor">Status of whether the assignment was submitted after the due date and/or marked as. (optional)</param>
        /// <param name="competencyLevelDescriptor">The competency level assessed for the student for the referenced learning objective. (optional)</param>
        /// <param name="submissionStatusDescriptor">The status of the student&#39;s submission. (optional)</param>
        /// <param name="dateFulfilled">The date an assignment was turned in or the date of an assessment. (optional)</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="pointsEarned">The points earned for the submission. With extra credit, the points earned may exceed the max points. (optional)</param>
        /// <param name="timeFulfilled">The time an assignment was turned in on the date fulfilled. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesPartitionsApiResponse"/>&gt;</returns>
        Task<IGetStudentGradebookEntriesPartitionsApiResponse> GetStudentGradebookEntriesPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<string> assignmentLateStatusDescriptor = default, Option<string> competencyLevelDescriptor = default, Option<string> submissionStatusDescriptor = default, Option<DateOnly> dateFulfilled = default, Option<string> diagnosticStatement = default, Option<string> id = default, Option<string> letterGradeEarned = default, Option<double> numericGradeEarned = default, Option<double> pointsEarned = default, Option<string> timeFulfilled = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="assignmentLateStatusDescriptor">Status of whether the assignment was submitted after the due date and/or marked as. (optional)</param>
        /// <param name="competencyLevelDescriptor">The competency level assessed for the student for the referenced learning objective. (optional)</param>
        /// <param name="submissionStatusDescriptor">The status of the student&#39;s submission. (optional)</param>
        /// <param name="dateFulfilled">The date an assignment was turned in or the date of an assessment. (optional)</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="pointsEarned">The points earned for the submission. With extra credit, the points earned may exceed the max points. (optional)</param>
        /// <param name="timeFulfilled">The time an assignment was turned in on the date fulfilled. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetStudentGradebookEntriesPartitionsApiResponse?> GetStudentGradebookEntriesPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<string> assignmentLateStatusDescriptor = default, Option<string> competencyLevelDescriptor = default, Option<string> submissionStatusDescriptor = default, Option<DateOnly> dateFulfilled = default, Option<string> diagnosticStatement = default, Option<string> id = default, Option<string> letterGradeEarned = default, Option<double> numericGradeEarned = default, Option<double> pointsEarned = default, Option<string> timeFulfilled = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentGradebookEntriesApiResponse"/>&gt;</returns>
        Task<IKeyChangesStudentGradebookEntriesApiResponse> KeyChangesStudentGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentGradebookEntriesApiResponse"/>?&gt;</returns>
        Task<IKeyChangesStudentGradebookEntriesApiResponse?> KeyChangesStudentGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentGradebookEntry">The JSON representation of the \&quot;studentGradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentGradebookEntryApiResponse"/>&gt;</returns>
        Task<IPostStudentGradebookEntryApiResponse> PostStudentGradebookEntryAsync(EdFiStudentGradebookEntry edFiStudentGradebookEntry, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiStudentGradebookEntry">The JSON representation of the \&quot;studentGradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentGradebookEntryApiResponse"/>?&gt;</returns>
        Task<IPostStudentGradebookEntryApiResponse?> PostStudentGradebookEntryOrDefaultAsync(EdFiStudentGradebookEntry edFiStudentGradebookEntry, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentGradebookEntry">The JSON representation of the \&quot;studentGradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentGradebookEntryApiResponse"/>&gt;</returns>
        Task<IPutStudentGradebookEntryApiResponse> PutStudentGradebookEntryAsync(string id, EdFiStudentGradebookEntry edFiStudentGradebookEntry, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentGradebookEntry">The JSON representation of the \&quot;studentGradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentGradebookEntryApiResponse"/>?&gt;</returns>
        Task<IPutStudentGradebookEntryApiResponse?> PutStudentGradebookEntryOrDefaultAsync(string id, EdFiStudentGradebookEntry edFiStudentGradebookEntry, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteStudentGradebookEntryByIdApiResponse"/>
    /// </summary>
    public interface IDeleteStudentGradebookEntryByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesStudentGradebookEntriesApiResponse"/>
    /// </summary>
    public interface IDeletesStudentGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentGradebookEntryDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentGradebookEntriesApiResponse"/>
    /// </summary>
    public interface IGetStudentGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiStudentGradebookEntry>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentGradebookEntriesByIdApiResponse"/>
    /// </summary>
    public interface IGetStudentGradebookEntriesByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentGradebookEntry?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentGradebookEntriesPartitionsApiResponse"/>
    /// </summary>
    public interface IGetStudentGradebookEntriesPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesStudentGradebookEntriesApiResponse"/>
    /// </summary>
    public interface IKeyChangesStudentGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentGradebookEntryKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostStudentGradebookEntryApiResponse"/>
    /// </summary>
    public interface IPostStudentGradebookEntryApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutStudentGradebookEntryApiResponse"/>
    /// </summary>
    public interface IPutStudentGradebookEntryApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StudentGradebookEntriesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteStudentGradebookEntryById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteStudentGradebookEntryById;

        internal void ExecuteOnDeleteStudentGradebookEntryById(StudentGradebookEntriesApi.DeleteStudentGradebookEntryByIdApiResponse apiResponse)
        {
            OnDeleteStudentGradebookEntryById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteStudentGradebookEntryById(Exception exception)
        {
            OnErrorDeleteStudentGradebookEntryById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesStudentGradebookEntries;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesStudentGradebookEntries;

        internal void ExecuteOnDeletesStudentGradebookEntries(StudentGradebookEntriesApi.DeletesStudentGradebookEntriesApiResponse apiResponse)
        {
            OnDeletesStudentGradebookEntries?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesStudentGradebookEntries(Exception exception)
        {
            OnErrorDeletesStudentGradebookEntries?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentGradebookEntries;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentGradebookEntries;

        internal void ExecuteOnGetStudentGradebookEntries(StudentGradebookEntriesApi.GetStudentGradebookEntriesApiResponse apiResponse)
        {
            OnGetStudentGradebookEntries?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentGradebookEntries(Exception exception)
        {
            OnErrorGetStudentGradebookEntries?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentGradebookEntriesById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentGradebookEntriesById;

        internal void ExecuteOnGetStudentGradebookEntriesById(StudentGradebookEntriesApi.GetStudentGradebookEntriesByIdApiResponse apiResponse)
        {
            OnGetStudentGradebookEntriesById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentGradebookEntriesById(Exception exception)
        {
            OnErrorGetStudentGradebookEntriesById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentGradebookEntriesPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentGradebookEntriesPartitions;

        internal void ExecuteOnGetStudentGradebookEntriesPartitions(StudentGradebookEntriesApi.GetStudentGradebookEntriesPartitionsApiResponse apiResponse)
        {
            OnGetStudentGradebookEntriesPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentGradebookEntriesPartitions(Exception exception)
        {
            OnErrorGetStudentGradebookEntriesPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesStudentGradebookEntries;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesStudentGradebookEntries;

        internal void ExecuteOnKeyChangesStudentGradebookEntries(StudentGradebookEntriesApi.KeyChangesStudentGradebookEntriesApiResponse apiResponse)
        {
            OnKeyChangesStudentGradebookEntries?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesStudentGradebookEntries(Exception exception)
        {
            OnErrorKeyChangesStudentGradebookEntries?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostStudentGradebookEntry;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostStudentGradebookEntry;

        internal void ExecuteOnPostStudentGradebookEntry(StudentGradebookEntriesApi.PostStudentGradebookEntryApiResponse apiResponse)
        {
            OnPostStudentGradebookEntry?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostStudentGradebookEntry(Exception exception)
        {
            OnErrorPostStudentGradebookEntry?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutStudentGradebookEntry;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutStudentGradebookEntry;

        internal void ExecuteOnPutStudentGradebookEntry(StudentGradebookEntriesApi.PutStudentGradebookEntryApiResponse apiResponse)
        {
            OnPutStudentGradebookEntry?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutStudentGradebookEntry(Exception exception)
        {
            OnErrorPutStudentGradebookEntry?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StudentGradebookEntriesApi : IStudentGradebookEntriesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StudentGradebookEntriesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StudentGradebookEntriesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentGradebookEntriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentGradebookEntriesApi(ILogger<StudentGradebookEntriesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StudentGradebookEntriesApiEvents studentGradebookEntriesApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StudentGradebookEntriesApi>();
            HttpClient = httpClient;
            Events = studentGradebookEntriesApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteStudentGradebookEntryById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteStudentGradebookEntryById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteStudentGradebookEntryByIdDefaultImplementation(IDeleteStudentGradebookEntryByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteStudentGradebookEntryById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteStudentGradebookEntryById(ref bool suppressDefaultLog, IDeleteStudentGradebookEntryByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteStudentGradebookEntryByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteStudentGradebookEntryById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteStudentGradebookEntryById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentGradebookEntryByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentGradebookEntryByIdApiResponse?> DeleteStudentGradebookEntryByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteStudentGradebookEntryByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentGradebookEntryByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentGradebookEntryByIdApiResponse> DeleteStudentGradebookEntryByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteStudentGradebookEntryById(id, ifMatch);

                FormatDeleteStudentGradebookEntryById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentGradebookEntries/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentGradebookEntries/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteStudentGradebookEntryByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteStudentGradebookEntryByIdApiResponse>();

                        DeleteStudentGradebookEntryByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentGradebookEntries/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteStudentGradebookEntryByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteStudentGradebookEntryById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteStudentGradebookEntryByIdDefaultImplementation(e, "/ed-fi/studentGradebookEntries/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteStudentGradebookEntryById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteStudentGradebookEntryByIdApiResponse"/>
        /// </summary>
        public partial class DeleteStudentGradebookEntryByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteStudentGradebookEntryByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteStudentGradebookEntryByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteStudentGradebookEntryByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteStudentGradebookEntryByIdApiResponse(ILogger<DeleteStudentGradebookEntryByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesStudentGradebookEntries(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesStudentGradebookEntriesDefaultImplementation(IDeletesStudentGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesStudentGradebookEntries(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesStudentGradebookEntries(ref bool suppressDefaultLog, IDeletesStudentGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesStudentGradebookEntriesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesStudentGradebookEntries(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesStudentGradebookEntries(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentGradebookEntriesApiResponse?> DeletesStudentGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesStudentGradebookEntriesAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentGradebookEntriesApiResponse> DeletesStudentGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesStudentGradebookEntries(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentGradebookEntries/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentGradebookEntries/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesStudentGradebookEntriesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesStudentGradebookEntriesApiResponse>();

                        DeletesStudentGradebookEntriesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentGradebookEntries/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesStudentGradebookEntriesDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesStudentGradebookEntries(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesStudentGradebookEntriesDefaultImplementation(e, "/ed-fi/studentGradebookEntries/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesStudentGradebookEntries(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesStudentGradebookEntriesApiResponse"/>
        /// </summary>
        public partial class DeletesStudentGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesStudentGradebookEntriesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesStudentGradebookEntriesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesStudentGradebookEntriesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesStudentGradebookEntriesApiResponse(ILogger<DeletesStudentGradebookEntriesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentGradebookEntryDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentGradebookEntryDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentGradebookEntryDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentGradebookEntries(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> gradebookEntryIdentifier, ref Option<string> varNamespace, ref Option<string> studentUniqueId, ref Option<string> assignmentLateStatusDescriptor, ref Option<string> competencyLevelDescriptor, ref Option<string> submissionStatusDescriptor, ref Option<DateOnly> dateFulfilled, ref Option<string> diagnosticStatement, ref Option<string> id, ref Option<string> letterGradeEarned, ref Option<double> numericGradeEarned, ref Option<double> pointsEarned, ref Option<string> timeFulfilled, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="assignmentLateStatusDescriptor"></param>
        /// <param name="competencyLevelDescriptor"></param>
        /// <param name="submissionStatusDescriptor"></param>
        /// <param name="diagnosticStatement"></param>
        /// <param name="id"></param>
        /// <param name="letterGradeEarned"></param>
        /// <param name="timeFulfilled"></param>
        /// <returns></returns>
        private void ValidateGetStudentGradebookEntries(Option<string> pageToken, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<string> assignmentLateStatusDescriptor, Option<string> competencyLevelDescriptor, Option<string> submissionStatusDescriptor, Option<string> diagnosticStatement, Option<string> id, Option<string> letterGradeEarned, Option<string> timeFulfilled)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (gradebookEntryIdentifier.IsSet && gradebookEntryIdentifier.Value == null)
                throw new ArgumentNullException(nameof(gradebookEntryIdentifier));

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (assignmentLateStatusDescriptor.IsSet && assignmentLateStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(assignmentLateStatusDescriptor));

            if (competencyLevelDescriptor.IsSet && competencyLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(competencyLevelDescriptor));

            if (submissionStatusDescriptor.IsSet && submissionStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(submissionStatusDescriptor));

            if (diagnosticStatement.IsSet && diagnosticStatement.Value == null)
                throw new ArgumentNullException(nameof(diagnosticStatement));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (letterGradeEarned.IsSet && letterGradeEarned.Value == null)
                throw new ArgumentNullException(nameof(letterGradeEarned));

            if (timeFulfilled.IsSet && timeFulfilled.Value == null)
                throw new ArgumentNullException(nameof(timeFulfilled));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="assignmentLateStatusDescriptor"></param>
        /// <param name="competencyLevelDescriptor"></param>
        /// <param name="submissionStatusDescriptor"></param>
        /// <param name="dateFulfilled"></param>
        /// <param name="diagnosticStatement"></param>
        /// <param name="id"></param>
        /// <param name="letterGradeEarned"></param>
        /// <param name="numericGradeEarned"></param>
        /// <param name="pointsEarned"></param>
        /// <param name="timeFulfilled"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentGradebookEntriesDefaultImplementation(IGetStudentGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<string> assignmentLateStatusDescriptor, Option<string> competencyLevelDescriptor, Option<string> submissionStatusDescriptor, Option<DateOnly> dateFulfilled, Option<string> diagnosticStatement, Option<string> id, Option<string> letterGradeEarned, Option<double> numericGradeEarned, Option<double> pointsEarned, Option<string> timeFulfilled, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentGradebookEntries(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, dateFulfilled, diagnosticStatement, id, letterGradeEarned, numericGradeEarned, pointsEarned, timeFulfilled, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="assignmentLateStatusDescriptor"></param>
        /// <param name="competencyLevelDescriptor"></param>
        /// <param name="submissionStatusDescriptor"></param>
        /// <param name="dateFulfilled"></param>
        /// <param name="diagnosticStatement"></param>
        /// <param name="id"></param>
        /// <param name="letterGradeEarned"></param>
        /// <param name="numericGradeEarned"></param>
        /// <param name="pointsEarned"></param>
        /// <param name="timeFulfilled"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentGradebookEntries(ref bool suppressDefaultLog, IGetStudentGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<string> assignmentLateStatusDescriptor, Option<string> competencyLevelDescriptor, Option<string> submissionStatusDescriptor, Option<DateOnly> dateFulfilled, Option<string> diagnosticStatement, Option<string> id, Option<string> letterGradeEarned, Option<double> numericGradeEarned, Option<double> pointsEarned, Option<string> timeFulfilled, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="assignmentLateStatusDescriptor"></param>
        /// <param name="competencyLevelDescriptor"></param>
        /// <param name="submissionStatusDescriptor"></param>
        /// <param name="dateFulfilled"></param>
        /// <param name="diagnosticStatement"></param>
        /// <param name="id"></param>
        /// <param name="letterGradeEarned"></param>
        /// <param name="numericGradeEarned"></param>
        /// <param name="pointsEarned"></param>
        /// <param name="timeFulfilled"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentGradebookEntriesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<string> assignmentLateStatusDescriptor, Option<string> competencyLevelDescriptor, Option<string> submissionStatusDescriptor, Option<DateOnly> dateFulfilled, Option<string> diagnosticStatement, Option<string> id, Option<string> letterGradeEarned, Option<double> numericGradeEarned, Option<double> pointsEarned, Option<string> timeFulfilled, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentGradebookEntries(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, dateFulfilled, diagnosticStatement, id, letterGradeEarned, numericGradeEarned, pointsEarned, timeFulfilled, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="assignmentLateStatusDescriptor"></param>
        /// <param name="competencyLevelDescriptor"></param>
        /// <param name="submissionStatusDescriptor"></param>
        /// <param name="dateFulfilled"></param>
        /// <param name="diagnosticStatement"></param>
        /// <param name="id"></param>
        /// <param name="letterGradeEarned"></param>
        /// <param name="numericGradeEarned"></param>
        /// <param name="pointsEarned"></param>
        /// <param name="timeFulfilled"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentGradebookEntries(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<string> assignmentLateStatusDescriptor, Option<string> competencyLevelDescriptor, Option<string> submissionStatusDescriptor, Option<DateOnly> dateFulfilled, Option<string> diagnosticStatement, Option<string> id, Option<string> letterGradeEarned, Option<double> numericGradeEarned, Option<double> pointsEarned, Option<string> timeFulfilled, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="assignmentLateStatusDescriptor">Status of whether the assignment was submitted after the due date and/or marked as. (optional)</param>
        /// <param name="competencyLevelDescriptor">The competency level assessed for the student for the referenced learning objective. (optional)</param>
        /// <param name="submissionStatusDescriptor">The status of the student&#39;s submission. (optional)</param>
        /// <param name="dateFulfilled">The date an assignment was turned in or the date of an assessment. (optional)</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="pointsEarned">The points earned for the submission. With extra credit, the points earned may exceed the max points. (optional)</param>
        /// <param name="timeFulfilled">The time an assignment was turned in on the date fulfilled. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IGetStudentGradebookEntriesApiResponse?> GetStudentGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<string> assignmentLateStatusDescriptor = default, Option<string> competencyLevelDescriptor = default, Option<string> submissionStatusDescriptor = default, Option<DateOnly> dateFulfilled = default, Option<string> diagnosticStatement = default, Option<string> id = default, Option<string> letterGradeEarned = default, Option<double> numericGradeEarned = default, Option<double> pointsEarned = default, Option<string> timeFulfilled = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentGradebookEntriesAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, dateFulfilled, diagnosticStatement, id, letterGradeEarned, numericGradeEarned, pointsEarned, timeFulfilled, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="assignmentLateStatusDescriptor">Status of whether the assignment was submitted after the due date and/or marked as. (optional)</param>
        /// <param name="competencyLevelDescriptor">The competency level assessed for the student for the referenced learning objective. (optional)</param>
        /// <param name="submissionStatusDescriptor">The status of the student&#39;s submission. (optional)</param>
        /// <param name="dateFulfilled">The date an assignment was turned in or the date of an assessment. (optional)</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="pointsEarned">The points earned for the submission. With extra credit, the points earned may exceed the max points. (optional)</param>
        /// <param name="timeFulfilled">The time an assignment was turned in on the date fulfilled. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IGetStudentGradebookEntriesApiResponse> GetStudentGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<string> assignmentLateStatusDescriptor = default, Option<string> competencyLevelDescriptor = default, Option<string> submissionStatusDescriptor = default, Option<DateOnly> dateFulfilled = default, Option<string> diagnosticStatement = default, Option<string> id = default, Option<string> letterGradeEarned = default, Option<double> numericGradeEarned = default, Option<double> pointsEarned = default, Option<string> timeFulfilled = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentGradebookEntries(pageToken, gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, diagnosticStatement, id, letterGradeEarned, timeFulfilled);

                FormatGetStudentGradebookEntries(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref gradebookEntryIdentifier, ref varNamespace, ref studentUniqueId, ref assignmentLateStatusDescriptor, ref competencyLevelDescriptor, ref submissionStatusDescriptor, ref dateFulfilled, ref diagnosticStatement, ref id, ref letterGradeEarned, ref numericGradeEarned, ref pointsEarned, ref timeFulfilled, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentGradebookEntries"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentGradebookEntries");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (gradebookEntryIdentifier.IsSet)
                        parseQueryStringLocalVar["gradebookEntryIdentifier"] = ClientUtils.ParameterToString(gradebookEntryIdentifier.Value);

                    if (varNamespace.IsSet)
                        parseQueryStringLocalVar["namespace"] = ClientUtils.ParameterToString(varNamespace.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (assignmentLateStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["assignmentLateStatusDescriptor"] = ClientUtils.ParameterToString(assignmentLateStatusDescriptor.Value);

                    if (competencyLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["competencyLevelDescriptor"] = ClientUtils.ParameterToString(competencyLevelDescriptor.Value);

                    if (submissionStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["submissionStatusDescriptor"] = ClientUtils.ParameterToString(submissionStatusDescriptor.Value);

                    if (dateFulfilled.IsSet)
                        parseQueryStringLocalVar["dateFulfilled"] = ClientUtils.ParameterToString(dateFulfilled.Value);

                    if (diagnosticStatement.IsSet)
                        parseQueryStringLocalVar["diagnosticStatement"] = ClientUtils.ParameterToString(diagnosticStatement.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (letterGradeEarned.IsSet)
                        parseQueryStringLocalVar["letterGradeEarned"] = ClientUtils.ParameterToString(letterGradeEarned.Value);

                    if (numericGradeEarned.IsSet)
                        parseQueryStringLocalVar["numericGradeEarned"] = ClientUtils.ParameterToString(numericGradeEarned.Value);

                    if (pointsEarned.IsSet)
                        parseQueryStringLocalVar["pointsEarned"] = ClientUtils.ParameterToString(pointsEarned.Value);

                    if (timeFulfilled.IsSet)
                        parseQueryStringLocalVar["timeFulfilled"] = ClientUtils.ParameterToString(timeFulfilled.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentGradebookEntriesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentGradebookEntriesApiResponse>();

                        GetStudentGradebookEntriesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentGradebookEntries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentGradebookEntriesDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, dateFulfilled, diagnosticStatement, id, letterGradeEarned, numericGradeEarned, pointsEarned, timeFulfilled, useSnapshot);

                        Events.ExecuteOnGetStudentGradebookEntries(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentGradebookEntriesDefaultImplementation(e, "/ed-fi/studentGradebookEntries", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, dateFulfilled, diagnosticStatement, id, letterGradeEarned, numericGradeEarned, pointsEarned, timeFulfilled, useSnapshot);
                Events.ExecuteOnErrorGetStudentGradebookEntries(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentGradebookEntriesApiResponse"/>
        /// </summary>
        public partial class GetStudentGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentGradebookEntriesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentGradebookEntriesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentGradebookEntriesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentGradebookEntriesApiResponse(ILogger<GetStudentGradebookEntriesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiStudentGradebookEntry>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiStudentGradebookEntry>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiStudentGradebookEntry>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentGradebookEntriesById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetStudentGradebookEntriesById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentGradebookEntriesByIdDefaultImplementation(IGetStudentGradebookEntriesByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentGradebookEntriesById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentGradebookEntriesById(ref bool suppressDefaultLog, IGetStudentGradebookEntriesByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentGradebookEntriesByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentGradebookEntriesById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentGradebookEntriesById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentGradebookEntriesByIdApiResponse?> GetStudentGradebookEntriesByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentGradebookEntriesByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentGradebookEntriesByIdApiResponse> GetStudentGradebookEntriesByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentGradebookEntriesById(id, ifNoneMatch);

                FormatGetStudentGradebookEntriesById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentGradebookEntries/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentGradebookEntries/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentGradebookEntriesByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentGradebookEntriesByIdApiResponse>();

                        GetStudentGradebookEntriesByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentGradebookEntries/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentGradebookEntriesByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetStudentGradebookEntriesById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentGradebookEntriesByIdDefaultImplementation(e, "/ed-fi/studentGradebookEntries/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetStudentGradebookEntriesById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentGradebookEntriesByIdApiResponse"/>
        /// </summary>
        public partial class GetStudentGradebookEntriesByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentGradebookEntriesByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentGradebookEntriesByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentGradebookEntriesByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentGradebookEntriesByIdApiResponse(ILogger<GetStudentGradebookEntriesByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentGradebookEntry? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentGradebookEntry>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentGradebookEntry? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentGradebookEntriesPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> gradebookEntryIdentifier, ref Option<string> varNamespace, ref Option<string> studentUniqueId, ref Option<string> assignmentLateStatusDescriptor, ref Option<string> competencyLevelDescriptor, ref Option<string> submissionStatusDescriptor, ref Option<DateOnly> dateFulfilled, ref Option<string> diagnosticStatement, ref Option<string> id, ref Option<string> letterGradeEarned, ref Option<double> numericGradeEarned, ref Option<double> pointsEarned, ref Option<string> timeFulfilled, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="assignmentLateStatusDescriptor"></param>
        /// <param name="competencyLevelDescriptor"></param>
        /// <param name="submissionStatusDescriptor"></param>
        /// <param name="diagnosticStatement"></param>
        /// <param name="id"></param>
        /// <param name="letterGradeEarned"></param>
        /// <param name="timeFulfilled"></param>
        /// <returns></returns>
        private void ValidateGetStudentGradebookEntriesPartitions(Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<string> assignmentLateStatusDescriptor, Option<string> competencyLevelDescriptor, Option<string> submissionStatusDescriptor, Option<string> diagnosticStatement, Option<string> id, Option<string> letterGradeEarned, Option<string> timeFulfilled)
        {
            if (gradebookEntryIdentifier.IsSet && gradebookEntryIdentifier.Value == null)
                throw new ArgumentNullException(nameof(gradebookEntryIdentifier));

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (assignmentLateStatusDescriptor.IsSet && assignmentLateStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(assignmentLateStatusDescriptor));

            if (competencyLevelDescriptor.IsSet && competencyLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(competencyLevelDescriptor));

            if (submissionStatusDescriptor.IsSet && submissionStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(submissionStatusDescriptor));

            if (diagnosticStatement.IsSet && diagnosticStatement.Value == null)
                throw new ArgumentNullException(nameof(diagnosticStatement));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (letterGradeEarned.IsSet && letterGradeEarned.Value == null)
                throw new ArgumentNullException(nameof(letterGradeEarned));

            if (timeFulfilled.IsSet && timeFulfilled.Value == null)
                throw new ArgumentNullException(nameof(timeFulfilled));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="assignmentLateStatusDescriptor"></param>
        /// <param name="competencyLevelDescriptor"></param>
        /// <param name="submissionStatusDescriptor"></param>
        /// <param name="dateFulfilled"></param>
        /// <param name="diagnosticStatement"></param>
        /// <param name="id"></param>
        /// <param name="letterGradeEarned"></param>
        /// <param name="numericGradeEarned"></param>
        /// <param name="pointsEarned"></param>
        /// <param name="timeFulfilled"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentGradebookEntriesPartitionsDefaultImplementation(IGetStudentGradebookEntriesPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<string> assignmentLateStatusDescriptor, Option<string> competencyLevelDescriptor, Option<string> submissionStatusDescriptor, Option<DateOnly> dateFulfilled, Option<string> diagnosticStatement, Option<string> id, Option<string> letterGradeEarned, Option<double> numericGradeEarned, Option<double> pointsEarned, Option<string> timeFulfilled, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentGradebookEntriesPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, dateFulfilled, diagnosticStatement, id, letterGradeEarned, numericGradeEarned, pointsEarned, timeFulfilled, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="assignmentLateStatusDescriptor"></param>
        /// <param name="competencyLevelDescriptor"></param>
        /// <param name="submissionStatusDescriptor"></param>
        /// <param name="dateFulfilled"></param>
        /// <param name="diagnosticStatement"></param>
        /// <param name="id"></param>
        /// <param name="letterGradeEarned"></param>
        /// <param name="numericGradeEarned"></param>
        /// <param name="pointsEarned"></param>
        /// <param name="timeFulfilled"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentGradebookEntriesPartitions(ref bool suppressDefaultLog, IGetStudentGradebookEntriesPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<string> assignmentLateStatusDescriptor, Option<string> competencyLevelDescriptor, Option<string> submissionStatusDescriptor, Option<DateOnly> dateFulfilled, Option<string> diagnosticStatement, Option<string> id, Option<string> letterGradeEarned, Option<double> numericGradeEarned, Option<double> pointsEarned, Option<string> timeFulfilled, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="assignmentLateStatusDescriptor"></param>
        /// <param name="competencyLevelDescriptor"></param>
        /// <param name="submissionStatusDescriptor"></param>
        /// <param name="dateFulfilled"></param>
        /// <param name="diagnosticStatement"></param>
        /// <param name="id"></param>
        /// <param name="letterGradeEarned"></param>
        /// <param name="numericGradeEarned"></param>
        /// <param name="pointsEarned"></param>
        /// <param name="timeFulfilled"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentGradebookEntriesPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<string> assignmentLateStatusDescriptor, Option<string> competencyLevelDescriptor, Option<string> submissionStatusDescriptor, Option<DateOnly> dateFulfilled, Option<string> diagnosticStatement, Option<string> id, Option<string> letterGradeEarned, Option<double> numericGradeEarned, Option<double> pointsEarned, Option<string> timeFulfilled, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentGradebookEntriesPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, dateFulfilled, diagnosticStatement, id, letterGradeEarned, numericGradeEarned, pointsEarned, timeFulfilled, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="gradebookEntryIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="assignmentLateStatusDescriptor"></param>
        /// <param name="competencyLevelDescriptor"></param>
        /// <param name="submissionStatusDescriptor"></param>
        /// <param name="dateFulfilled"></param>
        /// <param name="diagnosticStatement"></param>
        /// <param name="id"></param>
        /// <param name="letterGradeEarned"></param>
        /// <param name="numericGradeEarned"></param>
        /// <param name="pointsEarned"></param>
        /// <param name="timeFulfilled"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentGradebookEntriesPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> gradebookEntryIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<string> assignmentLateStatusDescriptor, Option<string> competencyLevelDescriptor, Option<string> submissionStatusDescriptor, Option<DateOnly> dateFulfilled, Option<string> diagnosticStatement, Option<string> id, Option<string> letterGradeEarned, Option<double> numericGradeEarned, Option<double> pointsEarned, Option<string> timeFulfilled, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="assignmentLateStatusDescriptor">Status of whether the assignment was submitted after the due date and/or marked as. (optional)</param>
        /// <param name="competencyLevelDescriptor">The competency level assessed for the student for the referenced learning objective. (optional)</param>
        /// <param name="submissionStatusDescriptor">The status of the student&#39;s submission. (optional)</param>
        /// <param name="dateFulfilled">The date an assignment was turned in or the date of an assessment. (optional)</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="pointsEarned">The points earned for the submission. With extra credit, the points earned may exceed the max points. (optional)</param>
        /// <param name="timeFulfilled">The time an assignment was turned in on the date fulfilled. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentGradebookEntriesPartitionsApiResponse?> GetStudentGradebookEntriesPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<string> assignmentLateStatusDescriptor = default, Option<string> competencyLevelDescriptor = default, Option<string> submissionStatusDescriptor = default, Option<DateOnly> dateFulfilled = default, Option<string> diagnosticStatement = default, Option<string> id = default, Option<string> letterGradeEarned = default, Option<double> numericGradeEarned = default, Option<double> pointsEarned = default, Option<string> timeFulfilled = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentGradebookEntriesPartitionsAsync(number, minChangeVersion, maxChangeVersion, gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, dateFulfilled, diagnosticStatement, id, letterGradeEarned, numericGradeEarned, pointsEarned, timeFulfilled, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system. (optional)</param>
        /// <param name="varNamespace">Namespace URI for the source of the gradebook entry. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="assignmentLateStatusDescriptor">Status of whether the assignment was submitted after the due date and/or marked as. (optional)</param>
        /// <param name="competencyLevelDescriptor">The competency level assessed for the student for the referenced learning objective. (optional)</param>
        /// <param name="submissionStatusDescriptor">The status of the student&#39;s submission. (optional)</param>
        /// <param name="dateFulfilled">The date an assignment was turned in or the date of an assessment. (optional)</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor. (optional)</param>
        /// <param name="pointsEarned">The points earned for the submission. With extra credit, the points earned may exceed the max points. (optional)</param>
        /// <param name="timeFulfilled">The time an assignment was turned in on the date fulfilled. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentGradebookEntriesPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentGradebookEntriesPartitionsApiResponse> GetStudentGradebookEntriesPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> gradebookEntryIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<string> assignmentLateStatusDescriptor = default, Option<string> competencyLevelDescriptor = default, Option<string> submissionStatusDescriptor = default, Option<DateOnly> dateFulfilled = default, Option<string> diagnosticStatement = default, Option<string> id = default, Option<string> letterGradeEarned = default, Option<double> numericGradeEarned = default, Option<double> pointsEarned = default, Option<string> timeFulfilled = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentGradebookEntriesPartitions(gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, diagnosticStatement, id, letterGradeEarned, timeFulfilled);

                FormatGetStudentGradebookEntriesPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref gradebookEntryIdentifier, ref varNamespace, ref studentUniqueId, ref assignmentLateStatusDescriptor, ref competencyLevelDescriptor, ref submissionStatusDescriptor, ref dateFulfilled, ref diagnosticStatement, ref id, ref letterGradeEarned, ref numericGradeEarned, ref pointsEarned, ref timeFulfilled, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentGradebookEntries/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentGradebookEntries/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (gradebookEntryIdentifier.IsSet)
                        parseQueryStringLocalVar["gradebookEntryIdentifier"] = ClientUtils.ParameterToString(gradebookEntryIdentifier.Value);

                    if (varNamespace.IsSet)
                        parseQueryStringLocalVar["namespace"] = ClientUtils.ParameterToString(varNamespace.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (assignmentLateStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["assignmentLateStatusDescriptor"] = ClientUtils.ParameterToString(assignmentLateStatusDescriptor.Value);

                    if (competencyLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["competencyLevelDescriptor"] = ClientUtils.ParameterToString(competencyLevelDescriptor.Value);

                    if (submissionStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["submissionStatusDescriptor"] = ClientUtils.ParameterToString(submissionStatusDescriptor.Value);

                    if (dateFulfilled.IsSet)
                        parseQueryStringLocalVar["dateFulfilled"] = ClientUtils.ParameterToString(dateFulfilled.Value);

                    if (diagnosticStatement.IsSet)
                        parseQueryStringLocalVar["diagnosticStatement"] = ClientUtils.ParameterToString(diagnosticStatement.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (letterGradeEarned.IsSet)
                        parseQueryStringLocalVar["letterGradeEarned"] = ClientUtils.ParameterToString(letterGradeEarned.Value);

                    if (numericGradeEarned.IsSet)
                        parseQueryStringLocalVar["numericGradeEarned"] = ClientUtils.ParameterToString(numericGradeEarned.Value);

                    if (pointsEarned.IsSet)
                        parseQueryStringLocalVar["pointsEarned"] = ClientUtils.ParameterToString(pointsEarned.Value);

                    if (timeFulfilled.IsSet)
                        parseQueryStringLocalVar["timeFulfilled"] = ClientUtils.ParameterToString(timeFulfilled.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentGradebookEntriesPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentGradebookEntriesPartitionsApiResponse>();

                        GetStudentGradebookEntriesPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentGradebookEntries/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentGradebookEntriesPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, dateFulfilled, diagnosticStatement, id, letterGradeEarned, numericGradeEarned, pointsEarned, timeFulfilled, useSnapshot);

                        Events.ExecuteOnGetStudentGradebookEntriesPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentGradebookEntriesPartitionsDefaultImplementation(e, "/ed-fi/studentGradebookEntries/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, gradebookEntryIdentifier, varNamespace, studentUniqueId, assignmentLateStatusDescriptor, competencyLevelDescriptor, submissionStatusDescriptor, dateFulfilled, diagnosticStatement, id, letterGradeEarned, numericGradeEarned, pointsEarned, timeFulfilled, useSnapshot);
                Events.ExecuteOnErrorGetStudentGradebookEntriesPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentGradebookEntriesPartitionsApiResponse"/>
        /// </summary>
        public partial class GetStudentGradebookEntriesPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentGradebookEntriesPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentGradebookEntriesPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentGradebookEntriesPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentGradebookEntriesPartitionsApiResponse(ILogger<GetStudentGradebookEntriesPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesStudentGradebookEntries(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesStudentGradebookEntriesDefaultImplementation(IKeyChangesStudentGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesStudentGradebookEntries(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesStudentGradebookEntries(ref bool suppressDefaultLog, IKeyChangesStudentGradebookEntriesApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesStudentGradebookEntriesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesStudentGradebookEntries(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesStudentGradebookEntries(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentGradebookEntriesApiResponse?> KeyChangesStudentGradebookEntriesOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesStudentGradebookEntriesAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentGradebookEntriesApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentGradebookEntriesApiResponse> KeyChangesStudentGradebookEntriesAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesStudentGradebookEntries(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentGradebookEntries/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentGradebookEntries/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesStudentGradebookEntriesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesStudentGradebookEntriesApiResponse>();

                        KeyChangesStudentGradebookEntriesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentGradebookEntries/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesStudentGradebookEntriesDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesStudentGradebookEntries(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesStudentGradebookEntriesDefaultImplementation(e, "/ed-fi/studentGradebookEntries/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesStudentGradebookEntries(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesStudentGradebookEntriesApiResponse"/>
        /// </summary>
        public partial class KeyChangesStudentGradebookEntriesApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesStudentGradebookEntriesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesStudentGradebookEntriesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesStudentGradebookEntriesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesStudentGradebookEntriesApiResponse(ILogger<KeyChangesStudentGradebookEntriesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentGradebookEntryKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentGradebookEntryKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentGradebookEntryKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostStudentGradebookEntry(EdFiStudentGradebookEntry edFiStudentGradebookEntry);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiStudentGradebookEntry"></param>
        /// <returns></returns>
        private void ValidatePostStudentGradebookEntry(EdFiStudentGradebookEntry edFiStudentGradebookEntry)
        {
            if (edFiStudentGradebookEntry == null)
                throw new ArgumentNullException(nameof(edFiStudentGradebookEntry));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentGradebookEntry"></param>
        private void AfterPostStudentGradebookEntryDefaultImplementation(IPostStudentGradebookEntryApiResponse apiResponseLocalVar, EdFiStudentGradebookEntry edFiStudentGradebookEntry)
        {
            bool suppressDefaultLog = false;
            AfterPostStudentGradebookEntry(ref suppressDefaultLog, apiResponseLocalVar, edFiStudentGradebookEntry);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentGradebookEntry"></param>
        partial void AfterPostStudentGradebookEntry(ref bool suppressDefaultLog, IPostStudentGradebookEntryApiResponse apiResponseLocalVar, EdFiStudentGradebookEntry edFiStudentGradebookEntry);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentGradebookEntry"></param>
        private void OnErrorPostStudentGradebookEntryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentGradebookEntry edFiStudentGradebookEntry)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostStudentGradebookEntry(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiStudentGradebookEntry);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentGradebookEntry"></param>
        partial void OnErrorPostStudentGradebookEntry(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentGradebookEntry edFiStudentGradebookEntry);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiStudentGradebookEntry">The JSON representation of the \&quot;studentGradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentGradebookEntryApiResponse"/>&gt;</returns>
        public async Task<IPostStudentGradebookEntryApiResponse?> PostStudentGradebookEntryOrDefaultAsync(EdFiStudentGradebookEntry edFiStudentGradebookEntry, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostStudentGradebookEntryAsync(edFiStudentGradebookEntry, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentGradebookEntry">The JSON representation of the \&quot;studentGradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentGradebookEntryApiResponse"/>&gt;</returns>
        public async Task<IPostStudentGradebookEntryApiResponse> PostStudentGradebookEntryAsync(EdFiStudentGradebookEntry edFiStudentGradebookEntry, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostStudentGradebookEntry(edFiStudentGradebookEntry);

                FormatPostStudentGradebookEntry(edFiStudentGradebookEntry);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentGradebookEntries"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentGradebookEntries");

                    httpRequestMessageLocalVar.Content = (edFiStudentGradebookEntry as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentGradebookEntry, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostStudentGradebookEntryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostStudentGradebookEntryApiResponse>();

                        PostStudentGradebookEntryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentGradebookEntries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostStudentGradebookEntryDefaultImplementation(apiResponseLocalVar, edFiStudentGradebookEntry);

                        Events.ExecuteOnPostStudentGradebookEntry(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostStudentGradebookEntryDefaultImplementation(e, "/ed-fi/studentGradebookEntries", uriBuilderLocalVar.Path, edFiStudentGradebookEntry);
                Events.ExecuteOnErrorPostStudentGradebookEntry(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostStudentGradebookEntryApiResponse"/>
        /// </summary>
        public partial class PostStudentGradebookEntryApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostStudentGradebookEntryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostStudentGradebookEntryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostStudentGradebookEntryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostStudentGradebookEntryApiResponse(ILogger<PostStudentGradebookEntryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutStudentGradebookEntry(ref string id, EdFiStudentGradebookEntry edFiStudentGradebookEntry, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiStudentGradebookEntry"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutStudentGradebookEntry(string id, EdFiStudentGradebookEntry edFiStudentGradebookEntry, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiStudentGradebookEntry == null)
                throw new ArgumentNullException(nameof(edFiStudentGradebookEntry));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentGradebookEntry"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutStudentGradebookEntryDefaultImplementation(IPutStudentGradebookEntryApiResponse apiResponseLocalVar, string id, EdFiStudentGradebookEntry edFiStudentGradebookEntry, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutStudentGradebookEntry(ref suppressDefaultLog, apiResponseLocalVar, id, edFiStudentGradebookEntry, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentGradebookEntry"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutStudentGradebookEntry(ref bool suppressDefaultLog, IPutStudentGradebookEntryApiResponse apiResponseLocalVar, string id, EdFiStudentGradebookEntry edFiStudentGradebookEntry, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentGradebookEntry"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutStudentGradebookEntryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentGradebookEntry edFiStudentGradebookEntry, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutStudentGradebookEntry(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiStudentGradebookEntry, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentGradebookEntry"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutStudentGradebookEntry(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentGradebookEntry edFiStudentGradebookEntry, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentGradebookEntry">The JSON representation of the \&quot;studentGradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentGradebookEntryApiResponse"/>&gt;</returns>
        public async Task<IPutStudentGradebookEntryApiResponse?> PutStudentGradebookEntryOrDefaultAsync(string id, EdFiStudentGradebookEntry edFiStudentGradebookEntry, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutStudentGradebookEntryAsync(id, edFiStudentGradebookEntry, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentGradebookEntry">The JSON representation of the \&quot;studentGradebookEntry\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentGradebookEntryApiResponse"/>&gt;</returns>
        public async Task<IPutStudentGradebookEntryApiResponse> PutStudentGradebookEntryAsync(string id, EdFiStudentGradebookEntry edFiStudentGradebookEntry, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutStudentGradebookEntry(id, edFiStudentGradebookEntry, ifMatch);

                FormatPutStudentGradebookEntry(ref id, edFiStudentGradebookEntry, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentGradebookEntries/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentGradebookEntries/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiStudentGradebookEntry as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentGradebookEntry, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutStudentGradebookEntryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutStudentGradebookEntryApiResponse>();

                        PutStudentGradebookEntryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentGradebookEntries/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutStudentGradebookEntryDefaultImplementation(apiResponseLocalVar, id, edFiStudentGradebookEntry, ifMatch);

                        Events.ExecuteOnPutStudentGradebookEntry(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutStudentGradebookEntryDefaultImplementation(e, "/ed-fi/studentGradebookEntries/{id}", uriBuilderLocalVar.Path, id, edFiStudentGradebookEntry, ifMatch);
                Events.ExecuteOnErrorPutStudentGradebookEntry(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutStudentGradebookEntryApiResponse"/>
        /// </summary>
        public partial class PutStudentGradebookEntryApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutStudentGradebookEntryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutStudentGradebookEntryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutStudentGradebookEntryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutStudentGradebookEntryApiResponse(ILogger<PutStudentGradebookEntryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
