// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStudentProgramEvaluationsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StudentProgramEvaluationsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentProgramEvaluationByIdApiResponse"/>&gt;</returns>
        Task<IDeleteStudentProgramEvaluationByIdApiResponse> DeleteStudentProgramEvaluationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentProgramEvaluationByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteStudentProgramEvaluationByIdApiResponse?> DeleteStudentProgramEvaluationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentProgramEvaluationsApiResponse"/>&gt;</returns>
        Task<IDeletesStudentProgramEvaluationsApiResponse> DeletesStudentProgramEvaluationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentProgramEvaluationsApiResponse"/>?&gt;</returns>
        Task<IDeletesStudentProgramEvaluationsApiResponse?> DeletesStudentProgramEvaluationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="evaluationDate">The month, day, and year on which the evaluation was conducted. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffEvaluatorStaffUniqueId">A unique alphanumeric code assigned to a staffevaluatorstaff. (optional)</param>
        /// <param name="summaryEvaluationRatingLevelDescriptor">The summary rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="evaluationDuration">The actual number of minutes to conduct the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="summaryEvaluationComment">Any comments about the summary evaluation to be captured. (optional)</param>
        /// <param name="summaryEvaluationNumericRating">The numerical summary rating or score for the evaluation. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsApiResponse"/>&gt;</returns>
        Task<IGetStudentProgramEvaluationsApiResponse> GetStudentProgramEvaluationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> evaluationDate = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<long> educationOrganizationId = default, Option<string> staffEvaluatorStaffUniqueId = default, Option<string> summaryEvaluationRatingLevelDescriptor = default, Option<int> evaluationDuration = default, Option<string> id = default, Option<string> summaryEvaluationComment = default, Option<double> summaryEvaluationNumericRating = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="evaluationDate">The month, day, and year on which the evaluation was conducted. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffEvaluatorStaffUniqueId">A unique alphanumeric code assigned to a staffevaluatorstaff. (optional)</param>
        /// <param name="summaryEvaluationRatingLevelDescriptor">The summary rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="evaluationDuration">The actual number of minutes to conduct the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="summaryEvaluationComment">Any comments about the summary evaluation to be captured. (optional)</param>
        /// <param name="summaryEvaluationNumericRating">The numerical summary rating or score for the evaluation. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsApiResponse"/>?&gt;</returns>
        Task<IGetStudentProgramEvaluationsApiResponse?> GetStudentProgramEvaluationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> evaluationDate = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<long> educationOrganizationId = default, Option<string> staffEvaluatorStaffUniqueId = default, Option<string> summaryEvaluationRatingLevelDescriptor = default, Option<int> evaluationDuration = default, Option<string> id = default, Option<string> summaryEvaluationComment = default, Option<double> summaryEvaluationNumericRating = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsByIdApiResponse"/>&gt;</returns>
        Task<IGetStudentProgramEvaluationsByIdApiResponse> GetStudentProgramEvaluationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsByIdApiResponse"/>?&gt;</returns>
        Task<IGetStudentProgramEvaluationsByIdApiResponse?> GetStudentProgramEvaluationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="evaluationDate">The month, day, and year on which the evaluation was conducted. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffEvaluatorStaffUniqueId">A unique alphanumeric code assigned to a staffevaluatorstaff. (optional)</param>
        /// <param name="summaryEvaluationRatingLevelDescriptor">The summary rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="evaluationDuration">The actual number of minutes to conduct the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="summaryEvaluationComment">Any comments about the summary evaluation to be captured. (optional)</param>
        /// <param name="summaryEvaluationNumericRating">The numerical summary rating or score for the evaluation. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetStudentProgramEvaluationsPartitionsApiResponse> GetStudentProgramEvaluationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> evaluationDate = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<long> educationOrganizationId = default, Option<string> staffEvaluatorStaffUniqueId = default, Option<string> summaryEvaluationRatingLevelDescriptor = default, Option<int> evaluationDuration = default, Option<string> id = default, Option<string> summaryEvaluationComment = default, Option<double> summaryEvaluationNumericRating = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="evaluationDate">The month, day, and year on which the evaluation was conducted. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffEvaluatorStaffUniqueId">A unique alphanumeric code assigned to a staffevaluatorstaff. (optional)</param>
        /// <param name="summaryEvaluationRatingLevelDescriptor">The summary rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="evaluationDuration">The actual number of minutes to conduct the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="summaryEvaluationComment">Any comments about the summary evaluation to be captured. (optional)</param>
        /// <param name="summaryEvaluationNumericRating">The numerical summary rating or score for the evaluation. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetStudentProgramEvaluationsPartitionsApiResponse?> GetStudentProgramEvaluationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> evaluationDate = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<long> educationOrganizationId = default, Option<string> staffEvaluatorStaffUniqueId = default, Option<string> summaryEvaluationRatingLevelDescriptor = default, Option<int> evaluationDuration = default, Option<string> id = default, Option<string> summaryEvaluationComment = default, Option<double> summaryEvaluationNumericRating = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentProgramEvaluationsApiResponse"/>&gt;</returns>
        Task<IKeyChangesStudentProgramEvaluationsApiResponse> KeyChangesStudentProgramEvaluationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentProgramEvaluationsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesStudentProgramEvaluationsApiResponse?> KeyChangesStudentProgramEvaluationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentProgramEvaluation">The JSON representation of the \&quot;studentProgramEvaluation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentProgramEvaluationApiResponse"/>&gt;</returns>
        Task<IPostStudentProgramEvaluationApiResponse> PostStudentProgramEvaluationAsync(EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiStudentProgramEvaluation">The JSON representation of the \&quot;studentProgramEvaluation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentProgramEvaluationApiResponse"/>?&gt;</returns>
        Task<IPostStudentProgramEvaluationApiResponse?> PostStudentProgramEvaluationOrDefaultAsync(EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentProgramEvaluation">The JSON representation of the \&quot;studentProgramEvaluation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentProgramEvaluationApiResponse"/>&gt;</returns>
        Task<IPutStudentProgramEvaluationApiResponse> PutStudentProgramEvaluationAsync(string id, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentProgramEvaluation">The JSON representation of the \&quot;studentProgramEvaluation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentProgramEvaluationApiResponse"/>?&gt;</returns>
        Task<IPutStudentProgramEvaluationApiResponse?> PutStudentProgramEvaluationOrDefaultAsync(string id, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteStudentProgramEvaluationByIdApiResponse"/>
    /// </summary>
    public interface IDeleteStudentProgramEvaluationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesStudentProgramEvaluationsApiResponse"/>
    /// </summary>
    public interface IDeletesStudentProgramEvaluationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentProgramEvaluationDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentProgramEvaluationsApiResponse"/>
    /// </summary>
    public interface IGetStudentProgramEvaluationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiStudentProgramEvaluation>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentProgramEvaluationsByIdApiResponse"/>
    /// </summary>
    public interface IGetStudentProgramEvaluationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentProgramEvaluation?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentProgramEvaluationsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetStudentProgramEvaluationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesStudentProgramEvaluationsApiResponse"/>
    /// </summary>
    public interface IKeyChangesStudentProgramEvaluationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentProgramEvaluationKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostStudentProgramEvaluationApiResponse"/>
    /// </summary>
    public interface IPostStudentProgramEvaluationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutStudentProgramEvaluationApiResponse"/>
    /// </summary>
    public interface IPutStudentProgramEvaluationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StudentProgramEvaluationsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteStudentProgramEvaluationById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteStudentProgramEvaluationById;

        internal void ExecuteOnDeleteStudentProgramEvaluationById(StudentProgramEvaluationsApi.DeleteStudentProgramEvaluationByIdApiResponse apiResponse)
        {
            OnDeleteStudentProgramEvaluationById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteStudentProgramEvaluationById(Exception exception)
        {
            OnErrorDeleteStudentProgramEvaluationById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesStudentProgramEvaluations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesStudentProgramEvaluations;

        internal void ExecuteOnDeletesStudentProgramEvaluations(StudentProgramEvaluationsApi.DeletesStudentProgramEvaluationsApiResponse apiResponse)
        {
            OnDeletesStudentProgramEvaluations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesStudentProgramEvaluations(Exception exception)
        {
            OnErrorDeletesStudentProgramEvaluations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentProgramEvaluations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentProgramEvaluations;

        internal void ExecuteOnGetStudentProgramEvaluations(StudentProgramEvaluationsApi.GetStudentProgramEvaluationsApiResponse apiResponse)
        {
            OnGetStudentProgramEvaluations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentProgramEvaluations(Exception exception)
        {
            OnErrorGetStudentProgramEvaluations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentProgramEvaluationsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentProgramEvaluationsById;

        internal void ExecuteOnGetStudentProgramEvaluationsById(StudentProgramEvaluationsApi.GetStudentProgramEvaluationsByIdApiResponse apiResponse)
        {
            OnGetStudentProgramEvaluationsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentProgramEvaluationsById(Exception exception)
        {
            OnErrorGetStudentProgramEvaluationsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentProgramEvaluationsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentProgramEvaluationsPartitions;

        internal void ExecuteOnGetStudentProgramEvaluationsPartitions(StudentProgramEvaluationsApi.GetStudentProgramEvaluationsPartitionsApiResponse apiResponse)
        {
            OnGetStudentProgramEvaluationsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentProgramEvaluationsPartitions(Exception exception)
        {
            OnErrorGetStudentProgramEvaluationsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesStudentProgramEvaluations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesStudentProgramEvaluations;

        internal void ExecuteOnKeyChangesStudentProgramEvaluations(StudentProgramEvaluationsApi.KeyChangesStudentProgramEvaluationsApiResponse apiResponse)
        {
            OnKeyChangesStudentProgramEvaluations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesStudentProgramEvaluations(Exception exception)
        {
            OnErrorKeyChangesStudentProgramEvaluations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostStudentProgramEvaluation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostStudentProgramEvaluation;

        internal void ExecuteOnPostStudentProgramEvaluation(StudentProgramEvaluationsApi.PostStudentProgramEvaluationApiResponse apiResponse)
        {
            OnPostStudentProgramEvaluation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostStudentProgramEvaluation(Exception exception)
        {
            OnErrorPostStudentProgramEvaluation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutStudentProgramEvaluation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutStudentProgramEvaluation;

        internal void ExecuteOnPutStudentProgramEvaluation(StudentProgramEvaluationsApi.PutStudentProgramEvaluationApiResponse apiResponse)
        {
            OnPutStudentProgramEvaluation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutStudentProgramEvaluation(Exception exception)
        {
            OnErrorPutStudentProgramEvaluation?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StudentProgramEvaluationsApi : IStudentProgramEvaluationsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StudentProgramEvaluationsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StudentProgramEvaluationsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentProgramEvaluationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentProgramEvaluationsApi(ILogger<StudentProgramEvaluationsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StudentProgramEvaluationsApiEvents studentProgramEvaluationsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StudentProgramEvaluationsApi>();
            HttpClient = httpClient;
            Events = studentProgramEvaluationsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteStudentProgramEvaluationById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteStudentProgramEvaluationById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteStudentProgramEvaluationByIdDefaultImplementation(IDeleteStudentProgramEvaluationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteStudentProgramEvaluationById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteStudentProgramEvaluationById(ref bool suppressDefaultLog, IDeleteStudentProgramEvaluationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteStudentProgramEvaluationByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteStudentProgramEvaluationById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteStudentProgramEvaluationById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentProgramEvaluationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentProgramEvaluationByIdApiResponse?> DeleteStudentProgramEvaluationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteStudentProgramEvaluationByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentProgramEvaluationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentProgramEvaluationByIdApiResponse> DeleteStudentProgramEvaluationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteStudentProgramEvaluationById(id, ifMatch);

                FormatDeleteStudentProgramEvaluationById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentProgramEvaluations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentProgramEvaluations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteStudentProgramEvaluationByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteStudentProgramEvaluationByIdApiResponse>();

                        DeleteStudentProgramEvaluationByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentProgramEvaluations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteStudentProgramEvaluationByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteStudentProgramEvaluationById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteStudentProgramEvaluationByIdDefaultImplementation(e, "/ed-fi/studentProgramEvaluations/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteStudentProgramEvaluationById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteStudentProgramEvaluationByIdApiResponse"/>
        /// </summary>
        public partial class DeleteStudentProgramEvaluationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteStudentProgramEvaluationByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteStudentProgramEvaluationByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteStudentProgramEvaluationByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteStudentProgramEvaluationByIdApiResponse(ILogger<DeleteStudentProgramEvaluationByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesStudentProgramEvaluations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesStudentProgramEvaluationsDefaultImplementation(IDeletesStudentProgramEvaluationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesStudentProgramEvaluations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesStudentProgramEvaluations(ref bool suppressDefaultLog, IDeletesStudentProgramEvaluationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesStudentProgramEvaluationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesStudentProgramEvaluations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesStudentProgramEvaluations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentProgramEvaluationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentProgramEvaluationsApiResponse?> DeletesStudentProgramEvaluationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesStudentProgramEvaluationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentProgramEvaluationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentProgramEvaluationsApiResponse> DeletesStudentProgramEvaluationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesStudentProgramEvaluations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentProgramEvaluations/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentProgramEvaluations/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesStudentProgramEvaluationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesStudentProgramEvaluationsApiResponse>();

                        DeletesStudentProgramEvaluationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentProgramEvaluations/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesStudentProgramEvaluationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesStudentProgramEvaluations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesStudentProgramEvaluationsDefaultImplementation(e, "/ed-fi/studentProgramEvaluations/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesStudentProgramEvaluations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesStudentProgramEvaluationsApiResponse"/>
        /// </summary>
        public partial class DeletesStudentProgramEvaluationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesStudentProgramEvaluationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesStudentProgramEvaluationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesStudentProgramEvaluationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesStudentProgramEvaluationsApiResponse(ILogger<DeletesStudentProgramEvaluationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentProgramEvaluationDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentProgramEvaluationDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentProgramEvaluationDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentProgramEvaluations(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<DateOnly> evaluationDate, ref Option<long> programEducationOrganizationId, ref Option<string> programEvaluationPeriodDescriptor, ref Option<string> programEvaluationTitle, ref Option<string> programEvaluationTypeDescriptor, ref Option<string> programName, ref Option<string> programTypeDescriptor, ref Option<string> studentUniqueId, ref Option<long> educationOrganizationId, ref Option<string> staffEvaluatorStaffUniqueId, ref Option<string> summaryEvaluationRatingLevelDescriptor, ref Option<int> evaluationDuration, ref Option<string> id, ref Option<string> summaryEvaluationComment, ref Option<double> summaryEvaluationNumericRating, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="staffEvaluatorStaffUniqueId"></param>
        /// <param name="summaryEvaluationRatingLevelDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="summaryEvaluationComment"></param>
        /// <returns></returns>
        private void ValidateGetStudentProgramEvaluations(Option<string> pageToken, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> staffEvaluatorStaffUniqueId, Option<string> summaryEvaluationRatingLevelDescriptor, Option<string> id, Option<string> summaryEvaluationComment)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (programEvaluationPeriodDescriptor.IsSet && programEvaluationPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationPeriodDescriptor));

            if (programEvaluationTitle.IsSet && programEvaluationTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTitle));

            if (programEvaluationTypeDescriptor.IsSet && programEvaluationTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTypeDescriptor));

            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName));

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (staffEvaluatorStaffUniqueId.IsSet && staffEvaluatorStaffUniqueId.Value == null)
                throw new ArgumentNullException(nameof(staffEvaluatorStaffUniqueId));

            if (summaryEvaluationRatingLevelDescriptor.IsSet && summaryEvaluationRatingLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(summaryEvaluationRatingLevelDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (summaryEvaluationComment.IsSet && summaryEvaluationComment.Value == null)
                throw new ArgumentNullException(nameof(summaryEvaluationComment));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="evaluationDate"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffEvaluatorStaffUniqueId"></param>
        /// <param name="summaryEvaluationRatingLevelDescriptor"></param>
        /// <param name="evaluationDuration"></param>
        /// <param name="id"></param>
        /// <param name="summaryEvaluationComment"></param>
        /// <param name="summaryEvaluationNumericRating"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentProgramEvaluationsDefaultImplementation(IGetStudentProgramEvaluationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> evaluationDate, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<long> educationOrganizationId, Option<string> staffEvaluatorStaffUniqueId, Option<string> summaryEvaluationRatingLevelDescriptor, Option<int> evaluationDuration, Option<string> id, Option<string> summaryEvaluationComment, Option<double> summaryEvaluationNumericRating, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentProgramEvaluations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, evaluationDate, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, educationOrganizationId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, evaluationDuration, id, summaryEvaluationComment, summaryEvaluationNumericRating, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="evaluationDate"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffEvaluatorStaffUniqueId"></param>
        /// <param name="summaryEvaluationRatingLevelDescriptor"></param>
        /// <param name="evaluationDuration"></param>
        /// <param name="id"></param>
        /// <param name="summaryEvaluationComment"></param>
        /// <param name="summaryEvaluationNumericRating"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentProgramEvaluations(ref bool suppressDefaultLog, IGetStudentProgramEvaluationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> evaluationDate, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<long> educationOrganizationId, Option<string> staffEvaluatorStaffUniqueId, Option<string> summaryEvaluationRatingLevelDescriptor, Option<int> evaluationDuration, Option<string> id, Option<string> summaryEvaluationComment, Option<double> summaryEvaluationNumericRating, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="evaluationDate"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffEvaluatorStaffUniqueId"></param>
        /// <param name="summaryEvaluationRatingLevelDescriptor"></param>
        /// <param name="evaluationDuration"></param>
        /// <param name="id"></param>
        /// <param name="summaryEvaluationComment"></param>
        /// <param name="summaryEvaluationNumericRating"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentProgramEvaluationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> evaluationDate, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<long> educationOrganizationId, Option<string> staffEvaluatorStaffUniqueId, Option<string> summaryEvaluationRatingLevelDescriptor, Option<int> evaluationDuration, Option<string> id, Option<string> summaryEvaluationComment, Option<double> summaryEvaluationNumericRating, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentProgramEvaluations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, evaluationDate, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, educationOrganizationId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, evaluationDuration, id, summaryEvaluationComment, summaryEvaluationNumericRating, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="evaluationDate"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffEvaluatorStaffUniqueId"></param>
        /// <param name="summaryEvaluationRatingLevelDescriptor"></param>
        /// <param name="evaluationDuration"></param>
        /// <param name="id"></param>
        /// <param name="summaryEvaluationComment"></param>
        /// <param name="summaryEvaluationNumericRating"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentProgramEvaluations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> evaluationDate, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<long> educationOrganizationId, Option<string> staffEvaluatorStaffUniqueId, Option<string> summaryEvaluationRatingLevelDescriptor, Option<int> evaluationDuration, Option<string> id, Option<string> summaryEvaluationComment, Option<double> summaryEvaluationNumericRating, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="evaluationDate">The month, day, and year on which the evaluation was conducted. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffEvaluatorStaffUniqueId">A unique alphanumeric code assigned to a staffevaluatorstaff. (optional)</param>
        /// <param name="summaryEvaluationRatingLevelDescriptor">The summary rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="evaluationDuration">The actual number of minutes to conduct the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="summaryEvaluationComment">Any comments about the summary evaluation to be captured. (optional)</param>
        /// <param name="summaryEvaluationNumericRating">The numerical summary rating or score for the evaluation. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentProgramEvaluationsApiResponse?> GetStudentProgramEvaluationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> evaluationDate = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<long> educationOrganizationId = default, Option<string> staffEvaluatorStaffUniqueId = default, Option<string> summaryEvaluationRatingLevelDescriptor = default, Option<int> evaluationDuration = default, Option<string> id = default, Option<string> summaryEvaluationComment = default, Option<double> summaryEvaluationNumericRating = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentProgramEvaluationsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, evaluationDate, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, educationOrganizationId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, evaluationDuration, id, summaryEvaluationComment, summaryEvaluationNumericRating, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="evaluationDate">The month, day, and year on which the evaluation was conducted. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffEvaluatorStaffUniqueId">A unique alphanumeric code assigned to a staffevaluatorstaff. (optional)</param>
        /// <param name="summaryEvaluationRatingLevelDescriptor">The summary rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="evaluationDuration">The actual number of minutes to conduct the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="summaryEvaluationComment">Any comments about the summary evaluation to be captured. (optional)</param>
        /// <param name="summaryEvaluationNumericRating">The numerical summary rating or score for the evaluation. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentProgramEvaluationsApiResponse> GetStudentProgramEvaluationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> evaluationDate = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<long> educationOrganizationId = default, Option<string> staffEvaluatorStaffUniqueId = default, Option<string> summaryEvaluationRatingLevelDescriptor = default, Option<int> evaluationDuration = default, Option<string> id = default, Option<string> summaryEvaluationComment = default, Option<double> summaryEvaluationNumericRating = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentProgramEvaluations(pageToken, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, id, summaryEvaluationComment);

                FormatGetStudentProgramEvaluations(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref evaluationDate, ref programEducationOrganizationId, ref programEvaluationPeriodDescriptor, ref programEvaluationTitle, ref programEvaluationTypeDescriptor, ref programName, ref programTypeDescriptor, ref studentUniqueId, ref educationOrganizationId, ref staffEvaluatorStaffUniqueId, ref summaryEvaluationRatingLevelDescriptor, ref evaluationDuration, ref id, ref summaryEvaluationComment, ref summaryEvaluationNumericRating, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentProgramEvaluations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentProgramEvaluations");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (evaluationDate.IsSet)
                        parseQueryStringLocalVar["evaluationDate"] = ClientUtils.ParameterToString(evaluationDate.Value);

                    if (programEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["programEducationOrganizationId"] = ClientUtils.ParameterToString(programEducationOrganizationId.Value);

                    if (programEvaluationPeriodDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationPeriodDescriptor"] = ClientUtils.ParameterToString(programEvaluationPeriodDescriptor.Value);

                    if (programEvaluationTitle.IsSet)
                        parseQueryStringLocalVar["programEvaluationTitle"] = ClientUtils.ParameterToString(programEvaluationTitle.Value);

                    if (programEvaluationTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationTypeDescriptor"] = ClientUtils.ParameterToString(programEvaluationTypeDescriptor.Value);

                    if (programName.IsSet)
                        parseQueryStringLocalVar["programName"] = ClientUtils.ParameterToString(programName.Value);

                    if (programTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programTypeDescriptor"] = ClientUtils.ParameterToString(programTypeDescriptor.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (staffEvaluatorStaffUniqueId.IsSet)
                        parseQueryStringLocalVar["staffEvaluatorStaffUniqueId"] = ClientUtils.ParameterToString(staffEvaluatorStaffUniqueId.Value);

                    if (summaryEvaluationRatingLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["summaryEvaluationRatingLevelDescriptor"] = ClientUtils.ParameterToString(summaryEvaluationRatingLevelDescriptor.Value);

                    if (evaluationDuration.IsSet)
                        parseQueryStringLocalVar["evaluationDuration"] = ClientUtils.ParameterToString(evaluationDuration.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (summaryEvaluationComment.IsSet)
                        parseQueryStringLocalVar["summaryEvaluationComment"] = ClientUtils.ParameterToString(summaryEvaluationComment.Value);

                    if (summaryEvaluationNumericRating.IsSet)
                        parseQueryStringLocalVar["summaryEvaluationNumericRating"] = ClientUtils.ParameterToString(summaryEvaluationNumericRating.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentProgramEvaluationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentProgramEvaluationsApiResponse>();

                        GetStudentProgramEvaluationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentProgramEvaluations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentProgramEvaluationsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, evaluationDate, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, educationOrganizationId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, evaluationDuration, id, summaryEvaluationComment, summaryEvaluationNumericRating, useSnapshot);

                        Events.ExecuteOnGetStudentProgramEvaluations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentProgramEvaluationsDefaultImplementation(e, "/ed-fi/studentProgramEvaluations", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, evaluationDate, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, educationOrganizationId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, evaluationDuration, id, summaryEvaluationComment, summaryEvaluationNumericRating, useSnapshot);
                Events.ExecuteOnErrorGetStudentProgramEvaluations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentProgramEvaluationsApiResponse"/>
        /// </summary>
        public partial class GetStudentProgramEvaluationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentProgramEvaluationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentProgramEvaluationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentProgramEvaluationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentProgramEvaluationsApiResponse(ILogger<GetStudentProgramEvaluationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiStudentProgramEvaluation>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiStudentProgramEvaluation>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiStudentProgramEvaluation>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentProgramEvaluationsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetStudentProgramEvaluationsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentProgramEvaluationsByIdDefaultImplementation(IGetStudentProgramEvaluationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentProgramEvaluationsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentProgramEvaluationsById(ref bool suppressDefaultLog, IGetStudentProgramEvaluationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentProgramEvaluationsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentProgramEvaluationsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentProgramEvaluationsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentProgramEvaluationsByIdApiResponse?> GetStudentProgramEvaluationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentProgramEvaluationsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentProgramEvaluationsByIdApiResponse> GetStudentProgramEvaluationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentProgramEvaluationsById(id, ifNoneMatch);

                FormatGetStudentProgramEvaluationsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentProgramEvaluations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentProgramEvaluations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentProgramEvaluationsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentProgramEvaluationsByIdApiResponse>();

                        GetStudentProgramEvaluationsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentProgramEvaluations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentProgramEvaluationsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetStudentProgramEvaluationsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentProgramEvaluationsByIdDefaultImplementation(e, "/ed-fi/studentProgramEvaluations/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetStudentProgramEvaluationsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentProgramEvaluationsByIdApiResponse"/>
        /// </summary>
        public partial class GetStudentProgramEvaluationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentProgramEvaluationsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentProgramEvaluationsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentProgramEvaluationsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentProgramEvaluationsByIdApiResponse(ILogger<GetStudentProgramEvaluationsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentProgramEvaluation? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentProgramEvaluation>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentProgramEvaluation? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentProgramEvaluationsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<DateOnly> evaluationDate, ref Option<long> programEducationOrganizationId, ref Option<string> programEvaluationPeriodDescriptor, ref Option<string> programEvaluationTitle, ref Option<string> programEvaluationTypeDescriptor, ref Option<string> programName, ref Option<string> programTypeDescriptor, ref Option<string> studentUniqueId, ref Option<long> educationOrganizationId, ref Option<string> staffEvaluatorStaffUniqueId, ref Option<string> summaryEvaluationRatingLevelDescriptor, ref Option<int> evaluationDuration, ref Option<string> id, ref Option<string> summaryEvaluationComment, ref Option<double> summaryEvaluationNumericRating, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="staffEvaluatorStaffUniqueId"></param>
        /// <param name="summaryEvaluationRatingLevelDescriptor"></param>
        /// <param name="id"></param>
        /// <param name="summaryEvaluationComment"></param>
        /// <returns></returns>
        private void ValidateGetStudentProgramEvaluationsPartitions(Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> staffEvaluatorStaffUniqueId, Option<string> summaryEvaluationRatingLevelDescriptor, Option<string> id, Option<string> summaryEvaluationComment)
        {
            if (programEvaluationPeriodDescriptor.IsSet && programEvaluationPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationPeriodDescriptor));

            if (programEvaluationTitle.IsSet && programEvaluationTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTitle));

            if (programEvaluationTypeDescriptor.IsSet && programEvaluationTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTypeDescriptor));

            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName));

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (staffEvaluatorStaffUniqueId.IsSet && staffEvaluatorStaffUniqueId.Value == null)
                throw new ArgumentNullException(nameof(staffEvaluatorStaffUniqueId));

            if (summaryEvaluationRatingLevelDescriptor.IsSet && summaryEvaluationRatingLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(summaryEvaluationRatingLevelDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (summaryEvaluationComment.IsSet && summaryEvaluationComment.Value == null)
                throw new ArgumentNullException(nameof(summaryEvaluationComment));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="evaluationDate"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffEvaluatorStaffUniqueId"></param>
        /// <param name="summaryEvaluationRatingLevelDescriptor"></param>
        /// <param name="evaluationDuration"></param>
        /// <param name="id"></param>
        /// <param name="summaryEvaluationComment"></param>
        /// <param name="summaryEvaluationNumericRating"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentProgramEvaluationsPartitionsDefaultImplementation(IGetStudentProgramEvaluationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> evaluationDate, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<long> educationOrganizationId, Option<string> staffEvaluatorStaffUniqueId, Option<string> summaryEvaluationRatingLevelDescriptor, Option<int> evaluationDuration, Option<string> id, Option<string> summaryEvaluationComment, Option<double> summaryEvaluationNumericRating, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentProgramEvaluationsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, evaluationDate, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, educationOrganizationId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, evaluationDuration, id, summaryEvaluationComment, summaryEvaluationNumericRating, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="evaluationDate"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffEvaluatorStaffUniqueId"></param>
        /// <param name="summaryEvaluationRatingLevelDescriptor"></param>
        /// <param name="evaluationDuration"></param>
        /// <param name="id"></param>
        /// <param name="summaryEvaluationComment"></param>
        /// <param name="summaryEvaluationNumericRating"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentProgramEvaluationsPartitions(ref bool suppressDefaultLog, IGetStudentProgramEvaluationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> evaluationDate, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<long> educationOrganizationId, Option<string> staffEvaluatorStaffUniqueId, Option<string> summaryEvaluationRatingLevelDescriptor, Option<int> evaluationDuration, Option<string> id, Option<string> summaryEvaluationComment, Option<double> summaryEvaluationNumericRating, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="evaluationDate"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffEvaluatorStaffUniqueId"></param>
        /// <param name="summaryEvaluationRatingLevelDescriptor"></param>
        /// <param name="evaluationDuration"></param>
        /// <param name="id"></param>
        /// <param name="summaryEvaluationComment"></param>
        /// <param name="summaryEvaluationNumericRating"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentProgramEvaluationsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> evaluationDate, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<long> educationOrganizationId, Option<string> staffEvaluatorStaffUniqueId, Option<string> summaryEvaluationRatingLevelDescriptor, Option<int> evaluationDuration, Option<string> id, Option<string> summaryEvaluationComment, Option<double> summaryEvaluationNumericRating, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentProgramEvaluationsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, evaluationDate, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, educationOrganizationId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, evaluationDuration, id, summaryEvaluationComment, summaryEvaluationNumericRating, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="evaluationDate"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programEvaluationPeriodDescriptor"></param>
        /// <param name="programEvaluationTitle"></param>
        /// <param name="programEvaluationTypeDescriptor"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="staffEvaluatorStaffUniqueId"></param>
        /// <param name="summaryEvaluationRatingLevelDescriptor"></param>
        /// <param name="evaluationDuration"></param>
        /// <param name="id"></param>
        /// <param name="summaryEvaluationComment"></param>
        /// <param name="summaryEvaluationNumericRating"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentProgramEvaluationsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> evaluationDate, Option<long> programEducationOrganizationId, Option<string> programEvaluationPeriodDescriptor, Option<string> programEvaluationTitle, Option<string> programEvaluationTypeDescriptor, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<long> educationOrganizationId, Option<string> staffEvaluatorStaffUniqueId, Option<string> summaryEvaluationRatingLevelDescriptor, Option<int> evaluationDuration, Option<string> id, Option<string> summaryEvaluationComment, Option<double> summaryEvaluationNumericRating, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="evaluationDate">The month, day, and year on which the evaluation was conducted. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffEvaluatorStaffUniqueId">A unique alphanumeric code assigned to a staffevaluatorstaff. (optional)</param>
        /// <param name="summaryEvaluationRatingLevelDescriptor">The summary rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="evaluationDuration">The actual number of minutes to conduct the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="summaryEvaluationComment">Any comments about the summary evaluation to be captured. (optional)</param>
        /// <param name="summaryEvaluationNumericRating">The numerical summary rating or score for the evaluation. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentProgramEvaluationsPartitionsApiResponse?> GetStudentProgramEvaluationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> evaluationDate = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<long> educationOrganizationId = default, Option<string> staffEvaluatorStaffUniqueId = default, Option<string> summaryEvaluationRatingLevelDescriptor = default, Option<int> evaluationDuration = default, Option<string> id = default, Option<string> summaryEvaluationComment = default, Option<double> summaryEvaluationNumericRating = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentProgramEvaluationsPartitionsAsync(number, minChangeVersion, maxChangeVersion, evaluationDate, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, educationOrganizationId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, evaluationDuration, id, summaryEvaluationComment, summaryEvaluationNumericRating, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="evaluationDate">The month, day, and year on which the evaluation was conducted. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation. (optional)</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation. (optional)</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="staffEvaluatorStaffUniqueId">A unique alphanumeric code assigned to a staffevaluatorstaff. (optional)</param>
        /// <param name="summaryEvaluationRatingLevelDescriptor">The summary rating level achieved based upon the rating or score. (optional)</param>
        /// <param name="evaluationDuration">The actual number of minutes to conduct the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="summaryEvaluationComment">Any comments about the summary evaluation to be captured. (optional)</param>
        /// <param name="summaryEvaluationNumericRating">The numerical summary rating or score for the evaluation. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentProgramEvaluationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentProgramEvaluationsPartitionsApiResponse> GetStudentProgramEvaluationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> evaluationDate = default, Option<long> programEducationOrganizationId = default, Option<string> programEvaluationPeriodDescriptor = default, Option<string> programEvaluationTitle = default, Option<string> programEvaluationTypeDescriptor = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<long> educationOrganizationId = default, Option<string> staffEvaluatorStaffUniqueId = default, Option<string> summaryEvaluationRatingLevelDescriptor = default, Option<int> evaluationDuration = default, Option<string> id = default, Option<string> summaryEvaluationComment = default, Option<double> summaryEvaluationNumericRating = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentProgramEvaluationsPartitions(programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, id, summaryEvaluationComment);

                FormatGetStudentProgramEvaluationsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref evaluationDate, ref programEducationOrganizationId, ref programEvaluationPeriodDescriptor, ref programEvaluationTitle, ref programEvaluationTypeDescriptor, ref programName, ref programTypeDescriptor, ref studentUniqueId, ref educationOrganizationId, ref staffEvaluatorStaffUniqueId, ref summaryEvaluationRatingLevelDescriptor, ref evaluationDuration, ref id, ref summaryEvaluationComment, ref summaryEvaluationNumericRating, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentProgramEvaluations/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentProgramEvaluations/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (evaluationDate.IsSet)
                        parseQueryStringLocalVar["evaluationDate"] = ClientUtils.ParameterToString(evaluationDate.Value);

                    if (programEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["programEducationOrganizationId"] = ClientUtils.ParameterToString(programEducationOrganizationId.Value);

                    if (programEvaluationPeriodDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationPeriodDescriptor"] = ClientUtils.ParameterToString(programEvaluationPeriodDescriptor.Value);

                    if (programEvaluationTitle.IsSet)
                        parseQueryStringLocalVar["programEvaluationTitle"] = ClientUtils.ParameterToString(programEvaluationTitle.Value);

                    if (programEvaluationTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programEvaluationTypeDescriptor"] = ClientUtils.ParameterToString(programEvaluationTypeDescriptor.Value);

                    if (programName.IsSet)
                        parseQueryStringLocalVar["programName"] = ClientUtils.ParameterToString(programName.Value);

                    if (programTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programTypeDescriptor"] = ClientUtils.ParameterToString(programTypeDescriptor.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (staffEvaluatorStaffUniqueId.IsSet)
                        parseQueryStringLocalVar["staffEvaluatorStaffUniqueId"] = ClientUtils.ParameterToString(staffEvaluatorStaffUniqueId.Value);

                    if (summaryEvaluationRatingLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["summaryEvaluationRatingLevelDescriptor"] = ClientUtils.ParameterToString(summaryEvaluationRatingLevelDescriptor.Value);

                    if (evaluationDuration.IsSet)
                        parseQueryStringLocalVar["evaluationDuration"] = ClientUtils.ParameterToString(evaluationDuration.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (summaryEvaluationComment.IsSet)
                        parseQueryStringLocalVar["summaryEvaluationComment"] = ClientUtils.ParameterToString(summaryEvaluationComment.Value);

                    if (summaryEvaluationNumericRating.IsSet)
                        parseQueryStringLocalVar["summaryEvaluationNumericRating"] = ClientUtils.ParameterToString(summaryEvaluationNumericRating.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentProgramEvaluationsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentProgramEvaluationsPartitionsApiResponse>();

                        GetStudentProgramEvaluationsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentProgramEvaluations/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentProgramEvaluationsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, evaluationDate, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, educationOrganizationId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, evaluationDuration, id, summaryEvaluationComment, summaryEvaluationNumericRating, useSnapshot);

                        Events.ExecuteOnGetStudentProgramEvaluationsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentProgramEvaluationsPartitionsDefaultImplementation(e, "/ed-fi/studentProgramEvaluations/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, evaluationDate, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor, studentUniqueId, educationOrganizationId, staffEvaluatorStaffUniqueId, summaryEvaluationRatingLevelDescriptor, evaluationDuration, id, summaryEvaluationComment, summaryEvaluationNumericRating, useSnapshot);
                Events.ExecuteOnErrorGetStudentProgramEvaluationsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentProgramEvaluationsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetStudentProgramEvaluationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentProgramEvaluationsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentProgramEvaluationsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentProgramEvaluationsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentProgramEvaluationsPartitionsApiResponse(ILogger<GetStudentProgramEvaluationsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesStudentProgramEvaluations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesStudentProgramEvaluationsDefaultImplementation(IKeyChangesStudentProgramEvaluationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesStudentProgramEvaluations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesStudentProgramEvaluations(ref bool suppressDefaultLog, IKeyChangesStudentProgramEvaluationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesStudentProgramEvaluationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesStudentProgramEvaluations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesStudentProgramEvaluations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentProgramEvaluationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentProgramEvaluationsApiResponse?> KeyChangesStudentProgramEvaluationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesStudentProgramEvaluationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentProgramEvaluationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentProgramEvaluationsApiResponse> KeyChangesStudentProgramEvaluationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesStudentProgramEvaluations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentProgramEvaluations/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentProgramEvaluations/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesStudentProgramEvaluationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesStudentProgramEvaluationsApiResponse>();

                        KeyChangesStudentProgramEvaluationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentProgramEvaluations/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesStudentProgramEvaluationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesStudentProgramEvaluations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesStudentProgramEvaluationsDefaultImplementation(e, "/ed-fi/studentProgramEvaluations/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesStudentProgramEvaluations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesStudentProgramEvaluationsApiResponse"/>
        /// </summary>
        public partial class KeyChangesStudentProgramEvaluationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesStudentProgramEvaluationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesStudentProgramEvaluationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesStudentProgramEvaluationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesStudentProgramEvaluationsApiResponse(ILogger<KeyChangesStudentProgramEvaluationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentProgramEvaluationKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentProgramEvaluationKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentProgramEvaluationKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostStudentProgramEvaluation(EdFiStudentProgramEvaluation edFiStudentProgramEvaluation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiStudentProgramEvaluation"></param>
        /// <returns></returns>
        private void ValidatePostStudentProgramEvaluation(EdFiStudentProgramEvaluation edFiStudentProgramEvaluation)
        {
            if (edFiStudentProgramEvaluation == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentProgramEvaluation"></param>
        private void AfterPostStudentProgramEvaluationDefaultImplementation(IPostStudentProgramEvaluationApiResponse apiResponseLocalVar, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation)
        {
            bool suppressDefaultLog = false;
            AfterPostStudentProgramEvaluation(ref suppressDefaultLog, apiResponseLocalVar, edFiStudentProgramEvaluation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentProgramEvaluation"></param>
        partial void AfterPostStudentProgramEvaluation(ref bool suppressDefaultLog, IPostStudentProgramEvaluationApiResponse apiResponseLocalVar, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentProgramEvaluation"></param>
        private void OnErrorPostStudentProgramEvaluationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostStudentProgramEvaluation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiStudentProgramEvaluation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentProgramEvaluation"></param>
        partial void OnErrorPostStudentProgramEvaluation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiStudentProgramEvaluation">The JSON representation of the \&quot;studentProgramEvaluation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentProgramEvaluationApiResponse"/>&gt;</returns>
        public async Task<IPostStudentProgramEvaluationApiResponse?> PostStudentProgramEvaluationOrDefaultAsync(EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostStudentProgramEvaluationAsync(edFiStudentProgramEvaluation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentProgramEvaluation">The JSON representation of the \&quot;studentProgramEvaluation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentProgramEvaluationApiResponse"/>&gt;</returns>
        public async Task<IPostStudentProgramEvaluationApiResponse> PostStudentProgramEvaluationAsync(EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostStudentProgramEvaluation(edFiStudentProgramEvaluation);

                FormatPostStudentProgramEvaluation(edFiStudentProgramEvaluation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentProgramEvaluations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentProgramEvaluations");

                    httpRequestMessageLocalVar.Content = (edFiStudentProgramEvaluation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentProgramEvaluation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostStudentProgramEvaluationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostStudentProgramEvaluationApiResponse>();

                        PostStudentProgramEvaluationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentProgramEvaluations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostStudentProgramEvaluationDefaultImplementation(apiResponseLocalVar, edFiStudentProgramEvaluation);

                        Events.ExecuteOnPostStudentProgramEvaluation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostStudentProgramEvaluationDefaultImplementation(e, "/ed-fi/studentProgramEvaluations", uriBuilderLocalVar.Path, edFiStudentProgramEvaluation);
                Events.ExecuteOnErrorPostStudentProgramEvaluation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostStudentProgramEvaluationApiResponse"/>
        /// </summary>
        public partial class PostStudentProgramEvaluationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostStudentProgramEvaluationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostStudentProgramEvaluationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostStudentProgramEvaluationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostStudentProgramEvaluationApiResponse(ILogger<PostStudentProgramEvaluationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutStudentProgramEvaluation(ref string id, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiStudentProgramEvaluation"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutStudentProgramEvaluation(string id, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiStudentProgramEvaluation == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentProgramEvaluation"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutStudentProgramEvaluationDefaultImplementation(IPutStudentProgramEvaluationApiResponse apiResponseLocalVar, string id, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutStudentProgramEvaluation(ref suppressDefaultLog, apiResponseLocalVar, id, edFiStudentProgramEvaluation, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentProgramEvaluation"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutStudentProgramEvaluation(ref bool suppressDefaultLog, IPutStudentProgramEvaluationApiResponse apiResponseLocalVar, string id, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentProgramEvaluation"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutStudentProgramEvaluationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutStudentProgramEvaluation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiStudentProgramEvaluation, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentProgramEvaluation"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutStudentProgramEvaluation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentProgramEvaluation">The JSON representation of the \&quot;studentProgramEvaluation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentProgramEvaluationApiResponse"/>&gt;</returns>
        public async Task<IPutStudentProgramEvaluationApiResponse?> PutStudentProgramEvaluationOrDefaultAsync(string id, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutStudentProgramEvaluationAsync(id, edFiStudentProgramEvaluation, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentProgramEvaluation">The JSON representation of the \&quot;studentProgramEvaluation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentProgramEvaluationApiResponse"/>&gt;</returns>
        public async Task<IPutStudentProgramEvaluationApiResponse> PutStudentProgramEvaluationAsync(string id, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutStudentProgramEvaluation(id, edFiStudentProgramEvaluation, ifMatch);

                FormatPutStudentProgramEvaluation(ref id, edFiStudentProgramEvaluation, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentProgramEvaluations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentProgramEvaluations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiStudentProgramEvaluation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentProgramEvaluation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutStudentProgramEvaluationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutStudentProgramEvaluationApiResponse>();

                        PutStudentProgramEvaluationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentProgramEvaluations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutStudentProgramEvaluationDefaultImplementation(apiResponseLocalVar, id, edFiStudentProgramEvaluation, ifMatch);

                        Events.ExecuteOnPutStudentProgramEvaluation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutStudentProgramEvaluationDefaultImplementation(e, "/ed-fi/studentProgramEvaluations/{id}", uriBuilderLocalVar.Path, id, edFiStudentProgramEvaluation, ifMatch);
                Events.ExecuteOnErrorPutStudentProgramEvaluation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutStudentProgramEvaluationApiResponse"/>
        /// </summary>
        public partial class PutStudentProgramEvaluationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutStudentProgramEvaluationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutStudentProgramEvaluationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutStudentProgramEvaluationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutStudentProgramEvaluationApiResponse(ILogger<PutStudentProgramEvaluationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
