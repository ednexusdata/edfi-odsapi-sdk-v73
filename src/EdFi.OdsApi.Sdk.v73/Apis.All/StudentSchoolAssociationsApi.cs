// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStudentSchoolAssociationsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StudentSchoolAssociationsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSchoolAssociationByIdApiResponse"/>&gt;</returns>
        Task<IDeleteStudentSchoolAssociationByIdApiResponse> DeleteStudentSchoolAssociationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSchoolAssociationByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteStudentSchoolAssociationByIdApiResponse?> DeleteStudentSchoolAssociationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSchoolAssociationsApiResponse"/>&gt;</returns>
        Task<IDeletesStudentSchoolAssociationsApiResponse> DeletesStudentSchoolAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSchoolAssociationsApiResponse"/>?&gt;</returns>
        Task<IDeletesStudentSchoolAssociationsApiResponse?> DeletesStudentSchoolAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student&#39;s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="nextYearSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="classOfSchoolYear">Projected high school graduation year. (optional)</param>
        /// <param name="enrollmentTypeDescriptor">The type of enrollment reflected by the StudentSchoolAssociation. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="nextYearGradeLevelDescriptor">The anticipated grade level for the student for the next school year. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="schoolChoiceBasisDescriptor">The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoice">An indication of whether the student enrolled in this school under the provisions for public school choice (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsApiResponse"/>&gt;</returns>
        Task<IGetStudentSchoolAssociationsApiResponse> GetStudentSchoolAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> entryDate = default, Option<long> schoolId = default, Option<string> studentUniqueId = default, Option<string> calendarCode = default, Option<int> schoolYear = default, Option<long> educationOrganizationId = default, Option<string> graduationPlanTypeDescriptor = default, Option<int> graduationSchoolYear = default, Option<long> nextYearSchoolId = default, Option<int> classOfSchoolYear = default, Option<string> enrollmentTypeDescriptor = default, Option<string> entryGradeLevelReasonDescriptor = default, Option<string> entryTypeDescriptor = default, Option<string> exitWithdrawTypeDescriptor = default, Option<string> entryGradeLevelDescriptor = default, Option<string> nextYearGradeLevelDescriptor = default, Option<string> residencyStatusDescriptor = default, Option<string> schoolChoiceBasisDescriptor = default, Option<bool> employedWhileEnrolled = default, Option<DateOnly> exitWithdrawDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<bool> primarySchool = default, Option<bool> repeatGradeIndicator = default, Option<bool> schoolChoice = default, Option<bool> schoolChoiceTransfer = default, Option<bool> termCompletionIndicator = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student&#39;s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="nextYearSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="classOfSchoolYear">Projected high school graduation year. (optional)</param>
        /// <param name="enrollmentTypeDescriptor">The type of enrollment reflected by the StudentSchoolAssociation. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="nextYearGradeLevelDescriptor">The anticipated grade level for the student for the next school year. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="schoolChoiceBasisDescriptor">The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoice">An indication of whether the student enrolled in this school under the provisions for public school choice (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsApiResponse"/>?&gt;</returns>
        Task<IGetStudentSchoolAssociationsApiResponse?> GetStudentSchoolAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> entryDate = default, Option<long> schoolId = default, Option<string> studentUniqueId = default, Option<string> calendarCode = default, Option<int> schoolYear = default, Option<long> educationOrganizationId = default, Option<string> graduationPlanTypeDescriptor = default, Option<int> graduationSchoolYear = default, Option<long> nextYearSchoolId = default, Option<int> classOfSchoolYear = default, Option<string> enrollmentTypeDescriptor = default, Option<string> entryGradeLevelReasonDescriptor = default, Option<string> entryTypeDescriptor = default, Option<string> exitWithdrawTypeDescriptor = default, Option<string> entryGradeLevelDescriptor = default, Option<string> nextYearGradeLevelDescriptor = default, Option<string> residencyStatusDescriptor = default, Option<string> schoolChoiceBasisDescriptor = default, Option<bool> employedWhileEnrolled = default, Option<DateOnly> exitWithdrawDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<bool> primarySchool = default, Option<bool> repeatGradeIndicator = default, Option<bool> schoolChoice = default, Option<bool> schoolChoiceTransfer = default, Option<bool> termCompletionIndicator = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsByIdApiResponse"/>&gt;</returns>
        Task<IGetStudentSchoolAssociationsByIdApiResponse> GetStudentSchoolAssociationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsByIdApiResponse"/>?&gt;</returns>
        Task<IGetStudentSchoolAssociationsByIdApiResponse?> GetStudentSchoolAssociationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student&#39;s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="nextYearSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="classOfSchoolYear">Projected high school graduation year. (optional)</param>
        /// <param name="enrollmentTypeDescriptor">The type of enrollment reflected by the StudentSchoolAssociation. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="nextYearGradeLevelDescriptor">The anticipated grade level for the student for the next school year. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="schoolChoiceBasisDescriptor">The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoice">An indication of whether the student enrolled in this school under the provisions for public school choice (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetStudentSchoolAssociationsPartitionsApiResponse> GetStudentSchoolAssociationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> entryDate = default, Option<long> schoolId = default, Option<string> studentUniqueId = default, Option<string> calendarCode = default, Option<int> schoolYear = default, Option<long> educationOrganizationId = default, Option<string> graduationPlanTypeDescriptor = default, Option<int> graduationSchoolYear = default, Option<long> nextYearSchoolId = default, Option<int> classOfSchoolYear = default, Option<string> enrollmentTypeDescriptor = default, Option<string> entryGradeLevelReasonDescriptor = default, Option<string> entryTypeDescriptor = default, Option<string> exitWithdrawTypeDescriptor = default, Option<string> entryGradeLevelDescriptor = default, Option<string> nextYearGradeLevelDescriptor = default, Option<string> residencyStatusDescriptor = default, Option<string> schoolChoiceBasisDescriptor = default, Option<bool> employedWhileEnrolled = default, Option<DateOnly> exitWithdrawDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<bool> primarySchool = default, Option<bool> repeatGradeIndicator = default, Option<bool> schoolChoice = default, Option<bool> schoolChoiceTransfer = default, Option<bool> termCompletionIndicator = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student&#39;s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="nextYearSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="classOfSchoolYear">Projected high school graduation year. (optional)</param>
        /// <param name="enrollmentTypeDescriptor">The type of enrollment reflected by the StudentSchoolAssociation. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="nextYearGradeLevelDescriptor">The anticipated grade level for the student for the next school year. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="schoolChoiceBasisDescriptor">The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoice">An indication of whether the student enrolled in this school under the provisions for public school choice (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetStudentSchoolAssociationsPartitionsApiResponse?> GetStudentSchoolAssociationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> entryDate = default, Option<long> schoolId = default, Option<string> studentUniqueId = default, Option<string> calendarCode = default, Option<int> schoolYear = default, Option<long> educationOrganizationId = default, Option<string> graduationPlanTypeDescriptor = default, Option<int> graduationSchoolYear = default, Option<long> nextYearSchoolId = default, Option<int> classOfSchoolYear = default, Option<string> enrollmentTypeDescriptor = default, Option<string> entryGradeLevelReasonDescriptor = default, Option<string> entryTypeDescriptor = default, Option<string> exitWithdrawTypeDescriptor = default, Option<string> entryGradeLevelDescriptor = default, Option<string> nextYearGradeLevelDescriptor = default, Option<string> residencyStatusDescriptor = default, Option<string> schoolChoiceBasisDescriptor = default, Option<bool> employedWhileEnrolled = default, Option<DateOnly> exitWithdrawDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<bool> primarySchool = default, Option<bool> repeatGradeIndicator = default, Option<bool> schoolChoice = default, Option<bool> schoolChoiceTransfer = default, Option<bool> termCompletionIndicator = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSchoolAssociationsApiResponse"/>&gt;</returns>
        Task<IKeyChangesStudentSchoolAssociationsApiResponse> KeyChangesStudentSchoolAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSchoolAssociationsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesStudentSchoolAssociationsApiResponse?> KeyChangesStudentSchoolAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSchoolAssociationApiResponse"/>&gt;</returns>
        Task<IPostStudentSchoolAssociationApiResponse> PostStudentSchoolAssociationAsync(EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiStudentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSchoolAssociationApiResponse"/>?&gt;</returns>
        Task<IPostStudentSchoolAssociationApiResponse?> PostStudentSchoolAssociationOrDefaultAsync(EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSchoolAssociationApiResponse"/>&gt;</returns>
        Task<IPutStudentSchoolAssociationApiResponse> PutStudentSchoolAssociationAsync(string id, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSchoolAssociationApiResponse"/>?&gt;</returns>
        Task<IPutStudentSchoolAssociationApiResponse?> PutStudentSchoolAssociationOrDefaultAsync(string id, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteStudentSchoolAssociationByIdApiResponse"/>
    /// </summary>
    public interface IDeleteStudentSchoolAssociationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesStudentSchoolAssociationsApiResponse"/>
    /// </summary>
    public interface IDeletesStudentSchoolAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentSchoolAssociationDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSchoolAssociationsApiResponse"/>
    /// </summary>
    public interface IGetStudentSchoolAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiStudentSchoolAssociation>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSchoolAssociationsByIdApiResponse"/>
    /// </summary>
    public interface IGetStudentSchoolAssociationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSchoolAssociation?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSchoolAssociationsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetStudentSchoolAssociationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesStudentSchoolAssociationsApiResponse"/>
    /// </summary>
    public interface IKeyChangesStudentSchoolAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentSchoolAssociationKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostStudentSchoolAssociationApiResponse"/>
    /// </summary>
    public interface IPostStudentSchoolAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutStudentSchoolAssociationApiResponse"/>
    /// </summary>
    public interface IPutStudentSchoolAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StudentSchoolAssociationsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteStudentSchoolAssociationById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteStudentSchoolAssociationById;

        internal void ExecuteOnDeleteStudentSchoolAssociationById(StudentSchoolAssociationsApi.DeleteStudentSchoolAssociationByIdApiResponse apiResponse)
        {
            OnDeleteStudentSchoolAssociationById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteStudentSchoolAssociationById(Exception exception)
        {
            OnErrorDeleteStudentSchoolAssociationById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesStudentSchoolAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesStudentSchoolAssociations;

        internal void ExecuteOnDeletesStudentSchoolAssociations(StudentSchoolAssociationsApi.DeletesStudentSchoolAssociationsApiResponse apiResponse)
        {
            OnDeletesStudentSchoolAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesStudentSchoolAssociations(Exception exception)
        {
            OnErrorDeletesStudentSchoolAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSchoolAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSchoolAssociations;

        internal void ExecuteOnGetStudentSchoolAssociations(StudentSchoolAssociationsApi.GetStudentSchoolAssociationsApiResponse apiResponse)
        {
            OnGetStudentSchoolAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSchoolAssociations(Exception exception)
        {
            OnErrorGetStudentSchoolAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSchoolAssociationsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSchoolAssociationsById;

        internal void ExecuteOnGetStudentSchoolAssociationsById(StudentSchoolAssociationsApi.GetStudentSchoolAssociationsByIdApiResponse apiResponse)
        {
            OnGetStudentSchoolAssociationsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSchoolAssociationsById(Exception exception)
        {
            OnErrorGetStudentSchoolAssociationsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSchoolAssociationsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSchoolAssociationsPartitions;

        internal void ExecuteOnGetStudentSchoolAssociationsPartitions(StudentSchoolAssociationsApi.GetStudentSchoolAssociationsPartitionsApiResponse apiResponse)
        {
            OnGetStudentSchoolAssociationsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSchoolAssociationsPartitions(Exception exception)
        {
            OnErrorGetStudentSchoolAssociationsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesStudentSchoolAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesStudentSchoolAssociations;

        internal void ExecuteOnKeyChangesStudentSchoolAssociations(StudentSchoolAssociationsApi.KeyChangesStudentSchoolAssociationsApiResponse apiResponse)
        {
            OnKeyChangesStudentSchoolAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesStudentSchoolAssociations(Exception exception)
        {
            OnErrorKeyChangesStudentSchoolAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostStudentSchoolAssociation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostStudentSchoolAssociation;

        internal void ExecuteOnPostStudentSchoolAssociation(StudentSchoolAssociationsApi.PostStudentSchoolAssociationApiResponse apiResponse)
        {
            OnPostStudentSchoolAssociation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostStudentSchoolAssociation(Exception exception)
        {
            OnErrorPostStudentSchoolAssociation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutStudentSchoolAssociation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutStudentSchoolAssociation;

        internal void ExecuteOnPutStudentSchoolAssociation(StudentSchoolAssociationsApi.PutStudentSchoolAssociationApiResponse apiResponse)
        {
            OnPutStudentSchoolAssociation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutStudentSchoolAssociation(Exception exception)
        {
            OnErrorPutStudentSchoolAssociation?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StudentSchoolAssociationsApi : IStudentSchoolAssociationsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StudentSchoolAssociationsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StudentSchoolAssociationsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentSchoolAssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentSchoolAssociationsApi(ILogger<StudentSchoolAssociationsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StudentSchoolAssociationsApiEvents studentSchoolAssociationsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StudentSchoolAssociationsApi>();
            HttpClient = httpClient;
            Events = studentSchoolAssociationsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteStudentSchoolAssociationById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteStudentSchoolAssociationById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteStudentSchoolAssociationByIdDefaultImplementation(IDeleteStudentSchoolAssociationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteStudentSchoolAssociationById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteStudentSchoolAssociationById(ref bool suppressDefaultLog, IDeleteStudentSchoolAssociationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteStudentSchoolAssociationByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteStudentSchoolAssociationById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteStudentSchoolAssociationById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSchoolAssociationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentSchoolAssociationByIdApiResponse?> DeleteStudentSchoolAssociationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteStudentSchoolAssociationByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSchoolAssociationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentSchoolAssociationByIdApiResponse> DeleteStudentSchoolAssociationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteStudentSchoolAssociationById(id, ifMatch);

                FormatDeleteStudentSchoolAssociationById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSchoolAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSchoolAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteStudentSchoolAssociationByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteStudentSchoolAssociationByIdApiResponse>();

                        DeleteStudentSchoolAssociationByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSchoolAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteStudentSchoolAssociationByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteStudentSchoolAssociationById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteStudentSchoolAssociationByIdDefaultImplementation(e, "/ed-fi/studentSchoolAssociations/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteStudentSchoolAssociationById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteStudentSchoolAssociationByIdApiResponse"/>
        /// </summary>
        public partial class DeleteStudentSchoolAssociationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteStudentSchoolAssociationByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteStudentSchoolAssociationByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteStudentSchoolAssociationByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteStudentSchoolAssociationByIdApiResponse(ILogger<DeleteStudentSchoolAssociationByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesStudentSchoolAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesStudentSchoolAssociationsDefaultImplementation(IDeletesStudentSchoolAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesStudentSchoolAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesStudentSchoolAssociations(ref bool suppressDefaultLog, IDeletesStudentSchoolAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesStudentSchoolAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesStudentSchoolAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesStudentSchoolAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSchoolAssociationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentSchoolAssociationsApiResponse?> DeletesStudentSchoolAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesStudentSchoolAssociationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSchoolAssociationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentSchoolAssociationsApiResponse> DeletesStudentSchoolAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesStudentSchoolAssociations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSchoolAssociations/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSchoolAssociations/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesStudentSchoolAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesStudentSchoolAssociationsApiResponse>();

                        DeletesStudentSchoolAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSchoolAssociations/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesStudentSchoolAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesStudentSchoolAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesStudentSchoolAssociationsDefaultImplementation(e, "/ed-fi/studentSchoolAssociations/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesStudentSchoolAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesStudentSchoolAssociationsApiResponse"/>
        /// </summary>
        public partial class DeletesStudentSchoolAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesStudentSchoolAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesStudentSchoolAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesStudentSchoolAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesStudentSchoolAssociationsApiResponse(ILogger<DeletesStudentSchoolAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentSchoolAssociationDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentSchoolAssociationDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentSchoolAssociationDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSchoolAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<DateOnly> entryDate, ref Option<long> schoolId, ref Option<string> studentUniqueId, ref Option<string> calendarCode, ref Option<int> schoolYear, ref Option<long> educationOrganizationId, ref Option<string> graduationPlanTypeDescriptor, ref Option<int> graduationSchoolYear, ref Option<long> nextYearSchoolId, ref Option<int> classOfSchoolYear, ref Option<string> enrollmentTypeDescriptor, ref Option<string> entryGradeLevelReasonDescriptor, ref Option<string> entryTypeDescriptor, ref Option<string> exitWithdrawTypeDescriptor, ref Option<string> entryGradeLevelDescriptor, ref Option<string> nextYearGradeLevelDescriptor, ref Option<string> residencyStatusDescriptor, ref Option<string> schoolChoiceBasisDescriptor, ref Option<bool> employedWhileEnrolled, ref Option<DateOnly> exitWithdrawDate, ref Option<double> fullTimeEquivalency, ref Option<string> id, ref Option<bool> primarySchool, ref Option<bool> repeatGradeIndicator, ref Option<bool> schoolChoice, ref Option<bool> schoolChoiceTransfer, ref Option<bool> termCompletionIndicator, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="calendarCode"></param>
        /// <param name="graduationPlanTypeDescriptor"></param>
        /// <param name="enrollmentTypeDescriptor"></param>
        /// <param name="entryGradeLevelReasonDescriptor"></param>
        /// <param name="entryTypeDescriptor"></param>
        /// <param name="exitWithdrawTypeDescriptor"></param>
        /// <param name="entryGradeLevelDescriptor"></param>
        /// <param name="nextYearGradeLevelDescriptor"></param>
        /// <param name="residencyStatusDescriptor"></param>
        /// <param name="schoolChoiceBasisDescriptor"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetStudentSchoolAssociations(Option<string> pageToken, Option<string> studentUniqueId, Option<string> calendarCode, Option<string> graduationPlanTypeDescriptor, Option<string> enrollmentTypeDescriptor, Option<string> entryGradeLevelReasonDescriptor, Option<string> entryTypeDescriptor, Option<string> exitWithdrawTypeDescriptor, Option<string> entryGradeLevelDescriptor, Option<string> nextYearGradeLevelDescriptor, Option<string> residencyStatusDescriptor, Option<string> schoolChoiceBasisDescriptor, Option<string> id)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (calendarCode.IsSet && calendarCode.Value == null)
                throw new ArgumentNullException(nameof(calendarCode));

            if (graduationPlanTypeDescriptor.IsSet && graduationPlanTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(graduationPlanTypeDescriptor));

            if (enrollmentTypeDescriptor.IsSet && enrollmentTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(enrollmentTypeDescriptor));

            if (entryGradeLevelReasonDescriptor.IsSet && entryGradeLevelReasonDescriptor.Value == null)
                throw new ArgumentNullException(nameof(entryGradeLevelReasonDescriptor));

            if (entryTypeDescriptor.IsSet && entryTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(entryTypeDescriptor));

            if (exitWithdrawTypeDescriptor.IsSet && exitWithdrawTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(exitWithdrawTypeDescriptor));

            if (entryGradeLevelDescriptor.IsSet && entryGradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(entryGradeLevelDescriptor));

            if (nextYearGradeLevelDescriptor.IsSet && nextYearGradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(nextYearGradeLevelDescriptor));

            if (residencyStatusDescriptor.IsSet && residencyStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(residencyStatusDescriptor));

            if (schoolChoiceBasisDescriptor.IsSet && schoolChoiceBasisDescriptor.Value == null)
                throw new ArgumentNullException(nameof(schoolChoiceBasisDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="entryDate"></param>
        /// <param name="schoolId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="calendarCode"></param>
        /// <param name="schoolYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="graduationPlanTypeDescriptor"></param>
        /// <param name="graduationSchoolYear"></param>
        /// <param name="nextYearSchoolId"></param>
        /// <param name="classOfSchoolYear"></param>
        /// <param name="enrollmentTypeDescriptor"></param>
        /// <param name="entryGradeLevelReasonDescriptor"></param>
        /// <param name="entryTypeDescriptor"></param>
        /// <param name="exitWithdrawTypeDescriptor"></param>
        /// <param name="entryGradeLevelDescriptor"></param>
        /// <param name="nextYearGradeLevelDescriptor"></param>
        /// <param name="residencyStatusDescriptor"></param>
        /// <param name="schoolChoiceBasisDescriptor"></param>
        /// <param name="employedWhileEnrolled"></param>
        /// <param name="exitWithdrawDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="primarySchool"></param>
        /// <param name="repeatGradeIndicator"></param>
        /// <param name="schoolChoice"></param>
        /// <param name="schoolChoiceTransfer"></param>
        /// <param name="termCompletionIndicator"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSchoolAssociationsDefaultImplementation(IGetStudentSchoolAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> entryDate, Option<long> schoolId, Option<string> studentUniqueId, Option<string> calendarCode, Option<int> schoolYear, Option<long> educationOrganizationId, Option<string> graduationPlanTypeDescriptor, Option<int> graduationSchoolYear, Option<long> nextYearSchoolId, Option<int> classOfSchoolYear, Option<string> enrollmentTypeDescriptor, Option<string> entryGradeLevelReasonDescriptor, Option<string> entryTypeDescriptor, Option<string> exitWithdrawTypeDescriptor, Option<string> entryGradeLevelDescriptor, Option<string> nextYearGradeLevelDescriptor, Option<string> residencyStatusDescriptor, Option<string> schoolChoiceBasisDescriptor, Option<bool> employedWhileEnrolled, Option<DateOnly> exitWithdrawDate, Option<double> fullTimeEquivalency, Option<string> id, Option<bool> primarySchool, Option<bool> repeatGradeIndicator, Option<bool> schoolChoice, Option<bool> schoolChoiceTransfer, Option<bool> termCompletionIndicator, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSchoolAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, nextYearSchoolId, classOfSchoolYear, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoice, schoolChoiceTransfer, termCompletionIndicator, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="entryDate"></param>
        /// <param name="schoolId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="calendarCode"></param>
        /// <param name="schoolYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="graduationPlanTypeDescriptor"></param>
        /// <param name="graduationSchoolYear"></param>
        /// <param name="nextYearSchoolId"></param>
        /// <param name="classOfSchoolYear"></param>
        /// <param name="enrollmentTypeDescriptor"></param>
        /// <param name="entryGradeLevelReasonDescriptor"></param>
        /// <param name="entryTypeDescriptor"></param>
        /// <param name="exitWithdrawTypeDescriptor"></param>
        /// <param name="entryGradeLevelDescriptor"></param>
        /// <param name="nextYearGradeLevelDescriptor"></param>
        /// <param name="residencyStatusDescriptor"></param>
        /// <param name="schoolChoiceBasisDescriptor"></param>
        /// <param name="employedWhileEnrolled"></param>
        /// <param name="exitWithdrawDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="primarySchool"></param>
        /// <param name="repeatGradeIndicator"></param>
        /// <param name="schoolChoice"></param>
        /// <param name="schoolChoiceTransfer"></param>
        /// <param name="termCompletionIndicator"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSchoolAssociations(ref bool suppressDefaultLog, IGetStudentSchoolAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> entryDate, Option<long> schoolId, Option<string> studentUniqueId, Option<string> calendarCode, Option<int> schoolYear, Option<long> educationOrganizationId, Option<string> graduationPlanTypeDescriptor, Option<int> graduationSchoolYear, Option<long> nextYearSchoolId, Option<int> classOfSchoolYear, Option<string> enrollmentTypeDescriptor, Option<string> entryGradeLevelReasonDescriptor, Option<string> entryTypeDescriptor, Option<string> exitWithdrawTypeDescriptor, Option<string> entryGradeLevelDescriptor, Option<string> nextYearGradeLevelDescriptor, Option<string> residencyStatusDescriptor, Option<string> schoolChoiceBasisDescriptor, Option<bool> employedWhileEnrolled, Option<DateOnly> exitWithdrawDate, Option<double> fullTimeEquivalency, Option<string> id, Option<bool> primarySchool, Option<bool> repeatGradeIndicator, Option<bool> schoolChoice, Option<bool> schoolChoiceTransfer, Option<bool> termCompletionIndicator, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="entryDate"></param>
        /// <param name="schoolId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="calendarCode"></param>
        /// <param name="schoolYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="graduationPlanTypeDescriptor"></param>
        /// <param name="graduationSchoolYear"></param>
        /// <param name="nextYearSchoolId"></param>
        /// <param name="classOfSchoolYear"></param>
        /// <param name="enrollmentTypeDescriptor"></param>
        /// <param name="entryGradeLevelReasonDescriptor"></param>
        /// <param name="entryTypeDescriptor"></param>
        /// <param name="exitWithdrawTypeDescriptor"></param>
        /// <param name="entryGradeLevelDescriptor"></param>
        /// <param name="nextYearGradeLevelDescriptor"></param>
        /// <param name="residencyStatusDescriptor"></param>
        /// <param name="schoolChoiceBasisDescriptor"></param>
        /// <param name="employedWhileEnrolled"></param>
        /// <param name="exitWithdrawDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="primarySchool"></param>
        /// <param name="repeatGradeIndicator"></param>
        /// <param name="schoolChoice"></param>
        /// <param name="schoolChoiceTransfer"></param>
        /// <param name="termCompletionIndicator"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSchoolAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> entryDate, Option<long> schoolId, Option<string> studentUniqueId, Option<string> calendarCode, Option<int> schoolYear, Option<long> educationOrganizationId, Option<string> graduationPlanTypeDescriptor, Option<int> graduationSchoolYear, Option<long> nextYearSchoolId, Option<int> classOfSchoolYear, Option<string> enrollmentTypeDescriptor, Option<string> entryGradeLevelReasonDescriptor, Option<string> entryTypeDescriptor, Option<string> exitWithdrawTypeDescriptor, Option<string> entryGradeLevelDescriptor, Option<string> nextYearGradeLevelDescriptor, Option<string> residencyStatusDescriptor, Option<string> schoolChoiceBasisDescriptor, Option<bool> employedWhileEnrolled, Option<DateOnly> exitWithdrawDate, Option<double> fullTimeEquivalency, Option<string> id, Option<bool> primarySchool, Option<bool> repeatGradeIndicator, Option<bool> schoolChoice, Option<bool> schoolChoiceTransfer, Option<bool> termCompletionIndicator, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSchoolAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, nextYearSchoolId, classOfSchoolYear, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoice, schoolChoiceTransfer, termCompletionIndicator, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="entryDate"></param>
        /// <param name="schoolId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="calendarCode"></param>
        /// <param name="schoolYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="graduationPlanTypeDescriptor"></param>
        /// <param name="graduationSchoolYear"></param>
        /// <param name="nextYearSchoolId"></param>
        /// <param name="classOfSchoolYear"></param>
        /// <param name="enrollmentTypeDescriptor"></param>
        /// <param name="entryGradeLevelReasonDescriptor"></param>
        /// <param name="entryTypeDescriptor"></param>
        /// <param name="exitWithdrawTypeDescriptor"></param>
        /// <param name="entryGradeLevelDescriptor"></param>
        /// <param name="nextYearGradeLevelDescriptor"></param>
        /// <param name="residencyStatusDescriptor"></param>
        /// <param name="schoolChoiceBasisDescriptor"></param>
        /// <param name="employedWhileEnrolled"></param>
        /// <param name="exitWithdrawDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="primarySchool"></param>
        /// <param name="repeatGradeIndicator"></param>
        /// <param name="schoolChoice"></param>
        /// <param name="schoolChoiceTransfer"></param>
        /// <param name="termCompletionIndicator"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSchoolAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> entryDate, Option<long> schoolId, Option<string> studentUniqueId, Option<string> calendarCode, Option<int> schoolYear, Option<long> educationOrganizationId, Option<string> graduationPlanTypeDescriptor, Option<int> graduationSchoolYear, Option<long> nextYearSchoolId, Option<int> classOfSchoolYear, Option<string> enrollmentTypeDescriptor, Option<string> entryGradeLevelReasonDescriptor, Option<string> entryTypeDescriptor, Option<string> exitWithdrawTypeDescriptor, Option<string> entryGradeLevelDescriptor, Option<string> nextYearGradeLevelDescriptor, Option<string> residencyStatusDescriptor, Option<string> schoolChoiceBasisDescriptor, Option<bool> employedWhileEnrolled, Option<DateOnly> exitWithdrawDate, Option<double> fullTimeEquivalency, Option<string> id, Option<bool> primarySchool, Option<bool> repeatGradeIndicator, Option<bool> schoolChoice, Option<bool> schoolChoiceTransfer, Option<bool> termCompletionIndicator, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student&#39;s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="nextYearSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="classOfSchoolYear">Projected high school graduation year. (optional)</param>
        /// <param name="enrollmentTypeDescriptor">The type of enrollment reflected by the StudentSchoolAssociation. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="nextYearGradeLevelDescriptor">The anticipated grade level for the student for the next school year. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="schoolChoiceBasisDescriptor">The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoice">An indication of whether the student enrolled in this school under the provisions for public school choice (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSchoolAssociationsApiResponse?> GetStudentSchoolAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> entryDate = default, Option<long> schoolId = default, Option<string> studentUniqueId = default, Option<string> calendarCode = default, Option<int> schoolYear = default, Option<long> educationOrganizationId = default, Option<string> graduationPlanTypeDescriptor = default, Option<int> graduationSchoolYear = default, Option<long> nextYearSchoolId = default, Option<int> classOfSchoolYear = default, Option<string> enrollmentTypeDescriptor = default, Option<string> entryGradeLevelReasonDescriptor = default, Option<string> entryTypeDescriptor = default, Option<string> exitWithdrawTypeDescriptor = default, Option<string> entryGradeLevelDescriptor = default, Option<string> nextYearGradeLevelDescriptor = default, Option<string> residencyStatusDescriptor = default, Option<string> schoolChoiceBasisDescriptor = default, Option<bool> employedWhileEnrolled = default, Option<DateOnly> exitWithdrawDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<bool> primarySchool = default, Option<bool> repeatGradeIndicator = default, Option<bool> schoolChoice = default, Option<bool> schoolChoiceTransfer = default, Option<bool> termCompletionIndicator = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSchoolAssociationsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, nextYearSchoolId, classOfSchoolYear, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoice, schoolChoiceTransfer, termCompletionIndicator, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student&#39;s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="nextYearSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="classOfSchoolYear">Projected high school graduation year. (optional)</param>
        /// <param name="enrollmentTypeDescriptor">The type of enrollment reflected by the StudentSchoolAssociation. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="nextYearGradeLevelDescriptor">The anticipated grade level for the student for the next school year. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="schoolChoiceBasisDescriptor">The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoice">An indication of whether the student enrolled in this school under the provisions for public school choice (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSchoolAssociationsApiResponse> GetStudentSchoolAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> entryDate = default, Option<long> schoolId = default, Option<string> studentUniqueId = default, Option<string> calendarCode = default, Option<int> schoolYear = default, Option<long> educationOrganizationId = default, Option<string> graduationPlanTypeDescriptor = default, Option<int> graduationSchoolYear = default, Option<long> nextYearSchoolId = default, Option<int> classOfSchoolYear = default, Option<string> enrollmentTypeDescriptor = default, Option<string> entryGradeLevelReasonDescriptor = default, Option<string> entryTypeDescriptor = default, Option<string> exitWithdrawTypeDescriptor = default, Option<string> entryGradeLevelDescriptor = default, Option<string> nextYearGradeLevelDescriptor = default, Option<string> residencyStatusDescriptor = default, Option<string> schoolChoiceBasisDescriptor = default, Option<bool> employedWhileEnrolled = default, Option<DateOnly> exitWithdrawDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<bool> primarySchool = default, Option<bool> repeatGradeIndicator = default, Option<bool> schoolChoice = default, Option<bool> schoolChoiceTransfer = default, Option<bool> termCompletionIndicator = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSchoolAssociations(pageToken, studentUniqueId, calendarCode, graduationPlanTypeDescriptor, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, id);

                FormatGetStudentSchoolAssociations(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref entryDate, ref schoolId, ref studentUniqueId, ref calendarCode, ref schoolYear, ref educationOrganizationId, ref graduationPlanTypeDescriptor, ref graduationSchoolYear, ref nextYearSchoolId, ref classOfSchoolYear, ref enrollmentTypeDescriptor, ref entryGradeLevelReasonDescriptor, ref entryTypeDescriptor, ref exitWithdrawTypeDescriptor, ref entryGradeLevelDescriptor, ref nextYearGradeLevelDescriptor, ref residencyStatusDescriptor, ref schoolChoiceBasisDescriptor, ref employedWhileEnrolled, ref exitWithdrawDate, ref fullTimeEquivalency, ref id, ref primarySchool, ref repeatGradeIndicator, ref schoolChoice, ref schoolChoiceTransfer, ref termCompletionIndicator, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSchoolAssociations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSchoolAssociations");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (entryDate.IsSet)
                        parseQueryStringLocalVar["entryDate"] = ClientUtils.ParameterToString(entryDate.Value);

                    if (schoolId.IsSet)
                        parseQueryStringLocalVar["schoolId"] = ClientUtils.ParameterToString(schoolId.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (calendarCode.IsSet)
                        parseQueryStringLocalVar["calendarCode"] = ClientUtils.ParameterToString(calendarCode.Value);

                    if (schoolYear.IsSet)
                        parseQueryStringLocalVar["schoolYear"] = ClientUtils.ParameterToString(schoolYear.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (graduationPlanTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["graduationPlanTypeDescriptor"] = ClientUtils.ParameterToString(graduationPlanTypeDescriptor.Value);

                    if (graduationSchoolYear.IsSet)
                        parseQueryStringLocalVar["graduationSchoolYear"] = ClientUtils.ParameterToString(graduationSchoolYear.Value);

                    if (nextYearSchoolId.IsSet)
                        parseQueryStringLocalVar["nextYearSchoolId"] = ClientUtils.ParameterToString(nextYearSchoolId.Value);

                    if (classOfSchoolYear.IsSet)
                        parseQueryStringLocalVar["classOfSchoolYear"] = ClientUtils.ParameterToString(classOfSchoolYear.Value);

                    if (enrollmentTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["enrollmentTypeDescriptor"] = ClientUtils.ParameterToString(enrollmentTypeDescriptor.Value);

                    if (entryGradeLevelReasonDescriptor.IsSet)
                        parseQueryStringLocalVar["entryGradeLevelReasonDescriptor"] = ClientUtils.ParameterToString(entryGradeLevelReasonDescriptor.Value);

                    if (entryTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["entryTypeDescriptor"] = ClientUtils.ParameterToString(entryTypeDescriptor.Value);

                    if (exitWithdrawTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["exitWithdrawTypeDescriptor"] = ClientUtils.ParameterToString(exitWithdrawTypeDescriptor.Value);

                    if (entryGradeLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["entryGradeLevelDescriptor"] = ClientUtils.ParameterToString(entryGradeLevelDescriptor.Value);

                    if (nextYearGradeLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["nextYearGradeLevelDescriptor"] = ClientUtils.ParameterToString(nextYearGradeLevelDescriptor.Value);

                    if (residencyStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["residencyStatusDescriptor"] = ClientUtils.ParameterToString(residencyStatusDescriptor.Value);

                    if (schoolChoiceBasisDescriptor.IsSet)
                        parseQueryStringLocalVar["schoolChoiceBasisDescriptor"] = ClientUtils.ParameterToString(schoolChoiceBasisDescriptor.Value);

                    if (employedWhileEnrolled.IsSet)
                        parseQueryStringLocalVar["employedWhileEnrolled"] = ClientUtils.ParameterToString(employedWhileEnrolled.Value);

                    if (exitWithdrawDate.IsSet)
                        parseQueryStringLocalVar["exitWithdrawDate"] = ClientUtils.ParameterToString(exitWithdrawDate.Value);

                    if (fullTimeEquivalency.IsSet)
                        parseQueryStringLocalVar["fullTimeEquivalency"] = ClientUtils.ParameterToString(fullTimeEquivalency.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (primarySchool.IsSet)
                        parseQueryStringLocalVar["primarySchool"] = ClientUtils.ParameterToString(primarySchool.Value);

                    if (repeatGradeIndicator.IsSet)
                        parseQueryStringLocalVar["repeatGradeIndicator"] = ClientUtils.ParameterToString(repeatGradeIndicator.Value);

                    if (schoolChoice.IsSet)
                        parseQueryStringLocalVar["schoolChoice"] = ClientUtils.ParameterToString(schoolChoice.Value);

                    if (schoolChoiceTransfer.IsSet)
                        parseQueryStringLocalVar["schoolChoiceTransfer"] = ClientUtils.ParameterToString(schoolChoiceTransfer.Value);

                    if (termCompletionIndicator.IsSet)
                        parseQueryStringLocalVar["termCompletionIndicator"] = ClientUtils.ParameterToString(termCompletionIndicator.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSchoolAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSchoolAssociationsApiResponse>();

                        GetStudentSchoolAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSchoolAssociations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSchoolAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, nextYearSchoolId, classOfSchoolYear, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoice, schoolChoiceTransfer, termCompletionIndicator, useSnapshot);

                        Events.ExecuteOnGetStudentSchoolAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSchoolAssociationsDefaultImplementation(e, "/ed-fi/studentSchoolAssociations", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, nextYearSchoolId, classOfSchoolYear, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoice, schoolChoiceTransfer, termCompletionIndicator, useSnapshot);
                Events.ExecuteOnErrorGetStudentSchoolAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSchoolAssociationsApiResponse"/>
        /// </summary>
        public partial class GetStudentSchoolAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSchoolAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSchoolAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSchoolAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSchoolAssociationsApiResponse(ILogger<GetStudentSchoolAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiStudentSchoolAssociation>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiStudentSchoolAssociation>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiStudentSchoolAssociation>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSchoolAssociationsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetStudentSchoolAssociationsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSchoolAssociationsByIdDefaultImplementation(IGetStudentSchoolAssociationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSchoolAssociationsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSchoolAssociationsById(ref bool suppressDefaultLog, IGetStudentSchoolAssociationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSchoolAssociationsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSchoolAssociationsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSchoolAssociationsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSchoolAssociationsByIdApiResponse?> GetStudentSchoolAssociationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSchoolAssociationsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSchoolAssociationsByIdApiResponse> GetStudentSchoolAssociationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSchoolAssociationsById(id, ifNoneMatch);

                FormatGetStudentSchoolAssociationsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSchoolAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSchoolAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSchoolAssociationsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSchoolAssociationsByIdApiResponse>();

                        GetStudentSchoolAssociationsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSchoolAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSchoolAssociationsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetStudentSchoolAssociationsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSchoolAssociationsByIdDefaultImplementation(e, "/ed-fi/studentSchoolAssociations/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetStudentSchoolAssociationsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSchoolAssociationsByIdApiResponse"/>
        /// </summary>
        public partial class GetStudentSchoolAssociationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSchoolAssociationsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSchoolAssociationsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSchoolAssociationsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSchoolAssociationsByIdApiResponse(ILogger<GetStudentSchoolAssociationsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSchoolAssociation? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSchoolAssociation>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSchoolAssociation? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSchoolAssociationsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<DateOnly> entryDate, ref Option<long> schoolId, ref Option<string> studentUniqueId, ref Option<string> calendarCode, ref Option<int> schoolYear, ref Option<long> educationOrganizationId, ref Option<string> graduationPlanTypeDescriptor, ref Option<int> graduationSchoolYear, ref Option<long> nextYearSchoolId, ref Option<int> classOfSchoolYear, ref Option<string> enrollmentTypeDescriptor, ref Option<string> entryGradeLevelReasonDescriptor, ref Option<string> entryTypeDescriptor, ref Option<string> exitWithdrawTypeDescriptor, ref Option<string> entryGradeLevelDescriptor, ref Option<string> nextYearGradeLevelDescriptor, ref Option<string> residencyStatusDescriptor, ref Option<string> schoolChoiceBasisDescriptor, ref Option<bool> employedWhileEnrolled, ref Option<DateOnly> exitWithdrawDate, ref Option<double> fullTimeEquivalency, ref Option<string> id, ref Option<bool> primarySchool, ref Option<bool> repeatGradeIndicator, ref Option<bool> schoolChoice, ref Option<bool> schoolChoiceTransfer, ref Option<bool> termCompletionIndicator, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="studentUniqueId"></param>
        /// <param name="calendarCode"></param>
        /// <param name="graduationPlanTypeDescriptor"></param>
        /// <param name="enrollmentTypeDescriptor"></param>
        /// <param name="entryGradeLevelReasonDescriptor"></param>
        /// <param name="entryTypeDescriptor"></param>
        /// <param name="exitWithdrawTypeDescriptor"></param>
        /// <param name="entryGradeLevelDescriptor"></param>
        /// <param name="nextYearGradeLevelDescriptor"></param>
        /// <param name="residencyStatusDescriptor"></param>
        /// <param name="schoolChoiceBasisDescriptor"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetStudentSchoolAssociationsPartitions(Option<string> studentUniqueId, Option<string> calendarCode, Option<string> graduationPlanTypeDescriptor, Option<string> enrollmentTypeDescriptor, Option<string> entryGradeLevelReasonDescriptor, Option<string> entryTypeDescriptor, Option<string> exitWithdrawTypeDescriptor, Option<string> entryGradeLevelDescriptor, Option<string> nextYearGradeLevelDescriptor, Option<string> residencyStatusDescriptor, Option<string> schoolChoiceBasisDescriptor, Option<string> id)
        {
            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (calendarCode.IsSet && calendarCode.Value == null)
                throw new ArgumentNullException(nameof(calendarCode));

            if (graduationPlanTypeDescriptor.IsSet && graduationPlanTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(graduationPlanTypeDescriptor));

            if (enrollmentTypeDescriptor.IsSet && enrollmentTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(enrollmentTypeDescriptor));

            if (entryGradeLevelReasonDescriptor.IsSet && entryGradeLevelReasonDescriptor.Value == null)
                throw new ArgumentNullException(nameof(entryGradeLevelReasonDescriptor));

            if (entryTypeDescriptor.IsSet && entryTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(entryTypeDescriptor));

            if (exitWithdrawTypeDescriptor.IsSet && exitWithdrawTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(exitWithdrawTypeDescriptor));

            if (entryGradeLevelDescriptor.IsSet && entryGradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(entryGradeLevelDescriptor));

            if (nextYearGradeLevelDescriptor.IsSet && nextYearGradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(nextYearGradeLevelDescriptor));

            if (residencyStatusDescriptor.IsSet && residencyStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(residencyStatusDescriptor));

            if (schoolChoiceBasisDescriptor.IsSet && schoolChoiceBasisDescriptor.Value == null)
                throw new ArgumentNullException(nameof(schoolChoiceBasisDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="entryDate"></param>
        /// <param name="schoolId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="calendarCode"></param>
        /// <param name="schoolYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="graduationPlanTypeDescriptor"></param>
        /// <param name="graduationSchoolYear"></param>
        /// <param name="nextYearSchoolId"></param>
        /// <param name="classOfSchoolYear"></param>
        /// <param name="enrollmentTypeDescriptor"></param>
        /// <param name="entryGradeLevelReasonDescriptor"></param>
        /// <param name="entryTypeDescriptor"></param>
        /// <param name="exitWithdrawTypeDescriptor"></param>
        /// <param name="entryGradeLevelDescriptor"></param>
        /// <param name="nextYearGradeLevelDescriptor"></param>
        /// <param name="residencyStatusDescriptor"></param>
        /// <param name="schoolChoiceBasisDescriptor"></param>
        /// <param name="employedWhileEnrolled"></param>
        /// <param name="exitWithdrawDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="primarySchool"></param>
        /// <param name="repeatGradeIndicator"></param>
        /// <param name="schoolChoice"></param>
        /// <param name="schoolChoiceTransfer"></param>
        /// <param name="termCompletionIndicator"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSchoolAssociationsPartitionsDefaultImplementation(IGetStudentSchoolAssociationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> entryDate, Option<long> schoolId, Option<string> studentUniqueId, Option<string> calendarCode, Option<int> schoolYear, Option<long> educationOrganizationId, Option<string> graduationPlanTypeDescriptor, Option<int> graduationSchoolYear, Option<long> nextYearSchoolId, Option<int> classOfSchoolYear, Option<string> enrollmentTypeDescriptor, Option<string> entryGradeLevelReasonDescriptor, Option<string> entryTypeDescriptor, Option<string> exitWithdrawTypeDescriptor, Option<string> entryGradeLevelDescriptor, Option<string> nextYearGradeLevelDescriptor, Option<string> residencyStatusDescriptor, Option<string> schoolChoiceBasisDescriptor, Option<bool> employedWhileEnrolled, Option<DateOnly> exitWithdrawDate, Option<double> fullTimeEquivalency, Option<string> id, Option<bool> primarySchool, Option<bool> repeatGradeIndicator, Option<bool> schoolChoice, Option<bool> schoolChoiceTransfer, Option<bool> termCompletionIndicator, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSchoolAssociationsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, nextYearSchoolId, classOfSchoolYear, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoice, schoolChoiceTransfer, termCompletionIndicator, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="entryDate"></param>
        /// <param name="schoolId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="calendarCode"></param>
        /// <param name="schoolYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="graduationPlanTypeDescriptor"></param>
        /// <param name="graduationSchoolYear"></param>
        /// <param name="nextYearSchoolId"></param>
        /// <param name="classOfSchoolYear"></param>
        /// <param name="enrollmentTypeDescriptor"></param>
        /// <param name="entryGradeLevelReasonDescriptor"></param>
        /// <param name="entryTypeDescriptor"></param>
        /// <param name="exitWithdrawTypeDescriptor"></param>
        /// <param name="entryGradeLevelDescriptor"></param>
        /// <param name="nextYearGradeLevelDescriptor"></param>
        /// <param name="residencyStatusDescriptor"></param>
        /// <param name="schoolChoiceBasisDescriptor"></param>
        /// <param name="employedWhileEnrolled"></param>
        /// <param name="exitWithdrawDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="primarySchool"></param>
        /// <param name="repeatGradeIndicator"></param>
        /// <param name="schoolChoice"></param>
        /// <param name="schoolChoiceTransfer"></param>
        /// <param name="termCompletionIndicator"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSchoolAssociationsPartitions(ref bool suppressDefaultLog, IGetStudentSchoolAssociationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> entryDate, Option<long> schoolId, Option<string> studentUniqueId, Option<string> calendarCode, Option<int> schoolYear, Option<long> educationOrganizationId, Option<string> graduationPlanTypeDescriptor, Option<int> graduationSchoolYear, Option<long> nextYearSchoolId, Option<int> classOfSchoolYear, Option<string> enrollmentTypeDescriptor, Option<string> entryGradeLevelReasonDescriptor, Option<string> entryTypeDescriptor, Option<string> exitWithdrawTypeDescriptor, Option<string> entryGradeLevelDescriptor, Option<string> nextYearGradeLevelDescriptor, Option<string> residencyStatusDescriptor, Option<string> schoolChoiceBasisDescriptor, Option<bool> employedWhileEnrolled, Option<DateOnly> exitWithdrawDate, Option<double> fullTimeEquivalency, Option<string> id, Option<bool> primarySchool, Option<bool> repeatGradeIndicator, Option<bool> schoolChoice, Option<bool> schoolChoiceTransfer, Option<bool> termCompletionIndicator, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="entryDate"></param>
        /// <param name="schoolId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="calendarCode"></param>
        /// <param name="schoolYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="graduationPlanTypeDescriptor"></param>
        /// <param name="graduationSchoolYear"></param>
        /// <param name="nextYearSchoolId"></param>
        /// <param name="classOfSchoolYear"></param>
        /// <param name="enrollmentTypeDescriptor"></param>
        /// <param name="entryGradeLevelReasonDescriptor"></param>
        /// <param name="entryTypeDescriptor"></param>
        /// <param name="exitWithdrawTypeDescriptor"></param>
        /// <param name="entryGradeLevelDescriptor"></param>
        /// <param name="nextYearGradeLevelDescriptor"></param>
        /// <param name="residencyStatusDescriptor"></param>
        /// <param name="schoolChoiceBasisDescriptor"></param>
        /// <param name="employedWhileEnrolled"></param>
        /// <param name="exitWithdrawDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="primarySchool"></param>
        /// <param name="repeatGradeIndicator"></param>
        /// <param name="schoolChoice"></param>
        /// <param name="schoolChoiceTransfer"></param>
        /// <param name="termCompletionIndicator"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSchoolAssociationsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> entryDate, Option<long> schoolId, Option<string> studentUniqueId, Option<string> calendarCode, Option<int> schoolYear, Option<long> educationOrganizationId, Option<string> graduationPlanTypeDescriptor, Option<int> graduationSchoolYear, Option<long> nextYearSchoolId, Option<int> classOfSchoolYear, Option<string> enrollmentTypeDescriptor, Option<string> entryGradeLevelReasonDescriptor, Option<string> entryTypeDescriptor, Option<string> exitWithdrawTypeDescriptor, Option<string> entryGradeLevelDescriptor, Option<string> nextYearGradeLevelDescriptor, Option<string> residencyStatusDescriptor, Option<string> schoolChoiceBasisDescriptor, Option<bool> employedWhileEnrolled, Option<DateOnly> exitWithdrawDate, Option<double> fullTimeEquivalency, Option<string> id, Option<bool> primarySchool, Option<bool> repeatGradeIndicator, Option<bool> schoolChoice, Option<bool> schoolChoiceTransfer, Option<bool> termCompletionIndicator, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSchoolAssociationsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, nextYearSchoolId, classOfSchoolYear, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoice, schoolChoiceTransfer, termCompletionIndicator, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="entryDate"></param>
        /// <param name="schoolId"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="calendarCode"></param>
        /// <param name="schoolYear"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="graduationPlanTypeDescriptor"></param>
        /// <param name="graduationSchoolYear"></param>
        /// <param name="nextYearSchoolId"></param>
        /// <param name="classOfSchoolYear"></param>
        /// <param name="enrollmentTypeDescriptor"></param>
        /// <param name="entryGradeLevelReasonDescriptor"></param>
        /// <param name="entryTypeDescriptor"></param>
        /// <param name="exitWithdrawTypeDescriptor"></param>
        /// <param name="entryGradeLevelDescriptor"></param>
        /// <param name="nextYearGradeLevelDescriptor"></param>
        /// <param name="residencyStatusDescriptor"></param>
        /// <param name="schoolChoiceBasisDescriptor"></param>
        /// <param name="employedWhileEnrolled"></param>
        /// <param name="exitWithdrawDate"></param>
        /// <param name="fullTimeEquivalency"></param>
        /// <param name="id"></param>
        /// <param name="primarySchool"></param>
        /// <param name="repeatGradeIndicator"></param>
        /// <param name="schoolChoice"></param>
        /// <param name="schoolChoiceTransfer"></param>
        /// <param name="termCompletionIndicator"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSchoolAssociationsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> entryDate, Option<long> schoolId, Option<string> studentUniqueId, Option<string> calendarCode, Option<int> schoolYear, Option<long> educationOrganizationId, Option<string> graduationPlanTypeDescriptor, Option<int> graduationSchoolYear, Option<long> nextYearSchoolId, Option<int> classOfSchoolYear, Option<string> enrollmentTypeDescriptor, Option<string> entryGradeLevelReasonDescriptor, Option<string> entryTypeDescriptor, Option<string> exitWithdrawTypeDescriptor, Option<string> entryGradeLevelDescriptor, Option<string> nextYearGradeLevelDescriptor, Option<string> residencyStatusDescriptor, Option<string> schoolChoiceBasisDescriptor, Option<bool> employedWhileEnrolled, Option<DateOnly> exitWithdrawDate, Option<double> fullTimeEquivalency, Option<string> id, Option<bool> primarySchool, Option<bool> repeatGradeIndicator, Option<bool> schoolChoice, Option<bool> schoolChoiceTransfer, Option<bool> termCompletionIndicator, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student&#39;s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="nextYearSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="classOfSchoolYear">Projected high school graduation year. (optional)</param>
        /// <param name="enrollmentTypeDescriptor">The type of enrollment reflected by the StudentSchoolAssociation. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="nextYearGradeLevelDescriptor">The anticipated grade level for the student for the next school year. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="schoolChoiceBasisDescriptor">The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoice">An indication of whether the student enrolled in this school under the provisions for public school choice (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSchoolAssociationsPartitionsApiResponse?> GetStudentSchoolAssociationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> entryDate = default, Option<long> schoolId = default, Option<string> studentUniqueId = default, Option<string> calendarCode = default, Option<int> schoolYear = default, Option<long> educationOrganizationId = default, Option<string> graduationPlanTypeDescriptor = default, Option<int> graduationSchoolYear = default, Option<long> nextYearSchoolId = default, Option<int> classOfSchoolYear = default, Option<string> enrollmentTypeDescriptor = default, Option<string> entryGradeLevelReasonDescriptor = default, Option<string> entryTypeDescriptor = default, Option<string> exitWithdrawTypeDescriptor = default, Option<string> entryGradeLevelDescriptor = default, Option<string> nextYearGradeLevelDescriptor = default, Option<string> residencyStatusDescriptor = default, Option<string> schoolChoiceBasisDescriptor = default, Option<bool> employedWhileEnrolled = default, Option<DateOnly> exitWithdrawDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<bool> primarySchool = default, Option<bool> repeatGradeIndicator = default, Option<bool> schoolChoice = default, Option<bool> schoolChoiceTransfer = default, Option<bool> termCompletionIndicator = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSchoolAssociationsPartitionsAsync(number, minChangeVersion, maxChangeVersion, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, nextYearSchoolId, classOfSchoolYear, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoice, schoolChoiceTransfer, termCompletionIndicator, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student&#39;s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="calendarCode">The identifier for the calendar. (optional)</param>
        /// <param name="schoolYear">The school year associated with the student&#39;s enrollment. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation. (optional)</param>
        /// <param name="graduationSchoolYear">The school year the student is expected to graduate. (optional)</param>
        /// <param name="nextYearSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="classOfSchoolYear">Projected high school graduation year. (optional)</param>
        /// <param name="enrollmentTypeDescriptor">The type of enrollment reflected by the StudentSchoolAssociation. (optional)</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session. (optional)</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution. (optional)</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)</param>
        /// <param name="nextYearGradeLevelDescriptor">The anticipated grade level for the student for the next school year. (optional)</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)</param>
        /// <param name="schoolChoiceBasisDescriptor">The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state (optional)</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student. (optional)</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)</param>
        /// <param name="schoolChoice">An indication of whether the student enrolled in this school under the provisions for public school choice (optional)</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSchoolAssociationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSchoolAssociationsPartitionsApiResponse> GetStudentSchoolAssociationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> entryDate = default, Option<long> schoolId = default, Option<string> studentUniqueId = default, Option<string> calendarCode = default, Option<int> schoolYear = default, Option<long> educationOrganizationId = default, Option<string> graduationPlanTypeDescriptor = default, Option<int> graduationSchoolYear = default, Option<long> nextYearSchoolId = default, Option<int> classOfSchoolYear = default, Option<string> enrollmentTypeDescriptor = default, Option<string> entryGradeLevelReasonDescriptor = default, Option<string> entryTypeDescriptor = default, Option<string> exitWithdrawTypeDescriptor = default, Option<string> entryGradeLevelDescriptor = default, Option<string> nextYearGradeLevelDescriptor = default, Option<string> residencyStatusDescriptor = default, Option<string> schoolChoiceBasisDescriptor = default, Option<bool> employedWhileEnrolled = default, Option<DateOnly> exitWithdrawDate = default, Option<double> fullTimeEquivalency = default, Option<string> id = default, Option<bool> primarySchool = default, Option<bool> repeatGradeIndicator = default, Option<bool> schoolChoice = default, Option<bool> schoolChoiceTransfer = default, Option<bool> termCompletionIndicator = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSchoolAssociationsPartitions(studentUniqueId, calendarCode, graduationPlanTypeDescriptor, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, id);

                FormatGetStudentSchoolAssociationsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref entryDate, ref schoolId, ref studentUniqueId, ref calendarCode, ref schoolYear, ref educationOrganizationId, ref graduationPlanTypeDescriptor, ref graduationSchoolYear, ref nextYearSchoolId, ref classOfSchoolYear, ref enrollmentTypeDescriptor, ref entryGradeLevelReasonDescriptor, ref entryTypeDescriptor, ref exitWithdrawTypeDescriptor, ref entryGradeLevelDescriptor, ref nextYearGradeLevelDescriptor, ref residencyStatusDescriptor, ref schoolChoiceBasisDescriptor, ref employedWhileEnrolled, ref exitWithdrawDate, ref fullTimeEquivalency, ref id, ref primarySchool, ref repeatGradeIndicator, ref schoolChoice, ref schoolChoiceTransfer, ref termCompletionIndicator, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSchoolAssociations/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSchoolAssociations/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (entryDate.IsSet)
                        parseQueryStringLocalVar["entryDate"] = ClientUtils.ParameterToString(entryDate.Value);

                    if (schoolId.IsSet)
                        parseQueryStringLocalVar["schoolId"] = ClientUtils.ParameterToString(schoolId.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (calendarCode.IsSet)
                        parseQueryStringLocalVar["calendarCode"] = ClientUtils.ParameterToString(calendarCode.Value);

                    if (schoolYear.IsSet)
                        parseQueryStringLocalVar["schoolYear"] = ClientUtils.ParameterToString(schoolYear.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (graduationPlanTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["graduationPlanTypeDescriptor"] = ClientUtils.ParameterToString(graduationPlanTypeDescriptor.Value);

                    if (graduationSchoolYear.IsSet)
                        parseQueryStringLocalVar["graduationSchoolYear"] = ClientUtils.ParameterToString(graduationSchoolYear.Value);

                    if (nextYearSchoolId.IsSet)
                        parseQueryStringLocalVar["nextYearSchoolId"] = ClientUtils.ParameterToString(nextYearSchoolId.Value);

                    if (classOfSchoolYear.IsSet)
                        parseQueryStringLocalVar["classOfSchoolYear"] = ClientUtils.ParameterToString(classOfSchoolYear.Value);

                    if (enrollmentTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["enrollmentTypeDescriptor"] = ClientUtils.ParameterToString(enrollmentTypeDescriptor.Value);

                    if (entryGradeLevelReasonDescriptor.IsSet)
                        parseQueryStringLocalVar["entryGradeLevelReasonDescriptor"] = ClientUtils.ParameterToString(entryGradeLevelReasonDescriptor.Value);

                    if (entryTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["entryTypeDescriptor"] = ClientUtils.ParameterToString(entryTypeDescriptor.Value);

                    if (exitWithdrawTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["exitWithdrawTypeDescriptor"] = ClientUtils.ParameterToString(exitWithdrawTypeDescriptor.Value);

                    if (entryGradeLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["entryGradeLevelDescriptor"] = ClientUtils.ParameterToString(entryGradeLevelDescriptor.Value);

                    if (nextYearGradeLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["nextYearGradeLevelDescriptor"] = ClientUtils.ParameterToString(nextYearGradeLevelDescriptor.Value);

                    if (residencyStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["residencyStatusDescriptor"] = ClientUtils.ParameterToString(residencyStatusDescriptor.Value);

                    if (schoolChoiceBasisDescriptor.IsSet)
                        parseQueryStringLocalVar["schoolChoiceBasisDescriptor"] = ClientUtils.ParameterToString(schoolChoiceBasisDescriptor.Value);

                    if (employedWhileEnrolled.IsSet)
                        parseQueryStringLocalVar["employedWhileEnrolled"] = ClientUtils.ParameterToString(employedWhileEnrolled.Value);

                    if (exitWithdrawDate.IsSet)
                        parseQueryStringLocalVar["exitWithdrawDate"] = ClientUtils.ParameterToString(exitWithdrawDate.Value);

                    if (fullTimeEquivalency.IsSet)
                        parseQueryStringLocalVar["fullTimeEquivalency"] = ClientUtils.ParameterToString(fullTimeEquivalency.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (primarySchool.IsSet)
                        parseQueryStringLocalVar["primarySchool"] = ClientUtils.ParameterToString(primarySchool.Value);

                    if (repeatGradeIndicator.IsSet)
                        parseQueryStringLocalVar["repeatGradeIndicator"] = ClientUtils.ParameterToString(repeatGradeIndicator.Value);

                    if (schoolChoice.IsSet)
                        parseQueryStringLocalVar["schoolChoice"] = ClientUtils.ParameterToString(schoolChoice.Value);

                    if (schoolChoiceTransfer.IsSet)
                        parseQueryStringLocalVar["schoolChoiceTransfer"] = ClientUtils.ParameterToString(schoolChoiceTransfer.Value);

                    if (termCompletionIndicator.IsSet)
                        parseQueryStringLocalVar["termCompletionIndicator"] = ClientUtils.ParameterToString(termCompletionIndicator.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSchoolAssociationsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSchoolAssociationsPartitionsApiResponse>();

                        GetStudentSchoolAssociationsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSchoolAssociations/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSchoolAssociationsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, nextYearSchoolId, classOfSchoolYear, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoice, schoolChoiceTransfer, termCompletionIndicator, useSnapshot);

                        Events.ExecuteOnGetStudentSchoolAssociationsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSchoolAssociationsPartitionsDefaultImplementation(e, "/ed-fi/studentSchoolAssociations/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, nextYearSchoolId, classOfSchoolYear, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, nextYearGradeLevelDescriptor, residencyStatusDescriptor, schoolChoiceBasisDescriptor, employedWhileEnrolled, exitWithdrawDate, fullTimeEquivalency, id, primarySchool, repeatGradeIndicator, schoolChoice, schoolChoiceTransfer, termCompletionIndicator, useSnapshot);
                Events.ExecuteOnErrorGetStudentSchoolAssociationsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSchoolAssociationsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetStudentSchoolAssociationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSchoolAssociationsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSchoolAssociationsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSchoolAssociationsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSchoolAssociationsPartitionsApiResponse(ILogger<GetStudentSchoolAssociationsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesStudentSchoolAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesStudentSchoolAssociationsDefaultImplementation(IKeyChangesStudentSchoolAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesStudentSchoolAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesStudentSchoolAssociations(ref bool suppressDefaultLog, IKeyChangesStudentSchoolAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesStudentSchoolAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesStudentSchoolAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesStudentSchoolAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSchoolAssociationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentSchoolAssociationsApiResponse?> KeyChangesStudentSchoolAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesStudentSchoolAssociationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSchoolAssociationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentSchoolAssociationsApiResponse> KeyChangesStudentSchoolAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesStudentSchoolAssociations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSchoolAssociations/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSchoolAssociations/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesStudentSchoolAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesStudentSchoolAssociationsApiResponse>();

                        KeyChangesStudentSchoolAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSchoolAssociations/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesStudentSchoolAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesStudentSchoolAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesStudentSchoolAssociationsDefaultImplementation(e, "/ed-fi/studentSchoolAssociations/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesStudentSchoolAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesStudentSchoolAssociationsApiResponse"/>
        /// </summary>
        public partial class KeyChangesStudentSchoolAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesStudentSchoolAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesStudentSchoolAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesStudentSchoolAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesStudentSchoolAssociationsApiResponse(ILogger<KeyChangesStudentSchoolAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentSchoolAssociationKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentSchoolAssociationKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentSchoolAssociationKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostStudentSchoolAssociation(EdFiStudentSchoolAssociation edFiStudentSchoolAssociation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiStudentSchoolAssociation"></param>
        /// <returns></returns>
        private void ValidatePostStudentSchoolAssociation(EdFiStudentSchoolAssociation edFiStudentSchoolAssociation)
        {
            if (edFiStudentSchoolAssociation == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentSchoolAssociation"></param>
        private void AfterPostStudentSchoolAssociationDefaultImplementation(IPostStudentSchoolAssociationApiResponse apiResponseLocalVar, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation)
        {
            bool suppressDefaultLog = false;
            AfterPostStudentSchoolAssociation(ref suppressDefaultLog, apiResponseLocalVar, edFiStudentSchoolAssociation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentSchoolAssociation"></param>
        partial void AfterPostStudentSchoolAssociation(ref bool suppressDefaultLog, IPostStudentSchoolAssociationApiResponse apiResponseLocalVar, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentSchoolAssociation"></param>
        private void OnErrorPostStudentSchoolAssociationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostStudentSchoolAssociation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiStudentSchoolAssociation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentSchoolAssociation"></param>
        partial void OnErrorPostStudentSchoolAssociation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiStudentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSchoolAssociationApiResponse"/>&gt;</returns>
        public async Task<IPostStudentSchoolAssociationApiResponse?> PostStudentSchoolAssociationOrDefaultAsync(EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostStudentSchoolAssociationAsync(edFiStudentSchoolAssociation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSchoolAssociationApiResponse"/>&gt;</returns>
        public async Task<IPostStudentSchoolAssociationApiResponse> PostStudentSchoolAssociationAsync(EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostStudentSchoolAssociation(edFiStudentSchoolAssociation);

                FormatPostStudentSchoolAssociation(edFiStudentSchoolAssociation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSchoolAssociations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSchoolAssociations");

                    httpRequestMessageLocalVar.Content = (edFiStudentSchoolAssociation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentSchoolAssociation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostStudentSchoolAssociationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostStudentSchoolAssociationApiResponse>();

                        PostStudentSchoolAssociationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSchoolAssociations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostStudentSchoolAssociationDefaultImplementation(apiResponseLocalVar, edFiStudentSchoolAssociation);

                        Events.ExecuteOnPostStudentSchoolAssociation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostStudentSchoolAssociationDefaultImplementation(e, "/ed-fi/studentSchoolAssociations", uriBuilderLocalVar.Path, edFiStudentSchoolAssociation);
                Events.ExecuteOnErrorPostStudentSchoolAssociation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostStudentSchoolAssociationApiResponse"/>
        /// </summary>
        public partial class PostStudentSchoolAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostStudentSchoolAssociationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostStudentSchoolAssociationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostStudentSchoolAssociationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostStudentSchoolAssociationApiResponse(ILogger<PostStudentSchoolAssociationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutStudentSchoolAssociation(ref string id, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiStudentSchoolAssociation"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutStudentSchoolAssociation(string id, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiStudentSchoolAssociation == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSchoolAssociation"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutStudentSchoolAssociationDefaultImplementation(IPutStudentSchoolAssociationApiResponse apiResponseLocalVar, string id, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutStudentSchoolAssociation(ref suppressDefaultLog, apiResponseLocalVar, id, edFiStudentSchoolAssociation, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSchoolAssociation"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutStudentSchoolAssociation(ref bool suppressDefaultLog, IPutStudentSchoolAssociationApiResponse apiResponseLocalVar, string id, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSchoolAssociation"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutStudentSchoolAssociationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutStudentSchoolAssociation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiStudentSchoolAssociation, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSchoolAssociation"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutStudentSchoolAssociation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSchoolAssociationApiResponse"/>&gt;</returns>
        public async Task<IPutStudentSchoolAssociationApiResponse?> PutStudentSchoolAssociationOrDefaultAsync(string id, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutStudentSchoolAssociationAsync(id, edFiStudentSchoolAssociation, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, if natural key values are being updated by the JSON body, those changes will be applied to the resource and will also cascade through to dependent resources.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSchoolAssociation">The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSchoolAssociationApiResponse"/>&gt;</returns>
        public async Task<IPutStudentSchoolAssociationApiResponse> PutStudentSchoolAssociationAsync(string id, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutStudentSchoolAssociation(id, edFiStudentSchoolAssociation, ifMatch);

                FormatPutStudentSchoolAssociation(ref id, edFiStudentSchoolAssociation, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSchoolAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSchoolAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiStudentSchoolAssociation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentSchoolAssociation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutStudentSchoolAssociationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutStudentSchoolAssociationApiResponse>();

                        PutStudentSchoolAssociationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSchoolAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutStudentSchoolAssociationDefaultImplementation(apiResponseLocalVar, id, edFiStudentSchoolAssociation, ifMatch);

                        Events.ExecuteOnPutStudentSchoolAssociation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutStudentSchoolAssociationDefaultImplementation(e, "/ed-fi/studentSchoolAssociations/{id}", uriBuilderLocalVar.Path, id, edFiStudentSchoolAssociation, ifMatch);
                Events.ExecuteOnErrorPutStudentSchoolAssociation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutStudentSchoolAssociationApiResponse"/>
        /// </summary>
        public partial class PutStudentSchoolAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutStudentSchoolAssociationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutStudentSchoolAssociationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutStudentSchoolAssociationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutStudentSchoolAssociationApiResponse(ILogger<PutStudentSchoolAssociationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
