// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStudentSectionAttendanceEventsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StudentSectionAttendanceEventsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSectionAttendanceEventByIdApiResponse"/>&gt;</returns>
        Task<IDeleteStudentSectionAttendanceEventByIdApiResponse> DeleteStudentSectionAttendanceEventByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSectionAttendanceEventByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteStudentSectionAttendanceEventByIdApiResponse?> DeleteStudentSectionAttendanceEventByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSectionAttendanceEventsApiResponse"/>&gt;</returns>
        Task<IDeletesStudentSectionAttendanceEventsApiResponse> DeletesStudentSectionAttendanceEventsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSectionAttendanceEventsApiResponse"/>?&gt;</returns>
        Task<IDeletesStudentSectionAttendanceEventsApiResponse?> DeletesStudentSectionAttendanceEventsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="attendanceEventCategoryDescriptor">A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy. (optional)</param>
        /// <param name="eventDate">Date for this attendance event. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section. (optional)</param>
        /// <param name="arrivalTime">The time of day the student arrived for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="attendanceEventReason">The reported reason for a student&#39;s absence. (optional)</param>
        /// <param name="departureTime">The time of day the student departed for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="eventDuration">The amount of time in days for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="sectionAttendanceDuration">The duration in minutes of the section attendance event. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsApiResponse"/>&gt;</returns>
        Task<IGetStudentSectionAttendanceEventsApiResponse> GetStudentSectionAttendanceEventsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> attendanceEventCategoryDescriptor = default, Option<DateOnly> eventDate = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> studentUniqueId = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> arrivalTime = default, Option<string> attendanceEventReason = default, Option<string> departureTime = default, Option<double> eventDuration = default, Option<string> id = default, Option<int> sectionAttendanceDuration = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="attendanceEventCategoryDescriptor">A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy. (optional)</param>
        /// <param name="eventDate">Date for this attendance event. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section. (optional)</param>
        /// <param name="arrivalTime">The time of day the student arrived for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="attendanceEventReason">The reported reason for a student&#39;s absence. (optional)</param>
        /// <param name="departureTime">The time of day the student departed for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="eventDuration">The amount of time in days for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="sectionAttendanceDuration">The duration in minutes of the section attendance event. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsApiResponse"/>?&gt;</returns>
        Task<IGetStudentSectionAttendanceEventsApiResponse?> GetStudentSectionAttendanceEventsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> attendanceEventCategoryDescriptor = default, Option<DateOnly> eventDate = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> studentUniqueId = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> arrivalTime = default, Option<string> attendanceEventReason = default, Option<string> departureTime = default, Option<double> eventDuration = default, Option<string> id = default, Option<int> sectionAttendanceDuration = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsByIdApiResponse"/>&gt;</returns>
        Task<IGetStudentSectionAttendanceEventsByIdApiResponse> GetStudentSectionAttendanceEventsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsByIdApiResponse"/>?&gt;</returns>
        Task<IGetStudentSectionAttendanceEventsByIdApiResponse?> GetStudentSectionAttendanceEventsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="attendanceEventCategoryDescriptor">A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy. (optional)</param>
        /// <param name="eventDate">Date for this attendance event. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section. (optional)</param>
        /// <param name="arrivalTime">The time of day the student arrived for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="attendanceEventReason">The reported reason for a student&#39;s absence. (optional)</param>
        /// <param name="departureTime">The time of day the student departed for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="eventDuration">The amount of time in days for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="sectionAttendanceDuration">The duration in minutes of the section attendance event. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetStudentSectionAttendanceEventsPartitionsApiResponse> GetStudentSectionAttendanceEventsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> attendanceEventCategoryDescriptor = default, Option<DateOnly> eventDate = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> studentUniqueId = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> arrivalTime = default, Option<string> attendanceEventReason = default, Option<string> departureTime = default, Option<double> eventDuration = default, Option<string> id = default, Option<int> sectionAttendanceDuration = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="attendanceEventCategoryDescriptor">A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy. (optional)</param>
        /// <param name="eventDate">Date for this attendance event. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section. (optional)</param>
        /// <param name="arrivalTime">The time of day the student arrived for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="attendanceEventReason">The reported reason for a student&#39;s absence. (optional)</param>
        /// <param name="departureTime">The time of day the student departed for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="eventDuration">The amount of time in days for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="sectionAttendanceDuration">The duration in minutes of the section attendance event. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetStudentSectionAttendanceEventsPartitionsApiResponse?> GetStudentSectionAttendanceEventsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> attendanceEventCategoryDescriptor = default, Option<DateOnly> eventDate = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> studentUniqueId = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> arrivalTime = default, Option<string> attendanceEventReason = default, Option<string> departureTime = default, Option<double> eventDuration = default, Option<string> id = default, Option<int> sectionAttendanceDuration = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSectionAttendanceEventsApiResponse"/>&gt;</returns>
        Task<IKeyChangesStudentSectionAttendanceEventsApiResponse> KeyChangesStudentSectionAttendanceEventsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSectionAttendanceEventsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesStudentSectionAttendanceEventsApiResponse?> KeyChangesStudentSectionAttendanceEventsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentSectionAttendanceEvent">The JSON representation of the \&quot;studentSectionAttendanceEvent\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSectionAttendanceEventApiResponse"/>&gt;</returns>
        Task<IPostStudentSectionAttendanceEventApiResponse> PostStudentSectionAttendanceEventAsync(EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiStudentSectionAttendanceEvent">The JSON representation of the \&quot;studentSectionAttendanceEvent\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSectionAttendanceEventApiResponse"/>?&gt;</returns>
        Task<IPostStudentSectionAttendanceEventApiResponse?> PostStudentSectionAttendanceEventOrDefaultAsync(EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSectionAttendanceEvent">The JSON representation of the \&quot;studentSectionAttendanceEvent\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSectionAttendanceEventApiResponse"/>&gt;</returns>
        Task<IPutStudentSectionAttendanceEventApiResponse> PutStudentSectionAttendanceEventAsync(string id, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSectionAttendanceEvent">The JSON representation of the \&quot;studentSectionAttendanceEvent\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSectionAttendanceEventApiResponse"/>?&gt;</returns>
        Task<IPutStudentSectionAttendanceEventApiResponse?> PutStudentSectionAttendanceEventOrDefaultAsync(string id, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteStudentSectionAttendanceEventByIdApiResponse"/>
    /// </summary>
    public interface IDeleteStudentSectionAttendanceEventByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesStudentSectionAttendanceEventsApiResponse"/>
    /// </summary>
    public interface IDeletesStudentSectionAttendanceEventsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentSectionAttendanceEventDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSectionAttendanceEventsApiResponse"/>
    /// </summary>
    public interface IGetStudentSectionAttendanceEventsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiStudentSectionAttendanceEvent>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSectionAttendanceEventsByIdApiResponse"/>
    /// </summary>
    public interface IGetStudentSectionAttendanceEventsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSectionAttendanceEvent?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSectionAttendanceEventsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetStudentSectionAttendanceEventsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesStudentSectionAttendanceEventsApiResponse"/>
    /// </summary>
    public interface IKeyChangesStudentSectionAttendanceEventsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentSectionAttendanceEventKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostStudentSectionAttendanceEventApiResponse"/>
    /// </summary>
    public interface IPostStudentSectionAttendanceEventApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutStudentSectionAttendanceEventApiResponse"/>
    /// </summary>
    public interface IPutStudentSectionAttendanceEventApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StudentSectionAttendanceEventsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteStudentSectionAttendanceEventById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteStudentSectionAttendanceEventById;

        internal void ExecuteOnDeleteStudentSectionAttendanceEventById(StudentSectionAttendanceEventsApi.DeleteStudentSectionAttendanceEventByIdApiResponse apiResponse)
        {
            OnDeleteStudentSectionAttendanceEventById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteStudentSectionAttendanceEventById(Exception exception)
        {
            OnErrorDeleteStudentSectionAttendanceEventById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesStudentSectionAttendanceEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesStudentSectionAttendanceEvents;

        internal void ExecuteOnDeletesStudentSectionAttendanceEvents(StudentSectionAttendanceEventsApi.DeletesStudentSectionAttendanceEventsApiResponse apiResponse)
        {
            OnDeletesStudentSectionAttendanceEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesStudentSectionAttendanceEvents(Exception exception)
        {
            OnErrorDeletesStudentSectionAttendanceEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSectionAttendanceEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSectionAttendanceEvents;

        internal void ExecuteOnGetStudentSectionAttendanceEvents(StudentSectionAttendanceEventsApi.GetStudentSectionAttendanceEventsApiResponse apiResponse)
        {
            OnGetStudentSectionAttendanceEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSectionAttendanceEvents(Exception exception)
        {
            OnErrorGetStudentSectionAttendanceEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSectionAttendanceEventsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSectionAttendanceEventsById;

        internal void ExecuteOnGetStudentSectionAttendanceEventsById(StudentSectionAttendanceEventsApi.GetStudentSectionAttendanceEventsByIdApiResponse apiResponse)
        {
            OnGetStudentSectionAttendanceEventsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSectionAttendanceEventsById(Exception exception)
        {
            OnErrorGetStudentSectionAttendanceEventsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSectionAttendanceEventsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSectionAttendanceEventsPartitions;

        internal void ExecuteOnGetStudentSectionAttendanceEventsPartitions(StudentSectionAttendanceEventsApi.GetStudentSectionAttendanceEventsPartitionsApiResponse apiResponse)
        {
            OnGetStudentSectionAttendanceEventsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSectionAttendanceEventsPartitions(Exception exception)
        {
            OnErrorGetStudentSectionAttendanceEventsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesStudentSectionAttendanceEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesStudentSectionAttendanceEvents;

        internal void ExecuteOnKeyChangesStudentSectionAttendanceEvents(StudentSectionAttendanceEventsApi.KeyChangesStudentSectionAttendanceEventsApiResponse apiResponse)
        {
            OnKeyChangesStudentSectionAttendanceEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesStudentSectionAttendanceEvents(Exception exception)
        {
            OnErrorKeyChangesStudentSectionAttendanceEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostStudentSectionAttendanceEvent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostStudentSectionAttendanceEvent;

        internal void ExecuteOnPostStudentSectionAttendanceEvent(StudentSectionAttendanceEventsApi.PostStudentSectionAttendanceEventApiResponse apiResponse)
        {
            OnPostStudentSectionAttendanceEvent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostStudentSectionAttendanceEvent(Exception exception)
        {
            OnErrorPostStudentSectionAttendanceEvent?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutStudentSectionAttendanceEvent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutStudentSectionAttendanceEvent;

        internal void ExecuteOnPutStudentSectionAttendanceEvent(StudentSectionAttendanceEventsApi.PutStudentSectionAttendanceEventApiResponse apiResponse)
        {
            OnPutStudentSectionAttendanceEvent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutStudentSectionAttendanceEvent(Exception exception)
        {
            OnErrorPutStudentSectionAttendanceEvent?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StudentSectionAttendanceEventsApi : IStudentSectionAttendanceEventsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StudentSectionAttendanceEventsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StudentSectionAttendanceEventsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentSectionAttendanceEventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentSectionAttendanceEventsApi(ILogger<StudentSectionAttendanceEventsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StudentSectionAttendanceEventsApiEvents studentSectionAttendanceEventsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StudentSectionAttendanceEventsApi>();
            HttpClient = httpClient;
            Events = studentSectionAttendanceEventsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteStudentSectionAttendanceEventById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteStudentSectionAttendanceEventById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteStudentSectionAttendanceEventByIdDefaultImplementation(IDeleteStudentSectionAttendanceEventByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteStudentSectionAttendanceEventById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteStudentSectionAttendanceEventById(ref bool suppressDefaultLog, IDeleteStudentSectionAttendanceEventByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteStudentSectionAttendanceEventByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteStudentSectionAttendanceEventById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteStudentSectionAttendanceEventById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSectionAttendanceEventByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentSectionAttendanceEventByIdApiResponse?> DeleteStudentSectionAttendanceEventByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteStudentSectionAttendanceEventByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSectionAttendanceEventByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentSectionAttendanceEventByIdApiResponse> DeleteStudentSectionAttendanceEventByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteStudentSectionAttendanceEventById(id, ifMatch);

                FormatDeleteStudentSectionAttendanceEventById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSectionAttendanceEvents/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSectionAttendanceEvents/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteStudentSectionAttendanceEventByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteStudentSectionAttendanceEventByIdApiResponse>();

                        DeleteStudentSectionAttendanceEventByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSectionAttendanceEvents/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteStudentSectionAttendanceEventByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteStudentSectionAttendanceEventById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteStudentSectionAttendanceEventByIdDefaultImplementation(e, "/ed-fi/studentSectionAttendanceEvents/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteStudentSectionAttendanceEventById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteStudentSectionAttendanceEventByIdApiResponse"/>
        /// </summary>
        public partial class DeleteStudentSectionAttendanceEventByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteStudentSectionAttendanceEventByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteStudentSectionAttendanceEventByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteStudentSectionAttendanceEventByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteStudentSectionAttendanceEventByIdApiResponse(ILogger<DeleteStudentSectionAttendanceEventByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesStudentSectionAttendanceEvents(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesStudentSectionAttendanceEventsDefaultImplementation(IDeletesStudentSectionAttendanceEventsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesStudentSectionAttendanceEvents(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesStudentSectionAttendanceEvents(ref bool suppressDefaultLog, IDeletesStudentSectionAttendanceEventsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesStudentSectionAttendanceEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesStudentSectionAttendanceEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesStudentSectionAttendanceEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSectionAttendanceEventsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentSectionAttendanceEventsApiResponse?> DeletesStudentSectionAttendanceEventsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesStudentSectionAttendanceEventsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSectionAttendanceEventsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentSectionAttendanceEventsApiResponse> DeletesStudentSectionAttendanceEventsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesStudentSectionAttendanceEvents(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSectionAttendanceEvents/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSectionAttendanceEvents/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesStudentSectionAttendanceEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesStudentSectionAttendanceEventsApiResponse>();

                        DeletesStudentSectionAttendanceEventsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSectionAttendanceEvents/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesStudentSectionAttendanceEventsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesStudentSectionAttendanceEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesStudentSectionAttendanceEventsDefaultImplementation(e, "/ed-fi/studentSectionAttendanceEvents/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesStudentSectionAttendanceEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesStudentSectionAttendanceEventsApiResponse"/>
        /// </summary>
        public partial class DeletesStudentSectionAttendanceEventsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesStudentSectionAttendanceEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesStudentSectionAttendanceEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesStudentSectionAttendanceEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesStudentSectionAttendanceEventsApiResponse(ILogger<DeletesStudentSectionAttendanceEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentSectionAttendanceEventDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentSectionAttendanceEventDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentSectionAttendanceEventDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSectionAttendanceEvents(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> attendanceEventCategoryDescriptor, ref Option<DateOnly> eventDate, ref Option<string> localCourseCode, ref Option<long> schoolId, ref Option<int> schoolYear, ref Option<string> sectionIdentifier, ref Option<string> sessionName, ref Option<string> studentUniqueId, ref Option<string> educationalEnvironmentDescriptor, ref Option<string> arrivalTime, ref Option<string> attendanceEventReason, ref Option<string> departureTime, ref Option<double> eventDuration, ref Option<string> id, ref Option<int> sectionAttendanceDuration, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="attendanceEventCategoryDescriptor"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="arrivalTime"></param>
        /// <param name="attendanceEventReason"></param>
        /// <param name="departureTime"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetStudentSectionAttendanceEvents(Option<string> pageToken, Option<string> attendanceEventCategoryDescriptor, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> studentUniqueId, Option<string> educationalEnvironmentDescriptor, Option<string> arrivalTime, Option<string> attendanceEventReason, Option<string> departureTime, Option<string> id)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (attendanceEventCategoryDescriptor.IsSet && attendanceEventCategoryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(attendanceEventCategoryDescriptor));

            if (localCourseCode.IsSet && localCourseCode.Value == null)
                throw new ArgumentNullException(nameof(localCourseCode));

            if (sectionIdentifier.IsSet && sectionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(sectionIdentifier));

            if (sessionName.IsSet && sessionName.Value == null)
                throw new ArgumentNullException(nameof(sessionName));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (educationalEnvironmentDescriptor.IsSet && educationalEnvironmentDescriptor.Value == null)
                throw new ArgumentNullException(nameof(educationalEnvironmentDescriptor));

            if (arrivalTime.IsSet && arrivalTime.Value == null)
                throw new ArgumentNullException(nameof(arrivalTime));

            if (attendanceEventReason.IsSet && attendanceEventReason.Value == null)
                throw new ArgumentNullException(nameof(attendanceEventReason));

            if (departureTime.IsSet && departureTime.Value == null)
                throw new ArgumentNullException(nameof(departureTime));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="attendanceEventCategoryDescriptor"></param>
        /// <param name="eventDate"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="arrivalTime"></param>
        /// <param name="attendanceEventReason"></param>
        /// <param name="departureTime"></param>
        /// <param name="eventDuration"></param>
        /// <param name="id"></param>
        /// <param name="sectionAttendanceDuration"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSectionAttendanceEventsDefaultImplementation(IGetStudentSectionAttendanceEventsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> attendanceEventCategoryDescriptor, Option<DateOnly> eventDate, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> studentUniqueId, Option<string> educationalEnvironmentDescriptor, Option<string> arrivalTime, Option<string> attendanceEventReason, Option<string> departureTime, Option<double> eventDuration, Option<string> id, Option<int> sectionAttendanceDuration, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSectionAttendanceEvents(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, attendanceEventCategoryDescriptor, eventDate, localCourseCode, schoolId, schoolYear, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, eventDuration, id, sectionAttendanceDuration, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="attendanceEventCategoryDescriptor"></param>
        /// <param name="eventDate"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="arrivalTime"></param>
        /// <param name="attendanceEventReason"></param>
        /// <param name="departureTime"></param>
        /// <param name="eventDuration"></param>
        /// <param name="id"></param>
        /// <param name="sectionAttendanceDuration"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSectionAttendanceEvents(ref bool suppressDefaultLog, IGetStudentSectionAttendanceEventsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> attendanceEventCategoryDescriptor, Option<DateOnly> eventDate, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> studentUniqueId, Option<string> educationalEnvironmentDescriptor, Option<string> arrivalTime, Option<string> attendanceEventReason, Option<string> departureTime, Option<double> eventDuration, Option<string> id, Option<int> sectionAttendanceDuration, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="attendanceEventCategoryDescriptor"></param>
        /// <param name="eventDate"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="arrivalTime"></param>
        /// <param name="attendanceEventReason"></param>
        /// <param name="departureTime"></param>
        /// <param name="eventDuration"></param>
        /// <param name="id"></param>
        /// <param name="sectionAttendanceDuration"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSectionAttendanceEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> attendanceEventCategoryDescriptor, Option<DateOnly> eventDate, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> studentUniqueId, Option<string> educationalEnvironmentDescriptor, Option<string> arrivalTime, Option<string> attendanceEventReason, Option<string> departureTime, Option<double> eventDuration, Option<string> id, Option<int> sectionAttendanceDuration, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSectionAttendanceEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, attendanceEventCategoryDescriptor, eventDate, localCourseCode, schoolId, schoolYear, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, eventDuration, id, sectionAttendanceDuration, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="attendanceEventCategoryDescriptor"></param>
        /// <param name="eventDate"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="arrivalTime"></param>
        /// <param name="attendanceEventReason"></param>
        /// <param name="departureTime"></param>
        /// <param name="eventDuration"></param>
        /// <param name="id"></param>
        /// <param name="sectionAttendanceDuration"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSectionAttendanceEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> attendanceEventCategoryDescriptor, Option<DateOnly> eventDate, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> studentUniqueId, Option<string> educationalEnvironmentDescriptor, Option<string> arrivalTime, Option<string> attendanceEventReason, Option<string> departureTime, Option<double> eventDuration, Option<string> id, Option<int> sectionAttendanceDuration, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="attendanceEventCategoryDescriptor">A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy. (optional)</param>
        /// <param name="eventDate">Date for this attendance event. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section. (optional)</param>
        /// <param name="arrivalTime">The time of day the student arrived for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="attendanceEventReason">The reported reason for a student&#39;s absence. (optional)</param>
        /// <param name="departureTime">The time of day the student departed for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="eventDuration">The amount of time in days for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="sectionAttendanceDuration">The duration in minutes of the section attendance event. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSectionAttendanceEventsApiResponse?> GetStudentSectionAttendanceEventsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> attendanceEventCategoryDescriptor = default, Option<DateOnly> eventDate = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> studentUniqueId = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> arrivalTime = default, Option<string> attendanceEventReason = default, Option<string> departureTime = default, Option<double> eventDuration = default, Option<string> id = default, Option<int> sectionAttendanceDuration = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSectionAttendanceEventsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, attendanceEventCategoryDescriptor, eventDate, localCourseCode, schoolId, schoolYear, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, eventDuration, id, sectionAttendanceDuration, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="attendanceEventCategoryDescriptor">A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy. (optional)</param>
        /// <param name="eventDate">Date for this attendance event. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section. (optional)</param>
        /// <param name="arrivalTime">The time of day the student arrived for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="attendanceEventReason">The reported reason for a student&#39;s absence. (optional)</param>
        /// <param name="departureTime">The time of day the student departed for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="eventDuration">The amount of time in days for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="sectionAttendanceDuration">The duration in minutes of the section attendance event. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSectionAttendanceEventsApiResponse> GetStudentSectionAttendanceEventsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> attendanceEventCategoryDescriptor = default, Option<DateOnly> eventDate = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> studentUniqueId = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> arrivalTime = default, Option<string> attendanceEventReason = default, Option<string> departureTime = default, Option<double> eventDuration = default, Option<string> id = default, Option<int> sectionAttendanceDuration = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSectionAttendanceEvents(pageToken, attendanceEventCategoryDescriptor, localCourseCode, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, id);

                FormatGetStudentSectionAttendanceEvents(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref attendanceEventCategoryDescriptor, ref eventDate, ref localCourseCode, ref schoolId, ref schoolYear, ref sectionIdentifier, ref sessionName, ref studentUniqueId, ref educationalEnvironmentDescriptor, ref arrivalTime, ref attendanceEventReason, ref departureTime, ref eventDuration, ref id, ref sectionAttendanceDuration, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSectionAttendanceEvents"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSectionAttendanceEvents");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (attendanceEventCategoryDescriptor.IsSet)
                        parseQueryStringLocalVar["attendanceEventCategoryDescriptor"] = ClientUtils.ParameterToString(attendanceEventCategoryDescriptor.Value);

                    if (eventDate.IsSet)
                        parseQueryStringLocalVar["eventDate"] = ClientUtils.ParameterToString(eventDate.Value);

                    if (localCourseCode.IsSet)
                        parseQueryStringLocalVar["localCourseCode"] = ClientUtils.ParameterToString(localCourseCode.Value);

                    if (schoolId.IsSet)
                        parseQueryStringLocalVar["schoolId"] = ClientUtils.ParameterToString(schoolId.Value);

                    if (schoolYear.IsSet)
                        parseQueryStringLocalVar["schoolYear"] = ClientUtils.ParameterToString(schoolYear.Value);

                    if (sectionIdentifier.IsSet)
                        parseQueryStringLocalVar["sectionIdentifier"] = ClientUtils.ParameterToString(sectionIdentifier.Value);

                    if (sessionName.IsSet)
                        parseQueryStringLocalVar["sessionName"] = ClientUtils.ParameterToString(sessionName.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (educationalEnvironmentDescriptor.IsSet)
                        parseQueryStringLocalVar["educationalEnvironmentDescriptor"] = ClientUtils.ParameterToString(educationalEnvironmentDescriptor.Value);

                    if (arrivalTime.IsSet)
                        parseQueryStringLocalVar["arrivalTime"] = ClientUtils.ParameterToString(arrivalTime.Value);

                    if (attendanceEventReason.IsSet)
                        parseQueryStringLocalVar["attendanceEventReason"] = ClientUtils.ParameterToString(attendanceEventReason.Value);

                    if (departureTime.IsSet)
                        parseQueryStringLocalVar["departureTime"] = ClientUtils.ParameterToString(departureTime.Value);

                    if (eventDuration.IsSet)
                        parseQueryStringLocalVar["eventDuration"] = ClientUtils.ParameterToString(eventDuration.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (sectionAttendanceDuration.IsSet)
                        parseQueryStringLocalVar["sectionAttendanceDuration"] = ClientUtils.ParameterToString(sectionAttendanceDuration.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSectionAttendanceEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSectionAttendanceEventsApiResponse>();

                        GetStudentSectionAttendanceEventsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSectionAttendanceEvents", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSectionAttendanceEventsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, attendanceEventCategoryDescriptor, eventDate, localCourseCode, schoolId, schoolYear, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, eventDuration, id, sectionAttendanceDuration, useSnapshot);

                        Events.ExecuteOnGetStudentSectionAttendanceEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSectionAttendanceEventsDefaultImplementation(e, "/ed-fi/studentSectionAttendanceEvents", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, attendanceEventCategoryDescriptor, eventDate, localCourseCode, schoolId, schoolYear, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, eventDuration, id, sectionAttendanceDuration, useSnapshot);
                Events.ExecuteOnErrorGetStudentSectionAttendanceEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSectionAttendanceEventsApiResponse"/>
        /// </summary>
        public partial class GetStudentSectionAttendanceEventsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSectionAttendanceEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSectionAttendanceEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSectionAttendanceEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSectionAttendanceEventsApiResponse(ILogger<GetStudentSectionAttendanceEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiStudentSectionAttendanceEvent>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiStudentSectionAttendanceEvent>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiStudentSectionAttendanceEvent>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSectionAttendanceEventsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetStudentSectionAttendanceEventsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSectionAttendanceEventsByIdDefaultImplementation(IGetStudentSectionAttendanceEventsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSectionAttendanceEventsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSectionAttendanceEventsById(ref bool suppressDefaultLog, IGetStudentSectionAttendanceEventsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSectionAttendanceEventsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSectionAttendanceEventsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSectionAttendanceEventsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSectionAttendanceEventsByIdApiResponse?> GetStudentSectionAttendanceEventsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSectionAttendanceEventsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSectionAttendanceEventsByIdApiResponse> GetStudentSectionAttendanceEventsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSectionAttendanceEventsById(id, ifNoneMatch);

                FormatGetStudentSectionAttendanceEventsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSectionAttendanceEvents/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSectionAttendanceEvents/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSectionAttendanceEventsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSectionAttendanceEventsByIdApiResponse>();

                        GetStudentSectionAttendanceEventsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSectionAttendanceEvents/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSectionAttendanceEventsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetStudentSectionAttendanceEventsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSectionAttendanceEventsByIdDefaultImplementation(e, "/ed-fi/studentSectionAttendanceEvents/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetStudentSectionAttendanceEventsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSectionAttendanceEventsByIdApiResponse"/>
        /// </summary>
        public partial class GetStudentSectionAttendanceEventsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSectionAttendanceEventsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSectionAttendanceEventsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSectionAttendanceEventsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSectionAttendanceEventsByIdApiResponse(ILogger<GetStudentSectionAttendanceEventsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSectionAttendanceEvent? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSectionAttendanceEvent>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSectionAttendanceEvent? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSectionAttendanceEventsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> attendanceEventCategoryDescriptor, ref Option<DateOnly> eventDate, ref Option<string> localCourseCode, ref Option<long> schoolId, ref Option<int> schoolYear, ref Option<string> sectionIdentifier, ref Option<string> sessionName, ref Option<string> studentUniqueId, ref Option<string> educationalEnvironmentDescriptor, ref Option<string> arrivalTime, ref Option<string> attendanceEventReason, ref Option<string> departureTime, ref Option<double> eventDuration, ref Option<string> id, ref Option<int> sectionAttendanceDuration, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="attendanceEventCategoryDescriptor"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="arrivalTime"></param>
        /// <param name="attendanceEventReason"></param>
        /// <param name="departureTime"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetStudentSectionAttendanceEventsPartitions(Option<string> attendanceEventCategoryDescriptor, Option<string> localCourseCode, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> studentUniqueId, Option<string> educationalEnvironmentDescriptor, Option<string> arrivalTime, Option<string> attendanceEventReason, Option<string> departureTime, Option<string> id)
        {
            if (attendanceEventCategoryDescriptor.IsSet && attendanceEventCategoryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(attendanceEventCategoryDescriptor));

            if (localCourseCode.IsSet && localCourseCode.Value == null)
                throw new ArgumentNullException(nameof(localCourseCode));

            if (sectionIdentifier.IsSet && sectionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(sectionIdentifier));

            if (sessionName.IsSet && sessionName.Value == null)
                throw new ArgumentNullException(nameof(sessionName));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (educationalEnvironmentDescriptor.IsSet && educationalEnvironmentDescriptor.Value == null)
                throw new ArgumentNullException(nameof(educationalEnvironmentDescriptor));

            if (arrivalTime.IsSet && arrivalTime.Value == null)
                throw new ArgumentNullException(nameof(arrivalTime));

            if (attendanceEventReason.IsSet && attendanceEventReason.Value == null)
                throw new ArgumentNullException(nameof(attendanceEventReason));

            if (departureTime.IsSet && departureTime.Value == null)
                throw new ArgumentNullException(nameof(departureTime));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="attendanceEventCategoryDescriptor"></param>
        /// <param name="eventDate"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="arrivalTime"></param>
        /// <param name="attendanceEventReason"></param>
        /// <param name="departureTime"></param>
        /// <param name="eventDuration"></param>
        /// <param name="id"></param>
        /// <param name="sectionAttendanceDuration"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSectionAttendanceEventsPartitionsDefaultImplementation(IGetStudentSectionAttendanceEventsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> attendanceEventCategoryDescriptor, Option<DateOnly> eventDate, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> studentUniqueId, Option<string> educationalEnvironmentDescriptor, Option<string> arrivalTime, Option<string> attendanceEventReason, Option<string> departureTime, Option<double> eventDuration, Option<string> id, Option<int> sectionAttendanceDuration, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSectionAttendanceEventsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, attendanceEventCategoryDescriptor, eventDate, localCourseCode, schoolId, schoolYear, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, eventDuration, id, sectionAttendanceDuration, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="attendanceEventCategoryDescriptor"></param>
        /// <param name="eventDate"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="arrivalTime"></param>
        /// <param name="attendanceEventReason"></param>
        /// <param name="departureTime"></param>
        /// <param name="eventDuration"></param>
        /// <param name="id"></param>
        /// <param name="sectionAttendanceDuration"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSectionAttendanceEventsPartitions(ref bool suppressDefaultLog, IGetStudentSectionAttendanceEventsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> attendanceEventCategoryDescriptor, Option<DateOnly> eventDate, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> studentUniqueId, Option<string> educationalEnvironmentDescriptor, Option<string> arrivalTime, Option<string> attendanceEventReason, Option<string> departureTime, Option<double> eventDuration, Option<string> id, Option<int> sectionAttendanceDuration, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="attendanceEventCategoryDescriptor"></param>
        /// <param name="eventDate"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="arrivalTime"></param>
        /// <param name="attendanceEventReason"></param>
        /// <param name="departureTime"></param>
        /// <param name="eventDuration"></param>
        /// <param name="id"></param>
        /// <param name="sectionAttendanceDuration"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSectionAttendanceEventsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> attendanceEventCategoryDescriptor, Option<DateOnly> eventDate, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> studentUniqueId, Option<string> educationalEnvironmentDescriptor, Option<string> arrivalTime, Option<string> attendanceEventReason, Option<string> departureTime, Option<double> eventDuration, Option<string> id, Option<int> sectionAttendanceDuration, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSectionAttendanceEventsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, attendanceEventCategoryDescriptor, eventDate, localCourseCode, schoolId, schoolYear, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, eventDuration, id, sectionAttendanceDuration, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="attendanceEventCategoryDescriptor"></param>
        /// <param name="eventDate"></param>
        /// <param name="localCourseCode"></param>
        /// <param name="schoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="sectionIdentifier"></param>
        /// <param name="sessionName"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="educationalEnvironmentDescriptor"></param>
        /// <param name="arrivalTime"></param>
        /// <param name="attendanceEventReason"></param>
        /// <param name="departureTime"></param>
        /// <param name="eventDuration"></param>
        /// <param name="id"></param>
        /// <param name="sectionAttendanceDuration"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSectionAttendanceEventsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> attendanceEventCategoryDescriptor, Option<DateOnly> eventDate, Option<string> localCourseCode, Option<long> schoolId, Option<int> schoolYear, Option<string> sectionIdentifier, Option<string> sessionName, Option<string> studentUniqueId, Option<string> educationalEnvironmentDescriptor, Option<string> arrivalTime, Option<string> attendanceEventReason, Option<string> departureTime, Option<double> eventDuration, Option<string> id, Option<int> sectionAttendanceDuration, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="attendanceEventCategoryDescriptor">A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy. (optional)</param>
        /// <param name="eventDate">Date for this attendance event. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section. (optional)</param>
        /// <param name="arrivalTime">The time of day the student arrived for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="attendanceEventReason">The reported reason for a student&#39;s absence. (optional)</param>
        /// <param name="departureTime">The time of day the student departed for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="eventDuration">The amount of time in days for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="sectionAttendanceDuration">The duration in minutes of the section attendance event. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSectionAttendanceEventsPartitionsApiResponse?> GetStudentSectionAttendanceEventsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> attendanceEventCategoryDescriptor = default, Option<DateOnly> eventDate = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> studentUniqueId = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> arrivalTime = default, Option<string> attendanceEventReason = default, Option<string> departureTime = default, Option<double> eventDuration = default, Option<string> id = default, Option<int> sectionAttendanceDuration = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSectionAttendanceEventsPartitionsAsync(number, minChangeVersion, maxChangeVersion, attendanceEventCategoryDescriptor, eventDate, localCourseCode, schoolId, schoolYear, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, eventDuration, id, sectionAttendanceDuration, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="attendanceEventCategoryDescriptor">A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy. (optional)</param>
        /// <param name="eventDate">Date for this attendance event. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section. (optional)</param>
        /// <param name="arrivalTime">The time of day the student arrived for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="attendanceEventReason">The reported reason for a student&#39;s absence. (optional)</param>
        /// <param name="departureTime">The time of day the student departed for the attendance event in ISO 8601 format. (optional)</param>
        /// <param name="eventDuration">The amount of time in days for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="sectionAttendanceDuration">The duration in minutes of the section attendance event. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSectionAttendanceEventsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSectionAttendanceEventsPartitionsApiResponse> GetStudentSectionAttendanceEventsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> attendanceEventCategoryDescriptor = default, Option<DateOnly> eventDate = default, Option<string> localCourseCode = default, Option<long> schoolId = default, Option<int> schoolYear = default, Option<string> sectionIdentifier = default, Option<string> sessionName = default, Option<string> studentUniqueId = default, Option<string> educationalEnvironmentDescriptor = default, Option<string> arrivalTime = default, Option<string> attendanceEventReason = default, Option<string> departureTime = default, Option<double> eventDuration = default, Option<string> id = default, Option<int> sectionAttendanceDuration = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSectionAttendanceEventsPartitions(attendanceEventCategoryDescriptor, localCourseCode, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, id);

                FormatGetStudentSectionAttendanceEventsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref attendanceEventCategoryDescriptor, ref eventDate, ref localCourseCode, ref schoolId, ref schoolYear, ref sectionIdentifier, ref sessionName, ref studentUniqueId, ref educationalEnvironmentDescriptor, ref arrivalTime, ref attendanceEventReason, ref departureTime, ref eventDuration, ref id, ref sectionAttendanceDuration, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSectionAttendanceEvents/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSectionAttendanceEvents/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (attendanceEventCategoryDescriptor.IsSet)
                        parseQueryStringLocalVar["attendanceEventCategoryDescriptor"] = ClientUtils.ParameterToString(attendanceEventCategoryDescriptor.Value);

                    if (eventDate.IsSet)
                        parseQueryStringLocalVar["eventDate"] = ClientUtils.ParameterToString(eventDate.Value);

                    if (localCourseCode.IsSet)
                        parseQueryStringLocalVar["localCourseCode"] = ClientUtils.ParameterToString(localCourseCode.Value);

                    if (schoolId.IsSet)
                        parseQueryStringLocalVar["schoolId"] = ClientUtils.ParameterToString(schoolId.Value);

                    if (schoolYear.IsSet)
                        parseQueryStringLocalVar["schoolYear"] = ClientUtils.ParameterToString(schoolYear.Value);

                    if (sectionIdentifier.IsSet)
                        parseQueryStringLocalVar["sectionIdentifier"] = ClientUtils.ParameterToString(sectionIdentifier.Value);

                    if (sessionName.IsSet)
                        parseQueryStringLocalVar["sessionName"] = ClientUtils.ParameterToString(sessionName.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (educationalEnvironmentDescriptor.IsSet)
                        parseQueryStringLocalVar["educationalEnvironmentDescriptor"] = ClientUtils.ParameterToString(educationalEnvironmentDescriptor.Value);

                    if (arrivalTime.IsSet)
                        parseQueryStringLocalVar["arrivalTime"] = ClientUtils.ParameterToString(arrivalTime.Value);

                    if (attendanceEventReason.IsSet)
                        parseQueryStringLocalVar["attendanceEventReason"] = ClientUtils.ParameterToString(attendanceEventReason.Value);

                    if (departureTime.IsSet)
                        parseQueryStringLocalVar["departureTime"] = ClientUtils.ParameterToString(departureTime.Value);

                    if (eventDuration.IsSet)
                        parseQueryStringLocalVar["eventDuration"] = ClientUtils.ParameterToString(eventDuration.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (sectionAttendanceDuration.IsSet)
                        parseQueryStringLocalVar["sectionAttendanceDuration"] = ClientUtils.ParameterToString(sectionAttendanceDuration.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSectionAttendanceEventsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSectionAttendanceEventsPartitionsApiResponse>();

                        GetStudentSectionAttendanceEventsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSectionAttendanceEvents/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSectionAttendanceEventsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, attendanceEventCategoryDescriptor, eventDate, localCourseCode, schoolId, schoolYear, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, eventDuration, id, sectionAttendanceDuration, useSnapshot);

                        Events.ExecuteOnGetStudentSectionAttendanceEventsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSectionAttendanceEventsPartitionsDefaultImplementation(e, "/ed-fi/studentSectionAttendanceEvents/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, attendanceEventCategoryDescriptor, eventDate, localCourseCode, schoolId, schoolYear, sectionIdentifier, sessionName, studentUniqueId, educationalEnvironmentDescriptor, arrivalTime, attendanceEventReason, departureTime, eventDuration, id, sectionAttendanceDuration, useSnapshot);
                Events.ExecuteOnErrorGetStudentSectionAttendanceEventsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSectionAttendanceEventsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetStudentSectionAttendanceEventsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSectionAttendanceEventsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSectionAttendanceEventsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSectionAttendanceEventsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSectionAttendanceEventsPartitionsApiResponse(ILogger<GetStudentSectionAttendanceEventsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesStudentSectionAttendanceEvents(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesStudentSectionAttendanceEventsDefaultImplementation(IKeyChangesStudentSectionAttendanceEventsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesStudentSectionAttendanceEvents(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesStudentSectionAttendanceEvents(ref bool suppressDefaultLog, IKeyChangesStudentSectionAttendanceEventsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesStudentSectionAttendanceEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesStudentSectionAttendanceEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesStudentSectionAttendanceEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSectionAttendanceEventsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentSectionAttendanceEventsApiResponse?> KeyChangesStudentSectionAttendanceEventsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesStudentSectionAttendanceEventsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSectionAttendanceEventsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentSectionAttendanceEventsApiResponse> KeyChangesStudentSectionAttendanceEventsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesStudentSectionAttendanceEvents(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSectionAttendanceEvents/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSectionAttendanceEvents/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesStudentSectionAttendanceEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesStudentSectionAttendanceEventsApiResponse>();

                        KeyChangesStudentSectionAttendanceEventsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSectionAttendanceEvents/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesStudentSectionAttendanceEventsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesStudentSectionAttendanceEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesStudentSectionAttendanceEventsDefaultImplementation(e, "/ed-fi/studentSectionAttendanceEvents/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesStudentSectionAttendanceEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesStudentSectionAttendanceEventsApiResponse"/>
        /// </summary>
        public partial class KeyChangesStudentSectionAttendanceEventsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesStudentSectionAttendanceEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesStudentSectionAttendanceEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesStudentSectionAttendanceEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesStudentSectionAttendanceEventsApiResponse(ILogger<KeyChangesStudentSectionAttendanceEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentSectionAttendanceEventKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentSectionAttendanceEventKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentSectionAttendanceEventKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostStudentSectionAttendanceEvent(EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiStudentSectionAttendanceEvent"></param>
        /// <returns></returns>
        private void ValidatePostStudentSectionAttendanceEvent(EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent)
        {
            if (edFiStudentSectionAttendanceEvent == null)
                throw new ArgumentNullException(nameof(edFiStudentSectionAttendanceEvent));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentSectionAttendanceEvent"></param>
        private void AfterPostStudentSectionAttendanceEventDefaultImplementation(IPostStudentSectionAttendanceEventApiResponse apiResponseLocalVar, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent)
        {
            bool suppressDefaultLog = false;
            AfterPostStudentSectionAttendanceEvent(ref suppressDefaultLog, apiResponseLocalVar, edFiStudentSectionAttendanceEvent);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentSectionAttendanceEvent"></param>
        partial void AfterPostStudentSectionAttendanceEvent(ref bool suppressDefaultLog, IPostStudentSectionAttendanceEventApiResponse apiResponseLocalVar, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentSectionAttendanceEvent"></param>
        private void OnErrorPostStudentSectionAttendanceEventDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostStudentSectionAttendanceEvent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiStudentSectionAttendanceEvent);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentSectionAttendanceEvent"></param>
        partial void OnErrorPostStudentSectionAttendanceEvent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiStudentSectionAttendanceEvent">The JSON representation of the \&quot;studentSectionAttendanceEvent\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSectionAttendanceEventApiResponse"/>&gt;</returns>
        public async Task<IPostStudentSectionAttendanceEventApiResponse?> PostStudentSectionAttendanceEventOrDefaultAsync(EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostStudentSectionAttendanceEventAsync(edFiStudentSectionAttendanceEvent, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentSectionAttendanceEvent">The JSON representation of the \&quot;studentSectionAttendanceEvent\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSectionAttendanceEventApiResponse"/>&gt;</returns>
        public async Task<IPostStudentSectionAttendanceEventApiResponse> PostStudentSectionAttendanceEventAsync(EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostStudentSectionAttendanceEvent(edFiStudentSectionAttendanceEvent);

                FormatPostStudentSectionAttendanceEvent(edFiStudentSectionAttendanceEvent);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSectionAttendanceEvents"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSectionAttendanceEvents");

                    httpRequestMessageLocalVar.Content = (edFiStudentSectionAttendanceEvent as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentSectionAttendanceEvent, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostStudentSectionAttendanceEventApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostStudentSectionAttendanceEventApiResponse>();

                        PostStudentSectionAttendanceEventApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSectionAttendanceEvents", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostStudentSectionAttendanceEventDefaultImplementation(apiResponseLocalVar, edFiStudentSectionAttendanceEvent);

                        Events.ExecuteOnPostStudentSectionAttendanceEvent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostStudentSectionAttendanceEventDefaultImplementation(e, "/ed-fi/studentSectionAttendanceEvents", uriBuilderLocalVar.Path, edFiStudentSectionAttendanceEvent);
                Events.ExecuteOnErrorPostStudentSectionAttendanceEvent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostStudentSectionAttendanceEventApiResponse"/>
        /// </summary>
        public partial class PostStudentSectionAttendanceEventApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostStudentSectionAttendanceEventApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostStudentSectionAttendanceEventApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostStudentSectionAttendanceEventApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostStudentSectionAttendanceEventApiResponse(ILogger<PostStudentSectionAttendanceEventApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutStudentSectionAttendanceEvent(ref string id, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiStudentSectionAttendanceEvent"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutStudentSectionAttendanceEvent(string id, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiStudentSectionAttendanceEvent == null)
                throw new ArgumentNullException(nameof(edFiStudentSectionAttendanceEvent));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSectionAttendanceEvent"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutStudentSectionAttendanceEventDefaultImplementation(IPutStudentSectionAttendanceEventApiResponse apiResponseLocalVar, string id, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutStudentSectionAttendanceEvent(ref suppressDefaultLog, apiResponseLocalVar, id, edFiStudentSectionAttendanceEvent, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSectionAttendanceEvent"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutStudentSectionAttendanceEvent(ref bool suppressDefaultLog, IPutStudentSectionAttendanceEventApiResponse apiResponseLocalVar, string id, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSectionAttendanceEvent"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutStudentSectionAttendanceEventDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutStudentSectionAttendanceEvent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiStudentSectionAttendanceEvent, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSectionAttendanceEvent"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutStudentSectionAttendanceEvent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSectionAttendanceEvent">The JSON representation of the \&quot;studentSectionAttendanceEvent\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSectionAttendanceEventApiResponse"/>&gt;</returns>
        public async Task<IPutStudentSectionAttendanceEventApiResponse?> PutStudentSectionAttendanceEventOrDefaultAsync(string id, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutStudentSectionAttendanceEventAsync(id, edFiStudentSectionAttendanceEvent, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSectionAttendanceEvent">The JSON representation of the \&quot;studentSectionAttendanceEvent\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSectionAttendanceEventApiResponse"/>&gt;</returns>
        public async Task<IPutStudentSectionAttendanceEventApiResponse> PutStudentSectionAttendanceEventAsync(string id, EdFiStudentSectionAttendanceEvent edFiStudentSectionAttendanceEvent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutStudentSectionAttendanceEvent(id, edFiStudentSectionAttendanceEvent, ifMatch);

                FormatPutStudentSectionAttendanceEvent(ref id, edFiStudentSectionAttendanceEvent, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSectionAttendanceEvents/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSectionAttendanceEvents/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiStudentSectionAttendanceEvent as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentSectionAttendanceEvent, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutStudentSectionAttendanceEventApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutStudentSectionAttendanceEventApiResponse>();

                        PutStudentSectionAttendanceEventApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSectionAttendanceEvents/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutStudentSectionAttendanceEventDefaultImplementation(apiResponseLocalVar, id, edFiStudentSectionAttendanceEvent, ifMatch);

                        Events.ExecuteOnPutStudentSectionAttendanceEvent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutStudentSectionAttendanceEventDefaultImplementation(e, "/ed-fi/studentSectionAttendanceEvents/{id}", uriBuilderLocalVar.Path, id, edFiStudentSectionAttendanceEvent, ifMatch);
                Events.ExecuteOnErrorPutStudentSectionAttendanceEvent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutStudentSectionAttendanceEventApiResponse"/>
        /// </summary>
        public partial class PutStudentSectionAttendanceEventApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutStudentSectionAttendanceEventApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutStudentSectionAttendanceEventApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutStudentSectionAttendanceEventApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutStudentSectionAttendanceEventApiResponse(ILogger<PutStudentSectionAttendanceEventApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
