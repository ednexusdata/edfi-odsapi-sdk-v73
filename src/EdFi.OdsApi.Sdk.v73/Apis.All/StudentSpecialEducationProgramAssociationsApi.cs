// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStudentSpecialEducationProgramAssociationsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StudentSpecialEducationProgramAssociationsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse"/>&gt;</returns>
        Task<IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse> DeleteStudentSpecialEducationProgramAssociationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse?> DeleteStudentSpecialEducationProgramAssociationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSpecialEducationProgramAssociationsApiResponse"/>&gt;</returns>
        Task<IDeletesStudentSpecialEducationProgramAssociationsApiResponse> DeletesStudentSpecialEducationProgramAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSpecialEducationProgramAssociationsApiResponse"/>?&gt;</returns>
        Task<IDeletesStudentSpecialEducationProgramAssociationsApiResponse?> DeletesStudentSpecialEducationProgramAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="specialEducationExitReasonDescriptor">The reason why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationSettingDescriptor">The major instructional setting (more than 50 percent of a student&#39;s special education program). (optional)</param>
        /// <param name="ideaEligibility">Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA). (optional)</param>
        /// <param name="iepBeginDate">The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepEndDate">The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepReviewDate">The date of the last IEP review. (optional)</param>
        /// <param name="lastEvaluationDate">The date of the last special education evaluation. (optional)</param>
        /// <param name="medicallyFragile">Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements. (optional)</param>
        /// <param name="multiplyDisabled">Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements. (optional)</param>
        /// <param name="reductionInHoursPerWeekComparedToPeers">Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education. (optional)</param>
        /// <param name="schoolHoursPerWeek">Indicate the total number of hours of instructional time per week for the school that the student attends. (optional)</param>
        /// <param name="shortenedSchoolDayIndicator">Indicator that the student&#39;s IEP requires a shortened school day. (optional)</param>
        /// <param name="specialEducationExitDate">The  month, day and year on which a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationExitExplained">Explanation on why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationHoursPerWeek">The number of hours per week for special education instruction and therapy. (optional)</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district. (optional)</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsApiResponse"/>&gt;</returns>
        Task<IGetStudentSpecialEducationProgramAssociationsApiResponse> GetStudentSpecialEducationProgramAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> specialEducationExitReasonDescriptor = default, Option<string> specialEducationSettingDescriptor = default, Option<bool> ideaEligibility = default, Option<DateOnly> iepBeginDate = default, Option<DateOnly> iepEndDate = default, Option<DateOnly> iepReviewDate = default, Option<DateOnly> lastEvaluationDate = default, Option<bool> medicallyFragile = default, Option<bool> multiplyDisabled = default, Option<double> reductionInHoursPerWeekComparedToPeers = default, Option<double> schoolHoursPerWeek = default, Option<bool> shortenedSchoolDayIndicator = default, Option<DateOnly> specialEducationExitDate = default, Option<string> specialEducationExitExplained = default, Option<double> specialEducationHoursPerWeek = default, Option<string> reasonExitedDescriptor = default, Option<DateOnly> endDate = default, Option<string> id = default, Option<bool> servedOutsideOfRegularSession = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="specialEducationExitReasonDescriptor">The reason why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationSettingDescriptor">The major instructional setting (more than 50 percent of a student&#39;s special education program). (optional)</param>
        /// <param name="ideaEligibility">Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA). (optional)</param>
        /// <param name="iepBeginDate">The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepEndDate">The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepReviewDate">The date of the last IEP review. (optional)</param>
        /// <param name="lastEvaluationDate">The date of the last special education evaluation. (optional)</param>
        /// <param name="medicallyFragile">Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements. (optional)</param>
        /// <param name="multiplyDisabled">Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements. (optional)</param>
        /// <param name="reductionInHoursPerWeekComparedToPeers">Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education. (optional)</param>
        /// <param name="schoolHoursPerWeek">Indicate the total number of hours of instructional time per week for the school that the student attends. (optional)</param>
        /// <param name="shortenedSchoolDayIndicator">Indicator that the student&#39;s IEP requires a shortened school day. (optional)</param>
        /// <param name="specialEducationExitDate">The  month, day and year on which a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationExitExplained">Explanation on why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationHoursPerWeek">The number of hours per week for special education instruction and therapy. (optional)</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district. (optional)</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsApiResponse"/>?&gt;</returns>
        Task<IGetStudentSpecialEducationProgramAssociationsApiResponse?> GetStudentSpecialEducationProgramAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> specialEducationExitReasonDescriptor = default, Option<string> specialEducationSettingDescriptor = default, Option<bool> ideaEligibility = default, Option<DateOnly> iepBeginDate = default, Option<DateOnly> iepEndDate = default, Option<DateOnly> iepReviewDate = default, Option<DateOnly> lastEvaluationDate = default, Option<bool> medicallyFragile = default, Option<bool> multiplyDisabled = default, Option<double> reductionInHoursPerWeekComparedToPeers = default, Option<double> schoolHoursPerWeek = default, Option<bool> shortenedSchoolDayIndicator = default, Option<DateOnly> specialEducationExitDate = default, Option<string> specialEducationExitExplained = default, Option<double> specialEducationHoursPerWeek = default, Option<string> reasonExitedDescriptor = default, Option<DateOnly> endDate = default, Option<string> id = default, Option<bool> servedOutsideOfRegularSession = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsByIdApiResponse"/>&gt;</returns>
        Task<IGetStudentSpecialEducationProgramAssociationsByIdApiResponse> GetStudentSpecialEducationProgramAssociationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsByIdApiResponse"/>?&gt;</returns>
        Task<IGetStudentSpecialEducationProgramAssociationsByIdApiResponse?> GetStudentSpecialEducationProgramAssociationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="specialEducationExitReasonDescriptor">The reason why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationSettingDescriptor">The major instructional setting (more than 50 percent of a student&#39;s special education program). (optional)</param>
        /// <param name="ideaEligibility">Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA). (optional)</param>
        /// <param name="iepBeginDate">The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepEndDate">The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepReviewDate">The date of the last IEP review. (optional)</param>
        /// <param name="lastEvaluationDate">The date of the last special education evaluation. (optional)</param>
        /// <param name="medicallyFragile">Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements. (optional)</param>
        /// <param name="multiplyDisabled">Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements. (optional)</param>
        /// <param name="reductionInHoursPerWeekComparedToPeers">Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education. (optional)</param>
        /// <param name="schoolHoursPerWeek">Indicate the total number of hours of instructional time per week for the school that the student attends. (optional)</param>
        /// <param name="shortenedSchoolDayIndicator">Indicator that the student&#39;s IEP requires a shortened school day. (optional)</param>
        /// <param name="specialEducationExitDate">The  month, day and year on which a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationExitExplained">Explanation on why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationHoursPerWeek">The number of hours per week for special education instruction and therapy. (optional)</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district. (optional)</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse> GetStudentSpecialEducationProgramAssociationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> specialEducationExitReasonDescriptor = default, Option<string> specialEducationSettingDescriptor = default, Option<bool> ideaEligibility = default, Option<DateOnly> iepBeginDate = default, Option<DateOnly> iepEndDate = default, Option<DateOnly> iepReviewDate = default, Option<DateOnly> lastEvaluationDate = default, Option<bool> medicallyFragile = default, Option<bool> multiplyDisabled = default, Option<double> reductionInHoursPerWeekComparedToPeers = default, Option<double> schoolHoursPerWeek = default, Option<bool> shortenedSchoolDayIndicator = default, Option<DateOnly> specialEducationExitDate = default, Option<string> specialEducationExitExplained = default, Option<double> specialEducationHoursPerWeek = default, Option<string> reasonExitedDescriptor = default, Option<DateOnly> endDate = default, Option<string> id = default, Option<bool> servedOutsideOfRegularSession = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="specialEducationExitReasonDescriptor">The reason why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationSettingDescriptor">The major instructional setting (more than 50 percent of a student&#39;s special education program). (optional)</param>
        /// <param name="ideaEligibility">Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA). (optional)</param>
        /// <param name="iepBeginDate">The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepEndDate">The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepReviewDate">The date of the last IEP review. (optional)</param>
        /// <param name="lastEvaluationDate">The date of the last special education evaluation. (optional)</param>
        /// <param name="medicallyFragile">Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements. (optional)</param>
        /// <param name="multiplyDisabled">Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements. (optional)</param>
        /// <param name="reductionInHoursPerWeekComparedToPeers">Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education. (optional)</param>
        /// <param name="schoolHoursPerWeek">Indicate the total number of hours of instructional time per week for the school that the student attends. (optional)</param>
        /// <param name="shortenedSchoolDayIndicator">Indicator that the student&#39;s IEP requires a shortened school day. (optional)</param>
        /// <param name="specialEducationExitDate">The  month, day and year on which a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationExitExplained">Explanation on why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationHoursPerWeek">The number of hours per week for special education instruction and therapy. (optional)</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district. (optional)</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse?> GetStudentSpecialEducationProgramAssociationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> specialEducationExitReasonDescriptor = default, Option<string> specialEducationSettingDescriptor = default, Option<bool> ideaEligibility = default, Option<DateOnly> iepBeginDate = default, Option<DateOnly> iepEndDate = default, Option<DateOnly> iepReviewDate = default, Option<DateOnly> lastEvaluationDate = default, Option<bool> medicallyFragile = default, Option<bool> multiplyDisabled = default, Option<double> reductionInHoursPerWeekComparedToPeers = default, Option<double> schoolHoursPerWeek = default, Option<bool> shortenedSchoolDayIndicator = default, Option<DateOnly> specialEducationExitDate = default, Option<string> specialEducationExitExplained = default, Option<double> specialEducationHoursPerWeek = default, Option<string> reasonExitedDescriptor = default, Option<DateOnly> endDate = default, Option<string> id = default, Option<bool> servedOutsideOfRegularSession = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse"/>&gt;</returns>
        Task<IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse> KeyChangesStudentSpecialEducationProgramAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse?> KeyChangesStudentSpecialEducationProgramAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentSpecialEducationProgramAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSpecialEducationProgramAssociationApiResponse"/>&gt;</returns>
        Task<IPostStudentSpecialEducationProgramAssociationApiResponse> PostStudentSpecialEducationProgramAssociationAsync(EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiStudentSpecialEducationProgramAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSpecialEducationProgramAssociationApiResponse"/>?&gt;</returns>
        Task<IPostStudentSpecialEducationProgramAssociationApiResponse?> PostStudentSpecialEducationProgramAssociationOrDefaultAsync(EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSpecialEducationProgramAssociationApiResponse"/>&gt;</returns>
        Task<IPutStudentSpecialEducationProgramAssociationApiResponse> PutStudentSpecialEducationProgramAssociationAsync(string id, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSpecialEducationProgramAssociationApiResponse"/>?&gt;</returns>
        Task<IPutStudentSpecialEducationProgramAssociationApiResponse?> PutStudentSpecialEducationProgramAssociationOrDefaultAsync(string id, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse"/>
    /// </summary>
    public interface IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesStudentSpecialEducationProgramAssociationsApiResponse"/>
    /// </summary>
    public interface IDeletesStudentSpecialEducationProgramAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentSpecialEducationProgramAssociationDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSpecialEducationProgramAssociationsApiResponse"/>
    /// </summary>
    public interface IGetStudentSpecialEducationProgramAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiStudentSpecialEducationProgramAssociation>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSpecialEducationProgramAssociationsByIdApiResponse"/>
    /// </summary>
    public interface IGetStudentSpecialEducationProgramAssociationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSpecialEducationProgramAssociation?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse"/>
    /// </summary>
    public interface IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentSpecialEducationProgramAssociationKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostStudentSpecialEducationProgramAssociationApiResponse"/>
    /// </summary>
    public interface IPostStudentSpecialEducationProgramAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutStudentSpecialEducationProgramAssociationApiResponse"/>
    /// </summary>
    public interface IPutStudentSpecialEducationProgramAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StudentSpecialEducationProgramAssociationsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteStudentSpecialEducationProgramAssociationById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteStudentSpecialEducationProgramAssociationById;

        internal void ExecuteOnDeleteStudentSpecialEducationProgramAssociationById(StudentSpecialEducationProgramAssociationsApi.DeleteStudentSpecialEducationProgramAssociationByIdApiResponse apiResponse)
        {
            OnDeleteStudentSpecialEducationProgramAssociationById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteStudentSpecialEducationProgramAssociationById(Exception exception)
        {
            OnErrorDeleteStudentSpecialEducationProgramAssociationById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesStudentSpecialEducationProgramAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesStudentSpecialEducationProgramAssociations;

        internal void ExecuteOnDeletesStudentSpecialEducationProgramAssociations(StudentSpecialEducationProgramAssociationsApi.DeletesStudentSpecialEducationProgramAssociationsApiResponse apiResponse)
        {
            OnDeletesStudentSpecialEducationProgramAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesStudentSpecialEducationProgramAssociations(Exception exception)
        {
            OnErrorDeletesStudentSpecialEducationProgramAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSpecialEducationProgramAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSpecialEducationProgramAssociations;

        internal void ExecuteOnGetStudentSpecialEducationProgramAssociations(StudentSpecialEducationProgramAssociationsApi.GetStudentSpecialEducationProgramAssociationsApiResponse apiResponse)
        {
            OnGetStudentSpecialEducationProgramAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSpecialEducationProgramAssociations(Exception exception)
        {
            OnErrorGetStudentSpecialEducationProgramAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSpecialEducationProgramAssociationsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSpecialEducationProgramAssociationsById;

        internal void ExecuteOnGetStudentSpecialEducationProgramAssociationsById(StudentSpecialEducationProgramAssociationsApi.GetStudentSpecialEducationProgramAssociationsByIdApiResponse apiResponse)
        {
            OnGetStudentSpecialEducationProgramAssociationsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSpecialEducationProgramAssociationsById(Exception exception)
        {
            OnErrorGetStudentSpecialEducationProgramAssociationsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSpecialEducationProgramAssociationsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSpecialEducationProgramAssociationsPartitions;

        internal void ExecuteOnGetStudentSpecialEducationProgramAssociationsPartitions(StudentSpecialEducationProgramAssociationsApi.GetStudentSpecialEducationProgramAssociationsPartitionsApiResponse apiResponse)
        {
            OnGetStudentSpecialEducationProgramAssociationsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSpecialEducationProgramAssociationsPartitions(Exception exception)
        {
            OnErrorGetStudentSpecialEducationProgramAssociationsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesStudentSpecialEducationProgramAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesStudentSpecialEducationProgramAssociations;

        internal void ExecuteOnKeyChangesStudentSpecialEducationProgramAssociations(StudentSpecialEducationProgramAssociationsApi.KeyChangesStudentSpecialEducationProgramAssociationsApiResponse apiResponse)
        {
            OnKeyChangesStudentSpecialEducationProgramAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesStudentSpecialEducationProgramAssociations(Exception exception)
        {
            OnErrorKeyChangesStudentSpecialEducationProgramAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostStudentSpecialEducationProgramAssociation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostStudentSpecialEducationProgramAssociation;

        internal void ExecuteOnPostStudentSpecialEducationProgramAssociation(StudentSpecialEducationProgramAssociationsApi.PostStudentSpecialEducationProgramAssociationApiResponse apiResponse)
        {
            OnPostStudentSpecialEducationProgramAssociation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostStudentSpecialEducationProgramAssociation(Exception exception)
        {
            OnErrorPostStudentSpecialEducationProgramAssociation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutStudentSpecialEducationProgramAssociation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutStudentSpecialEducationProgramAssociation;

        internal void ExecuteOnPutStudentSpecialEducationProgramAssociation(StudentSpecialEducationProgramAssociationsApi.PutStudentSpecialEducationProgramAssociationApiResponse apiResponse)
        {
            OnPutStudentSpecialEducationProgramAssociation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutStudentSpecialEducationProgramAssociation(Exception exception)
        {
            OnErrorPutStudentSpecialEducationProgramAssociation?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StudentSpecialEducationProgramAssociationsApi : IStudentSpecialEducationProgramAssociationsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StudentSpecialEducationProgramAssociationsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StudentSpecialEducationProgramAssociationsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentSpecialEducationProgramAssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentSpecialEducationProgramAssociationsApi(ILogger<StudentSpecialEducationProgramAssociationsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StudentSpecialEducationProgramAssociationsApiEvents studentSpecialEducationProgramAssociationsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StudentSpecialEducationProgramAssociationsApi>();
            HttpClient = httpClient;
            Events = studentSpecialEducationProgramAssociationsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteStudentSpecialEducationProgramAssociationById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteStudentSpecialEducationProgramAssociationById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteStudentSpecialEducationProgramAssociationByIdDefaultImplementation(IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteStudentSpecialEducationProgramAssociationById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteStudentSpecialEducationProgramAssociationById(ref bool suppressDefaultLog, IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteStudentSpecialEducationProgramAssociationByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteStudentSpecialEducationProgramAssociationById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteStudentSpecialEducationProgramAssociationById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse?> DeleteStudentSpecialEducationProgramAssociationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteStudentSpecialEducationProgramAssociationByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse> DeleteStudentSpecialEducationProgramAssociationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteStudentSpecialEducationProgramAssociationById(id, ifMatch);

                FormatDeleteStudentSpecialEducationProgramAssociationById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteStudentSpecialEducationProgramAssociationByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteStudentSpecialEducationProgramAssociationByIdApiResponse>();

                        DeleteStudentSpecialEducationProgramAssociationByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteStudentSpecialEducationProgramAssociationByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteStudentSpecialEducationProgramAssociationById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteStudentSpecialEducationProgramAssociationByIdDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramAssociations/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteStudentSpecialEducationProgramAssociationById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteStudentSpecialEducationProgramAssociationByIdApiResponse"/>
        /// </summary>
        public partial class DeleteStudentSpecialEducationProgramAssociationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteStudentSpecialEducationProgramAssociationByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteStudentSpecialEducationProgramAssociationByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteStudentSpecialEducationProgramAssociationByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteStudentSpecialEducationProgramAssociationByIdApiResponse(ILogger<DeleteStudentSpecialEducationProgramAssociationByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesStudentSpecialEducationProgramAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesStudentSpecialEducationProgramAssociationsDefaultImplementation(IDeletesStudentSpecialEducationProgramAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesStudentSpecialEducationProgramAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesStudentSpecialEducationProgramAssociations(ref bool suppressDefaultLog, IDeletesStudentSpecialEducationProgramAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesStudentSpecialEducationProgramAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesStudentSpecialEducationProgramAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesStudentSpecialEducationProgramAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSpecialEducationProgramAssociationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentSpecialEducationProgramAssociationsApiResponse?> DeletesStudentSpecialEducationProgramAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesStudentSpecialEducationProgramAssociationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSpecialEducationProgramAssociationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentSpecialEducationProgramAssociationsApiResponse> DeletesStudentSpecialEducationProgramAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesStudentSpecialEducationProgramAssociations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramAssociations/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramAssociations/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesStudentSpecialEducationProgramAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesStudentSpecialEducationProgramAssociationsApiResponse>();

                        DeletesStudentSpecialEducationProgramAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramAssociations/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesStudentSpecialEducationProgramAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesStudentSpecialEducationProgramAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesStudentSpecialEducationProgramAssociationsDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramAssociations/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesStudentSpecialEducationProgramAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesStudentSpecialEducationProgramAssociationsApiResponse"/>
        /// </summary>
        public partial class DeletesStudentSpecialEducationProgramAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesStudentSpecialEducationProgramAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesStudentSpecialEducationProgramAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesStudentSpecialEducationProgramAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesStudentSpecialEducationProgramAssociationsApiResponse(ILogger<DeletesStudentSpecialEducationProgramAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentSpecialEducationProgramAssociationDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentSpecialEducationProgramAssociationDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentSpecialEducationProgramAssociationDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSpecialEducationProgramAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<DateOnly> beginDate, ref Option<long> educationOrganizationId, ref Option<long> programEducationOrganizationId, ref Option<string> programName, ref Option<string> programTypeDescriptor, ref Option<string> studentUniqueId, ref Option<string> specialEducationExitReasonDescriptor, ref Option<string> specialEducationSettingDescriptor, ref Option<bool> ideaEligibility, ref Option<DateOnly> iepBeginDate, ref Option<DateOnly> iepEndDate, ref Option<DateOnly> iepReviewDate, ref Option<DateOnly> lastEvaluationDate, ref Option<bool> medicallyFragile, ref Option<bool> multiplyDisabled, ref Option<double> reductionInHoursPerWeekComparedToPeers, ref Option<double> schoolHoursPerWeek, ref Option<bool> shortenedSchoolDayIndicator, ref Option<DateOnly> specialEducationExitDate, ref Option<string> specialEducationExitExplained, ref Option<double> specialEducationHoursPerWeek, ref Option<string> reasonExitedDescriptor, ref Option<DateOnly> endDate, ref Option<string> id, ref Option<bool> servedOutsideOfRegularSession, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="specialEducationExitReasonDescriptor"></param>
        /// <param name="specialEducationSettingDescriptor"></param>
        /// <param name="specialEducationExitExplained"></param>
        /// <param name="reasonExitedDescriptor"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetStudentSpecialEducationProgramAssociations(Option<string> pageToken, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> specialEducationExitReasonDescriptor, Option<string> specialEducationSettingDescriptor, Option<string> specialEducationExitExplained, Option<string> reasonExitedDescriptor, Option<string> id)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName));

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (specialEducationExitReasonDescriptor.IsSet && specialEducationExitReasonDescriptor.Value == null)
                throw new ArgumentNullException(nameof(specialEducationExitReasonDescriptor));

            if (specialEducationSettingDescriptor.IsSet && specialEducationSettingDescriptor.Value == null)
                throw new ArgumentNullException(nameof(specialEducationSettingDescriptor));

            if (specialEducationExitExplained.IsSet && specialEducationExitExplained.Value == null)
                throw new ArgumentNullException(nameof(specialEducationExitExplained));

            if (reasonExitedDescriptor.IsSet && reasonExitedDescriptor.Value == null)
                throw new ArgumentNullException(nameof(reasonExitedDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="specialEducationExitReasonDescriptor"></param>
        /// <param name="specialEducationSettingDescriptor"></param>
        /// <param name="ideaEligibility"></param>
        /// <param name="iepBeginDate"></param>
        /// <param name="iepEndDate"></param>
        /// <param name="iepReviewDate"></param>
        /// <param name="lastEvaluationDate"></param>
        /// <param name="medicallyFragile"></param>
        /// <param name="multiplyDisabled"></param>
        /// <param name="reductionInHoursPerWeekComparedToPeers"></param>
        /// <param name="schoolHoursPerWeek"></param>
        /// <param name="shortenedSchoolDayIndicator"></param>
        /// <param name="specialEducationExitDate"></param>
        /// <param name="specialEducationExitExplained"></param>
        /// <param name="specialEducationHoursPerWeek"></param>
        /// <param name="reasonExitedDescriptor"></param>
        /// <param name="endDate"></param>
        /// <param name="id"></param>
        /// <param name="servedOutsideOfRegularSession"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSpecialEducationProgramAssociationsDefaultImplementation(IGetStudentSpecialEducationProgramAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> specialEducationExitReasonDescriptor, Option<string> specialEducationSettingDescriptor, Option<bool> ideaEligibility, Option<DateOnly> iepBeginDate, Option<DateOnly> iepEndDate, Option<DateOnly> iepReviewDate, Option<DateOnly> lastEvaluationDate, Option<bool> medicallyFragile, Option<bool> multiplyDisabled, Option<double> reductionInHoursPerWeekComparedToPeers, Option<double> schoolHoursPerWeek, Option<bool> shortenedSchoolDayIndicator, Option<DateOnly> specialEducationExitDate, Option<string> specialEducationExitExplained, Option<double> specialEducationHoursPerWeek, Option<string> reasonExitedDescriptor, Option<DateOnly> endDate, Option<string> id, Option<bool> servedOutsideOfRegularSession, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSpecialEducationProgramAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, ideaEligibility, iepBeginDate, iepEndDate, iepReviewDate, lastEvaluationDate, medicallyFragile, multiplyDisabled, reductionInHoursPerWeekComparedToPeers, schoolHoursPerWeek, shortenedSchoolDayIndicator, specialEducationExitDate, specialEducationExitExplained, specialEducationHoursPerWeek, reasonExitedDescriptor, endDate, id, servedOutsideOfRegularSession, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="specialEducationExitReasonDescriptor"></param>
        /// <param name="specialEducationSettingDescriptor"></param>
        /// <param name="ideaEligibility"></param>
        /// <param name="iepBeginDate"></param>
        /// <param name="iepEndDate"></param>
        /// <param name="iepReviewDate"></param>
        /// <param name="lastEvaluationDate"></param>
        /// <param name="medicallyFragile"></param>
        /// <param name="multiplyDisabled"></param>
        /// <param name="reductionInHoursPerWeekComparedToPeers"></param>
        /// <param name="schoolHoursPerWeek"></param>
        /// <param name="shortenedSchoolDayIndicator"></param>
        /// <param name="specialEducationExitDate"></param>
        /// <param name="specialEducationExitExplained"></param>
        /// <param name="specialEducationHoursPerWeek"></param>
        /// <param name="reasonExitedDescriptor"></param>
        /// <param name="endDate"></param>
        /// <param name="id"></param>
        /// <param name="servedOutsideOfRegularSession"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSpecialEducationProgramAssociations(ref bool suppressDefaultLog, IGetStudentSpecialEducationProgramAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> specialEducationExitReasonDescriptor, Option<string> specialEducationSettingDescriptor, Option<bool> ideaEligibility, Option<DateOnly> iepBeginDate, Option<DateOnly> iepEndDate, Option<DateOnly> iepReviewDate, Option<DateOnly> lastEvaluationDate, Option<bool> medicallyFragile, Option<bool> multiplyDisabled, Option<double> reductionInHoursPerWeekComparedToPeers, Option<double> schoolHoursPerWeek, Option<bool> shortenedSchoolDayIndicator, Option<DateOnly> specialEducationExitDate, Option<string> specialEducationExitExplained, Option<double> specialEducationHoursPerWeek, Option<string> reasonExitedDescriptor, Option<DateOnly> endDate, Option<string> id, Option<bool> servedOutsideOfRegularSession, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="specialEducationExitReasonDescriptor"></param>
        /// <param name="specialEducationSettingDescriptor"></param>
        /// <param name="ideaEligibility"></param>
        /// <param name="iepBeginDate"></param>
        /// <param name="iepEndDate"></param>
        /// <param name="iepReviewDate"></param>
        /// <param name="lastEvaluationDate"></param>
        /// <param name="medicallyFragile"></param>
        /// <param name="multiplyDisabled"></param>
        /// <param name="reductionInHoursPerWeekComparedToPeers"></param>
        /// <param name="schoolHoursPerWeek"></param>
        /// <param name="shortenedSchoolDayIndicator"></param>
        /// <param name="specialEducationExitDate"></param>
        /// <param name="specialEducationExitExplained"></param>
        /// <param name="specialEducationHoursPerWeek"></param>
        /// <param name="reasonExitedDescriptor"></param>
        /// <param name="endDate"></param>
        /// <param name="id"></param>
        /// <param name="servedOutsideOfRegularSession"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSpecialEducationProgramAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> specialEducationExitReasonDescriptor, Option<string> specialEducationSettingDescriptor, Option<bool> ideaEligibility, Option<DateOnly> iepBeginDate, Option<DateOnly> iepEndDate, Option<DateOnly> iepReviewDate, Option<DateOnly> lastEvaluationDate, Option<bool> medicallyFragile, Option<bool> multiplyDisabled, Option<double> reductionInHoursPerWeekComparedToPeers, Option<double> schoolHoursPerWeek, Option<bool> shortenedSchoolDayIndicator, Option<DateOnly> specialEducationExitDate, Option<string> specialEducationExitExplained, Option<double> specialEducationHoursPerWeek, Option<string> reasonExitedDescriptor, Option<DateOnly> endDate, Option<string> id, Option<bool> servedOutsideOfRegularSession, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSpecialEducationProgramAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, ideaEligibility, iepBeginDate, iepEndDate, iepReviewDate, lastEvaluationDate, medicallyFragile, multiplyDisabled, reductionInHoursPerWeekComparedToPeers, schoolHoursPerWeek, shortenedSchoolDayIndicator, specialEducationExitDate, specialEducationExitExplained, specialEducationHoursPerWeek, reasonExitedDescriptor, endDate, id, servedOutsideOfRegularSession, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="specialEducationExitReasonDescriptor"></param>
        /// <param name="specialEducationSettingDescriptor"></param>
        /// <param name="ideaEligibility"></param>
        /// <param name="iepBeginDate"></param>
        /// <param name="iepEndDate"></param>
        /// <param name="iepReviewDate"></param>
        /// <param name="lastEvaluationDate"></param>
        /// <param name="medicallyFragile"></param>
        /// <param name="multiplyDisabled"></param>
        /// <param name="reductionInHoursPerWeekComparedToPeers"></param>
        /// <param name="schoolHoursPerWeek"></param>
        /// <param name="shortenedSchoolDayIndicator"></param>
        /// <param name="specialEducationExitDate"></param>
        /// <param name="specialEducationExitExplained"></param>
        /// <param name="specialEducationHoursPerWeek"></param>
        /// <param name="reasonExitedDescriptor"></param>
        /// <param name="endDate"></param>
        /// <param name="id"></param>
        /// <param name="servedOutsideOfRegularSession"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSpecialEducationProgramAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> specialEducationExitReasonDescriptor, Option<string> specialEducationSettingDescriptor, Option<bool> ideaEligibility, Option<DateOnly> iepBeginDate, Option<DateOnly> iepEndDate, Option<DateOnly> iepReviewDate, Option<DateOnly> lastEvaluationDate, Option<bool> medicallyFragile, Option<bool> multiplyDisabled, Option<double> reductionInHoursPerWeekComparedToPeers, Option<double> schoolHoursPerWeek, Option<bool> shortenedSchoolDayIndicator, Option<DateOnly> specialEducationExitDate, Option<string> specialEducationExitExplained, Option<double> specialEducationHoursPerWeek, Option<string> reasonExitedDescriptor, Option<DateOnly> endDate, Option<string> id, Option<bool> servedOutsideOfRegularSession, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="specialEducationExitReasonDescriptor">The reason why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationSettingDescriptor">The major instructional setting (more than 50 percent of a student&#39;s special education program). (optional)</param>
        /// <param name="ideaEligibility">Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA). (optional)</param>
        /// <param name="iepBeginDate">The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepEndDate">The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepReviewDate">The date of the last IEP review. (optional)</param>
        /// <param name="lastEvaluationDate">The date of the last special education evaluation. (optional)</param>
        /// <param name="medicallyFragile">Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements. (optional)</param>
        /// <param name="multiplyDisabled">Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements. (optional)</param>
        /// <param name="reductionInHoursPerWeekComparedToPeers">Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education. (optional)</param>
        /// <param name="schoolHoursPerWeek">Indicate the total number of hours of instructional time per week for the school that the student attends. (optional)</param>
        /// <param name="shortenedSchoolDayIndicator">Indicator that the student&#39;s IEP requires a shortened school day. (optional)</param>
        /// <param name="specialEducationExitDate">The  month, day and year on which a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationExitExplained">Explanation on why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationHoursPerWeek">The number of hours per week for special education instruction and therapy. (optional)</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district. (optional)</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramAssociationsApiResponse?> GetStudentSpecialEducationProgramAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> specialEducationExitReasonDescriptor = default, Option<string> specialEducationSettingDescriptor = default, Option<bool> ideaEligibility = default, Option<DateOnly> iepBeginDate = default, Option<DateOnly> iepEndDate = default, Option<DateOnly> iepReviewDate = default, Option<DateOnly> lastEvaluationDate = default, Option<bool> medicallyFragile = default, Option<bool> multiplyDisabled = default, Option<double> reductionInHoursPerWeekComparedToPeers = default, Option<double> schoolHoursPerWeek = default, Option<bool> shortenedSchoolDayIndicator = default, Option<DateOnly> specialEducationExitDate = default, Option<string> specialEducationExitExplained = default, Option<double> specialEducationHoursPerWeek = default, Option<string> reasonExitedDescriptor = default, Option<DateOnly> endDate = default, Option<string> id = default, Option<bool> servedOutsideOfRegularSession = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSpecialEducationProgramAssociationsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, ideaEligibility, iepBeginDate, iepEndDate, iepReviewDate, lastEvaluationDate, medicallyFragile, multiplyDisabled, reductionInHoursPerWeekComparedToPeers, schoolHoursPerWeek, shortenedSchoolDayIndicator, specialEducationExitDate, specialEducationExitExplained, specialEducationHoursPerWeek, reasonExitedDescriptor, endDate, id, servedOutsideOfRegularSession, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="specialEducationExitReasonDescriptor">The reason why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationSettingDescriptor">The major instructional setting (more than 50 percent of a student&#39;s special education program). (optional)</param>
        /// <param name="ideaEligibility">Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA). (optional)</param>
        /// <param name="iepBeginDate">The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepEndDate">The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepReviewDate">The date of the last IEP review. (optional)</param>
        /// <param name="lastEvaluationDate">The date of the last special education evaluation. (optional)</param>
        /// <param name="medicallyFragile">Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements. (optional)</param>
        /// <param name="multiplyDisabled">Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements. (optional)</param>
        /// <param name="reductionInHoursPerWeekComparedToPeers">Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education. (optional)</param>
        /// <param name="schoolHoursPerWeek">Indicate the total number of hours of instructional time per week for the school that the student attends. (optional)</param>
        /// <param name="shortenedSchoolDayIndicator">Indicator that the student&#39;s IEP requires a shortened school day. (optional)</param>
        /// <param name="specialEducationExitDate">The  month, day and year on which a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationExitExplained">Explanation on why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationHoursPerWeek">The number of hours per week for special education instruction and therapy. (optional)</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district. (optional)</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramAssociationsApiResponse> GetStudentSpecialEducationProgramAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> specialEducationExitReasonDescriptor = default, Option<string> specialEducationSettingDescriptor = default, Option<bool> ideaEligibility = default, Option<DateOnly> iepBeginDate = default, Option<DateOnly> iepEndDate = default, Option<DateOnly> iepReviewDate = default, Option<DateOnly> lastEvaluationDate = default, Option<bool> medicallyFragile = default, Option<bool> multiplyDisabled = default, Option<double> reductionInHoursPerWeekComparedToPeers = default, Option<double> schoolHoursPerWeek = default, Option<bool> shortenedSchoolDayIndicator = default, Option<DateOnly> specialEducationExitDate = default, Option<string> specialEducationExitExplained = default, Option<double> specialEducationHoursPerWeek = default, Option<string> reasonExitedDescriptor = default, Option<DateOnly> endDate = default, Option<string> id = default, Option<bool> servedOutsideOfRegularSession = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSpecialEducationProgramAssociations(pageToken, programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, specialEducationExitExplained, reasonExitedDescriptor, id);

                FormatGetStudentSpecialEducationProgramAssociations(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref beginDate, ref educationOrganizationId, ref programEducationOrganizationId, ref programName, ref programTypeDescriptor, ref studentUniqueId, ref specialEducationExitReasonDescriptor, ref specialEducationSettingDescriptor, ref ideaEligibility, ref iepBeginDate, ref iepEndDate, ref iepReviewDate, ref lastEvaluationDate, ref medicallyFragile, ref multiplyDisabled, ref reductionInHoursPerWeekComparedToPeers, ref schoolHoursPerWeek, ref shortenedSchoolDayIndicator, ref specialEducationExitDate, ref specialEducationExitExplained, ref specialEducationHoursPerWeek, ref reasonExitedDescriptor, ref endDate, ref id, ref servedOutsideOfRegularSession, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramAssociations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramAssociations");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (beginDate.IsSet)
                        parseQueryStringLocalVar["beginDate"] = ClientUtils.ParameterToString(beginDate.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (programEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["programEducationOrganizationId"] = ClientUtils.ParameterToString(programEducationOrganizationId.Value);

                    if (programName.IsSet)
                        parseQueryStringLocalVar["programName"] = ClientUtils.ParameterToString(programName.Value);

                    if (programTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programTypeDescriptor"] = ClientUtils.ParameterToString(programTypeDescriptor.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (specialEducationExitReasonDescriptor.IsSet)
                        parseQueryStringLocalVar["specialEducationExitReasonDescriptor"] = ClientUtils.ParameterToString(specialEducationExitReasonDescriptor.Value);

                    if (specialEducationSettingDescriptor.IsSet)
                        parseQueryStringLocalVar["specialEducationSettingDescriptor"] = ClientUtils.ParameterToString(specialEducationSettingDescriptor.Value);

                    if (ideaEligibility.IsSet)
                        parseQueryStringLocalVar["ideaEligibility"] = ClientUtils.ParameterToString(ideaEligibility.Value);

                    if (iepBeginDate.IsSet)
                        parseQueryStringLocalVar["iepBeginDate"] = ClientUtils.ParameterToString(iepBeginDate.Value);

                    if (iepEndDate.IsSet)
                        parseQueryStringLocalVar["iepEndDate"] = ClientUtils.ParameterToString(iepEndDate.Value);

                    if (iepReviewDate.IsSet)
                        parseQueryStringLocalVar["iepReviewDate"] = ClientUtils.ParameterToString(iepReviewDate.Value);

                    if (lastEvaluationDate.IsSet)
                        parseQueryStringLocalVar["lastEvaluationDate"] = ClientUtils.ParameterToString(lastEvaluationDate.Value);

                    if (medicallyFragile.IsSet)
                        parseQueryStringLocalVar["medicallyFragile"] = ClientUtils.ParameterToString(medicallyFragile.Value);

                    if (multiplyDisabled.IsSet)
                        parseQueryStringLocalVar["multiplyDisabled"] = ClientUtils.ParameterToString(multiplyDisabled.Value);

                    if (reductionInHoursPerWeekComparedToPeers.IsSet)
                        parseQueryStringLocalVar["reductionInHoursPerWeekComparedToPeers"] = ClientUtils.ParameterToString(reductionInHoursPerWeekComparedToPeers.Value);

                    if (schoolHoursPerWeek.IsSet)
                        parseQueryStringLocalVar["schoolHoursPerWeek"] = ClientUtils.ParameterToString(schoolHoursPerWeek.Value);

                    if (shortenedSchoolDayIndicator.IsSet)
                        parseQueryStringLocalVar["shortenedSchoolDayIndicator"] = ClientUtils.ParameterToString(shortenedSchoolDayIndicator.Value);

                    if (specialEducationExitDate.IsSet)
                        parseQueryStringLocalVar["specialEducationExitDate"] = ClientUtils.ParameterToString(specialEducationExitDate.Value);

                    if (specialEducationExitExplained.IsSet)
                        parseQueryStringLocalVar["specialEducationExitExplained"] = ClientUtils.ParameterToString(specialEducationExitExplained.Value);

                    if (specialEducationHoursPerWeek.IsSet)
                        parseQueryStringLocalVar["specialEducationHoursPerWeek"] = ClientUtils.ParameterToString(specialEducationHoursPerWeek.Value);

                    if (reasonExitedDescriptor.IsSet)
                        parseQueryStringLocalVar["reasonExitedDescriptor"] = ClientUtils.ParameterToString(reasonExitedDescriptor.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (servedOutsideOfRegularSession.IsSet)
                        parseQueryStringLocalVar["servedOutsideOfRegularSession"] = ClientUtils.ParameterToString(servedOutsideOfRegularSession.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSpecialEducationProgramAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSpecialEducationProgramAssociationsApiResponse>();

                        GetStudentSpecialEducationProgramAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramAssociations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSpecialEducationProgramAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, ideaEligibility, iepBeginDate, iepEndDate, iepReviewDate, lastEvaluationDate, medicallyFragile, multiplyDisabled, reductionInHoursPerWeekComparedToPeers, schoolHoursPerWeek, shortenedSchoolDayIndicator, specialEducationExitDate, specialEducationExitExplained, specialEducationHoursPerWeek, reasonExitedDescriptor, endDate, id, servedOutsideOfRegularSession, useSnapshot);

                        Events.ExecuteOnGetStudentSpecialEducationProgramAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSpecialEducationProgramAssociationsDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramAssociations", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, ideaEligibility, iepBeginDate, iepEndDate, iepReviewDate, lastEvaluationDate, medicallyFragile, multiplyDisabled, reductionInHoursPerWeekComparedToPeers, schoolHoursPerWeek, shortenedSchoolDayIndicator, specialEducationExitDate, specialEducationExitExplained, specialEducationHoursPerWeek, reasonExitedDescriptor, endDate, id, servedOutsideOfRegularSession, useSnapshot);
                Events.ExecuteOnErrorGetStudentSpecialEducationProgramAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSpecialEducationProgramAssociationsApiResponse"/>
        /// </summary>
        public partial class GetStudentSpecialEducationProgramAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSpecialEducationProgramAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSpecialEducationProgramAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSpecialEducationProgramAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSpecialEducationProgramAssociationsApiResponse(ILogger<GetStudentSpecialEducationProgramAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiStudentSpecialEducationProgramAssociation>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiStudentSpecialEducationProgramAssociation>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiStudentSpecialEducationProgramAssociation>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSpecialEducationProgramAssociationsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetStudentSpecialEducationProgramAssociationsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSpecialEducationProgramAssociationsByIdDefaultImplementation(IGetStudentSpecialEducationProgramAssociationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSpecialEducationProgramAssociationsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSpecialEducationProgramAssociationsById(ref bool suppressDefaultLog, IGetStudentSpecialEducationProgramAssociationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSpecialEducationProgramAssociationsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSpecialEducationProgramAssociationsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSpecialEducationProgramAssociationsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramAssociationsByIdApiResponse?> GetStudentSpecialEducationProgramAssociationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSpecialEducationProgramAssociationsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramAssociationsByIdApiResponse> GetStudentSpecialEducationProgramAssociationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSpecialEducationProgramAssociationsById(id, ifNoneMatch);

                FormatGetStudentSpecialEducationProgramAssociationsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSpecialEducationProgramAssociationsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSpecialEducationProgramAssociationsByIdApiResponse>();

                        GetStudentSpecialEducationProgramAssociationsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSpecialEducationProgramAssociationsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetStudentSpecialEducationProgramAssociationsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSpecialEducationProgramAssociationsByIdDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramAssociations/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetStudentSpecialEducationProgramAssociationsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSpecialEducationProgramAssociationsByIdApiResponse"/>
        /// </summary>
        public partial class GetStudentSpecialEducationProgramAssociationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSpecialEducationProgramAssociationsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSpecialEducationProgramAssociationsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSpecialEducationProgramAssociationsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSpecialEducationProgramAssociationsByIdApiResponse(ILogger<GetStudentSpecialEducationProgramAssociationsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSpecialEducationProgramAssociation? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSpecialEducationProgramAssociation>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSpecialEducationProgramAssociation? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSpecialEducationProgramAssociationsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<DateOnly> beginDate, ref Option<long> educationOrganizationId, ref Option<long> programEducationOrganizationId, ref Option<string> programName, ref Option<string> programTypeDescriptor, ref Option<string> studentUniqueId, ref Option<string> specialEducationExitReasonDescriptor, ref Option<string> specialEducationSettingDescriptor, ref Option<bool> ideaEligibility, ref Option<DateOnly> iepBeginDate, ref Option<DateOnly> iepEndDate, ref Option<DateOnly> iepReviewDate, ref Option<DateOnly> lastEvaluationDate, ref Option<bool> medicallyFragile, ref Option<bool> multiplyDisabled, ref Option<double> reductionInHoursPerWeekComparedToPeers, ref Option<double> schoolHoursPerWeek, ref Option<bool> shortenedSchoolDayIndicator, ref Option<DateOnly> specialEducationExitDate, ref Option<string> specialEducationExitExplained, ref Option<double> specialEducationHoursPerWeek, ref Option<string> reasonExitedDescriptor, ref Option<DateOnly> endDate, ref Option<string> id, ref Option<bool> servedOutsideOfRegularSession, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="specialEducationExitReasonDescriptor"></param>
        /// <param name="specialEducationSettingDescriptor"></param>
        /// <param name="specialEducationExitExplained"></param>
        /// <param name="reasonExitedDescriptor"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetStudentSpecialEducationProgramAssociationsPartitions(Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> specialEducationExitReasonDescriptor, Option<string> specialEducationSettingDescriptor, Option<string> specialEducationExitExplained, Option<string> reasonExitedDescriptor, Option<string> id)
        {
            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName));

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (specialEducationExitReasonDescriptor.IsSet && specialEducationExitReasonDescriptor.Value == null)
                throw new ArgumentNullException(nameof(specialEducationExitReasonDescriptor));

            if (specialEducationSettingDescriptor.IsSet && specialEducationSettingDescriptor.Value == null)
                throw new ArgumentNullException(nameof(specialEducationSettingDescriptor));

            if (specialEducationExitExplained.IsSet && specialEducationExitExplained.Value == null)
                throw new ArgumentNullException(nameof(specialEducationExitExplained));

            if (reasonExitedDescriptor.IsSet && reasonExitedDescriptor.Value == null)
                throw new ArgumentNullException(nameof(reasonExitedDescriptor));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="specialEducationExitReasonDescriptor"></param>
        /// <param name="specialEducationSettingDescriptor"></param>
        /// <param name="ideaEligibility"></param>
        /// <param name="iepBeginDate"></param>
        /// <param name="iepEndDate"></param>
        /// <param name="iepReviewDate"></param>
        /// <param name="lastEvaluationDate"></param>
        /// <param name="medicallyFragile"></param>
        /// <param name="multiplyDisabled"></param>
        /// <param name="reductionInHoursPerWeekComparedToPeers"></param>
        /// <param name="schoolHoursPerWeek"></param>
        /// <param name="shortenedSchoolDayIndicator"></param>
        /// <param name="specialEducationExitDate"></param>
        /// <param name="specialEducationExitExplained"></param>
        /// <param name="specialEducationHoursPerWeek"></param>
        /// <param name="reasonExitedDescriptor"></param>
        /// <param name="endDate"></param>
        /// <param name="id"></param>
        /// <param name="servedOutsideOfRegularSession"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSpecialEducationProgramAssociationsPartitionsDefaultImplementation(IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> specialEducationExitReasonDescriptor, Option<string> specialEducationSettingDescriptor, Option<bool> ideaEligibility, Option<DateOnly> iepBeginDate, Option<DateOnly> iepEndDate, Option<DateOnly> iepReviewDate, Option<DateOnly> lastEvaluationDate, Option<bool> medicallyFragile, Option<bool> multiplyDisabled, Option<double> reductionInHoursPerWeekComparedToPeers, Option<double> schoolHoursPerWeek, Option<bool> shortenedSchoolDayIndicator, Option<DateOnly> specialEducationExitDate, Option<string> specialEducationExitExplained, Option<double> specialEducationHoursPerWeek, Option<string> reasonExitedDescriptor, Option<DateOnly> endDate, Option<string> id, Option<bool> servedOutsideOfRegularSession, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSpecialEducationProgramAssociationsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, ideaEligibility, iepBeginDate, iepEndDate, iepReviewDate, lastEvaluationDate, medicallyFragile, multiplyDisabled, reductionInHoursPerWeekComparedToPeers, schoolHoursPerWeek, shortenedSchoolDayIndicator, specialEducationExitDate, specialEducationExitExplained, specialEducationHoursPerWeek, reasonExitedDescriptor, endDate, id, servedOutsideOfRegularSession, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="specialEducationExitReasonDescriptor"></param>
        /// <param name="specialEducationSettingDescriptor"></param>
        /// <param name="ideaEligibility"></param>
        /// <param name="iepBeginDate"></param>
        /// <param name="iepEndDate"></param>
        /// <param name="iepReviewDate"></param>
        /// <param name="lastEvaluationDate"></param>
        /// <param name="medicallyFragile"></param>
        /// <param name="multiplyDisabled"></param>
        /// <param name="reductionInHoursPerWeekComparedToPeers"></param>
        /// <param name="schoolHoursPerWeek"></param>
        /// <param name="shortenedSchoolDayIndicator"></param>
        /// <param name="specialEducationExitDate"></param>
        /// <param name="specialEducationExitExplained"></param>
        /// <param name="specialEducationHoursPerWeek"></param>
        /// <param name="reasonExitedDescriptor"></param>
        /// <param name="endDate"></param>
        /// <param name="id"></param>
        /// <param name="servedOutsideOfRegularSession"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSpecialEducationProgramAssociationsPartitions(ref bool suppressDefaultLog, IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> specialEducationExitReasonDescriptor, Option<string> specialEducationSettingDescriptor, Option<bool> ideaEligibility, Option<DateOnly> iepBeginDate, Option<DateOnly> iepEndDate, Option<DateOnly> iepReviewDate, Option<DateOnly> lastEvaluationDate, Option<bool> medicallyFragile, Option<bool> multiplyDisabled, Option<double> reductionInHoursPerWeekComparedToPeers, Option<double> schoolHoursPerWeek, Option<bool> shortenedSchoolDayIndicator, Option<DateOnly> specialEducationExitDate, Option<string> specialEducationExitExplained, Option<double> specialEducationHoursPerWeek, Option<string> reasonExitedDescriptor, Option<DateOnly> endDate, Option<string> id, Option<bool> servedOutsideOfRegularSession, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="specialEducationExitReasonDescriptor"></param>
        /// <param name="specialEducationSettingDescriptor"></param>
        /// <param name="ideaEligibility"></param>
        /// <param name="iepBeginDate"></param>
        /// <param name="iepEndDate"></param>
        /// <param name="iepReviewDate"></param>
        /// <param name="lastEvaluationDate"></param>
        /// <param name="medicallyFragile"></param>
        /// <param name="multiplyDisabled"></param>
        /// <param name="reductionInHoursPerWeekComparedToPeers"></param>
        /// <param name="schoolHoursPerWeek"></param>
        /// <param name="shortenedSchoolDayIndicator"></param>
        /// <param name="specialEducationExitDate"></param>
        /// <param name="specialEducationExitExplained"></param>
        /// <param name="specialEducationHoursPerWeek"></param>
        /// <param name="reasonExitedDescriptor"></param>
        /// <param name="endDate"></param>
        /// <param name="id"></param>
        /// <param name="servedOutsideOfRegularSession"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSpecialEducationProgramAssociationsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> specialEducationExitReasonDescriptor, Option<string> specialEducationSettingDescriptor, Option<bool> ideaEligibility, Option<DateOnly> iepBeginDate, Option<DateOnly> iepEndDate, Option<DateOnly> iepReviewDate, Option<DateOnly> lastEvaluationDate, Option<bool> medicallyFragile, Option<bool> multiplyDisabled, Option<double> reductionInHoursPerWeekComparedToPeers, Option<double> schoolHoursPerWeek, Option<bool> shortenedSchoolDayIndicator, Option<DateOnly> specialEducationExitDate, Option<string> specialEducationExitExplained, Option<double> specialEducationHoursPerWeek, Option<string> reasonExitedDescriptor, Option<DateOnly> endDate, Option<string> id, Option<bool> servedOutsideOfRegularSession, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSpecialEducationProgramAssociationsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, ideaEligibility, iepBeginDate, iepEndDate, iepReviewDate, lastEvaluationDate, medicallyFragile, multiplyDisabled, reductionInHoursPerWeekComparedToPeers, schoolHoursPerWeek, shortenedSchoolDayIndicator, specialEducationExitDate, specialEducationExitExplained, specialEducationHoursPerWeek, reasonExitedDescriptor, endDate, id, servedOutsideOfRegularSession, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="beginDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="specialEducationExitReasonDescriptor"></param>
        /// <param name="specialEducationSettingDescriptor"></param>
        /// <param name="ideaEligibility"></param>
        /// <param name="iepBeginDate"></param>
        /// <param name="iepEndDate"></param>
        /// <param name="iepReviewDate"></param>
        /// <param name="lastEvaluationDate"></param>
        /// <param name="medicallyFragile"></param>
        /// <param name="multiplyDisabled"></param>
        /// <param name="reductionInHoursPerWeekComparedToPeers"></param>
        /// <param name="schoolHoursPerWeek"></param>
        /// <param name="shortenedSchoolDayIndicator"></param>
        /// <param name="specialEducationExitDate"></param>
        /// <param name="specialEducationExitExplained"></param>
        /// <param name="specialEducationHoursPerWeek"></param>
        /// <param name="reasonExitedDescriptor"></param>
        /// <param name="endDate"></param>
        /// <param name="id"></param>
        /// <param name="servedOutsideOfRegularSession"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSpecialEducationProgramAssociationsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> beginDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> specialEducationExitReasonDescriptor, Option<string> specialEducationSettingDescriptor, Option<bool> ideaEligibility, Option<DateOnly> iepBeginDate, Option<DateOnly> iepEndDate, Option<DateOnly> iepReviewDate, Option<DateOnly> lastEvaluationDate, Option<bool> medicallyFragile, Option<bool> multiplyDisabled, Option<double> reductionInHoursPerWeekComparedToPeers, Option<double> schoolHoursPerWeek, Option<bool> shortenedSchoolDayIndicator, Option<DateOnly> specialEducationExitDate, Option<string> specialEducationExitExplained, Option<double> specialEducationHoursPerWeek, Option<string> reasonExitedDescriptor, Option<DateOnly> endDate, Option<string> id, Option<bool> servedOutsideOfRegularSession, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="specialEducationExitReasonDescriptor">The reason why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationSettingDescriptor">The major instructional setting (more than 50 percent of a student&#39;s special education program). (optional)</param>
        /// <param name="ideaEligibility">Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA). (optional)</param>
        /// <param name="iepBeginDate">The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepEndDate">The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepReviewDate">The date of the last IEP review. (optional)</param>
        /// <param name="lastEvaluationDate">The date of the last special education evaluation. (optional)</param>
        /// <param name="medicallyFragile">Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements. (optional)</param>
        /// <param name="multiplyDisabled">Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements. (optional)</param>
        /// <param name="reductionInHoursPerWeekComparedToPeers">Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education. (optional)</param>
        /// <param name="schoolHoursPerWeek">Indicate the total number of hours of instructional time per week for the school that the student attends. (optional)</param>
        /// <param name="shortenedSchoolDayIndicator">Indicator that the student&#39;s IEP requires a shortened school day. (optional)</param>
        /// <param name="specialEducationExitDate">The  month, day and year on which a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationExitExplained">Explanation on why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationHoursPerWeek">The number of hours per week for special education instruction and therapy. (optional)</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district. (optional)</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse?> GetStudentSpecialEducationProgramAssociationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> specialEducationExitReasonDescriptor = default, Option<string> specialEducationSettingDescriptor = default, Option<bool> ideaEligibility = default, Option<DateOnly> iepBeginDate = default, Option<DateOnly> iepEndDate = default, Option<DateOnly> iepReviewDate = default, Option<DateOnly> lastEvaluationDate = default, Option<bool> medicallyFragile = default, Option<bool> multiplyDisabled = default, Option<double> reductionInHoursPerWeekComparedToPeers = default, Option<double> schoolHoursPerWeek = default, Option<bool> shortenedSchoolDayIndicator = default, Option<DateOnly> specialEducationExitDate = default, Option<string> specialEducationExitExplained = default, Option<double> specialEducationHoursPerWeek = default, Option<string> reasonExitedDescriptor = default, Option<DateOnly> endDate = default, Option<string> id = default, Option<bool> servedOutsideOfRegularSession = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSpecialEducationProgramAssociationsPartitionsAsync(number, minChangeVersion, maxChangeVersion, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, ideaEligibility, iepBeginDate, iepEndDate, iepReviewDate, lastEvaluationDate, medicallyFragile, multiplyDisabled, reductionInHoursPerWeekComparedToPeers, schoolHoursPerWeek, shortenedSchoolDayIndicator, specialEducationExitDate, specialEducationExitExplained, specialEducationHoursPerWeek, reasonExitedDescriptor, endDate, id, servedOutsideOfRegularSession, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="specialEducationExitReasonDescriptor">The reason why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationSettingDescriptor">The major instructional setting (more than 50 percent of a student&#39;s special education program). (optional)</param>
        /// <param name="ideaEligibility">Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA). (optional)</param>
        /// <param name="iepBeginDate">The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepEndDate">The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="iepReviewDate">The date of the last IEP review. (optional)</param>
        /// <param name="lastEvaluationDate">The date of the last special education evaluation. (optional)</param>
        /// <param name="medicallyFragile">Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements. (optional)</param>
        /// <param name="multiplyDisabled">Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements. (optional)</param>
        /// <param name="reductionInHoursPerWeekComparedToPeers">Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education. (optional)</param>
        /// <param name="schoolHoursPerWeek">Indicate the total number of hours of instructional time per week for the school that the student attends. (optional)</param>
        /// <param name="shortenedSchoolDayIndicator">Indicator that the student&#39;s IEP requires a shortened school day. (optional)</param>
        /// <param name="specialEducationExitDate">The  month, day and year on which a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationExitExplained">Explanation on why a person stops receiving special education services. (optional)</param>
        /// <param name="specialEducationHoursPerWeek">The number of hours per week for special education instruction and therapy. (optional)</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district. (optional)</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse> GetStudentSpecialEducationProgramAssociationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> beginDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> specialEducationExitReasonDescriptor = default, Option<string> specialEducationSettingDescriptor = default, Option<bool> ideaEligibility = default, Option<DateOnly> iepBeginDate = default, Option<DateOnly> iepEndDate = default, Option<DateOnly> iepReviewDate = default, Option<DateOnly> lastEvaluationDate = default, Option<bool> medicallyFragile = default, Option<bool> multiplyDisabled = default, Option<double> reductionInHoursPerWeekComparedToPeers = default, Option<double> schoolHoursPerWeek = default, Option<bool> shortenedSchoolDayIndicator = default, Option<DateOnly> specialEducationExitDate = default, Option<string> specialEducationExitExplained = default, Option<double> specialEducationHoursPerWeek = default, Option<string> reasonExitedDescriptor = default, Option<DateOnly> endDate = default, Option<string> id = default, Option<bool> servedOutsideOfRegularSession = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSpecialEducationProgramAssociationsPartitions(programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, specialEducationExitExplained, reasonExitedDescriptor, id);

                FormatGetStudentSpecialEducationProgramAssociationsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref beginDate, ref educationOrganizationId, ref programEducationOrganizationId, ref programName, ref programTypeDescriptor, ref studentUniqueId, ref specialEducationExitReasonDescriptor, ref specialEducationSettingDescriptor, ref ideaEligibility, ref iepBeginDate, ref iepEndDate, ref iepReviewDate, ref lastEvaluationDate, ref medicallyFragile, ref multiplyDisabled, ref reductionInHoursPerWeekComparedToPeers, ref schoolHoursPerWeek, ref shortenedSchoolDayIndicator, ref specialEducationExitDate, ref specialEducationExitExplained, ref specialEducationHoursPerWeek, ref reasonExitedDescriptor, ref endDate, ref id, ref servedOutsideOfRegularSession, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramAssociations/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramAssociations/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (beginDate.IsSet)
                        parseQueryStringLocalVar["beginDate"] = ClientUtils.ParameterToString(beginDate.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (programEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["programEducationOrganizationId"] = ClientUtils.ParameterToString(programEducationOrganizationId.Value);

                    if (programName.IsSet)
                        parseQueryStringLocalVar["programName"] = ClientUtils.ParameterToString(programName.Value);

                    if (programTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programTypeDescriptor"] = ClientUtils.ParameterToString(programTypeDescriptor.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (specialEducationExitReasonDescriptor.IsSet)
                        parseQueryStringLocalVar["specialEducationExitReasonDescriptor"] = ClientUtils.ParameterToString(specialEducationExitReasonDescriptor.Value);

                    if (specialEducationSettingDescriptor.IsSet)
                        parseQueryStringLocalVar["specialEducationSettingDescriptor"] = ClientUtils.ParameterToString(specialEducationSettingDescriptor.Value);

                    if (ideaEligibility.IsSet)
                        parseQueryStringLocalVar["ideaEligibility"] = ClientUtils.ParameterToString(ideaEligibility.Value);

                    if (iepBeginDate.IsSet)
                        parseQueryStringLocalVar["iepBeginDate"] = ClientUtils.ParameterToString(iepBeginDate.Value);

                    if (iepEndDate.IsSet)
                        parseQueryStringLocalVar["iepEndDate"] = ClientUtils.ParameterToString(iepEndDate.Value);

                    if (iepReviewDate.IsSet)
                        parseQueryStringLocalVar["iepReviewDate"] = ClientUtils.ParameterToString(iepReviewDate.Value);

                    if (lastEvaluationDate.IsSet)
                        parseQueryStringLocalVar["lastEvaluationDate"] = ClientUtils.ParameterToString(lastEvaluationDate.Value);

                    if (medicallyFragile.IsSet)
                        parseQueryStringLocalVar["medicallyFragile"] = ClientUtils.ParameterToString(medicallyFragile.Value);

                    if (multiplyDisabled.IsSet)
                        parseQueryStringLocalVar["multiplyDisabled"] = ClientUtils.ParameterToString(multiplyDisabled.Value);

                    if (reductionInHoursPerWeekComparedToPeers.IsSet)
                        parseQueryStringLocalVar["reductionInHoursPerWeekComparedToPeers"] = ClientUtils.ParameterToString(reductionInHoursPerWeekComparedToPeers.Value);

                    if (schoolHoursPerWeek.IsSet)
                        parseQueryStringLocalVar["schoolHoursPerWeek"] = ClientUtils.ParameterToString(schoolHoursPerWeek.Value);

                    if (shortenedSchoolDayIndicator.IsSet)
                        parseQueryStringLocalVar["shortenedSchoolDayIndicator"] = ClientUtils.ParameterToString(shortenedSchoolDayIndicator.Value);

                    if (specialEducationExitDate.IsSet)
                        parseQueryStringLocalVar["specialEducationExitDate"] = ClientUtils.ParameterToString(specialEducationExitDate.Value);

                    if (specialEducationExitExplained.IsSet)
                        parseQueryStringLocalVar["specialEducationExitExplained"] = ClientUtils.ParameterToString(specialEducationExitExplained.Value);

                    if (specialEducationHoursPerWeek.IsSet)
                        parseQueryStringLocalVar["specialEducationHoursPerWeek"] = ClientUtils.ParameterToString(specialEducationHoursPerWeek.Value);

                    if (reasonExitedDescriptor.IsSet)
                        parseQueryStringLocalVar["reasonExitedDescriptor"] = ClientUtils.ParameterToString(reasonExitedDescriptor.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (servedOutsideOfRegularSession.IsSet)
                        parseQueryStringLocalVar["servedOutsideOfRegularSession"] = ClientUtils.ParameterToString(servedOutsideOfRegularSession.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSpecialEducationProgramAssociationsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSpecialEducationProgramAssociationsPartitionsApiResponse>();

                        GetStudentSpecialEducationProgramAssociationsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramAssociations/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSpecialEducationProgramAssociationsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, ideaEligibility, iepBeginDate, iepEndDate, iepReviewDate, lastEvaluationDate, medicallyFragile, multiplyDisabled, reductionInHoursPerWeekComparedToPeers, schoolHoursPerWeek, shortenedSchoolDayIndicator, specialEducationExitDate, specialEducationExitExplained, specialEducationHoursPerWeek, reasonExitedDescriptor, endDate, id, servedOutsideOfRegularSession, useSnapshot);

                        Events.ExecuteOnGetStudentSpecialEducationProgramAssociationsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSpecialEducationProgramAssociationsPartitionsDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramAssociations/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, specialEducationExitReasonDescriptor, specialEducationSettingDescriptor, ideaEligibility, iepBeginDate, iepEndDate, iepReviewDate, lastEvaluationDate, medicallyFragile, multiplyDisabled, reductionInHoursPerWeekComparedToPeers, schoolHoursPerWeek, shortenedSchoolDayIndicator, specialEducationExitDate, specialEducationExitExplained, specialEducationHoursPerWeek, reasonExitedDescriptor, endDate, id, servedOutsideOfRegularSession, useSnapshot);
                Events.ExecuteOnErrorGetStudentSpecialEducationProgramAssociationsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSpecialEducationProgramAssociationsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetStudentSpecialEducationProgramAssociationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSpecialEducationProgramAssociationsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSpecialEducationProgramAssociationsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSpecialEducationProgramAssociationsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSpecialEducationProgramAssociationsPartitionsApiResponse(ILogger<GetStudentSpecialEducationProgramAssociationsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesStudentSpecialEducationProgramAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesStudentSpecialEducationProgramAssociationsDefaultImplementation(IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesStudentSpecialEducationProgramAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesStudentSpecialEducationProgramAssociations(ref bool suppressDefaultLog, IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesStudentSpecialEducationProgramAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesStudentSpecialEducationProgramAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesStudentSpecialEducationProgramAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse?> KeyChangesStudentSpecialEducationProgramAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesStudentSpecialEducationProgramAssociationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse> KeyChangesStudentSpecialEducationProgramAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesStudentSpecialEducationProgramAssociations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramAssociations/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramAssociations/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesStudentSpecialEducationProgramAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesStudentSpecialEducationProgramAssociationsApiResponse>();

                        KeyChangesStudentSpecialEducationProgramAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramAssociations/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesStudentSpecialEducationProgramAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesStudentSpecialEducationProgramAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesStudentSpecialEducationProgramAssociationsDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramAssociations/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesStudentSpecialEducationProgramAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesStudentSpecialEducationProgramAssociationsApiResponse"/>
        /// </summary>
        public partial class KeyChangesStudentSpecialEducationProgramAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesStudentSpecialEducationProgramAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesStudentSpecialEducationProgramAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesStudentSpecialEducationProgramAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesStudentSpecialEducationProgramAssociationsApiResponse(ILogger<KeyChangesStudentSpecialEducationProgramAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentSpecialEducationProgramAssociationKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentSpecialEducationProgramAssociationKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentSpecialEducationProgramAssociationKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostStudentSpecialEducationProgramAssociation(EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        /// <returns></returns>
        private void ValidatePostStudentSpecialEducationProgramAssociation(EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation)
        {
            if (edFiStudentSpecialEducationProgramAssociation == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        private void AfterPostStudentSpecialEducationProgramAssociationDefaultImplementation(IPostStudentSpecialEducationProgramAssociationApiResponse apiResponseLocalVar, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation)
        {
            bool suppressDefaultLog = false;
            AfterPostStudentSpecialEducationProgramAssociation(ref suppressDefaultLog, apiResponseLocalVar, edFiStudentSpecialEducationProgramAssociation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        partial void AfterPostStudentSpecialEducationProgramAssociation(ref bool suppressDefaultLog, IPostStudentSpecialEducationProgramAssociationApiResponse apiResponseLocalVar, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        private void OnErrorPostStudentSpecialEducationProgramAssociationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostStudentSpecialEducationProgramAssociation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiStudentSpecialEducationProgramAssociation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        partial void OnErrorPostStudentSpecialEducationProgramAssociation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiStudentSpecialEducationProgramAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSpecialEducationProgramAssociationApiResponse"/>&gt;</returns>
        public async Task<IPostStudentSpecialEducationProgramAssociationApiResponse?> PostStudentSpecialEducationProgramAssociationOrDefaultAsync(EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostStudentSpecialEducationProgramAssociationAsync(edFiStudentSpecialEducationProgramAssociation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentSpecialEducationProgramAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSpecialEducationProgramAssociationApiResponse"/>&gt;</returns>
        public async Task<IPostStudentSpecialEducationProgramAssociationApiResponse> PostStudentSpecialEducationProgramAssociationAsync(EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostStudentSpecialEducationProgramAssociation(edFiStudentSpecialEducationProgramAssociation);

                FormatPostStudentSpecialEducationProgramAssociation(edFiStudentSpecialEducationProgramAssociation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramAssociations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramAssociations");

                    httpRequestMessageLocalVar.Content = (edFiStudentSpecialEducationProgramAssociation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentSpecialEducationProgramAssociation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostStudentSpecialEducationProgramAssociationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostStudentSpecialEducationProgramAssociationApiResponse>();

                        PostStudentSpecialEducationProgramAssociationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramAssociations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostStudentSpecialEducationProgramAssociationDefaultImplementation(apiResponseLocalVar, edFiStudentSpecialEducationProgramAssociation);

                        Events.ExecuteOnPostStudentSpecialEducationProgramAssociation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostStudentSpecialEducationProgramAssociationDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramAssociations", uriBuilderLocalVar.Path, edFiStudentSpecialEducationProgramAssociation);
                Events.ExecuteOnErrorPostStudentSpecialEducationProgramAssociation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostStudentSpecialEducationProgramAssociationApiResponse"/>
        /// </summary>
        public partial class PostStudentSpecialEducationProgramAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostStudentSpecialEducationProgramAssociationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostStudentSpecialEducationProgramAssociationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostStudentSpecialEducationProgramAssociationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostStudentSpecialEducationProgramAssociationApiResponse(ILogger<PostStudentSpecialEducationProgramAssociationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutStudentSpecialEducationProgramAssociation(ref string id, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutStudentSpecialEducationProgramAssociation(string id, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiStudentSpecialEducationProgramAssociation == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutStudentSpecialEducationProgramAssociationDefaultImplementation(IPutStudentSpecialEducationProgramAssociationApiResponse apiResponseLocalVar, string id, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutStudentSpecialEducationProgramAssociation(ref suppressDefaultLog, apiResponseLocalVar, id, edFiStudentSpecialEducationProgramAssociation, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutStudentSpecialEducationProgramAssociation(ref bool suppressDefaultLog, IPutStudentSpecialEducationProgramAssociationApiResponse apiResponseLocalVar, string id, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutStudentSpecialEducationProgramAssociationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutStudentSpecialEducationProgramAssociation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiStudentSpecialEducationProgramAssociation, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutStudentSpecialEducationProgramAssociation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSpecialEducationProgramAssociationApiResponse"/>&gt;</returns>
        public async Task<IPutStudentSpecialEducationProgramAssociationApiResponse?> PutStudentSpecialEducationProgramAssociationOrDefaultAsync(string id, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutStudentSpecialEducationProgramAssociationAsync(id, edFiStudentSpecialEducationProgramAssociation, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSpecialEducationProgramAssociationApiResponse"/>&gt;</returns>
        public async Task<IPutStudentSpecialEducationProgramAssociationApiResponse> PutStudentSpecialEducationProgramAssociationAsync(string id, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutStudentSpecialEducationProgramAssociation(id, edFiStudentSpecialEducationProgramAssociation, ifMatch);

                FormatPutStudentSpecialEducationProgramAssociation(ref id, edFiStudentSpecialEducationProgramAssociation, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiStudentSpecialEducationProgramAssociation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentSpecialEducationProgramAssociation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutStudentSpecialEducationProgramAssociationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutStudentSpecialEducationProgramAssociationApiResponse>();

                        PutStudentSpecialEducationProgramAssociationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutStudentSpecialEducationProgramAssociationDefaultImplementation(apiResponseLocalVar, id, edFiStudentSpecialEducationProgramAssociation, ifMatch);

                        Events.ExecuteOnPutStudentSpecialEducationProgramAssociation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutStudentSpecialEducationProgramAssociationDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramAssociations/{id}", uriBuilderLocalVar.Path, id, edFiStudentSpecialEducationProgramAssociation, ifMatch);
                Events.ExecuteOnErrorPutStudentSpecialEducationProgramAssociation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutStudentSpecialEducationProgramAssociationApiResponse"/>
        /// </summary>
        public partial class PutStudentSpecialEducationProgramAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutStudentSpecialEducationProgramAssociationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutStudentSpecialEducationProgramAssociationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutStudentSpecialEducationProgramAssociationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutStudentSpecialEducationProgramAssociationApiResponse(ILogger<PutStudentSpecialEducationProgramAssociationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
