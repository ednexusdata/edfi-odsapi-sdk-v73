// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStudentSpecialEducationProgramEligibilityAssociationsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StudentSpecialEducationProgramEligibilityAssociationsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse"/>&gt;</returns>
        Task<IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse> DeleteStudentSpecialEducationProgramEligibilityAssociationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse?> DeleteStudentSpecialEducationProgramEligibilityAssociationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>&gt;</returns>
        Task<IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse> DeletesStudentSpecialEducationProgramEligibilityAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>?&gt;</returns>
        Task<IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse?> DeletesStudentSpecialEducationProgramEligibilityAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="consentToEvaluationReceivedDate">Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="eligibilityDelayReasonDescriptor">The reason why the eligibility determination was completed beyond the required timeframe. (optional)</param>
        /// <param name="eligibilityEvaluationTypeDescriptor">Indicates if this is an initial evaluation or a reevaluation. (optional)</param>
        /// <param name="evaluationDelayReasonDescriptor">Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)</param>
        /// <param name="ideaPartDescriptor">Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)</param>
        /// <param name="consentToEvaluationDate">The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)</param>
        /// <param name="eligibilityConferenceDate">The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)</param>
        /// <param name="eligibilityDeterminationDate">Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)</param>
        /// <param name="eligibilityEvaluationDate">Indicates the month, day, and year when the written individual evaluation report was completed. (optional)</param>
        /// <param name="evaluationCompleteIndicator">Indicates the evaluation completed status. (optional)</param>
        /// <param name="evaluationDelayDays">Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)</param>
        /// <param name="evaluationLateReason">Refers to additional information for delay in doing the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ideaIndicator">Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)</param>
        /// <param name="originalECIServicesDate">The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)</param>
        /// <param name="transitionConferenceDate">Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)</param>
        /// <param name="transitionNotificationDate">Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>&gt;</returns>
        Task<IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse> GetStudentSpecialEducationProgramEligibilityAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> consentToEvaluationReceivedDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> eligibilityDelayReasonDescriptor = default, Option<string> eligibilityEvaluationTypeDescriptor = default, Option<string> evaluationDelayReasonDescriptor = default, Option<string> ideaPartDescriptor = default, Option<DateOnly> consentToEvaluationDate = default, Option<DateOnly> eligibilityConferenceDate = default, Option<DateOnly> eligibilityDeterminationDate = default, Option<DateOnly> eligibilityEvaluationDate = default, Option<bool> evaluationCompleteIndicator = default, Option<int> evaluationDelayDays = default, Option<string> evaluationLateReason = default, Option<string> id = default, Option<bool> ideaIndicator = default, Option<DateOnly> originalECIServicesDate = default, Option<DateOnly> transitionConferenceDate = default, Option<DateOnly> transitionNotificationDate = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="consentToEvaluationReceivedDate">Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="eligibilityDelayReasonDescriptor">The reason why the eligibility determination was completed beyond the required timeframe. (optional)</param>
        /// <param name="eligibilityEvaluationTypeDescriptor">Indicates if this is an initial evaluation or a reevaluation. (optional)</param>
        /// <param name="evaluationDelayReasonDescriptor">Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)</param>
        /// <param name="ideaPartDescriptor">Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)</param>
        /// <param name="consentToEvaluationDate">The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)</param>
        /// <param name="eligibilityConferenceDate">The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)</param>
        /// <param name="eligibilityDeterminationDate">Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)</param>
        /// <param name="eligibilityEvaluationDate">Indicates the month, day, and year when the written individual evaluation report was completed. (optional)</param>
        /// <param name="evaluationCompleteIndicator">Indicates the evaluation completed status. (optional)</param>
        /// <param name="evaluationDelayDays">Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)</param>
        /// <param name="evaluationLateReason">Refers to additional information for delay in doing the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ideaIndicator">Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)</param>
        /// <param name="originalECIServicesDate">The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)</param>
        /// <param name="transitionConferenceDate">Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)</param>
        /// <param name="transitionNotificationDate">Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>?&gt;</returns>
        Task<IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse?> GetStudentSpecialEducationProgramEligibilityAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> consentToEvaluationReceivedDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> eligibilityDelayReasonDescriptor = default, Option<string> eligibilityEvaluationTypeDescriptor = default, Option<string> evaluationDelayReasonDescriptor = default, Option<string> ideaPartDescriptor = default, Option<DateOnly> consentToEvaluationDate = default, Option<DateOnly> eligibilityConferenceDate = default, Option<DateOnly> eligibilityDeterminationDate = default, Option<DateOnly> eligibilityEvaluationDate = default, Option<bool> evaluationCompleteIndicator = default, Option<int> evaluationDelayDays = default, Option<string> evaluationLateReason = default, Option<string> id = default, Option<bool> ideaIndicator = default, Option<DateOnly> originalECIServicesDate = default, Option<DateOnly> transitionConferenceDate = default, Option<DateOnly> transitionNotificationDate = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse"/>&gt;</returns>
        Task<IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse> GetStudentSpecialEducationProgramEligibilityAssociationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse"/>?&gt;</returns>
        Task<IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse?> GetStudentSpecialEducationProgramEligibilityAssociationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="consentToEvaluationReceivedDate">Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="eligibilityDelayReasonDescriptor">The reason why the eligibility determination was completed beyond the required timeframe. (optional)</param>
        /// <param name="eligibilityEvaluationTypeDescriptor">Indicates if this is an initial evaluation or a reevaluation. (optional)</param>
        /// <param name="evaluationDelayReasonDescriptor">Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)</param>
        /// <param name="ideaPartDescriptor">Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)</param>
        /// <param name="consentToEvaluationDate">The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)</param>
        /// <param name="eligibilityConferenceDate">The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)</param>
        /// <param name="eligibilityDeterminationDate">Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)</param>
        /// <param name="eligibilityEvaluationDate">Indicates the month, day, and year when the written individual evaluation report was completed. (optional)</param>
        /// <param name="evaluationCompleteIndicator">Indicates the evaluation completed status. (optional)</param>
        /// <param name="evaluationDelayDays">Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)</param>
        /// <param name="evaluationLateReason">Refers to additional information for delay in doing the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ideaIndicator">Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)</param>
        /// <param name="originalECIServicesDate">The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)</param>
        /// <param name="transitionConferenceDate">Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)</param>
        /// <param name="transitionNotificationDate">Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse> GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> consentToEvaluationReceivedDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> eligibilityDelayReasonDescriptor = default, Option<string> eligibilityEvaluationTypeDescriptor = default, Option<string> evaluationDelayReasonDescriptor = default, Option<string> ideaPartDescriptor = default, Option<DateOnly> consentToEvaluationDate = default, Option<DateOnly> eligibilityConferenceDate = default, Option<DateOnly> eligibilityDeterminationDate = default, Option<DateOnly> eligibilityEvaluationDate = default, Option<bool> evaluationCompleteIndicator = default, Option<int> evaluationDelayDays = default, Option<string> evaluationLateReason = default, Option<string> id = default, Option<bool> ideaIndicator = default, Option<DateOnly> originalECIServicesDate = default, Option<DateOnly> transitionConferenceDate = default, Option<DateOnly> transitionNotificationDate = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="consentToEvaluationReceivedDate">Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="eligibilityDelayReasonDescriptor">The reason why the eligibility determination was completed beyond the required timeframe. (optional)</param>
        /// <param name="eligibilityEvaluationTypeDescriptor">Indicates if this is an initial evaluation or a reevaluation. (optional)</param>
        /// <param name="evaluationDelayReasonDescriptor">Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)</param>
        /// <param name="ideaPartDescriptor">Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)</param>
        /// <param name="consentToEvaluationDate">The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)</param>
        /// <param name="eligibilityConferenceDate">The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)</param>
        /// <param name="eligibilityDeterminationDate">Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)</param>
        /// <param name="eligibilityEvaluationDate">Indicates the month, day, and year when the written individual evaluation report was completed. (optional)</param>
        /// <param name="evaluationCompleteIndicator">Indicates the evaluation completed status. (optional)</param>
        /// <param name="evaluationDelayDays">Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)</param>
        /// <param name="evaluationLateReason">Refers to additional information for delay in doing the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ideaIndicator">Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)</param>
        /// <param name="originalECIServicesDate">The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)</param>
        /// <param name="transitionConferenceDate">Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)</param>
        /// <param name="transitionNotificationDate">Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse?> GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> consentToEvaluationReceivedDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> eligibilityDelayReasonDescriptor = default, Option<string> eligibilityEvaluationTypeDescriptor = default, Option<string> evaluationDelayReasonDescriptor = default, Option<string> ideaPartDescriptor = default, Option<DateOnly> consentToEvaluationDate = default, Option<DateOnly> eligibilityConferenceDate = default, Option<DateOnly> eligibilityDeterminationDate = default, Option<DateOnly> eligibilityEvaluationDate = default, Option<bool> evaluationCompleteIndicator = default, Option<int> evaluationDelayDays = default, Option<string> evaluationLateReason = default, Option<string> id = default, Option<bool> ideaIndicator = default, Option<DateOnly> originalECIServicesDate = default, Option<DateOnly> transitionConferenceDate = default, Option<DateOnly> transitionNotificationDate = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>&gt;</returns>
        Task<IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse> KeyChangesStudentSpecialEducationProgramEligibilityAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse?> KeyChangesStudentSpecialEducationProgramEligibilityAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>&gt;</returns>
        Task<IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse> PostStudentSpecialEducationProgramEligibilityAssociationAsync(EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>?&gt;</returns>
        Task<IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse?> PostStudentSpecialEducationProgramEligibilityAssociationOrDefaultAsync(EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>&gt;</returns>
        Task<IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse> PutStudentSpecialEducationProgramEligibilityAssociationAsync(string id, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>?&gt;</returns>
        Task<IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse?> PutStudentSpecialEducationProgramEligibilityAssociationOrDefaultAsync(string id, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse"/>
    /// </summary>
    public interface IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>
    /// </summary>
    public interface IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>
    /// </summary>
    public interface IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiStudentSpecialEducationProgramEligibilityAssociation>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse"/>
    /// </summary>
    public interface IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSpecialEducationProgramEligibilityAssociation?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>
    /// </summary>
    public interface IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>
    /// </summary>
    public interface IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>
    /// </summary>
    public interface IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StudentSpecialEducationProgramEligibilityAssociationsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteStudentSpecialEducationProgramEligibilityAssociationById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteStudentSpecialEducationProgramEligibilityAssociationById;

        internal void ExecuteOnDeleteStudentSpecialEducationProgramEligibilityAssociationById(StudentSpecialEducationProgramEligibilityAssociationsApi.DeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse apiResponse)
        {
            OnDeleteStudentSpecialEducationProgramEligibilityAssociationById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteStudentSpecialEducationProgramEligibilityAssociationById(Exception exception)
        {
            OnErrorDeleteStudentSpecialEducationProgramEligibilityAssociationById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesStudentSpecialEducationProgramEligibilityAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesStudentSpecialEducationProgramEligibilityAssociations;

        internal void ExecuteOnDeletesStudentSpecialEducationProgramEligibilityAssociations(StudentSpecialEducationProgramEligibilityAssociationsApi.DeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponse)
        {
            OnDeletesStudentSpecialEducationProgramEligibilityAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesStudentSpecialEducationProgramEligibilityAssociations(Exception exception)
        {
            OnErrorDeletesStudentSpecialEducationProgramEligibilityAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSpecialEducationProgramEligibilityAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSpecialEducationProgramEligibilityAssociations;

        internal void ExecuteOnGetStudentSpecialEducationProgramEligibilityAssociations(StudentSpecialEducationProgramEligibilityAssociationsApi.GetStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponse)
        {
            OnGetStudentSpecialEducationProgramEligibilityAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSpecialEducationProgramEligibilityAssociations(Exception exception)
        {
            OnErrorGetStudentSpecialEducationProgramEligibilityAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSpecialEducationProgramEligibilityAssociationsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsById;

        internal void ExecuteOnGetStudentSpecialEducationProgramEligibilityAssociationsById(StudentSpecialEducationProgramEligibilityAssociationsApi.GetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse apiResponse)
        {
            OnGetStudentSpecialEducationProgramEligibilityAssociationsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSpecialEducationProgramEligibilityAssociationsById(Exception exception)
        {
            OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentSpecialEducationProgramEligibilityAssociationsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsPartitions;

        internal void ExecuteOnGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(StudentSpecialEducationProgramEligibilityAssociationsApi.GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse apiResponse)
        {
            OnGetStudentSpecialEducationProgramEligibilityAssociationsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(Exception exception)
        {
            OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesStudentSpecialEducationProgramEligibilityAssociations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesStudentSpecialEducationProgramEligibilityAssociations;

        internal void ExecuteOnKeyChangesStudentSpecialEducationProgramEligibilityAssociations(StudentSpecialEducationProgramEligibilityAssociationsApi.KeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponse)
        {
            OnKeyChangesStudentSpecialEducationProgramEligibilityAssociations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesStudentSpecialEducationProgramEligibilityAssociations(Exception exception)
        {
            OnErrorKeyChangesStudentSpecialEducationProgramEligibilityAssociations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostStudentSpecialEducationProgramEligibilityAssociation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostStudentSpecialEducationProgramEligibilityAssociation;

        internal void ExecuteOnPostStudentSpecialEducationProgramEligibilityAssociation(StudentSpecialEducationProgramEligibilityAssociationsApi.PostStudentSpecialEducationProgramEligibilityAssociationApiResponse apiResponse)
        {
            OnPostStudentSpecialEducationProgramEligibilityAssociation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostStudentSpecialEducationProgramEligibilityAssociation(Exception exception)
        {
            OnErrorPostStudentSpecialEducationProgramEligibilityAssociation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutStudentSpecialEducationProgramEligibilityAssociation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutStudentSpecialEducationProgramEligibilityAssociation;

        internal void ExecuteOnPutStudentSpecialEducationProgramEligibilityAssociation(StudentSpecialEducationProgramEligibilityAssociationsApi.PutStudentSpecialEducationProgramEligibilityAssociationApiResponse apiResponse)
        {
            OnPutStudentSpecialEducationProgramEligibilityAssociation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutStudentSpecialEducationProgramEligibilityAssociation(Exception exception)
        {
            OnErrorPutStudentSpecialEducationProgramEligibilityAssociation?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StudentSpecialEducationProgramEligibilityAssociationsApi : IStudentSpecialEducationProgramEligibilityAssociationsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StudentSpecialEducationProgramEligibilityAssociationsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StudentSpecialEducationProgramEligibilityAssociationsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentSpecialEducationProgramEligibilityAssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentSpecialEducationProgramEligibilityAssociationsApi(ILogger<StudentSpecialEducationProgramEligibilityAssociationsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StudentSpecialEducationProgramEligibilityAssociationsApiEvents studentSpecialEducationProgramEligibilityAssociationsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StudentSpecialEducationProgramEligibilityAssociationsApi>();
            HttpClient = httpClient;
            Events = studentSpecialEducationProgramEligibilityAssociationsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteStudentSpecialEducationProgramEligibilityAssociationById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteStudentSpecialEducationProgramEligibilityAssociationById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteStudentSpecialEducationProgramEligibilityAssociationByIdDefaultImplementation(IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteStudentSpecialEducationProgramEligibilityAssociationById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteStudentSpecialEducationProgramEligibilityAssociationById(ref bool suppressDefaultLog, IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteStudentSpecialEducationProgramEligibilityAssociationByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteStudentSpecialEducationProgramEligibilityAssociationById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteStudentSpecialEducationProgramEligibilityAssociationById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse?> DeleteStudentSpecialEducationProgramEligibilityAssociationByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteStudentSpecialEducationProgramEligibilityAssociationByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse> DeleteStudentSpecialEducationProgramEligibilityAssociationByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteStudentSpecialEducationProgramEligibilityAssociationById(id, ifMatch);

                FormatDeleteStudentSpecialEducationProgramEligibilityAssociationById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse>();

                        DeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteStudentSpecialEducationProgramEligibilityAssociationByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteStudentSpecialEducationProgramEligibilityAssociationById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteStudentSpecialEducationProgramEligibilityAssociationByIdDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteStudentSpecialEducationProgramEligibilityAssociationById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse"/>
        /// </summary>
        public partial class DeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse(ILogger<DeleteStudentSpecialEducationProgramEligibilityAssociationByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesStudentSpecialEducationProgramEligibilityAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesStudentSpecialEducationProgramEligibilityAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesStudentSpecialEducationProgramEligibilityAssociations(ref bool suppressDefaultLog, IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesStudentSpecialEducationProgramEligibilityAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesStudentSpecialEducationProgramEligibilityAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse?> DeletesStudentSpecialEducationProgramEligibilityAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesStudentSpecialEducationProgramEligibilityAssociationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse> DeletesStudentSpecialEducationProgramEligibilityAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesStudentSpecialEducationProgramEligibilityAssociations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse>();

                        DeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesStudentSpecialEducationProgramEligibilityAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesStudentSpecialEducationProgramEligibilityAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>
        /// </summary>
        public partial class DeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse(ILogger<DeletesStudentSpecialEducationProgramEligibilityAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSpecialEducationProgramEligibilityAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<DateOnly> consentToEvaluationReceivedDate, ref Option<long> educationOrganizationId, ref Option<long> programEducationOrganizationId, ref Option<string> programName, ref Option<string> programTypeDescriptor, ref Option<string> studentUniqueId, ref Option<string> eligibilityDelayReasonDescriptor, ref Option<string> eligibilityEvaluationTypeDescriptor, ref Option<string> evaluationDelayReasonDescriptor, ref Option<string> ideaPartDescriptor, ref Option<DateOnly> consentToEvaluationDate, ref Option<DateOnly> eligibilityConferenceDate, ref Option<DateOnly> eligibilityDeterminationDate, ref Option<DateOnly> eligibilityEvaluationDate, ref Option<bool> evaluationCompleteIndicator, ref Option<int> evaluationDelayDays, ref Option<string> evaluationLateReason, ref Option<string> id, ref Option<bool> ideaIndicator, ref Option<DateOnly> originalECIServicesDate, ref Option<DateOnly> transitionConferenceDate, ref Option<DateOnly> transitionNotificationDate, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="eligibilityDelayReasonDescriptor"></param>
        /// <param name="eligibilityEvaluationTypeDescriptor"></param>
        /// <param name="evaluationDelayReasonDescriptor"></param>
        /// <param name="ideaPartDescriptor"></param>
        /// <param name="evaluationLateReason"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetStudentSpecialEducationProgramEligibilityAssociations(Option<string> pageToken, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> eligibilityDelayReasonDescriptor, Option<string> eligibilityEvaluationTypeDescriptor, Option<string> evaluationDelayReasonDescriptor, Option<string> ideaPartDescriptor, Option<string> evaluationLateReason, Option<string> id)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName));

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (eligibilityDelayReasonDescriptor.IsSet && eligibilityDelayReasonDescriptor.Value == null)
                throw new ArgumentNullException(nameof(eligibilityDelayReasonDescriptor));

            if (eligibilityEvaluationTypeDescriptor.IsSet && eligibilityEvaluationTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(eligibilityEvaluationTypeDescriptor));

            if (evaluationDelayReasonDescriptor.IsSet && evaluationDelayReasonDescriptor.Value == null)
                throw new ArgumentNullException(nameof(evaluationDelayReasonDescriptor));

            if (ideaPartDescriptor.IsSet && ideaPartDescriptor.Value == null)
                throw new ArgumentNullException(nameof(ideaPartDescriptor));

            if (evaluationLateReason.IsSet && evaluationLateReason.Value == null)
                throw new ArgumentNullException(nameof(evaluationLateReason));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="consentToEvaluationReceivedDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="eligibilityDelayReasonDescriptor"></param>
        /// <param name="eligibilityEvaluationTypeDescriptor"></param>
        /// <param name="evaluationDelayReasonDescriptor"></param>
        /// <param name="ideaPartDescriptor"></param>
        /// <param name="consentToEvaluationDate"></param>
        /// <param name="eligibilityConferenceDate"></param>
        /// <param name="eligibilityDeterminationDate"></param>
        /// <param name="eligibilityEvaluationDate"></param>
        /// <param name="evaluationCompleteIndicator"></param>
        /// <param name="evaluationDelayDays"></param>
        /// <param name="evaluationLateReason"></param>
        /// <param name="id"></param>
        /// <param name="ideaIndicator"></param>
        /// <param name="originalECIServicesDate"></param>
        /// <param name="transitionConferenceDate"></param>
        /// <param name="transitionNotificationDate"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> consentToEvaluationReceivedDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> eligibilityDelayReasonDescriptor, Option<string> eligibilityEvaluationTypeDescriptor, Option<string> evaluationDelayReasonDescriptor, Option<string> ideaPartDescriptor, Option<DateOnly> consentToEvaluationDate, Option<DateOnly> eligibilityConferenceDate, Option<DateOnly> eligibilityDeterminationDate, Option<DateOnly> eligibilityEvaluationDate, Option<bool> evaluationCompleteIndicator, Option<int> evaluationDelayDays, Option<string> evaluationLateReason, Option<string> id, Option<bool> ideaIndicator, Option<DateOnly> originalECIServicesDate, Option<DateOnly> transitionConferenceDate, Option<DateOnly> transitionNotificationDate, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSpecialEducationProgramEligibilityAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, consentToEvaluationReceivedDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, consentToEvaluationDate, eligibilityConferenceDate, eligibilityDeterminationDate, eligibilityEvaluationDate, evaluationCompleteIndicator, evaluationDelayDays, evaluationLateReason, id, ideaIndicator, originalECIServicesDate, transitionConferenceDate, transitionNotificationDate, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="consentToEvaluationReceivedDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="eligibilityDelayReasonDescriptor"></param>
        /// <param name="eligibilityEvaluationTypeDescriptor"></param>
        /// <param name="evaluationDelayReasonDescriptor"></param>
        /// <param name="ideaPartDescriptor"></param>
        /// <param name="consentToEvaluationDate"></param>
        /// <param name="eligibilityConferenceDate"></param>
        /// <param name="eligibilityDeterminationDate"></param>
        /// <param name="eligibilityEvaluationDate"></param>
        /// <param name="evaluationCompleteIndicator"></param>
        /// <param name="evaluationDelayDays"></param>
        /// <param name="evaluationLateReason"></param>
        /// <param name="id"></param>
        /// <param name="ideaIndicator"></param>
        /// <param name="originalECIServicesDate"></param>
        /// <param name="transitionConferenceDate"></param>
        /// <param name="transitionNotificationDate"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSpecialEducationProgramEligibilityAssociations(ref bool suppressDefaultLog, IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> consentToEvaluationReceivedDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> eligibilityDelayReasonDescriptor, Option<string> eligibilityEvaluationTypeDescriptor, Option<string> evaluationDelayReasonDescriptor, Option<string> ideaPartDescriptor, Option<DateOnly> consentToEvaluationDate, Option<DateOnly> eligibilityConferenceDate, Option<DateOnly> eligibilityDeterminationDate, Option<DateOnly> eligibilityEvaluationDate, Option<bool> evaluationCompleteIndicator, Option<int> evaluationDelayDays, Option<string> evaluationLateReason, Option<string> id, Option<bool> ideaIndicator, Option<DateOnly> originalECIServicesDate, Option<DateOnly> transitionConferenceDate, Option<DateOnly> transitionNotificationDate, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="consentToEvaluationReceivedDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="eligibilityDelayReasonDescriptor"></param>
        /// <param name="eligibilityEvaluationTypeDescriptor"></param>
        /// <param name="evaluationDelayReasonDescriptor"></param>
        /// <param name="ideaPartDescriptor"></param>
        /// <param name="consentToEvaluationDate"></param>
        /// <param name="eligibilityConferenceDate"></param>
        /// <param name="eligibilityDeterminationDate"></param>
        /// <param name="eligibilityEvaluationDate"></param>
        /// <param name="evaluationCompleteIndicator"></param>
        /// <param name="evaluationDelayDays"></param>
        /// <param name="evaluationLateReason"></param>
        /// <param name="id"></param>
        /// <param name="ideaIndicator"></param>
        /// <param name="originalECIServicesDate"></param>
        /// <param name="transitionConferenceDate"></param>
        /// <param name="transitionNotificationDate"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> consentToEvaluationReceivedDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> eligibilityDelayReasonDescriptor, Option<string> eligibilityEvaluationTypeDescriptor, Option<string> evaluationDelayReasonDescriptor, Option<string> ideaPartDescriptor, Option<DateOnly> consentToEvaluationDate, Option<DateOnly> eligibilityConferenceDate, Option<DateOnly> eligibilityDeterminationDate, Option<DateOnly> eligibilityEvaluationDate, Option<bool> evaluationCompleteIndicator, Option<int> evaluationDelayDays, Option<string> evaluationLateReason, Option<string> id, Option<bool> ideaIndicator, Option<DateOnly> originalECIServicesDate, Option<DateOnly> transitionConferenceDate, Option<DateOnly> transitionNotificationDate, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSpecialEducationProgramEligibilityAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, consentToEvaluationReceivedDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, consentToEvaluationDate, eligibilityConferenceDate, eligibilityDeterminationDate, eligibilityEvaluationDate, evaluationCompleteIndicator, evaluationDelayDays, evaluationLateReason, id, ideaIndicator, originalECIServicesDate, transitionConferenceDate, transitionNotificationDate, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="consentToEvaluationReceivedDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="eligibilityDelayReasonDescriptor"></param>
        /// <param name="eligibilityEvaluationTypeDescriptor"></param>
        /// <param name="evaluationDelayReasonDescriptor"></param>
        /// <param name="ideaPartDescriptor"></param>
        /// <param name="consentToEvaluationDate"></param>
        /// <param name="eligibilityConferenceDate"></param>
        /// <param name="eligibilityDeterminationDate"></param>
        /// <param name="eligibilityEvaluationDate"></param>
        /// <param name="evaluationCompleteIndicator"></param>
        /// <param name="evaluationDelayDays"></param>
        /// <param name="evaluationLateReason"></param>
        /// <param name="id"></param>
        /// <param name="ideaIndicator"></param>
        /// <param name="originalECIServicesDate"></param>
        /// <param name="transitionConferenceDate"></param>
        /// <param name="transitionNotificationDate"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSpecialEducationProgramEligibilityAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<DateOnly> consentToEvaluationReceivedDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> eligibilityDelayReasonDescriptor, Option<string> eligibilityEvaluationTypeDescriptor, Option<string> evaluationDelayReasonDescriptor, Option<string> ideaPartDescriptor, Option<DateOnly> consentToEvaluationDate, Option<DateOnly> eligibilityConferenceDate, Option<DateOnly> eligibilityDeterminationDate, Option<DateOnly> eligibilityEvaluationDate, Option<bool> evaluationCompleteIndicator, Option<int> evaluationDelayDays, Option<string> evaluationLateReason, Option<string> id, Option<bool> ideaIndicator, Option<DateOnly> originalECIServicesDate, Option<DateOnly> transitionConferenceDate, Option<DateOnly> transitionNotificationDate, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="consentToEvaluationReceivedDate">Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="eligibilityDelayReasonDescriptor">The reason why the eligibility determination was completed beyond the required timeframe. (optional)</param>
        /// <param name="eligibilityEvaluationTypeDescriptor">Indicates if this is an initial evaluation or a reevaluation. (optional)</param>
        /// <param name="evaluationDelayReasonDescriptor">Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)</param>
        /// <param name="ideaPartDescriptor">Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)</param>
        /// <param name="consentToEvaluationDate">The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)</param>
        /// <param name="eligibilityConferenceDate">The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)</param>
        /// <param name="eligibilityDeterminationDate">Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)</param>
        /// <param name="eligibilityEvaluationDate">Indicates the month, day, and year when the written individual evaluation report was completed. (optional)</param>
        /// <param name="evaluationCompleteIndicator">Indicates the evaluation completed status. (optional)</param>
        /// <param name="evaluationDelayDays">Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)</param>
        /// <param name="evaluationLateReason">Refers to additional information for delay in doing the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ideaIndicator">Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)</param>
        /// <param name="originalECIServicesDate">The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)</param>
        /// <param name="transitionConferenceDate">Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)</param>
        /// <param name="transitionNotificationDate">Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse?> GetStudentSpecialEducationProgramEligibilityAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> consentToEvaluationReceivedDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> eligibilityDelayReasonDescriptor = default, Option<string> eligibilityEvaluationTypeDescriptor = default, Option<string> evaluationDelayReasonDescriptor = default, Option<string> ideaPartDescriptor = default, Option<DateOnly> consentToEvaluationDate = default, Option<DateOnly> eligibilityConferenceDate = default, Option<DateOnly> eligibilityDeterminationDate = default, Option<DateOnly> eligibilityEvaluationDate = default, Option<bool> evaluationCompleteIndicator = default, Option<int> evaluationDelayDays = default, Option<string> evaluationLateReason = default, Option<string> id = default, Option<bool> ideaIndicator = default, Option<DateOnly> originalECIServicesDate = default, Option<DateOnly> transitionConferenceDate = default, Option<DateOnly> transitionNotificationDate = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSpecialEducationProgramEligibilityAssociationsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, consentToEvaluationReceivedDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, consentToEvaluationDate, eligibilityConferenceDate, eligibilityDeterminationDate, eligibilityEvaluationDate, evaluationCompleteIndicator, evaluationDelayDays, evaluationLateReason, id, ideaIndicator, originalECIServicesDate, transitionConferenceDate, transitionNotificationDate, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="consentToEvaluationReceivedDate">Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="eligibilityDelayReasonDescriptor">The reason why the eligibility determination was completed beyond the required timeframe. (optional)</param>
        /// <param name="eligibilityEvaluationTypeDescriptor">Indicates if this is an initial evaluation or a reevaluation. (optional)</param>
        /// <param name="evaluationDelayReasonDescriptor">Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)</param>
        /// <param name="ideaPartDescriptor">Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)</param>
        /// <param name="consentToEvaluationDate">The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)</param>
        /// <param name="eligibilityConferenceDate">The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)</param>
        /// <param name="eligibilityDeterminationDate">Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)</param>
        /// <param name="eligibilityEvaluationDate">Indicates the month, day, and year when the written individual evaluation report was completed. (optional)</param>
        /// <param name="evaluationCompleteIndicator">Indicates the evaluation completed status. (optional)</param>
        /// <param name="evaluationDelayDays">Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)</param>
        /// <param name="evaluationLateReason">Refers to additional information for delay in doing the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ideaIndicator">Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)</param>
        /// <param name="originalECIServicesDate">The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)</param>
        /// <param name="transitionConferenceDate">Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)</param>
        /// <param name="transitionNotificationDate">Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse> GetStudentSpecialEducationProgramEligibilityAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<DateOnly> consentToEvaluationReceivedDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> eligibilityDelayReasonDescriptor = default, Option<string> eligibilityEvaluationTypeDescriptor = default, Option<string> evaluationDelayReasonDescriptor = default, Option<string> ideaPartDescriptor = default, Option<DateOnly> consentToEvaluationDate = default, Option<DateOnly> eligibilityConferenceDate = default, Option<DateOnly> eligibilityDeterminationDate = default, Option<DateOnly> eligibilityEvaluationDate = default, Option<bool> evaluationCompleteIndicator = default, Option<int> evaluationDelayDays = default, Option<string> evaluationLateReason = default, Option<string> id = default, Option<bool> ideaIndicator = default, Option<DateOnly> originalECIServicesDate = default, Option<DateOnly> transitionConferenceDate = default, Option<DateOnly> transitionNotificationDate = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSpecialEducationProgramEligibilityAssociations(pageToken, programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, evaluationLateReason, id);

                FormatGetStudentSpecialEducationProgramEligibilityAssociations(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref consentToEvaluationReceivedDate, ref educationOrganizationId, ref programEducationOrganizationId, ref programName, ref programTypeDescriptor, ref studentUniqueId, ref eligibilityDelayReasonDescriptor, ref eligibilityEvaluationTypeDescriptor, ref evaluationDelayReasonDescriptor, ref ideaPartDescriptor, ref consentToEvaluationDate, ref eligibilityConferenceDate, ref eligibilityDeterminationDate, ref eligibilityEvaluationDate, ref evaluationCompleteIndicator, ref evaluationDelayDays, ref evaluationLateReason, ref id, ref ideaIndicator, ref originalECIServicesDate, ref transitionConferenceDate, ref transitionNotificationDate, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramEligibilityAssociations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (consentToEvaluationReceivedDate.IsSet)
                        parseQueryStringLocalVar["consentToEvaluationReceivedDate"] = ClientUtils.ParameterToString(consentToEvaluationReceivedDate.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (programEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["programEducationOrganizationId"] = ClientUtils.ParameterToString(programEducationOrganizationId.Value);

                    if (programName.IsSet)
                        parseQueryStringLocalVar["programName"] = ClientUtils.ParameterToString(programName.Value);

                    if (programTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programTypeDescriptor"] = ClientUtils.ParameterToString(programTypeDescriptor.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (eligibilityDelayReasonDescriptor.IsSet)
                        parseQueryStringLocalVar["eligibilityDelayReasonDescriptor"] = ClientUtils.ParameterToString(eligibilityDelayReasonDescriptor.Value);

                    if (eligibilityEvaluationTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["eligibilityEvaluationTypeDescriptor"] = ClientUtils.ParameterToString(eligibilityEvaluationTypeDescriptor.Value);

                    if (evaluationDelayReasonDescriptor.IsSet)
                        parseQueryStringLocalVar["evaluationDelayReasonDescriptor"] = ClientUtils.ParameterToString(evaluationDelayReasonDescriptor.Value);

                    if (ideaPartDescriptor.IsSet)
                        parseQueryStringLocalVar["ideaPartDescriptor"] = ClientUtils.ParameterToString(ideaPartDescriptor.Value);

                    if (consentToEvaluationDate.IsSet)
                        parseQueryStringLocalVar["consentToEvaluationDate"] = ClientUtils.ParameterToString(consentToEvaluationDate.Value);

                    if (eligibilityConferenceDate.IsSet)
                        parseQueryStringLocalVar["eligibilityConferenceDate"] = ClientUtils.ParameterToString(eligibilityConferenceDate.Value);

                    if (eligibilityDeterminationDate.IsSet)
                        parseQueryStringLocalVar["eligibilityDeterminationDate"] = ClientUtils.ParameterToString(eligibilityDeterminationDate.Value);

                    if (eligibilityEvaluationDate.IsSet)
                        parseQueryStringLocalVar["eligibilityEvaluationDate"] = ClientUtils.ParameterToString(eligibilityEvaluationDate.Value);

                    if (evaluationCompleteIndicator.IsSet)
                        parseQueryStringLocalVar["evaluationCompleteIndicator"] = ClientUtils.ParameterToString(evaluationCompleteIndicator.Value);

                    if (evaluationDelayDays.IsSet)
                        parseQueryStringLocalVar["evaluationDelayDays"] = ClientUtils.ParameterToString(evaluationDelayDays.Value);

                    if (evaluationLateReason.IsSet)
                        parseQueryStringLocalVar["evaluationLateReason"] = ClientUtils.ParameterToString(evaluationLateReason.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (ideaIndicator.IsSet)
                        parseQueryStringLocalVar["ideaIndicator"] = ClientUtils.ParameterToString(ideaIndicator.Value);

                    if (originalECIServicesDate.IsSet)
                        parseQueryStringLocalVar["originalECIServicesDate"] = ClientUtils.ParameterToString(originalECIServicesDate.Value);

                    if (transitionConferenceDate.IsSet)
                        parseQueryStringLocalVar["transitionConferenceDate"] = ClientUtils.ParameterToString(transitionConferenceDate.Value);

                    if (transitionNotificationDate.IsSet)
                        parseQueryStringLocalVar["transitionNotificationDate"] = ClientUtils.ParameterToString(transitionNotificationDate.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSpecialEducationProgramEligibilityAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSpecialEducationProgramEligibilityAssociationsApiResponse>();

                        GetStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, consentToEvaluationReceivedDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, consentToEvaluationDate, eligibilityConferenceDate, eligibilityDeterminationDate, eligibilityEvaluationDate, evaluationCompleteIndicator, evaluationDelayDays, evaluationLateReason, id, ideaIndicator, originalECIServicesDate, transitionConferenceDate, transitionNotificationDate, useSnapshot);

                        Events.ExecuteOnGetStudentSpecialEducationProgramEligibilityAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, consentToEvaluationReceivedDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, consentToEvaluationDate, eligibilityConferenceDate, eligibilityDeterminationDate, eligibilityEvaluationDate, evaluationCompleteIndicator, evaluationDelayDays, evaluationLateReason, id, ideaIndicator, originalECIServicesDate, transitionConferenceDate, transitionNotificationDate, useSnapshot);
                Events.ExecuteOnErrorGetStudentSpecialEducationProgramEligibilityAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>
        /// </summary>
        public partial class GetStudentSpecialEducationProgramEligibilityAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSpecialEducationProgramEligibilityAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSpecialEducationProgramEligibilityAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSpecialEducationProgramEligibilityAssociationsApiResponse(ILogger<GetStudentSpecialEducationProgramEligibilityAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiStudentSpecialEducationProgramEligibilityAssociation>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiStudentSpecialEducationProgramEligibilityAssociation>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiStudentSpecialEducationProgramEligibilityAssociation>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSpecialEducationProgramEligibilityAssociationsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetStudentSpecialEducationProgramEligibilityAssociationsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSpecialEducationProgramEligibilityAssociationsByIdDefaultImplementation(IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSpecialEducationProgramEligibilityAssociationsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSpecialEducationProgramEligibilityAssociationsById(ref bool suppressDefaultLog, IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse?> GetStudentSpecialEducationProgramEligibilityAssociationsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSpecialEducationProgramEligibilityAssociationsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse> GetStudentSpecialEducationProgramEligibilityAssociationsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSpecialEducationProgramEligibilityAssociationsById(id, ifNoneMatch);

                FormatGetStudentSpecialEducationProgramEligibilityAssociationsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse>();

                        GetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSpecialEducationProgramEligibilityAssociationsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetStudentSpecialEducationProgramEligibilityAssociationsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsByIdDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetStudentSpecialEducationProgramEligibilityAssociationsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse"/>
        /// </summary>
        public partial class GetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse(ILogger<GetStudentSpecialEducationProgramEligibilityAssociationsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSpecialEducationProgramEligibilityAssociation? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSpecialEducationProgramEligibilityAssociation>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudentSpecialEducationProgramEligibilityAssociation? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<DateOnly> consentToEvaluationReceivedDate, ref Option<long> educationOrganizationId, ref Option<long> programEducationOrganizationId, ref Option<string> programName, ref Option<string> programTypeDescriptor, ref Option<string> studentUniqueId, ref Option<string> eligibilityDelayReasonDescriptor, ref Option<string> eligibilityEvaluationTypeDescriptor, ref Option<string> evaluationDelayReasonDescriptor, ref Option<string> ideaPartDescriptor, ref Option<DateOnly> consentToEvaluationDate, ref Option<DateOnly> eligibilityConferenceDate, ref Option<DateOnly> eligibilityDeterminationDate, ref Option<DateOnly> eligibilityEvaluationDate, ref Option<bool> evaluationCompleteIndicator, ref Option<int> evaluationDelayDays, ref Option<string> evaluationLateReason, ref Option<string> id, ref Option<bool> ideaIndicator, ref Option<DateOnly> originalECIServicesDate, ref Option<DateOnly> transitionConferenceDate, ref Option<DateOnly> transitionNotificationDate, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="eligibilityDelayReasonDescriptor"></param>
        /// <param name="eligibilityEvaluationTypeDescriptor"></param>
        /// <param name="evaluationDelayReasonDescriptor"></param>
        /// <param name="ideaPartDescriptor"></param>
        /// <param name="evaluationLateReason"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> eligibilityDelayReasonDescriptor, Option<string> eligibilityEvaluationTypeDescriptor, Option<string> evaluationDelayReasonDescriptor, Option<string> ideaPartDescriptor, Option<string> evaluationLateReason, Option<string> id)
        {
            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName));

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (eligibilityDelayReasonDescriptor.IsSet && eligibilityDelayReasonDescriptor.Value == null)
                throw new ArgumentNullException(nameof(eligibilityDelayReasonDescriptor));

            if (eligibilityEvaluationTypeDescriptor.IsSet && eligibilityEvaluationTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(eligibilityEvaluationTypeDescriptor));

            if (evaluationDelayReasonDescriptor.IsSet && evaluationDelayReasonDescriptor.Value == null)
                throw new ArgumentNullException(nameof(evaluationDelayReasonDescriptor));

            if (ideaPartDescriptor.IsSet && ideaPartDescriptor.Value == null)
                throw new ArgumentNullException(nameof(ideaPartDescriptor));

            if (evaluationLateReason.IsSet && evaluationLateReason.Value == null)
                throw new ArgumentNullException(nameof(evaluationLateReason));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="consentToEvaluationReceivedDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="eligibilityDelayReasonDescriptor"></param>
        /// <param name="eligibilityEvaluationTypeDescriptor"></param>
        /// <param name="evaluationDelayReasonDescriptor"></param>
        /// <param name="ideaPartDescriptor"></param>
        /// <param name="consentToEvaluationDate"></param>
        /// <param name="eligibilityConferenceDate"></param>
        /// <param name="eligibilityDeterminationDate"></param>
        /// <param name="eligibilityEvaluationDate"></param>
        /// <param name="evaluationCompleteIndicator"></param>
        /// <param name="evaluationDelayDays"></param>
        /// <param name="evaluationLateReason"></param>
        /// <param name="id"></param>
        /// <param name="ideaIndicator"></param>
        /// <param name="originalECIServicesDate"></param>
        /// <param name="transitionConferenceDate"></param>
        /// <param name="transitionNotificationDate"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsDefaultImplementation(IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> consentToEvaluationReceivedDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> eligibilityDelayReasonDescriptor, Option<string> eligibilityEvaluationTypeDescriptor, Option<string> evaluationDelayReasonDescriptor, Option<string> ideaPartDescriptor, Option<DateOnly> consentToEvaluationDate, Option<DateOnly> eligibilityConferenceDate, Option<DateOnly> eligibilityDeterminationDate, Option<DateOnly> eligibilityEvaluationDate, Option<bool> evaluationCompleteIndicator, Option<int> evaluationDelayDays, Option<string> evaluationLateReason, Option<string> id, Option<bool> ideaIndicator, Option<DateOnly> originalECIServicesDate, Option<DateOnly> transitionConferenceDate, Option<DateOnly> transitionNotificationDate, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, consentToEvaluationReceivedDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, consentToEvaluationDate, eligibilityConferenceDate, eligibilityDeterminationDate, eligibilityEvaluationDate, evaluationCompleteIndicator, evaluationDelayDays, evaluationLateReason, id, ideaIndicator, originalECIServicesDate, transitionConferenceDate, transitionNotificationDate, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="consentToEvaluationReceivedDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="eligibilityDelayReasonDescriptor"></param>
        /// <param name="eligibilityEvaluationTypeDescriptor"></param>
        /// <param name="evaluationDelayReasonDescriptor"></param>
        /// <param name="ideaPartDescriptor"></param>
        /// <param name="consentToEvaluationDate"></param>
        /// <param name="eligibilityConferenceDate"></param>
        /// <param name="eligibilityDeterminationDate"></param>
        /// <param name="eligibilityEvaluationDate"></param>
        /// <param name="evaluationCompleteIndicator"></param>
        /// <param name="evaluationDelayDays"></param>
        /// <param name="evaluationLateReason"></param>
        /// <param name="id"></param>
        /// <param name="ideaIndicator"></param>
        /// <param name="originalECIServicesDate"></param>
        /// <param name="transitionConferenceDate"></param>
        /// <param name="transitionNotificationDate"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(ref bool suppressDefaultLog, IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> consentToEvaluationReceivedDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> eligibilityDelayReasonDescriptor, Option<string> eligibilityEvaluationTypeDescriptor, Option<string> evaluationDelayReasonDescriptor, Option<string> ideaPartDescriptor, Option<DateOnly> consentToEvaluationDate, Option<DateOnly> eligibilityConferenceDate, Option<DateOnly> eligibilityDeterminationDate, Option<DateOnly> eligibilityEvaluationDate, Option<bool> evaluationCompleteIndicator, Option<int> evaluationDelayDays, Option<string> evaluationLateReason, Option<string> id, Option<bool> ideaIndicator, Option<DateOnly> originalECIServicesDate, Option<DateOnly> transitionConferenceDate, Option<DateOnly> transitionNotificationDate, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="consentToEvaluationReceivedDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="eligibilityDelayReasonDescriptor"></param>
        /// <param name="eligibilityEvaluationTypeDescriptor"></param>
        /// <param name="evaluationDelayReasonDescriptor"></param>
        /// <param name="ideaPartDescriptor"></param>
        /// <param name="consentToEvaluationDate"></param>
        /// <param name="eligibilityConferenceDate"></param>
        /// <param name="eligibilityDeterminationDate"></param>
        /// <param name="eligibilityEvaluationDate"></param>
        /// <param name="evaluationCompleteIndicator"></param>
        /// <param name="evaluationDelayDays"></param>
        /// <param name="evaluationLateReason"></param>
        /// <param name="id"></param>
        /// <param name="ideaIndicator"></param>
        /// <param name="originalECIServicesDate"></param>
        /// <param name="transitionConferenceDate"></param>
        /// <param name="transitionNotificationDate"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> consentToEvaluationReceivedDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> eligibilityDelayReasonDescriptor, Option<string> eligibilityEvaluationTypeDescriptor, Option<string> evaluationDelayReasonDescriptor, Option<string> ideaPartDescriptor, Option<DateOnly> consentToEvaluationDate, Option<DateOnly> eligibilityConferenceDate, Option<DateOnly> eligibilityDeterminationDate, Option<DateOnly> eligibilityEvaluationDate, Option<bool> evaluationCompleteIndicator, Option<int> evaluationDelayDays, Option<string> evaluationLateReason, Option<string> id, Option<bool> ideaIndicator, Option<DateOnly> originalECIServicesDate, Option<DateOnly> transitionConferenceDate, Option<DateOnly> transitionNotificationDate, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, consentToEvaluationReceivedDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, consentToEvaluationDate, eligibilityConferenceDate, eligibilityDeterminationDate, eligibilityEvaluationDate, evaluationCompleteIndicator, evaluationDelayDays, evaluationLateReason, id, ideaIndicator, originalECIServicesDate, transitionConferenceDate, transitionNotificationDate, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="consentToEvaluationReceivedDate"></param>
        /// <param name="educationOrganizationId"></param>
        /// <param name="programEducationOrganizationId"></param>
        /// <param name="programName"></param>
        /// <param name="programTypeDescriptor"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="eligibilityDelayReasonDescriptor"></param>
        /// <param name="eligibilityEvaluationTypeDescriptor"></param>
        /// <param name="evaluationDelayReasonDescriptor"></param>
        /// <param name="ideaPartDescriptor"></param>
        /// <param name="consentToEvaluationDate"></param>
        /// <param name="eligibilityConferenceDate"></param>
        /// <param name="eligibilityDeterminationDate"></param>
        /// <param name="eligibilityEvaluationDate"></param>
        /// <param name="evaluationCompleteIndicator"></param>
        /// <param name="evaluationDelayDays"></param>
        /// <param name="evaluationLateReason"></param>
        /// <param name="id"></param>
        /// <param name="ideaIndicator"></param>
        /// <param name="originalECIServicesDate"></param>
        /// <param name="transitionConferenceDate"></param>
        /// <param name="transitionNotificationDate"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<DateOnly> consentToEvaluationReceivedDate, Option<long> educationOrganizationId, Option<long> programEducationOrganizationId, Option<string> programName, Option<string> programTypeDescriptor, Option<string> studentUniqueId, Option<string> eligibilityDelayReasonDescriptor, Option<string> eligibilityEvaluationTypeDescriptor, Option<string> evaluationDelayReasonDescriptor, Option<string> ideaPartDescriptor, Option<DateOnly> consentToEvaluationDate, Option<DateOnly> eligibilityConferenceDate, Option<DateOnly> eligibilityDeterminationDate, Option<DateOnly> eligibilityEvaluationDate, Option<bool> evaluationCompleteIndicator, Option<int> evaluationDelayDays, Option<string> evaluationLateReason, Option<string> id, Option<bool> ideaIndicator, Option<DateOnly> originalECIServicesDate, Option<DateOnly> transitionConferenceDate, Option<DateOnly> transitionNotificationDate, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="consentToEvaluationReceivedDate">Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="eligibilityDelayReasonDescriptor">The reason why the eligibility determination was completed beyond the required timeframe. (optional)</param>
        /// <param name="eligibilityEvaluationTypeDescriptor">Indicates if this is an initial evaluation or a reevaluation. (optional)</param>
        /// <param name="evaluationDelayReasonDescriptor">Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)</param>
        /// <param name="ideaPartDescriptor">Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)</param>
        /// <param name="consentToEvaluationDate">The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)</param>
        /// <param name="eligibilityConferenceDate">The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)</param>
        /// <param name="eligibilityDeterminationDate">Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)</param>
        /// <param name="eligibilityEvaluationDate">Indicates the month, day, and year when the written individual evaluation report was completed. (optional)</param>
        /// <param name="evaluationCompleteIndicator">Indicates the evaluation completed status. (optional)</param>
        /// <param name="evaluationDelayDays">Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)</param>
        /// <param name="evaluationLateReason">Refers to additional information for delay in doing the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ideaIndicator">Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)</param>
        /// <param name="originalECIServicesDate">The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)</param>
        /// <param name="transitionConferenceDate">Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)</param>
        /// <param name="transitionNotificationDate">Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse?> GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> consentToEvaluationReceivedDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> eligibilityDelayReasonDescriptor = default, Option<string> eligibilityEvaluationTypeDescriptor = default, Option<string> evaluationDelayReasonDescriptor = default, Option<string> ideaPartDescriptor = default, Option<DateOnly> consentToEvaluationDate = default, Option<DateOnly> eligibilityConferenceDate = default, Option<DateOnly> eligibilityDeterminationDate = default, Option<DateOnly> eligibilityEvaluationDate = default, Option<bool> evaluationCompleteIndicator = default, Option<int> evaluationDelayDays = default, Option<string> evaluationLateReason = default, Option<string> id = default, Option<bool> ideaIndicator = default, Option<DateOnly> originalECIServicesDate = default, Option<DateOnly> transitionConferenceDate = default, Option<DateOnly> transitionNotificationDate = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsAsync(number, minChangeVersion, maxChangeVersion, consentToEvaluationReceivedDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, consentToEvaluationDate, eligibilityConferenceDate, eligibilityDeterminationDate, eligibilityEvaluationDate, evaluationCompleteIndicator, evaluationDelayDays, evaluationLateReason, id, ideaIndicator, originalECIServicesDate, transitionConferenceDate, transitionNotificationDate, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="consentToEvaluationReceivedDate">Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="eligibilityDelayReasonDescriptor">The reason why the eligibility determination was completed beyond the required timeframe. (optional)</param>
        /// <param name="eligibilityEvaluationTypeDescriptor">Indicates if this is an initial evaluation or a reevaluation. (optional)</param>
        /// <param name="evaluationDelayReasonDescriptor">Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values. (optional)</param>
        /// <param name="ideaPartDescriptor">Indicates if the evaluation is done under Part B IDEA or Part C IDEA. (optional)</param>
        /// <param name="consentToEvaluationDate">The date on which the student&#39;s parent gave a consent (Parent Consent Date). (optional)</param>
        /// <param name="eligibilityConferenceDate">The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility. (optional)</param>
        /// <param name="eligibilityDeterminationDate">Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date. (optional)</param>
        /// <param name="eligibilityEvaluationDate">Indicates the month, day, and year when the written individual evaluation report was completed. (optional)</param>
        /// <param name="evaluationCompleteIndicator">Indicates the evaluation completed status. (optional)</param>
        /// <param name="evaluationDelayDays">Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation. (optional)</param>
        /// <param name="evaluationLateReason">Refers to additional information for delay in doing the evaluation. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="ideaIndicator">Indicates whether or not the student was determined eligible as a result of an evaluation. (optional)</param>
        /// <param name="originalECIServicesDate">The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program. (optional)</param>
        /// <param name="transitionConferenceDate">Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services. (optional)</param>
        /// <param name="transitionNotificationDate">Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse> GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<DateOnly> consentToEvaluationReceivedDate = default, Option<long> educationOrganizationId = default, Option<long> programEducationOrganizationId = default, Option<string> programName = default, Option<string> programTypeDescriptor = default, Option<string> studentUniqueId = default, Option<string> eligibilityDelayReasonDescriptor = default, Option<string> eligibilityEvaluationTypeDescriptor = default, Option<string> evaluationDelayReasonDescriptor = default, Option<string> ideaPartDescriptor = default, Option<DateOnly> consentToEvaluationDate = default, Option<DateOnly> eligibilityConferenceDate = default, Option<DateOnly> eligibilityDeterminationDate = default, Option<DateOnly> eligibilityEvaluationDate = default, Option<bool> evaluationCompleteIndicator = default, Option<int> evaluationDelayDays = default, Option<string> evaluationLateReason = default, Option<string> id = default, Option<bool> ideaIndicator = default, Option<DateOnly> originalECIServicesDate = default, Option<DateOnly> transitionConferenceDate = default, Option<DateOnly> transitionNotificationDate = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, evaluationLateReason, id);

                FormatGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref consentToEvaluationReceivedDate, ref educationOrganizationId, ref programEducationOrganizationId, ref programName, ref programTypeDescriptor, ref studentUniqueId, ref eligibilityDelayReasonDescriptor, ref eligibilityEvaluationTypeDescriptor, ref evaluationDelayReasonDescriptor, ref ideaPartDescriptor, ref consentToEvaluationDate, ref eligibilityConferenceDate, ref eligibilityDeterminationDate, ref eligibilityEvaluationDate, ref evaluationCompleteIndicator, ref evaluationDelayDays, ref evaluationLateReason, ref id, ref ideaIndicator, ref originalECIServicesDate, ref transitionConferenceDate, ref transitionNotificationDate, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (consentToEvaluationReceivedDate.IsSet)
                        parseQueryStringLocalVar["consentToEvaluationReceivedDate"] = ClientUtils.ParameterToString(consentToEvaluationReceivedDate.Value);

                    if (educationOrganizationId.IsSet)
                        parseQueryStringLocalVar["educationOrganizationId"] = ClientUtils.ParameterToString(educationOrganizationId.Value);

                    if (programEducationOrganizationId.IsSet)
                        parseQueryStringLocalVar["programEducationOrganizationId"] = ClientUtils.ParameterToString(programEducationOrganizationId.Value);

                    if (programName.IsSet)
                        parseQueryStringLocalVar["programName"] = ClientUtils.ParameterToString(programName.Value);

                    if (programTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["programTypeDescriptor"] = ClientUtils.ParameterToString(programTypeDescriptor.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (eligibilityDelayReasonDescriptor.IsSet)
                        parseQueryStringLocalVar["eligibilityDelayReasonDescriptor"] = ClientUtils.ParameterToString(eligibilityDelayReasonDescriptor.Value);

                    if (eligibilityEvaluationTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["eligibilityEvaluationTypeDescriptor"] = ClientUtils.ParameterToString(eligibilityEvaluationTypeDescriptor.Value);

                    if (evaluationDelayReasonDescriptor.IsSet)
                        parseQueryStringLocalVar["evaluationDelayReasonDescriptor"] = ClientUtils.ParameterToString(evaluationDelayReasonDescriptor.Value);

                    if (ideaPartDescriptor.IsSet)
                        parseQueryStringLocalVar["ideaPartDescriptor"] = ClientUtils.ParameterToString(ideaPartDescriptor.Value);

                    if (consentToEvaluationDate.IsSet)
                        parseQueryStringLocalVar["consentToEvaluationDate"] = ClientUtils.ParameterToString(consentToEvaluationDate.Value);

                    if (eligibilityConferenceDate.IsSet)
                        parseQueryStringLocalVar["eligibilityConferenceDate"] = ClientUtils.ParameterToString(eligibilityConferenceDate.Value);

                    if (eligibilityDeterminationDate.IsSet)
                        parseQueryStringLocalVar["eligibilityDeterminationDate"] = ClientUtils.ParameterToString(eligibilityDeterminationDate.Value);

                    if (eligibilityEvaluationDate.IsSet)
                        parseQueryStringLocalVar["eligibilityEvaluationDate"] = ClientUtils.ParameterToString(eligibilityEvaluationDate.Value);

                    if (evaluationCompleteIndicator.IsSet)
                        parseQueryStringLocalVar["evaluationCompleteIndicator"] = ClientUtils.ParameterToString(evaluationCompleteIndicator.Value);

                    if (evaluationDelayDays.IsSet)
                        parseQueryStringLocalVar["evaluationDelayDays"] = ClientUtils.ParameterToString(evaluationDelayDays.Value);

                    if (evaluationLateReason.IsSet)
                        parseQueryStringLocalVar["evaluationLateReason"] = ClientUtils.ParameterToString(evaluationLateReason.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (ideaIndicator.IsSet)
                        parseQueryStringLocalVar["ideaIndicator"] = ClientUtils.ParameterToString(ideaIndicator.Value);

                    if (originalECIServicesDate.IsSet)
                        parseQueryStringLocalVar["originalECIServicesDate"] = ClientUtils.ParameterToString(originalECIServicesDate.Value);

                    if (transitionConferenceDate.IsSet)
                        parseQueryStringLocalVar["transitionConferenceDate"] = ClientUtils.ParameterToString(transitionConferenceDate.Value);

                    if (transitionNotificationDate.IsSet)
                        parseQueryStringLocalVar["transitionNotificationDate"] = ClientUtils.ParameterToString(transitionNotificationDate.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse>();

                        GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, consentToEvaluationReceivedDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, consentToEvaluationDate, eligibilityConferenceDate, eligibilityDeterminationDate, eligibilityEvaluationDate, evaluationCompleteIndicator, evaluationDelayDays, evaluationLateReason, id, ideaIndicator, originalECIServicesDate, transitionConferenceDate, transitionNotificationDate, useSnapshot);

                        Events.ExecuteOnGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, consentToEvaluationReceivedDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, eligibilityDelayReasonDescriptor, eligibilityEvaluationTypeDescriptor, evaluationDelayReasonDescriptor, ideaPartDescriptor, consentToEvaluationDate, eligibilityConferenceDate, eligibilityDeterminationDate, eligibilityEvaluationDate, evaluationCompleteIndicator, evaluationDelayDays, evaluationLateReason, id, ideaIndicator, originalECIServicesDate, transitionConferenceDate, transitionNotificationDate, useSnapshot);
                Events.ExecuteOnErrorGetStudentSpecialEducationProgramEligibilityAssociationsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse(ILogger<GetStudentSpecialEducationProgramEligibilityAssociationsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesStudentSpecialEducationProgramEligibilityAssociations(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesStudentSpecialEducationProgramEligibilityAssociations(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesStudentSpecialEducationProgramEligibilityAssociations(ref bool suppressDefaultLog, IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesStudentSpecialEducationProgramEligibilityAssociations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesStudentSpecialEducationProgramEligibilityAssociations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse?> KeyChangesStudentSpecialEducationProgramEligibilityAssociationsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesStudentSpecialEducationProgramEligibilityAssociationsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse> KeyChangesStudentSpecialEducationProgramEligibilityAssociationsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesStudentSpecialEducationProgramEligibilityAssociations(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse>();

                        KeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesStudentSpecialEducationProgramEligibilityAssociations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesStudentSpecialEducationProgramEligibilityAssociationsDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesStudentSpecialEducationProgramEligibilityAssociations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>
        /// </summary>
        public partial class KeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse(ILogger<KeyChangesStudentSpecialEducationProgramEligibilityAssociationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentSpecialEducationProgramEligibilityAssociationKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostStudentSpecialEducationProgramEligibilityAssociation(EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        /// <returns></returns>
        private void ValidatePostStudentSpecialEducationProgramEligibilityAssociation(EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation)
        {
            if (edFiStudentSpecialEducationProgramEligibilityAssociation == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramEligibilityAssociation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        private void AfterPostStudentSpecialEducationProgramEligibilityAssociationDefaultImplementation(IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse apiResponseLocalVar, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation)
        {
            bool suppressDefaultLog = false;
            AfterPostStudentSpecialEducationProgramEligibilityAssociation(ref suppressDefaultLog, apiResponseLocalVar, edFiStudentSpecialEducationProgramEligibilityAssociation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        partial void AfterPostStudentSpecialEducationProgramEligibilityAssociation(ref bool suppressDefaultLog, IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse apiResponseLocalVar, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        private void OnErrorPostStudentSpecialEducationProgramEligibilityAssociationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostStudentSpecialEducationProgramEligibilityAssociation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiStudentSpecialEducationProgramEligibilityAssociation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        partial void OnErrorPostStudentSpecialEducationProgramEligibilityAssociation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>&gt;</returns>
        public async Task<IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse?> PostStudentSpecialEducationProgramEligibilityAssociationOrDefaultAsync(EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostStudentSpecialEducationProgramEligibilityAssociationAsync(edFiStudentSpecialEducationProgramEligibilityAssociation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>&gt;</returns>
        public async Task<IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse> PostStudentSpecialEducationProgramEligibilityAssociationAsync(EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostStudentSpecialEducationProgramEligibilityAssociation(edFiStudentSpecialEducationProgramEligibilityAssociation);

                FormatPostStudentSpecialEducationProgramEligibilityAssociation(edFiStudentSpecialEducationProgramEligibilityAssociation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramEligibilityAssociations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations");

                    httpRequestMessageLocalVar.Content = (edFiStudentSpecialEducationProgramEligibilityAssociation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentSpecialEducationProgramEligibilityAssociation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostStudentSpecialEducationProgramEligibilityAssociationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostStudentSpecialEducationProgramEligibilityAssociationApiResponse>();

                        PostStudentSpecialEducationProgramEligibilityAssociationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostStudentSpecialEducationProgramEligibilityAssociationDefaultImplementation(apiResponseLocalVar, edFiStudentSpecialEducationProgramEligibilityAssociation);

                        Events.ExecuteOnPostStudentSpecialEducationProgramEligibilityAssociation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostStudentSpecialEducationProgramEligibilityAssociationDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations", uriBuilderLocalVar.Path, edFiStudentSpecialEducationProgramEligibilityAssociation);
                Events.ExecuteOnErrorPostStudentSpecialEducationProgramEligibilityAssociation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>
        /// </summary>
        public partial class PostStudentSpecialEducationProgramEligibilityAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostStudentSpecialEducationProgramEligibilityAssociationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostStudentSpecialEducationProgramEligibilityAssociationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostStudentSpecialEducationProgramEligibilityAssociationApiResponse(ILogger<PostStudentSpecialEducationProgramEligibilityAssociationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutStudentSpecialEducationProgramEligibilityAssociation(ref string id, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutStudentSpecialEducationProgramEligibilityAssociation(string id, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiStudentSpecialEducationProgramEligibilityAssociation == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramEligibilityAssociation));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutStudentSpecialEducationProgramEligibilityAssociationDefaultImplementation(IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse apiResponseLocalVar, string id, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutStudentSpecialEducationProgramEligibilityAssociation(ref suppressDefaultLog, apiResponseLocalVar, id, edFiStudentSpecialEducationProgramEligibilityAssociation, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutStudentSpecialEducationProgramEligibilityAssociation(ref bool suppressDefaultLog, IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse apiResponseLocalVar, string id, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutStudentSpecialEducationProgramEligibilityAssociationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutStudentSpecialEducationProgramEligibilityAssociation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiStudentSpecialEducationProgramEligibilityAssociation, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutStudentSpecialEducationProgramEligibilityAssociation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>&gt;</returns>
        public async Task<IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse?> PutStudentSpecialEducationProgramEligibilityAssociationOrDefaultAsync(string id, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutStudentSpecialEducationProgramEligibilityAssociationAsync(id, edFiStudentSpecialEducationProgramEligibilityAssociation, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation">The JSON representation of the \&quot;studentSpecialEducationProgramEligibilityAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>&gt;</returns>
        public async Task<IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse> PutStudentSpecialEducationProgramEligibilityAssociationAsync(string id, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutStudentSpecialEducationProgramEligibilityAssociation(id, edFiStudentSpecialEducationProgramEligibilityAssociation, ifMatch);

                FormatPutStudentSpecialEducationProgramEligibilityAssociation(ref id, edFiStudentSpecialEducationProgramEligibilityAssociation, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiStudentSpecialEducationProgramEligibilityAssociation as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudentSpecialEducationProgramEligibilityAssociation, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutStudentSpecialEducationProgramEligibilityAssociationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutStudentSpecialEducationProgramEligibilityAssociationApiResponse>();

                        PutStudentSpecialEducationProgramEligibilityAssociationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutStudentSpecialEducationProgramEligibilityAssociationDefaultImplementation(apiResponseLocalVar, id, edFiStudentSpecialEducationProgramEligibilityAssociation, ifMatch);

                        Events.ExecuteOnPutStudentSpecialEducationProgramEligibilityAssociation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutStudentSpecialEducationProgramEligibilityAssociationDefaultImplementation(e, "/ed-fi/studentSpecialEducationProgramEligibilityAssociations/{id}", uriBuilderLocalVar.Path, id, edFiStudentSpecialEducationProgramEligibilityAssociation, ifMatch);
                Events.ExecuteOnErrorPutStudentSpecialEducationProgramEligibilityAssociation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>
        /// </summary>
        public partial class PutStudentSpecialEducationProgramEligibilityAssociationApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutStudentSpecialEducationProgramEligibilityAssociationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutStudentSpecialEducationProgramEligibilityAssociationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutStudentSpecialEducationProgramEligibilityAssociationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutStudentSpecialEducationProgramEligibilityAssociationApiResponse(ILogger<PutStudentSpecialEducationProgramEligibilityAssociationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
