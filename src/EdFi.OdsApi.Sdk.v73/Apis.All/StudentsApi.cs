// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v73.Client;
using EdFi.OdsApi.Sdk.v73.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v73.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStudentsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StudentsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentByIdApiResponse"/>&gt;</returns>
        Task<IDeleteStudentByIdApiResponse> DeleteStudentByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteStudentByIdApiResponse?> DeleteStudentByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentsApiResponse"/>&gt;</returns>
        Task<IDeletesStudentsApiResponse> DeletesStudentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentsApiResponse"/>?&gt;</returns>
        Task<IDeletesStudentsApiResponse?> DeletesStudentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s sex at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsApiResponse"/>&gt;</returns>
        Task<IGetStudentsApiResponse> GetStudentsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> studentUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> birthCountryDescriptor = default, Option<string> birthSexDescriptor = default, Option<string> birthStateAbbreviationDescriptor = default, Option<string> birthCity = default, Option<DateOnly> birthDate = default, Option<string> birthInternationalProvince = default, Option<DateOnly> dateEnteredUS = default, Option<string> firstName = default, Option<string> generationCodeSuffix = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> maidenName = default, Option<string> middleName = default, Option<bool> multipleBirthStatus = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s sex at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsApiResponse"/>?&gt;</returns>
        Task<IGetStudentsApiResponse?> GetStudentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> studentUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> birthCountryDescriptor = default, Option<string> birthSexDescriptor = default, Option<string> birthStateAbbreviationDescriptor = default, Option<string> birthCity = default, Option<DateOnly> birthDate = default, Option<string> birthInternationalProvince = default, Option<DateOnly> dateEnteredUS = default, Option<string> firstName = default, Option<string> generationCodeSuffix = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> maidenName = default, Option<string> middleName = default, Option<bool> multipleBirthStatus = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsByIdApiResponse"/>&gt;</returns>
        Task<IGetStudentsByIdApiResponse> GetStudentsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsByIdApiResponse"/>?&gt;</returns>
        Task<IGetStudentsByIdApiResponse?> GetStudentsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s sex at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsPartitionsApiResponse"/>&gt;</returns>
        Task<IGetStudentsPartitionsApiResponse> GetStudentsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> studentUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> birthCountryDescriptor = default, Option<string> birthSexDescriptor = default, Option<string> birthStateAbbreviationDescriptor = default, Option<string> birthCity = default, Option<DateOnly> birthDate = default, Option<string> birthInternationalProvince = default, Option<DateOnly> dateEnteredUS = default, Option<string> firstName = default, Option<string> generationCodeSuffix = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> maidenName = default, Option<string> middleName = default, Option<bool> multipleBirthStatus = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing.
        /// </summary>
        /// <remarks>
        /// Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </remarks>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s sex at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsPartitionsApiResponse"/>?&gt;</returns>
        Task<IGetStudentsPartitionsApiResponse?> GetStudentsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> studentUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> birthCountryDescriptor = default, Option<string> birthSexDescriptor = default, Option<string> birthStateAbbreviationDescriptor = default, Option<string> birthCity = default, Option<DateOnly> birthDate = default, Option<string> birthInternationalProvince = default, Option<DateOnly> dateEnteredUS = default, Option<string> firstName = default, Option<string> generationCodeSuffix = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> maidenName = default, Option<string> middleName = default, Option<bool> multipleBirthStatus = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentsApiResponse"/>&gt;</returns>
        Task<IKeyChangesStudentsApiResponse> KeyChangesStudentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesStudentsApiResponse?> KeyChangesStudentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudent">The JSON representation of the \&quot;student\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentApiResponse"/>&gt;</returns>
        Task<IPostStudentApiResponse> PostStudentAsync(EdFiStudent edFiStudent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="edFiStudent">The JSON representation of the \&quot;student\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentApiResponse"/>?&gt;</returns>
        Task<IPostStudentApiResponse?> PostStudentOrDefaultAsync(EdFiStudent edFiStudent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudent">The JSON representation of the \&quot;student\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentApiResponse"/>&gt;</returns>
        Task<IPutStudentApiResponse> PutStudentAsync(string id, EdFiStudent edFiStudent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudent">The JSON representation of the \&quot;student\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentApiResponse"/>?&gt;</returns>
        Task<IPutStudentApiResponse?> PutStudentOrDefaultAsync(string id, EdFiStudent edFiStudent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteStudentByIdApiResponse"/>
    /// </summary>
    public interface IDeleteStudentByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesStudentsApiResponse"/>
    /// </summary>
    public interface IDeletesStudentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentsApiResponse"/>
    /// </summary>
    public interface IGetStudentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<EdFiStudent>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentsByIdApiResponse"/>
    /// </summary>
    public interface IGetStudentsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudent?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentsPartitionsApiResponse"/>
    /// </summary>
    public interface IGetStudentsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesStudentsApiResponse"/>
    /// </summary>
    public interface IKeyChangesStudentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostStudentApiResponse"/>
    /// </summary>
    public interface IPostStudentApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutStudentApiResponse"/>
    /// </summary>
    public interface IPutStudentApiResponse : EdFi.OdsApi.Sdk.v73.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StudentsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteStudentById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteStudentById;

        internal void ExecuteOnDeleteStudentById(StudentsApi.DeleteStudentByIdApiResponse apiResponse)
        {
            OnDeleteStudentById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteStudentById(Exception exception)
        {
            OnErrorDeleteStudentById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesStudents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesStudents;

        internal void ExecuteOnDeletesStudents(StudentsApi.DeletesStudentsApiResponse apiResponse)
        {
            OnDeletesStudents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesStudents(Exception exception)
        {
            OnErrorDeletesStudents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudents;

        internal void ExecuteOnGetStudents(StudentsApi.GetStudentsApiResponse apiResponse)
        {
            OnGetStudents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudents(Exception exception)
        {
            OnErrorGetStudents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentsById;

        internal void ExecuteOnGetStudentsById(StudentsApi.GetStudentsByIdApiResponse apiResponse)
        {
            OnGetStudentsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentsById(Exception exception)
        {
            OnErrorGetStudentsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentsPartitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentsPartitions;

        internal void ExecuteOnGetStudentsPartitions(StudentsApi.GetStudentsPartitionsApiResponse apiResponse)
        {
            OnGetStudentsPartitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentsPartitions(Exception exception)
        {
            OnErrorGetStudentsPartitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesStudents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesStudents;

        internal void ExecuteOnKeyChangesStudents(StudentsApi.KeyChangesStudentsApiResponse apiResponse)
        {
            OnKeyChangesStudents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesStudents(Exception exception)
        {
            OnErrorKeyChangesStudents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostStudent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostStudent;

        internal void ExecuteOnPostStudent(StudentsApi.PostStudentApiResponse apiResponse)
        {
            OnPostStudent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostStudent(Exception exception)
        {
            OnErrorPostStudent?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutStudent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutStudent;

        internal void ExecuteOnPutStudent(StudentsApi.PutStudentApiResponse apiResponse)
        {
            OnPutStudent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutStudent(Exception exception)
        {
            OnErrorPutStudent?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StudentsApi : IStudentsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StudentsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StudentsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentsApi(ILogger<StudentsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StudentsApiEvents studentsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StudentsApi>();
            HttpClient = httpClient;
            Events = studentsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteStudentById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteStudentById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteStudentByIdDefaultImplementation(IDeleteStudentByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteStudentById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteStudentById(ref bool suppressDefaultLog, IDeleteStudentByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteStudentByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteStudentById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteStudentById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentByIdApiResponse?> DeleteStudentByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteStudentByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentByIdApiResponse> DeleteStudentByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteStudentById(id, ifMatch);

                FormatDeleteStudentById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/students/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/students/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteStudentByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteStudentByIdApiResponse>();

                        DeleteStudentByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/students/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteStudentByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteStudentById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteStudentByIdDefaultImplementation(e, "/ed-fi/students/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteStudentById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteStudentByIdApiResponse"/>
        /// </summary>
        public partial class DeleteStudentByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeleteStudentByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteStudentByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteStudentByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteStudentByIdApiResponse(ILogger<DeleteStudentByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesStudents(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterDeletesStudentsDefaultImplementation(IDeletesStudentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterDeletesStudents(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterDeletesStudents(ref bool suppressDefaultLog, IDeletesStudentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorDeletesStudentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesStudents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorDeletesStudents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentsApiResponse?> DeletesStudentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesStudentsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentsApiResponse> DeletesStudentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletesStudents(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/students/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/students/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesStudentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesStudentsApiResponse>();

                        DeletesStudentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/students/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesStudentsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnDeletesStudents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesStudentsDefaultImplementation(e, "/ed-fi/students/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorDeletesStudents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesStudentsApiResponse"/>
        /// </summary>
        public partial class DeletesStudentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IDeletesStudentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesStudentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesStudentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesStudentsApiResponse(ILogger<DeletesStudentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudents(ref Option<int> offset, ref Option<int> limit, ref Option<string> pageToken, ref Option<int> pageSize, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> studentUniqueId, ref Option<string> personId, ref Option<string> sourceSystemDescriptor, ref Option<string> citizenshipStatusDescriptor, ref Option<string> birthCountryDescriptor, ref Option<string> birthSexDescriptor, ref Option<string> birthStateAbbreviationDescriptor, ref Option<string> birthCity, ref Option<DateOnly> birthDate, ref Option<string> birthInternationalProvince, ref Option<DateOnly> dateEnteredUS, ref Option<string> firstName, ref Option<string> generationCodeSuffix, ref Option<string> id, ref Option<string> lastSurname, ref Option<string> maidenName, ref Option<string> middleName, ref Option<bool> multipleBirthStatus, ref Option<string> personalTitlePrefix, ref Option<string> preferredFirstName, ref Option<string> preferredLastSurname, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="birthCountryDescriptor"></param>
        /// <param name="birthSexDescriptor"></param>
        /// <param name="birthStateAbbreviationDescriptor"></param>
        /// <param name="birthCity"></param>
        /// <param name="birthInternationalProvince"></param>
        /// <param name="firstName"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <returns></returns>
        private void ValidateGetStudents(Option<string> pageToken, Option<string> studentUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> birthCountryDescriptor, Option<string> birthSexDescriptor, Option<string> birthStateAbbreviationDescriptor, Option<string> birthCity, Option<string> birthInternationalProvince, Option<string> firstName, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (personId.IsSet && personId.Value == null)
                throw new ArgumentNullException(nameof(personId));

            if (sourceSystemDescriptor.IsSet && sourceSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(sourceSystemDescriptor));

            if (citizenshipStatusDescriptor.IsSet && citizenshipStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(citizenshipStatusDescriptor));

            if (birthCountryDescriptor.IsSet && birthCountryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(birthCountryDescriptor));

            if (birthSexDescriptor.IsSet && birthSexDescriptor.Value == null)
                throw new ArgumentNullException(nameof(birthSexDescriptor));

            if (birthStateAbbreviationDescriptor.IsSet && birthStateAbbreviationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(birthStateAbbreviationDescriptor));

            if (birthCity.IsSet && birthCity.Value == null)
                throw new ArgumentNullException(nameof(birthCity));

            if (birthInternationalProvince.IsSet && birthInternationalProvince.Value == null)
                throw new ArgumentNullException(nameof(birthInternationalProvince));

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName));

            if (generationCodeSuffix.IsSet && generationCodeSuffix.Value == null)
                throw new ArgumentNullException(nameof(generationCodeSuffix));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (lastSurname.IsSet && lastSurname.Value == null)
                throw new ArgumentNullException(nameof(lastSurname));

            if (maidenName.IsSet && maidenName.Value == null)
                throw new ArgumentNullException(nameof(maidenName));

            if (middleName.IsSet && middleName.Value == null)
                throw new ArgumentNullException(nameof(middleName));

            if (personalTitlePrefix.IsSet && personalTitlePrefix.Value == null)
                throw new ArgumentNullException(nameof(personalTitlePrefix));

            if (preferredFirstName.IsSet && preferredFirstName.Value == null)
                throw new ArgumentNullException(nameof(preferredFirstName));

            if (preferredLastSurname.IsSet && preferredLastSurname.Value == null)
                throw new ArgumentNullException(nameof(preferredLastSurname));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="birthCountryDescriptor"></param>
        /// <param name="birthSexDescriptor"></param>
        /// <param name="birthStateAbbreviationDescriptor"></param>
        /// <param name="birthCity"></param>
        /// <param name="birthDate"></param>
        /// <param name="birthInternationalProvince"></param>
        /// <param name="dateEnteredUS"></param>
        /// <param name="firstName"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="multipleBirthStatus"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentsDefaultImplementation(IGetStudentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> studentUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> birthCountryDescriptor, Option<string> birthSexDescriptor, Option<string> birthStateAbbreviationDescriptor, Option<string> birthCity, Option<DateOnly> birthDate, Option<string> birthInternationalProvince, Option<DateOnly> dateEnteredUS, Option<string> firstName, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> maidenName, Option<string> middleName, Option<bool> multipleBirthStatus, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudents(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, preferredFirstName, preferredLastSurname, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="birthCountryDescriptor"></param>
        /// <param name="birthSexDescriptor"></param>
        /// <param name="birthStateAbbreviationDescriptor"></param>
        /// <param name="birthCity"></param>
        /// <param name="birthDate"></param>
        /// <param name="birthInternationalProvince"></param>
        /// <param name="dateEnteredUS"></param>
        /// <param name="firstName"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="multipleBirthStatus"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudents(ref bool suppressDefaultLog, IGetStudentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> studentUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> birthCountryDescriptor, Option<string> birthSexDescriptor, Option<string> birthStateAbbreviationDescriptor, Option<string> birthCity, Option<DateOnly> birthDate, Option<string> birthInternationalProvince, Option<DateOnly> dateEnteredUS, Option<string> firstName, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> maidenName, Option<string> middleName, Option<bool> multipleBirthStatus, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="birthCountryDescriptor"></param>
        /// <param name="birthSexDescriptor"></param>
        /// <param name="birthStateAbbreviationDescriptor"></param>
        /// <param name="birthCity"></param>
        /// <param name="birthDate"></param>
        /// <param name="birthInternationalProvince"></param>
        /// <param name="dateEnteredUS"></param>
        /// <param name="firstName"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="multipleBirthStatus"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> studentUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> birthCountryDescriptor, Option<string> birthSexDescriptor, Option<string> birthStateAbbreviationDescriptor, Option<string> birthCity, Option<DateOnly> birthDate, Option<string> birthInternationalProvince, Option<DateOnly> dateEnteredUS, Option<string> firstName, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> maidenName, Option<string> middleName, Option<bool> multipleBirthStatus, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, preferredFirstName, preferredLastSurname, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="pageToken"></param>
        /// <param name="pageSize"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="birthCountryDescriptor"></param>
        /// <param name="birthSexDescriptor"></param>
        /// <param name="birthStateAbbreviationDescriptor"></param>
        /// <param name="birthCity"></param>
        /// <param name="birthDate"></param>
        /// <param name="birthInternationalProvince"></param>
        /// <param name="dateEnteredUS"></param>
        /// <param name="firstName"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="multipleBirthStatus"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> pageToken, Option<int> pageSize, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> studentUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> birthCountryDescriptor, Option<string> birthSexDescriptor, Option<string> birthStateAbbreviationDescriptor, Option<string> birthCity, Option<DateOnly> birthDate, Option<string> birthInternationalProvince, Option<DateOnly> dateEnteredUS, Option<string> firstName, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> maidenName, Option<string> middleName, Option<bool> multipleBirthStatus, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s sex at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentsApiResponse?> GetStudentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> studentUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> birthCountryDescriptor = default, Option<string> birthSexDescriptor = default, Option<string> birthStateAbbreviationDescriptor = default, Option<string> birthCity = default, Option<DateOnly> birthDate = default, Option<string> birthInternationalProvince = default, Option<DateOnly> dateEnteredUS = default, Option<string> firstName = default, Option<string> generationCodeSuffix = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> maidenName = default, Option<string> middleName = default, Option<bool> multipleBirthStatus = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentsAsync(offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, preferredFirstName, preferredLastSurname, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="pageToken">The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)</param>
        /// <param name="pageSize">The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s sex at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentsApiResponse> GetStudentsAsync(Option<int> offset = default, Option<int> limit = default, Option<string> pageToken = default, Option<int> pageSize = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> studentUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> birthCountryDescriptor = default, Option<string> birthSexDescriptor = default, Option<string> birthStateAbbreviationDescriptor = default, Option<string> birthCity = default, Option<DateOnly> birthDate = default, Option<string> birthInternationalProvince = default, Option<DateOnly> dateEnteredUS = default, Option<string> firstName = default, Option<string> generationCodeSuffix = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> maidenName = default, Option<string> middleName = default, Option<bool> multipleBirthStatus = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudents(pageToken, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthInternationalProvince, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname);

                FormatGetStudents(ref offset, ref limit, ref pageToken, ref pageSize, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref studentUniqueId, ref personId, ref sourceSystemDescriptor, ref citizenshipStatusDescriptor, ref birthCountryDescriptor, ref birthSexDescriptor, ref birthStateAbbreviationDescriptor, ref birthCity, ref birthDate, ref birthInternationalProvince, ref dateEnteredUS, ref firstName, ref generationCodeSuffix, ref id, ref lastSurname, ref maidenName, ref middleName, ref multipleBirthStatus, ref personalTitlePrefix, ref preferredFirstName, ref preferredLastSurname, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/students"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/students");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (pageToken.IsSet)
                        parseQueryStringLocalVar["pageToken"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (personId.IsSet)
                        parseQueryStringLocalVar["personId"] = ClientUtils.ParameterToString(personId.Value);

                    if (sourceSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["sourceSystemDescriptor"] = ClientUtils.ParameterToString(sourceSystemDescriptor.Value);

                    if (citizenshipStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["citizenshipStatusDescriptor"] = ClientUtils.ParameterToString(citizenshipStatusDescriptor.Value);

                    if (birthCountryDescriptor.IsSet)
                        parseQueryStringLocalVar["birthCountryDescriptor"] = ClientUtils.ParameterToString(birthCountryDescriptor.Value);

                    if (birthSexDescriptor.IsSet)
                        parseQueryStringLocalVar["birthSexDescriptor"] = ClientUtils.ParameterToString(birthSexDescriptor.Value);

                    if (birthStateAbbreviationDescriptor.IsSet)
                        parseQueryStringLocalVar["birthStateAbbreviationDescriptor"] = ClientUtils.ParameterToString(birthStateAbbreviationDescriptor.Value);

                    if (birthCity.IsSet)
                        parseQueryStringLocalVar["birthCity"] = ClientUtils.ParameterToString(birthCity.Value);

                    if (birthDate.IsSet)
                        parseQueryStringLocalVar["birthDate"] = ClientUtils.ParameterToString(birthDate.Value);

                    if (birthInternationalProvince.IsSet)
                        parseQueryStringLocalVar["birthInternationalProvince"] = ClientUtils.ParameterToString(birthInternationalProvince.Value);

                    if (dateEnteredUS.IsSet)
                        parseQueryStringLocalVar["dateEnteredUS"] = ClientUtils.ParameterToString(dateEnteredUS.Value);

                    if (firstName.IsSet)
                        parseQueryStringLocalVar["firstName"] = ClientUtils.ParameterToString(firstName.Value);

                    if (generationCodeSuffix.IsSet)
                        parseQueryStringLocalVar["generationCodeSuffix"] = ClientUtils.ParameterToString(generationCodeSuffix.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (lastSurname.IsSet)
                        parseQueryStringLocalVar["lastSurname"] = ClientUtils.ParameterToString(lastSurname.Value);

                    if (maidenName.IsSet)
                        parseQueryStringLocalVar["maidenName"] = ClientUtils.ParameterToString(maidenName.Value);

                    if (middleName.IsSet)
                        parseQueryStringLocalVar["middleName"] = ClientUtils.ParameterToString(middleName.Value);

                    if (multipleBirthStatus.IsSet)
                        parseQueryStringLocalVar["multipleBirthStatus"] = ClientUtils.ParameterToString(multipleBirthStatus.Value);

                    if (personalTitlePrefix.IsSet)
                        parseQueryStringLocalVar["personalTitlePrefix"] = ClientUtils.ParameterToString(personalTitlePrefix.Value);

                    if (preferredFirstName.IsSet)
                        parseQueryStringLocalVar["preferredFirstName"] = ClientUtils.ParameterToString(preferredFirstName.Value);

                    if (preferredLastSurname.IsSet)
                        parseQueryStringLocalVar["preferredLastSurname"] = ClientUtils.ParameterToString(preferredLastSurname.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentsApiResponse>();

                        GetStudentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/students", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentsDefaultImplementation(apiResponseLocalVar, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, preferredFirstName, preferredLastSurname, useSnapshot);

                        Events.ExecuteOnGetStudents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentsDefaultImplementation(e, "/ed-fi/students", uriBuilderLocalVar.Path, offset, limit, pageToken, pageSize, minChangeVersion, maxChangeVersion, totalCount, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, preferredFirstName, preferredLastSurname, useSnapshot);
                Events.ExecuteOnErrorGetStudents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentsApiResponse"/>
        /// </summary>
        public partial class GetStudentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentsApiResponse(ILogger<GetStudentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiStudent>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiStudent>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiStudent>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentsById(ref string id, ref Option<string> ifNoneMatch, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <returns></returns>
        private void ValidateGetStudentsById(string id, Option<string> ifNoneMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentsByIdDefaultImplementation(IGetStudentsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentsById(ref bool suppressDefaultLog, IGetStudentsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentsByIdApiResponse?> GetStudentsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentsByIdAsync(id, ifNoneMatch, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentsByIdApiResponse> GetStudentsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentsById(id, ifNoneMatch);

                FormatGetStudentsById(ref id, ref ifNoneMatch, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/students/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/students/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentsByIdApiResponse>();

                        GetStudentsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/students/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, useSnapshot);

                        Events.ExecuteOnGetStudentsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentsByIdDefaultImplementation(e, "/ed-fi/students/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, useSnapshot);
                Events.ExecuteOnErrorGetStudentsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentsByIdApiResponse"/>
        /// </summary>
        public partial class GetStudentsByIdApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentsByIdApiResponse(ILogger<GetStudentsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudent? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudent>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.EdFiStudent? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentsPartitions(ref Option<int> number, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<string> studentUniqueId, ref Option<string> personId, ref Option<string> sourceSystemDescriptor, ref Option<string> citizenshipStatusDescriptor, ref Option<string> birthCountryDescriptor, ref Option<string> birthSexDescriptor, ref Option<string> birthStateAbbreviationDescriptor, ref Option<string> birthCity, ref Option<DateOnly> birthDate, ref Option<string> birthInternationalProvince, ref Option<DateOnly> dateEnteredUS, ref Option<string> firstName, ref Option<string> generationCodeSuffix, ref Option<string> id, ref Option<string> lastSurname, ref Option<string> maidenName, ref Option<string> middleName, ref Option<bool> multipleBirthStatus, ref Option<string> personalTitlePrefix, ref Option<string> preferredFirstName, ref Option<string> preferredLastSurname, ref Option<bool> useSnapshot);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="studentUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="birthCountryDescriptor"></param>
        /// <param name="birthSexDescriptor"></param>
        /// <param name="birthStateAbbreviationDescriptor"></param>
        /// <param name="birthCity"></param>
        /// <param name="birthInternationalProvince"></param>
        /// <param name="firstName"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <returns></returns>
        private void ValidateGetStudentsPartitions(Option<string> studentUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> birthCountryDescriptor, Option<string> birthSexDescriptor, Option<string> birthStateAbbreviationDescriptor, Option<string> birthCity, Option<string> birthInternationalProvince, Option<string> firstName, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> maidenName, Option<string> middleName, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname)
        {
            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (personId.IsSet && personId.Value == null)
                throw new ArgumentNullException(nameof(personId));

            if (sourceSystemDescriptor.IsSet && sourceSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(sourceSystemDescriptor));

            if (citizenshipStatusDescriptor.IsSet && citizenshipStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(citizenshipStatusDescriptor));

            if (birthCountryDescriptor.IsSet && birthCountryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(birthCountryDescriptor));

            if (birthSexDescriptor.IsSet && birthSexDescriptor.Value == null)
                throw new ArgumentNullException(nameof(birthSexDescriptor));

            if (birthStateAbbreviationDescriptor.IsSet && birthStateAbbreviationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(birthStateAbbreviationDescriptor));

            if (birthCity.IsSet && birthCity.Value == null)
                throw new ArgumentNullException(nameof(birthCity));

            if (birthInternationalProvince.IsSet && birthInternationalProvince.Value == null)
                throw new ArgumentNullException(nameof(birthInternationalProvince));

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName));

            if (generationCodeSuffix.IsSet && generationCodeSuffix.Value == null)
                throw new ArgumentNullException(nameof(generationCodeSuffix));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (lastSurname.IsSet && lastSurname.Value == null)
                throw new ArgumentNullException(nameof(lastSurname));

            if (maidenName.IsSet && maidenName.Value == null)
                throw new ArgumentNullException(nameof(maidenName));

            if (middleName.IsSet && middleName.Value == null)
                throw new ArgumentNullException(nameof(middleName));

            if (personalTitlePrefix.IsSet && personalTitlePrefix.Value == null)
                throw new ArgumentNullException(nameof(personalTitlePrefix));

            if (preferredFirstName.IsSet && preferredFirstName.Value == null)
                throw new ArgumentNullException(nameof(preferredFirstName));

            if (preferredLastSurname.IsSet && preferredLastSurname.Value == null)
                throw new ArgumentNullException(nameof(preferredLastSurname));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="birthCountryDescriptor"></param>
        /// <param name="birthSexDescriptor"></param>
        /// <param name="birthStateAbbreviationDescriptor"></param>
        /// <param name="birthCity"></param>
        /// <param name="birthDate"></param>
        /// <param name="birthInternationalProvince"></param>
        /// <param name="dateEnteredUS"></param>
        /// <param name="firstName"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="multipleBirthStatus"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="useSnapshot"></param>
        private void AfterGetStudentsPartitionsDefaultImplementation(IGetStudentsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> studentUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> birthCountryDescriptor, Option<string> birthSexDescriptor, Option<string> birthStateAbbreviationDescriptor, Option<string> birthCity, Option<DateOnly> birthDate, Option<string> birthInternationalProvince, Option<DateOnly> dateEnteredUS, Option<string> firstName, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> maidenName, Option<string> middleName, Option<bool> multipleBirthStatus, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentsPartitions(ref suppressDefaultLog, apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, preferredFirstName, preferredLastSurname, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="birthCountryDescriptor"></param>
        /// <param name="birthSexDescriptor"></param>
        /// <param name="birthStateAbbreviationDescriptor"></param>
        /// <param name="birthCity"></param>
        /// <param name="birthDate"></param>
        /// <param name="birthInternationalProvince"></param>
        /// <param name="dateEnteredUS"></param>
        /// <param name="firstName"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="multipleBirthStatus"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterGetStudentsPartitions(ref bool suppressDefaultLog, IGetStudentsPartitionsApiResponse apiResponseLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> studentUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> birthCountryDescriptor, Option<string> birthSexDescriptor, Option<string> birthStateAbbreviationDescriptor, Option<string> birthCity, Option<DateOnly> birthDate, Option<string> birthInternationalProvince, Option<DateOnly> dateEnteredUS, Option<string> firstName, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> maidenName, Option<string> middleName, Option<bool> multipleBirthStatus, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="birthCountryDescriptor"></param>
        /// <param name="birthSexDescriptor"></param>
        /// <param name="birthStateAbbreviationDescriptor"></param>
        /// <param name="birthCity"></param>
        /// <param name="birthDate"></param>
        /// <param name="birthInternationalProvince"></param>
        /// <param name="dateEnteredUS"></param>
        /// <param name="firstName"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="multipleBirthStatus"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorGetStudentsPartitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> studentUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> birthCountryDescriptor, Option<string> birthSexDescriptor, Option<string> birthStateAbbreviationDescriptor, Option<string> birthCity, Option<DateOnly> birthDate, Option<string> birthInternationalProvince, Option<DateOnly> dateEnteredUS, Option<string> firstName, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> maidenName, Option<string> middleName, Option<bool> multipleBirthStatus, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentsPartitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, number, minChangeVersion, maxChangeVersion, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, preferredFirstName, preferredLastSurname, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="number"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="personId"></param>
        /// <param name="sourceSystemDescriptor"></param>
        /// <param name="citizenshipStatusDescriptor"></param>
        /// <param name="birthCountryDescriptor"></param>
        /// <param name="birthSexDescriptor"></param>
        /// <param name="birthStateAbbreviationDescriptor"></param>
        /// <param name="birthCity"></param>
        /// <param name="birthDate"></param>
        /// <param name="birthInternationalProvince"></param>
        /// <param name="dateEnteredUS"></param>
        /// <param name="firstName"></param>
        /// <param name="generationCodeSuffix"></param>
        /// <param name="id"></param>
        /// <param name="lastSurname"></param>
        /// <param name="maidenName"></param>
        /// <param name="middleName"></param>
        /// <param name="multipleBirthStatus"></param>
        /// <param name="personalTitlePrefix"></param>
        /// <param name="preferredFirstName"></param>
        /// <param name="preferredLastSurname"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorGetStudentsPartitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> number, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<string> studentUniqueId, Option<string> personId, Option<string> sourceSystemDescriptor, Option<string> citizenshipStatusDescriptor, Option<string> birthCountryDescriptor, Option<string> birthSexDescriptor, Option<string> birthStateAbbreviationDescriptor, Option<string> birthCity, Option<DateOnly> birthDate, Option<string> birthInternationalProvince, Option<DateOnly> dateEnteredUS, Option<string> firstName, Option<string> generationCodeSuffix, Option<string> id, Option<string> lastSurname, Option<string> maidenName, Option<string> middleName, Option<bool> multipleBirthStatus, Option<string> personalTitlePrefix, Option<string> preferredFirstName, Option<string> preferredLastSurname, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s sex at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentsPartitionsApiResponse?> GetStudentsPartitionsOrDefaultAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> studentUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> birthCountryDescriptor = default, Option<string> birthSexDescriptor = default, Option<string> birthStateAbbreviationDescriptor = default, Option<string> birthCity = default, Option<DateOnly> birthDate = default, Option<string> birthInternationalProvince = default, Option<DateOnly> dateEnteredUS = default, Option<string> firstName = default, Option<string> generationCodeSuffix = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> maidenName = default, Option<string> middleName = default, Option<bool> multipleBirthStatus = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentsPartitionsAsync(number, minChangeVersion, maxChangeVersion, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, preferredFirstName, preferredLastSurname, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a set of page tokens to be used for efficient client-side parallel processing. Computes an evenly distributed set of partitions over the accessible data and returns a set of page tokens, each representing the first page of one of the partitions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s sex at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="maidenName">The individual&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual. (optional)</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name (optional)</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name (optional)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentsPartitionsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentsPartitionsApiResponse> GetStudentsPartitionsAsync(Option<int> number = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<string> studentUniqueId = default, Option<string> personId = default, Option<string> sourceSystemDescriptor = default, Option<string> citizenshipStatusDescriptor = default, Option<string> birthCountryDescriptor = default, Option<string> birthSexDescriptor = default, Option<string> birthStateAbbreviationDescriptor = default, Option<string> birthCity = default, Option<DateOnly> birthDate = default, Option<string> birthInternationalProvince = default, Option<DateOnly> dateEnteredUS = default, Option<string> firstName = default, Option<string> generationCodeSuffix = default, Option<string> id = default, Option<string> lastSurname = default, Option<string> maidenName = default, Option<string> middleName = default, Option<bool> multipleBirthStatus = default, Option<string> personalTitlePrefix = default, Option<string> preferredFirstName = default, Option<string> preferredLastSurname = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentsPartitions(studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthInternationalProvince, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, personalTitlePrefix, preferredFirstName, preferredLastSurname);

                FormatGetStudentsPartitions(ref number, ref minChangeVersion, ref maxChangeVersion, ref studentUniqueId, ref personId, ref sourceSystemDescriptor, ref citizenshipStatusDescriptor, ref birthCountryDescriptor, ref birthSexDescriptor, ref birthStateAbbreviationDescriptor, ref birthCity, ref birthDate, ref birthInternationalProvince, ref dateEnteredUS, ref firstName, ref generationCodeSuffix, ref id, ref lastSurname, ref maidenName, ref middleName, ref multipleBirthStatus, ref personalTitlePrefix, ref preferredFirstName, ref preferredLastSurname, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/students/partitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/students/partitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (number.IsSet)
                        parseQueryStringLocalVar["number"] = ClientUtils.ParameterToString(number.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (personId.IsSet)
                        parseQueryStringLocalVar["personId"] = ClientUtils.ParameterToString(personId.Value);

                    if (sourceSystemDescriptor.IsSet)
                        parseQueryStringLocalVar["sourceSystemDescriptor"] = ClientUtils.ParameterToString(sourceSystemDescriptor.Value);

                    if (citizenshipStatusDescriptor.IsSet)
                        parseQueryStringLocalVar["citizenshipStatusDescriptor"] = ClientUtils.ParameterToString(citizenshipStatusDescriptor.Value);

                    if (birthCountryDescriptor.IsSet)
                        parseQueryStringLocalVar["birthCountryDescriptor"] = ClientUtils.ParameterToString(birthCountryDescriptor.Value);

                    if (birthSexDescriptor.IsSet)
                        parseQueryStringLocalVar["birthSexDescriptor"] = ClientUtils.ParameterToString(birthSexDescriptor.Value);

                    if (birthStateAbbreviationDescriptor.IsSet)
                        parseQueryStringLocalVar["birthStateAbbreviationDescriptor"] = ClientUtils.ParameterToString(birthStateAbbreviationDescriptor.Value);

                    if (birthCity.IsSet)
                        parseQueryStringLocalVar["birthCity"] = ClientUtils.ParameterToString(birthCity.Value);

                    if (birthDate.IsSet)
                        parseQueryStringLocalVar["birthDate"] = ClientUtils.ParameterToString(birthDate.Value);

                    if (birthInternationalProvince.IsSet)
                        parseQueryStringLocalVar["birthInternationalProvince"] = ClientUtils.ParameterToString(birthInternationalProvince.Value);

                    if (dateEnteredUS.IsSet)
                        parseQueryStringLocalVar["dateEnteredUS"] = ClientUtils.ParameterToString(dateEnteredUS.Value);

                    if (firstName.IsSet)
                        parseQueryStringLocalVar["firstName"] = ClientUtils.ParameterToString(firstName.Value);

                    if (generationCodeSuffix.IsSet)
                        parseQueryStringLocalVar["generationCodeSuffix"] = ClientUtils.ParameterToString(generationCodeSuffix.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (lastSurname.IsSet)
                        parseQueryStringLocalVar["lastSurname"] = ClientUtils.ParameterToString(lastSurname.Value);

                    if (maidenName.IsSet)
                        parseQueryStringLocalVar["maidenName"] = ClientUtils.ParameterToString(maidenName.Value);

                    if (middleName.IsSet)
                        parseQueryStringLocalVar["middleName"] = ClientUtils.ParameterToString(middleName.Value);

                    if (multipleBirthStatus.IsSet)
                        parseQueryStringLocalVar["multipleBirthStatus"] = ClientUtils.ParameterToString(multipleBirthStatus.Value);

                    if (personalTitlePrefix.IsSet)
                        parseQueryStringLocalVar["personalTitlePrefix"] = ClientUtils.ParameterToString(personalTitlePrefix.Value);

                    if (preferredFirstName.IsSet)
                        parseQueryStringLocalVar["preferredFirstName"] = ClientUtils.ParameterToString(preferredFirstName.Value);

                    if (preferredLastSurname.IsSet)
                        parseQueryStringLocalVar["preferredLastSurname"] = ClientUtils.ParameterToString(preferredLastSurname.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentsPartitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentsPartitionsApiResponse>();

                        GetStudentsPartitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/students/partitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentsPartitionsDefaultImplementation(apiResponseLocalVar, number, minChangeVersion, maxChangeVersion, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, preferredFirstName, preferredLastSurname, useSnapshot);

                        Events.ExecuteOnGetStudentsPartitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentsPartitionsDefaultImplementation(e, "/ed-fi/students/partitions", uriBuilderLocalVar.Path, number, minChangeVersion, maxChangeVersion, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, firstName, generationCodeSuffix, id, lastSurname, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, preferredFirstName, preferredLastSurname, useSnapshot);
                Events.ExecuteOnErrorGetStudentsPartitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentsPartitionsApiResponse"/>
        /// </summary>
        public partial class GetStudentsPartitionsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IGetStudentsPartitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentsPartitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentsPartitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentsPartitionsApiResponse(ILogger<GetStudentsPartitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v73.Models.All.GetAbsenceEventCategoryDescriptorsPartitions200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesStudents(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<bool> useSnapshot);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void AfterKeyChangesStudentsDefaultImplementation(IKeyChangesStudentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesStudents(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void AfterKeyChangesStudents(ref bool suppressDefaultLog, IKeyChangesStudentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        private void OnErrorKeyChangesStudentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesStudents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="useSnapshot"></param>
        partial void OnErrorKeyChangesStudents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<bool> useSnapshot);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentsApiResponse?> KeyChangesStudentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesStudentsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)</param>
        /// <param name="useSnapshot">Indicates if the configured Snapshot should be used. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentsApiResponse> KeyChangesStudentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<bool> useSnapshot = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatKeyChangesStudents(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref useSnapshot);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/students/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/students/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (useSnapshot.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Use-Snapshot", ClientUtils.ParameterToString(useSnapshot.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesStudentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesStudentsApiResponse>();

                        KeyChangesStudentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/students/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesStudentsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);

                        Events.ExecuteOnKeyChangesStudents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesStudentsDefaultImplementation(e, "/ed-fi/students/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, useSnapshot);
                Events.ExecuteOnErrorKeyChangesStudents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesStudentsApiResponse"/>
        /// </summary>
        public partial class KeyChangesStudentsApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IKeyChangesStudentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesStudentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesStudentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesStudentsApiResponse(ILogger<KeyChangesStudentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostStudent(EdFiStudent edFiStudent);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edFiStudent"></param>
        /// <returns></returns>
        private void ValidatePostStudent(EdFiStudent edFiStudent)
        {
            if (edFiStudent == null)
                throw new ArgumentNullException(nameof(edFiStudent));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudent"></param>
        private void AfterPostStudentDefaultImplementation(IPostStudentApiResponse apiResponseLocalVar, EdFiStudent edFiStudent)
        {
            bool suppressDefaultLog = false;
            AfterPostStudent(ref suppressDefaultLog, apiResponseLocalVar, edFiStudent);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edFiStudent"></param>
        partial void AfterPostStudent(ref bool suppressDefaultLog, IPostStudentApiResponse apiResponseLocalVar, EdFiStudent edFiStudent);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudent"></param>
        private void OnErrorPostStudentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudent edFiStudent)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostStudent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edFiStudent);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edFiStudent"></param>
        partial void OnErrorPostStudent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudent edFiStudent);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="edFiStudent">The JSON representation of the \&quot;student\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentApiResponse"/>&gt;</returns>
        public async Task<IPostStudentApiResponse?> PostStudentOrDefaultAsync(EdFiStudent edFiStudent, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostStudentAsync(edFiStudent, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiStudent">The JSON representation of the \&quot;student\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentApiResponse"/>&gt;</returns>
        public async Task<IPostStudentApiResponse> PostStudentAsync(EdFiStudent edFiStudent, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostStudent(edFiStudent);

                FormatPostStudent(edFiStudent);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/students"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/students");

                    httpRequestMessageLocalVar.Content = (edFiStudent as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudent, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostStudentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostStudentApiResponse>();

                        PostStudentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/students", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostStudentDefaultImplementation(apiResponseLocalVar, edFiStudent);

                        Events.ExecuteOnPostStudent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostStudentDefaultImplementation(e, "/ed-fi/students", uriBuilderLocalVar.Path, edFiStudent);
                Events.ExecuteOnErrorPostStudent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostStudentApiResponse"/>
        /// </summary>
        public partial class PostStudentApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPostStudentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostStudentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostStudentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostStudentApiResponse(ILogger<PostStudentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutStudent(ref string id, EdFiStudent edFiStudent, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="edFiStudent"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutStudent(string id, EdFiStudent edFiStudent, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (edFiStudent == null)
                throw new ArgumentNullException(nameof(edFiStudent));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudent"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutStudentDefaultImplementation(IPutStudentApiResponse apiResponseLocalVar, string id, EdFiStudent edFiStudent, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutStudent(ref suppressDefaultLog, apiResponseLocalVar, id, edFiStudent, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudent"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutStudent(ref bool suppressDefaultLog, IPutStudentApiResponse apiResponseLocalVar, string id, EdFiStudent edFiStudent, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudent"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutStudentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudent edFiStudent, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutStudent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, edFiStudent, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="edFiStudent"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutStudent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudent edFiStudent, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudent">The JSON representation of the \&quot;student\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentApiResponse"/>&gt;</returns>
        public async Task<IPutStudentApiResponse?> PutStudentOrDefaultAsync(string id, EdFiStudent edFiStudent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutStudentAsync(id, edFiStudent, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="edFiStudent">The JSON representation of the \&quot;student\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentApiResponse"/>&gt;</returns>
        public async Task<IPutStudentApiResponse> PutStudentAsync(string id, EdFiStudent edFiStudent, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutStudent(id, edFiStudent, ifMatch);

                FormatPutStudent(ref id, edFiStudent, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/students/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/students/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (edFiStudent as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(edFiStudent, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutStudentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutStudentApiResponse>();

                        PutStudentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/students/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutStudentDefaultImplementation(apiResponseLocalVar, id, edFiStudent, ifMatch);

                        Events.ExecuteOnPutStudent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutStudentDefaultImplementation(e, "/ed-fi/students/{id}", uriBuilderLocalVar.Path, id, edFiStudent, ifMatch);
                Events.ExecuteOnErrorPutStudent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutStudentApiResponse"/>
        /// </summary>
        public partial class PutStudentApiResponse : EdFi.OdsApi.Sdk.v73.Client.ApiResponse, IPutStudentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutStudentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutStudentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutStudentApiResponse(ILogger<PutStudentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
