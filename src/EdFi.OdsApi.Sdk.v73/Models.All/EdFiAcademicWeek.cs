// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiAcademicWeek
    /// </summary>
    public partial class EdFiAcademicWeek : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAcademicWeek" /> class.
        /// </summary>
        /// <param name="weekIdentifier">The school label for the week.</param>
        /// <param name="schoolReference">schoolReference</param>
        /// <param name="beginDate">The start date for the academic week.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="endDate">The end date for the academic week.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="totalInstructionalDays">The total instructional days during the academic week.</param>
        /// <param name="id">id</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the AcademicWeek entity.</param>
        [JsonConstructor]
        public EdFiAcademicWeek(string weekIdentifier, EdFiSchoolReference schoolReference, DateOnly beginDate, DateOnly endDate, int totalInstructionalDays, Option<string?> id = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            WeekIdentifier = weekIdentifier;
            SchoolReference = schoolReference;
            BeginDate = beginDate;
            EndDate = endDate;
            TotalInstructionalDays = totalInstructionalDays;
            IdOption = id;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The school label for the week.
        /// </summary>
        /// <value>The school label for the week.</value>
        [JsonPropertyName("weekIdentifier")]
        public string WeekIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [JsonPropertyName("schoolReference")]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// The start date for the academic week.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The start date for the academic week.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// The end date for the academic week.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The end date for the academic week.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly EndDate { get; set; }

        /// <summary>
        /// The total instructional days during the academic week.
        /// </summary>
        /// <value>The total instructional days during the academic week.</value>
        [JsonPropertyName("totalInstructionalDays")]
        public int TotalInstructionalDays { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the AcademicWeek entity.
        /// </summary>
        /// <value>Extensions to the AcademicWeek entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAcademicWeek {\n");
            sb.Append("  WeekIdentifier: ").Append(WeekIdentifier).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  TotalInstructionalDays: ").Append(TotalInstructionalDays).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // WeekIdentifier (string) maxLength
            if (this.WeekIdentifier != null && this.WeekIdentifier.Length > 80)
            {
                yield return new ValidationResult("Invalid value for WeekIdentifier, length must be less than 80.", new [] { "WeekIdentifier" });
            }

            // WeekIdentifier (string) minLength
            if (this.WeekIdentifier != null && this.WeekIdentifier.Length < 5)
            {
                yield return new ValidationResult("Invalid value for WeekIdentifier, length must be greater than 5.", new [] { "WeekIdentifier" });
            }

            // TotalInstructionalDays (int) minimum
            if (this.TotalInstructionalDays < (int)0)
            {
                yield return new ValidationResult("Invalid value for TotalInstructionalDays, must be a value greater than or equal to 0.", new [] { "TotalInstructionalDays" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAcademicWeek" />
    /// </summary>
    public class EdFiAcademicWeekJsonConverter : JsonConverter<EdFiAcademicWeek>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiAcademicWeek" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAcademicWeek Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> weekIdentifier = default;
            Option<EdFiSchoolReference?> schoolReference = default;
            Option<DateOnly?> beginDate = default;
            Option<DateOnly?> endDate = default;
            Option<int?> totalInstructionalDays = default;
            Option<string?> id = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "weekIdentifier":
                            weekIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schoolReference":
                            schoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "totalInstructionalDays":
                            totalInstructionalDays = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!weekIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiAcademicWeek.", nameof(weekIdentifier));

            if (!schoolReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiAcademicWeek.", nameof(schoolReference));

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiAcademicWeek.", nameof(beginDate));

            if (!endDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiAcademicWeek.", nameof(endDate));

            if (!totalInstructionalDays.IsSet)
                throw new ArgumentException("Property is required for class EdFiAcademicWeek.", nameof(totalInstructionalDays));

            if (weekIdentifier.IsSet && weekIdentifier.Value == null)
                throw new ArgumentNullException(nameof(weekIdentifier), "Property is not nullable for class EdFiAcademicWeek.");

            if (schoolReference.IsSet && schoolReference.Value == null)
                throw new ArgumentNullException(nameof(schoolReference), "Property is not nullable for class EdFiAcademicWeek.");

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiAcademicWeek.");

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate), "Property is not nullable for class EdFiAcademicWeek.");

            if (totalInstructionalDays.IsSet && totalInstructionalDays.Value == null)
                throw new ArgumentNullException(nameof(totalInstructionalDays), "Property is not nullable for class EdFiAcademicWeek.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiAcademicWeek.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiAcademicWeek.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiAcademicWeek.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAcademicWeek.");

            return new EdFiAcademicWeek(weekIdentifier.Value!, schoolReference.Value!, beginDate.Value!.Value!, endDate.Value!.Value!, totalInstructionalDays.Value!.Value!, id, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAcademicWeek" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAcademicWeek"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAcademicWeek edFiAcademicWeek, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAcademicWeek, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAcademicWeek" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAcademicWeek"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAcademicWeek edFiAcademicWeek, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAcademicWeek.WeekIdentifier == null)
                throw new ArgumentNullException(nameof(edFiAcademicWeek.WeekIdentifier), "Property is required for class EdFiAcademicWeek.");

            if (edFiAcademicWeek.SchoolReference == null)
                throw new ArgumentNullException(nameof(edFiAcademicWeek.SchoolReference), "Property is required for class EdFiAcademicWeek.");

            if (edFiAcademicWeek.IdOption.IsSet && edFiAcademicWeek.Id == null)
                throw new ArgumentNullException(nameof(edFiAcademicWeek.Id), "Property is required for class EdFiAcademicWeek.");

            if (edFiAcademicWeek.EtagOption.IsSet && edFiAcademicWeek.Etag == null)
                throw new ArgumentNullException(nameof(edFiAcademicWeek.Etag), "Property is required for class EdFiAcademicWeek.");

            if (edFiAcademicWeek.ExtOption.IsSet && edFiAcademicWeek.Ext == null)
                throw new ArgumentNullException(nameof(edFiAcademicWeek.Ext), "Property is required for class EdFiAcademicWeek.");

            writer.WriteString("weekIdentifier", edFiAcademicWeek.WeekIdentifier);

            writer.WritePropertyName("schoolReference");
            JsonSerializer.Serialize(writer, edFiAcademicWeek.SchoolReference, jsonSerializerOptions);
            writer.WriteString("beginDate", edFiAcademicWeek.BeginDate.ToString(BeginDateFormat));

            writer.WriteString("endDate", edFiAcademicWeek.EndDate.ToString(EndDateFormat));

            writer.WriteNumber("totalInstructionalDays", edFiAcademicWeek.TotalInstructionalDays);

            if (edFiAcademicWeek.IdOption.IsSet)
                writer.WriteString("id", edFiAcademicWeek.Id);

            if (edFiAcademicWeek.EtagOption.IsSet)
                writer.WriteString("_etag", edFiAcademicWeek.Etag);

            if (edFiAcademicWeek.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiAcademicWeek.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiAcademicWeek.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAcademicWeek.Ext, jsonSerializerOptions);
            }
        }
    }
}
