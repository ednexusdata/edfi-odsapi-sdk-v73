// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiAccountabilityRating
    /// </summary>
    public partial class EdFiAccountabilityRating : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAccountabilityRating" /> class.
        /// </summary>
        /// <param name="ratingTitle">The title of the rating.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference</param>
        /// <param name="rating">An accountability rating level, designation, or assessment.</param>
        /// <param name="id">id</param>
        /// <param name="ratingDate">The date the rating was awarded.</param>
        /// <param name="ratingOrganization">The organization that assessed the rating.</param>
        /// <param name="ratingProgram">The program associated with the accountability rating (e.g., NCLB, AEIS).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the AccountabilityRating entity.</param>
        [JsonConstructor]
        public EdFiAccountabilityRating(string ratingTitle, EdFiEducationOrganizationReference educationOrganizationReference, EdFiSchoolYearTypeReference schoolYearTypeReference, string rating, Option<string?> id = default, Option<DateOnly?> ratingDate = default, Option<string?> ratingOrganization = default, Option<string?> ratingProgram = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            RatingTitle = ratingTitle;
            EducationOrganizationReference = educationOrganizationReference;
            SchoolYearTypeReference = schoolYearTypeReference;
            Rating = rating;
            IdOption = id;
            RatingDateOption = ratingDate;
            RatingOrganizationOption = ratingOrganization;
            RatingProgramOption = ratingProgram;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The title of the rating.
        /// </summary>
        /// <value>The title of the rating.</value>
        [JsonPropertyName("ratingTitle")]
        public string RatingTitle { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [JsonPropertyName("schoolYearTypeReference")]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// An accountability rating level, designation, or assessment.
        /// </summary>
        /// <value>An accountability rating level, designation, or assessment.</value>
        [JsonPropertyName("rating")]
        public string Rating { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RatingDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> RatingDateOption { get; private set; }

        /// <summary>
        /// The date the rating was awarded.
        /// </summary>
        /// <value>The date the rating was awarded.</value>
        [JsonPropertyName("ratingDate")]
        public DateOnly? RatingDate { get { return this.RatingDateOption; } set { this.RatingDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of RatingOrganization
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RatingOrganizationOption { get; private set; }

        /// <summary>
        /// The organization that assessed the rating.
        /// </summary>
        /// <value>The organization that assessed the rating.</value>
        [JsonPropertyName("ratingOrganization")]
        public string? RatingOrganization { get { return this.RatingOrganizationOption; } set { this.RatingOrganizationOption = new(value); } }

        /// <summary>
        /// Used to track the state of RatingProgram
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RatingProgramOption { get; private set; }

        /// <summary>
        /// The program associated with the accountability rating (e.g., NCLB, AEIS).
        /// </summary>
        /// <value>The program associated with the accountability rating (e.g., NCLB, AEIS).</value>
        [JsonPropertyName("ratingProgram")]
        public string? RatingProgram { get { return this.RatingProgramOption; } set { this.RatingProgramOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the AccountabilityRating entity.
        /// </summary>
        /// <value>Extensions to the AccountabilityRating entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAccountabilityRating {\n");
            sb.Append("  RatingTitle: ").Append(RatingTitle).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RatingDate: ").Append(RatingDate).Append("\n");
            sb.Append("  RatingOrganization: ").Append(RatingOrganization).Append("\n");
            sb.Append("  RatingProgram: ").Append(RatingProgram).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RatingTitle (string) maxLength
            if (this.RatingTitle != null && this.RatingTitle.Length > 60)
            {
                yield return new ValidationResult("Invalid value for RatingTitle, length must be less than 60.", new [] { "RatingTitle" });
            }

            // Rating (string) maxLength
            if (this.Rating != null && this.Rating.Length > 35)
            {
                yield return new ValidationResult("Invalid value for Rating, length must be less than 35.", new [] { "Rating" });
            }

            // RatingOrganization (string) maxLength
            if (this.RatingOrganization != null && this.RatingOrganization.Length > 35)
            {
                yield return new ValidationResult("Invalid value for RatingOrganization, length must be less than 35.", new [] { "RatingOrganization" });
            }

            // RatingProgram (string) maxLength
            if (this.RatingProgram != null && this.RatingProgram.Length > 30)
            {
                yield return new ValidationResult("Invalid value for RatingProgram, length must be less than 30.", new [] { "RatingProgram" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAccountabilityRating" />
    /// </summary>
    public class EdFiAccountabilityRatingJsonConverter : JsonConverter<EdFiAccountabilityRating>
    {
        /// <summary>
        /// The format to use to serialize RatingDate
        /// </summary>
        public static string RatingDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiAccountabilityRating" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAccountabilityRating Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ratingTitle = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default;
            Option<string?> rating = default;
            Option<string?> id = default;
            Option<DateOnly?> ratingDate = default;
            Option<string?> ratingOrganization = default;
            Option<string?> ratingProgram = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ratingTitle":
                            ratingTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "schoolYearTypeReference":
                            schoolYearTypeReference = new Option<EdFiSchoolYearTypeReference?>(JsonSerializer.Deserialize<EdFiSchoolYearTypeReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "rating":
                            rating = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ratingDate":
                            ratingDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ratingOrganization":
                            ratingOrganization = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ratingProgram":
                            ratingProgram = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ratingTitle.IsSet)
                throw new ArgumentException("Property is required for class EdFiAccountabilityRating.", nameof(ratingTitle));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiAccountabilityRating.", nameof(educationOrganizationReference));

            if (!schoolYearTypeReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiAccountabilityRating.", nameof(schoolYearTypeReference));

            if (!rating.IsSet)
                throw new ArgumentException("Property is required for class EdFiAccountabilityRating.", nameof(rating));

            if (ratingTitle.IsSet && ratingTitle.Value == null)
                throw new ArgumentNullException(nameof(ratingTitle), "Property is not nullable for class EdFiAccountabilityRating.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiAccountabilityRating.");

            if (schoolYearTypeReference.IsSet && schoolYearTypeReference.Value == null)
                throw new ArgumentNullException(nameof(schoolYearTypeReference), "Property is not nullable for class EdFiAccountabilityRating.");

            if (rating.IsSet && rating.Value == null)
                throw new ArgumentNullException(nameof(rating), "Property is not nullable for class EdFiAccountabilityRating.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiAccountabilityRating.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiAccountabilityRating.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiAccountabilityRating.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAccountabilityRating.");

            return new EdFiAccountabilityRating(ratingTitle.Value!, educationOrganizationReference.Value!, schoolYearTypeReference.Value!, rating.Value!, id, ratingDate, ratingOrganization, ratingProgram, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAccountabilityRating" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAccountabilityRating"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAccountabilityRating edFiAccountabilityRating, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAccountabilityRating, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAccountabilityRating" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAccountabilityRating"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAccountabilityRating edFiAccountabilityRating, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAccountabilityRating.RatingTitle == null)
                throw new ArgumentNullException(nameof(edFiAccountabilityRating.RatingTitle), "Property is required for class EdFiAccountabilityRating.");

            if (edFiAccountabilityRating.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiAccountabilityRating.EducationOrganizationReference), "Property is required for class EdFiAccountabilityRating.");

            if (edFiAccountabilityRating.SchoolYearTypeReference == null)
                throw new ArgumentNullException(nameof(edFiAccountabilityRating.SchoolYearTypeReference), "Property is required for class EdFiAccountabilityRating.");

            if (edFiAccountabilityRating.Rating == null)
                throw new ArgumentNullException(nameof(edFiAccountabilityRating.Rating), "Property is required for class EdFiAccountabilityRating.");

            if (edFiAccountabilityRating.IdOption.IsSet && edFiAccountabilityRating.Id == null)
                throw new ArgumentNullException(nameof(edFiAccountabilityRating.Id), "Property is required for class EdFiAccountabilityRating.");

            if (edFiAccountabilityRating.EtagOption.IsSet && edFiAccountabilityRating.Etag == null)
                throw new ArgumentNullException(nameof(edFiAccountabilityRating.Etag), "Property is required for class EdFiAccountabilityRating.");

            if (edFiAccountabilityRating.ExtOption.IsSet && edFiAccountabilityRating.Ext == null)
                throw new ArgumentNullException(nameof(edFiAccountabilityRating.Ext), "Property is required for class EdFiAccountabilityRating.");

            writer.WriteString("ratingTitle", edFiAccountabilityRating.RatingTitle);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiAccountabilityRating.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("schoolYearTypeReference");
            JsonSerializer.Serialize(writer, edFiAccountabilityRating.SchoolYearTypeReference, jsonSerializerOptions);
            writer.WriteString("rating", edFiAccountabilityRating.Rating);

            if (edFiAccountabilityRating.IdOption.IsSet)
                writer.WriteString("id", edFiAccountabilityRating.Id);

            if (edFiAccountabilityRating.RatingDateOption.IsSet)
                if (edFiAccountabilityRating.RatingDateOption.Value != null)
                    writer.WriteString("ratingDate", edFiAccountabilityRating.RatingDateOption.Value!.Value.ToString(RatingDateFormat));
                else
                    writer.WriteNull("ratingDate");

            if (edFiAccountabilityRating.RatingOrganizationOption.IsSet)
                if (edFiAccountabilityRating.RatingOrganizationOption.Value != null)
                    writer.WriteString("ratingOrganization", edFiAccountabilityRating.RatingOrganization);
                else
                    writer.WriteNull("ratingOrganization");

            if (edFiAccountabilityRating.RatingProgramOption.IsSet)
                if (edFiAccountabilityRating.RatingProgramOption.Value != null)
                    writer.WriteString("ratingProgram", edFiAccountabilityRating.RatingProgram);
                else
                    writer.WriteNull("ratingProgram");

            if (edFiAccountabilityRating.EtagOption.IsSet)
                writer.WriteString("_etag", edFiAccountabilityRating.Etag);

            if (edFiAccountabilityRating.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiAccountabilityRating.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiAccountabilityRating.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAccountabilityRating.Ext, jsonSerializerOptions);
            }
        }
    }
}
