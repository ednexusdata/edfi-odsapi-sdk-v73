// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiAssessment
    /// </summary>
    public partial class EdFiAssessment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessment" /> class.
        /// </summary>
        /// <param name="academicSubjects">An unordered collection of assessmentAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment.</param>
        /// <param name="namespace">Namespace for the assessment.</param>
        /// <param name="assessmentTitle">The title or name of the assessment.</param>
        /// <param name="id">id</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="adaptiveAssessment">Indicates that the assessment is adaptive.</param>
        /// <param name="assessedGradeLevels">An unordered collection of assessmentAssessedGradeLevels. The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.</param>
        /// <param name="assessmentCategoryDescriptor">The category of an assessment based on format and content.</param>
        /// <param name="assessmentFamily">The assessment family this assessment is a member of.</param>
        /// <param name="assessmentForm">Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.</param>
        /// <param name="assessmentVersion">The version identifier for the assessment.</param>
        /// <param name="contentStandard">contentStandard</param>
        /// <param name="identificationCodes">An unordered collection of assessmentIdentificationCodes. A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.</param>
        /// <param name="languages">An unordered collection of assessmentLanguages. An indication of the languages in which the assessment is designed.</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum.</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for assessment.</param>
        /// <param name="performanceLevels">An unordered collection of assessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported: 1. Specification of performance level by minimum and maximum score, 2. Specification of performance level by cut score, using only minimum score, 3. Specification of performance level without any mapping to scores.</param>
        /// <param name="periods">An unordered collection of assessmentPeriods. The period or window in which an assessment is supposed to be administered.</param>
        /// <param name="platformTypes">An unordered collection of assessmentPlatformTypes. The platforms with which the assessment may be delivered.</param>
        /// <param name="programs">An unordered collection of assessmentPrograms. The programs associated with the assessment.</param>
        /// <param name="revisionDate">The month, day, and year that the conceptual design for the assessment was most recently revised substantially.</param>
        /// <param name="scores">An unordered collection of assessmentScores. Definition of the scores to be expected from this assessment.</param>
        /// <param name="sections">An unordered collection of assessmentSections. The Section(s) to which the assessment is associated.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Assessment entity.</param>
        [JsonConstructor]
        public EdFiAssessment(List<EdFiAssessmentAcademicSubject> academicSubjects, string assessmentIdentifier, string @namespace, string assessmentTitle, Option<string?> id = default, Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default, Option<bool?> adaptiveAssessment = default, Option<List<EdFiAssessmentAssessedGradeLevel>?> assessedGradeLevels = default, Option<string?> assessmentCategoryDescriptor = default, Option<string?> assessmentFamily = default, Option<string?> assessmentForm = default, Option<int?> assessmentVersion = default, Option<EdFiAssessmentContentStandard?> contentStandard = default, Option<List<EdFiAssessmentIdentificationCode>?> identificationCodes = default, Option<List<EdFiAssessmentLanguage>?> languages = default, Option<double?> maxRawScore = default, Option<string?> nomenclature = default, Option<List<EdFiAssessmentPerformanceLevel>?> performanceLevels = default, Option<List<EdFiAssessmentPeriod>?> periods = default, Option<List<EdFiAssessmentPlatformType>?> platformTypes = default, Option<List<EdFiAssessmentProgram>?> programs = default, Option<DateOnly?> revisionDate = default, Option<List<EdFiAssessmentScore>?> scores = default, Option<List<EdFiAssessmentSection>?> sections = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            AcademicSubjects = academicSubjects;
            AssessmentIdentifier = assessmentIdentifier;
            Namespace = @namespace;
            AssessmentTitle = assessmentTitle;
            IdOption = id;
            EducationOrganizationReferenceOption = educationOrganizationReference;
            AdaptiveAssessmentOption = adaptiveAssessment;
            AssessedGradeLevelsOption = assessedGradeLevels;
            AssessmentCategoryDescriptorOption = assessmentCategoryDescriptor;
            AssessmentFamilyOption = assessmentFamily;
            AssessmentFormOption = assessmentForm;
            AssessmentVersionOption = assessmentVersion;
            ContentStandardOption = contentStandard;
            IdentificationCodesOption = identificationCodes;
            LanguagesOption = languages;
            MaxRawScoreOption = maxRawScore;
            NomenclatureOption = nomenclature;
            PerformanceLevelsOption = performanceLevels;
            PeriodsOption = periods;
            PlatformTypesOption = platformTypes;
            ProgramsOption = programs;
            RevisionDateOption = revisionDate;
            ScoresOption = scores;
            SectionsOption = sections;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An unordered collection of assessmentAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
        /// </summary>
        /// <value>An unordered collection of assessmentAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.</value>
        [JsonPropertyName("academicSubjects")]
        public List<EdFiAssessmentAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an assessment.</value>
        [JsonPropertyName("assessmentIdentifier")]
        public string AssessmentIdentifier { get; set; }

        /// <summary>
        /// Namespace for the assessment.
        /// </summary>
        /// <value>Namespace for the assessment.</value>
        [JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// The title or name of the assessment.
        /// </summary>
        /// <value>The title or name of the assessment.</value>
        [JsonPropertyName("assessmentTitle")]
        public string AssessmentTitle { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationOrganizationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiEducationOrganizationReference?> EducationOrganizationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference? EducationOrganizationReference { get { return this.EducationOrganizationReferenceOption; } set { this.EducationOrganizationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AdaptiveAssessment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AdaptiveAssessmentOption { get; private set; }

        /// <summary>
        /// Indicates that the assessment is adaptive.
        /// </summary>
        /// <value>Indicates that the assessment is adaptive.</value>
        [JsonPropertyName("adaptiveAssessment")]
        public bool? AdaptiveAssessment { get { return this.AdaptiveAssessmentOption; } set { this.AdaptiveAssessmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessedGradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentAssessedGradeLevel>?> AssessedGradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentAssessedGradeLevels. The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.
        /// </summary>
        /// <value>An unordered collection of assessmentAssessedGradeLevels. The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.</value>
        [JsonPropertyName("assessedGradeLevels")]
        public List<EdFiAssessmentAssessedGradeLevel>? AssessedGradeLevels { get { return this.AssessedGradeLevelsOption; } set { this.AssessedGradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentCategoryDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssessmentCategoryDescriptorOption { get; private set; }

        /// <summary>
        /// The category of an assessment based on format and content.
        /// </summary>
        /// <value>The category of an assessment based on format and content.</value>
        [JsonPropertyName("assessmentCategoryDescriptor")]
        public string? AssessmentCategoryDescriptor { get { return this.AssessmentCategoryDescriptorOption; } set { this.AssessmentCategoryDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentFamily
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssessmentFamilyOption { get; private set; }

        /// <summary>
        /// The assessment family this assessment is a member of.
        /// </summary>
        /// <value>The assessment family this assessment is a member of.</value>
        [JsonPropertyName("assessmentFamily")]
        public string? AssessmentFamily { get { return this.AssessmentFamilyOption; } set { this.AssessmentFamilyOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentForm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssessmentFormOption { get; private set; }

        /// <summary>
        /// Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.
        /// </summary>
        /// <value>Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.</value>
        [JsonPropertyName("assessmentForm")]
        public string? AssessmentForm { get { return this.AssessmentFormOption; } set { this.AssessmentFormOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AssessmentVersionOption { get; private set; }

        /// <summary>
        /// The version identifier for the assessment.
        /// </summary>
        /// <value>The version identifier for the assessment.</value>
        [JsonPropertyName("assessmentVersion")]
        public int? AssessmentVersion { get { return this.AssessmentVersionOption; } set { this.AssessmentVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContentStandard
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiAssessmentContentStandard?> ContentStandardOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContentStandard
        /// </summary>
        [JsonPropertyName("contentStandard")]
        public EdFiAssessmentContentStandard? ContentStandard { get { return this.ContentStandardOption; } set { this.ContentStandardOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdentificationCodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentIdentificationCode>?> IdentificationCodesOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentIdentificationCodes. A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.
        /// </summary>
        /// <value>An unordered collection of assessmentIdentificationCodes. A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.</value>
        [JsonPropertyName("identificationCodes")]
        public List<EdFiAssessmentIdentificationCode>? IdentificationCodes { get { return this.IdentificationCodesOption; } set { this.IdentificationCodesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Languages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentLanguage>?> LanguagesOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentLanguages. An indication of the languages in which the assessment is designed.
        /// </summary>
        /// <value>An unordered collection of assessmentLanguages. An indication of the languages in which the assessment is designed.</value>
        [JsonPropertyName("languages")]
        public List<EdFiAssessmentLanguage>? Languages { get { return this.LanguagesOption; } set { this.LanguagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxRawScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MaxRawScoreOption { get; private set; }

        /// <summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        /// </summary>
        /// <value>The maximum raw score achievable across all assessment items that are correct and scored at the maximum.</value>
        [JsonPropertyName("maxRawScore")]
        public double? MaxRawScore { get { return this.MaxRawScoreOption; } set { this.MaxRawScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nomenclature
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NomenclatureOption { get; private set; }

        /// <summary>
        /// Reflects the specific nomenclature used for assessment.
        /// </summary>
        /// <value>Reflects the specific nomenclature used for assessment.</value>
        [JsonPropertyName("nomenclature")]
        public string? Nomenclature { get { return this.NomenclatureOption; } set { this.NomenclatureOption = new(value); } }

        /// <summary>
        /// Used to track the state of PerformanceLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentPerformanceLevel>?> PerformanceLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported: 1. Specification of performance level by minimum and maximum score, 2. Specification of performance level by cut score, using only minimum score, 3. Specification of performance level without any mapping to scores.
        /// </summary>
        /// <value>An unordered collection of assessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported: 1. Specification of performance level by minimum and maximum score, 2. Specification of performance level by cut score, using only minimum score, 3. Specification of performance level without any mapping to scores.</value>
        [JsonPropertyName("performanceLevels")]
        public List<EdFiAssessmentPerformanceLevel>? PerformanceLevels { get { return this.PerformanceLevelsOption; } set { this.PerformanceLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Periods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentPeriod>?> PeriodsOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentPeriods. The period or window in which an assessment is supposed to be administered.
        /// </summary>
        /// <value>An unordered collection of assessmentPeriods. The period or window in which an assessment is supposed to be administered.</value>
        [JsonPropertyName("periods")]
        public List<EdFiAssessmentPeriod>? Periods { get { return this.PeriodsOption; } set { this.PeriodsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PlatformTypes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentPlatformType>?> PlatformTypesOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentPlatformTypes. The platforms with which the assessment may be delivered.
        /// </summary>
        /// <value>An unordered collection of assessmentPlatformTypes. The platforms with which the assessment may be delivered.</value>
        [JsonPropertyName("platformTypes")]
        public List<EdFiAssessmentPlatformType>? PlatformTypes { get { return this.PlatformTypesOption; } set { this.PlatformTypesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Programs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentProgram>?> ProgramsOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentPrograms. The programs associated with the assessment.
        /// </summary>
        /// <value>An unordered collection of assessmentPrograms. The programs associated with the assessment.</value>
        [JsonPropertyName("programs")]
        public List<EdFiAssessmentProgram>? Programs { get { return this.ProgramsOption; } set { this.ProgramsOption = new(value); } }

        /// <summary>
        /// Used to track the state of RevisionDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> RevisionDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year that the conceptual design for the assessment was most recently revised substantially.
        /// </summary>
        /// <value>The month, day, and year that the conceptual design for the assessment was most recently revised substantially.</value>
        [JsonPropertyName("revisionDate")]
        public DateOnly? RevisionDate { get { return this.RevisionDateOption; } set { this.RevisionDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Scores
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentScore>?> ScoresOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentScores. Definition of the scores to be expected from this assessment.
        /// </summary>
        /// <value>An unordered collection of assessmentScores. Definition of the scores to be expected from this assessment.</value>
        [JsonPropertyName("scores")]
        public List<EdFiAssessmentScore>? Scores { get { return this.ScoresOption; } set { this.ScoresOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sections
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentSection>?> SectionsOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentSections. The Section(s) to which the assessment is associated.
        /// </summary>
        /// <value>An unordered collection of assessmentSections. The Section(s) to which the assessment is associated.</value>
        [JsonPropertyName("sections")]
        public List<EdFiAssessmentSection>? Sections { get { return this.SectionsOption; } set { this.SectionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Assessment entity.
        /// </summary>
        /// <value>Extensions to the Assessment entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAssessment {\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  AssessmentIdentifier: ").Append(AssessmentIdentifier).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  AssessmentTitle: ").Append(AssessmentTitle).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  AdaptiveAssessment: ").Append(AdaptiveAssessment).Append("\n");
            sb.Append("  AssessedGradeLevels: ").Append(AssessedGradeLevels).Append("\n");
            sb.Append("  AssessmentCategoryDescriptor: ").Append(AssessmentCategoryDescriptor).Append("\n");
            sb.Append("  AssessmentFamily: ").Append(AssessmentFamily).Append("\n");
            sb.Append("  AssessmentForm: ").Append(AssessmentForm).Append("\n");
            sb.Append("  AssessmentVersion: ").Append(AssessmentVersion).Append("\n");
            sb.Append("  ContentStandard: ").Append(ContentStandard).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  MaxRawScore: ").Append(MaxRawScore).Append("\n");
            sb.Append("  Nomenclature: ").Append(Nomenclature).Append("\n");
            sb.Append("  PerformanceLevels: ").Append(PerformanceLevels).Append("\n");
            sb.Append("  Periods: ").Append(Periods).Append("\n");
            sb.Append("  PlatformTypes: ").Append(PlatformTypes).Append("\n");
            sb.Append("  Programs: ").Append(Programs).Append("\n");
            sb.Append("  RevisionDate: ").Append(RevisionDate).Append("\n");
            sb.Append("  Scores: ").Append(Scores).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssessmentIdentifier (string) maxLength
            if (this.AssessmentIdentifier != null && this.AssessmentIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AssessmentIdentifier, length must be less than 60.", new [] { "AssessmentIdentifier" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // AssessmentTitle (string) maxLength
            if (this.AssessmentTitle != null && this.AssessmentTitle.Length > 255)
            {
                yield return new ValidationResult("Invalid value for AssessmentTitle, length must be less than 255.", new [] { "AssessmentTitle" });
            }

            // AssessmentCategoryDescriptor (string) maxLength
            if (this.AssessmentCategoryDescriptor != null && this.AssessmentCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssessmentCategoryDescriptor, length must be less than 306.", new [] { "AssessmentCategoryDescriptor" });
            }

            // AssessmentFamily (string) maxLength
            if (this.AssessmentFamily != null && this.AssessmentFamily.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AssessmentFamily, length must be less than 60.", new [] { "AssessmentFamily" });
            }

            // AssessmentForm (string) maxLength
            if (this.AssessmentForm != null && this.AssessmentForm.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AssessmentForm, length must be less than 60.", new [] { "AssessmentForm" });
            }

            // MaxRawScore (double) maximum
            if (this.MaxRawScoreOption.IsSet && this.MaxRawScoreOption.Value > (double)9999999999.99999)
            {
                yield return new ValidationResult("Invalid value for MaxRawScore, must be a value less than or equal to 9999999999.99999.", new [] { "MaxRawScore" });
            }

            // MaxRawScore (double) minimum
            if (this.MaxRawScoreOption.IsSet && this.MaxRawScoreOption.Value < (double)-9999999999.99999)
            {
                yield return new ValidationResult("Invalid value for MaxRawScore, must be a value greater than or equal to -9999999999.99999.", new [] { "MaxRawScore" });
            }

            // Nomenclature (string) maxLength
            if (this.Nomenclature != null && this.Nomenclature.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Nomenclature, length must be less than 100.", new [] { "Nomenclature" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAssessment" />
    /// </summary>
    public class EdFiAssessmentJsonConverter : JsonConverter<EdFiAssessment>
    {
        /// <summary>
        /// The format to use to serialize RevisionDate
        /// </summary>
        public static string RevisionDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiAssessment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAssessment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EdFiAssessmentAcademicSubject>?> academicSubjects = default;
            Option<string?> assessmentIdentifier = default;
            Option<string?> varNamespace = default;
            Option<string?> assessmentTitle = default;
            Option<string?> id = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<bool?> adaptiveAssessment = default;
            Option<List<EdFiAssessmentAssessedGradeLevel>?> assessedGradeLevels = default;
            Option<string?> assessmentCategoryDescriptor = default;
            Option<string?> assessmentFamily = default;
            Option<string?> assessmentForm = default;
            Option<int?> assessmentVersion = default;
            Option<EdFiAssessmentContentStandard?> contentStandard = default;
            Option<List<EdFiAssessmentIdentificationCode>?> identificationCodes = default;
            Option<List<EdFiAssessmentLanguage>?> languages = default;
            Option<double?> maxRawScore = default;
            Option<string?> nomenclature = default;
            Option<List<EdFiAssessmentPerformanceLevel>?> performanceLevels = default;
            Option<List<EdFiAssessmentPeriod>?> periods = default;
            Option<List<EdFiAssessmentPlatformType>?> platformTypes = default;
            Option<List<EdFiAssessmentProgram>?> programs = default;
            Option<DateOnly?> revisionDate = default;
            Option<List<EdFiAssessmentScore>?> scores = default;
            Option<List<EdFiAssessmentSection>?> sections = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "academicSubjects":
                            academicSubjects = new Option<List<EdFiAssessmentAcademicSubject>?>(JsonSerializer.Deserialize<List<EdFiAssessmentAcademicSubject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assessmentIdentifier":
                            assessmentIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assessmentTitle":
                            assessmentTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "adaptiveAssessment":
                            adaptiveAssessment = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "assessedGradeLevels":
                            assessedGradeLevels = new Option<List<EdFiAssessmentAssessedGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiAssessmentAssessedGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assessmentCategoryDescriptor":
                            assessmentCategoryDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "assessmentFamily":
                            assessmentFamily = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "assessmentForm":
                            assessmentForm = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "assessmentVersion":
                            assessmentVersion = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contentStandard":
                            contentStandard = new Option<EdFiAssessmentContentStandard?>(JsonSerializer.Deserialize<EdFiAssessmentContentStandard>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "identificationCodes":
                            identificationCodes = new Option<List<EdFiAssessmentIdentificationCode>?>(JsonSerializer.Deserialize<List<EdFiAssessmentIdentificationCode>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "languages":
                            languages = new Option<List<EdFiAssessmentLanguage>?>(JsonSerializer.Deserialize<List<EdFiAssessmentLanguage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "maxRawScore":
                            maxRawScore = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "nomenclature":
                            nomenclature = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "performanceLevels":
                            performanceLevels = new Option<List<EdFiAssessmentPerformanceLevel>?>(JsonSerializer.Deserialize<List<EdFiAssessmentPerformanceLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "periods":
                            periods = new Option<List<EdFiAssessmentPeriod>?>(JsonSerializer.Deserialize<List<EdFiAssessmentPeriod>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "platformTypes":
                            platformTypes = new Option<List<EdFiAssessmentPlatformType>?>(JsonSerializer.Deserialize<List<EdFiAssessmentPlatformType>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programs":
                            programs = new Option<List<EdFiAssessmentProgram>?>(JsonSerializer.Deserialize<List<EdFiAssessmentProgram>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "revisionDate":
                            revisionDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "scores":
                            scores = new Option<List<EdFiAssessmentScore>?>(JsonSerializer.Deserialize<List<EdFiAssessmentScore>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sections":
                            sections = new Option<List<EdFiAssessmentSection>?>(JsonSerializer.Deserialize<List<EdFiAssessmentSection>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!academicSubjects.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessment.", nameof(academicSubjects));

            if (!assessmentIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessment.", nameof(assessmentIdentifier));

            if (!varNamespace.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessment.", nameof(varNamespace));

            if (!assessmentTitle.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessment.", nameof(assessmentTitle));

            if (academicSubjects.IsSet && academicSubjects.Value == null)
                throw new ArgumentNullException(nameof(academicSubjects), "Property is not nullable for class EdFiAssessment.");

            if (assessmentIdentifier.IsSet && assessmentIdentifier.Value == null)
                throw new ArgumentNullException(nameof(assessmentIdentifier), "Property is not nullable for class EdFiAssessment.");

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class EdFiAssessment.");

            if (assessmentTitle.IsSet && assessmentTitle.Value == null)
                throw new ArgumentNullException(nameof(assessmentTitle), "Property is not nullable for class EdFiAssessment.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiAssessment.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiAssessment.");

            if (assessedGradeLevels.IsSet && assessedGradeLevels.Value == null)
                throw new ArgumentNullException(nameof(assessedGradeLevels), "Property is not nullable for class EdFiAssessment.");

            if (contentStandard.IsSet && contentStandard.Value == null)
                throw new ArgumentNullException(nameof(contentStandard), "Property is not nullable for class EdFiAssessment.");

            if (identificationCodes.IsSet && identificationCodes.Value == null)
                throw new ArgumentNullException(nameof(identificationCodes), "Property is not nullable for class EdFiAssessment.");

            if (languages.IsSet && languages.Value == null)
                throw new ArgumentNullException(nameof(languages), "Property is not nullable for class EdFiAssessment.");

            if (performanceLevels.IsSet && performanceLevels.Value == null)
                throw new ArgumentNullException(nameof(performanceLevels), "Property is not nullable for class EdFiAssessment.");

            if (periods.IsSet && periods.Value == null)
                throw new ArgumentNullException(nameof(periods), "Property is not nullable for class EdFiAssessment.");

            if (platformTypes.IsSet && platformTypes.Value == null)
                throw new ArgumentNullException(nameof(platformTypes), "Property is not nullable for class EdFiAssessment.");

            if (programs.IsSet && programs.Value == null)
                throw new ArgumentNullException(nameof(programs), "Property is not nullable for class EdFiAssessment.");

            if (scores.IsSet && scores.Value == null)
                throw new ArgumentNullException(nameof(scores), "Property is not nullable for class EdFiAssessment.");

            if (sections.IsSet && sections.Value == null)
                throw new ArgumentNullException(nameof(sections), "Property is not nullable for class EdFiAssessment.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiAssessment.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiAssessment.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAssessment.");

            return new EdFiAssessment(academicSubjects.Value!, assessmentIdentifier.Value!, varNamespace.Value!, assessmentTitle.Value!, id, educationOrganizationReference, adaptiveAssessment, assessedGradeLevels, assessmentCategoryDescriptor, assessmentFamily, assessmentForm, assessmentVersion, contentStandard, identificationCodes, languages, maxRawScore, nomenclature, performanceLevels, periods, platformTypes, programs, revisionDate, scores, sections, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAssessment edFiAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAssessment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAssessment edFiAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAssessment.AcademicSubjects == null)
                throw new ArgumentNullException(nameof(edFiAssessment.AcademicSubjects), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.AssessmentIdentifier == null)
                throw new ArgumentNullException(nameof(edFiAssessment.AssessmentIdentifier), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.Namespace == null)
                throw new ArgumentNullException(nameof(edFiAssessment.Namespace), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.AssessmentTitle == null)
                throw new ArgumentNullException(nameof(edFiAssessment.AssessmentTitle), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.IdOption.IsSet && edFiAssessment.Id == null)
                throw new ArgumentNullException(nameof(edFiAssessment.Id), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.EducationOrganizationReferenceOption.IsSet && edFiAssessment.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiAssessment.EducationOrganizationReference), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.AssessedGradeLevelsOption.IsSet && edFiAssessment.AssessedGradeLevels == null)
                throw new ArgumentNullException(nameof(edFiAssessment.AssessedGradeLevels), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.ContentStandardOption.IsSet && edFiAssessment.ContentStandard == null)
                throw new ArgumentNullException(nameof(edFiAssessment.ContentStandard), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.IdentificationCodesOption.IsSet && edFiAssessment.IdentificationCodes == null)
                throw new ArgumentNullException(nameof(edFiAssessment.IdentificationCodes), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.LanguagesOption.IsSet && edFiAssessment.Languages == null)
                throw new ArgumentNullException(nameof(edFiAssessment.Languages), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.PerformanceLevelsOption.IsSet && edFiAssessment.PerformanceLevels == null)
                throw new ArgumentNullException(nameof(edFiAssessment.PerformanceLevels), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.PeriodsOption.IsSet && edFiAssessment.Periods == null)
                throw new ArgumentNullException(nameof(edFiAssessment.Periods), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.PlatformTypesOption.IsSet && edFiAssessment.PlatformTypes == null)
                throw new ArgumentNullException(nameof(edFiAssessment.PlatformTypes), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.ProgramsOption.IsSet && edFiAssessment.Programs == null)
                throw new ArgumentNullException(nameof(edFiAssessment.Programs), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.ScoresOption.IsSet && edFiAssessment.Scores == null)
                throw new ArgumentNullException(nameof(edFiAssessment.Scores), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.SectionsOption.IsSet && edFiAssessment.Sections == null)
                throw new ArgumentNullException(nameof(edFiAssessment.Sections), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.EtagOption.IsSet && edFiAssessment.Etag == null)
                throw new ArgumentNullException(nameof(edFiAssessment.Etag), "Property is required for class EdFiAssessment.");

            if (edFiAssessment.ExtOption.IsSet && edFiAssessment.Ext == null)
                throw new ArgumentNullException(nameof(edFiAssessment.Ext), "Property is required for class EdFiAssessment.");

            writer.WritePropertyName("academicSubjects");
            JsonSerializer.Serialize(writer, edFiAssessment.AcademicSubjects, jsonSerializerOptions);
            writer.WriteString("assessmentIdentifier", edFiAssessment.AssessmentIdentifier);

            writer.WriteString("namespace", edFiAssessment.Namespace);

            writer.WriteString("assessmentTitle", edFiAssessment.AssessmentTitle);

            if (edFiAssessment.IdOption.IsSet)
                writer.WriteString("id", edFiAssessment.Id);

            if (edFiAssessment.EducationOrganizationReferenceOption.IsSet)
            {
                writer.WritePropertyName("educationOrganizationReference");
                JsonSerializer.Serialize(writer, edFiAssessment.EducationOrganizationReference, jsonSerializerOptions);
            }
            if (edFiAssessment.AdaptiveAssessmentOption.IsSet)
                if (edFiAssessment.AdaptiveAssessmentOption.Value != null)
                    writer.WriteBoolean("adaptiveAssessment", edFiAssessment.AdaptiveAssessmentOption.Value!.Value);
                else
                    writer.WriteNull("adaptiveAssessment");

            if (edFiAssessment.AssessedGradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("assessedGradeLevels");
                JsonSerializer.Serialize(writer, edFiAssessment.AssessedGradeLevels, jsonSerializerOptions);
            }
            if (edFiAssessment.AssessmentCategoryDescriptorOption.IsSet)
                if (edFiAssessment.AssessmentCategoryDescriptorOption.Value != null)
                    writer.WriteString("assessmentCategoryDescriptor", edFiAssessment.AssessmentCategoryDescriptor);
                else
                    writer.WriteNull("assessmentCategoryDescriptor");

            if (edFiAssessment.AssessmentFamilyOption.IsSet)
                if (edFiAssessment.AssessmentFamilyOption.Value != null)
                    writer.WriteString("assessmentFamily", edFiAssessment.AssessmentFamily);
                else
                    writer.WriteNull("assessmentFamily");

            if (edFiAssessment.AssessmentFormOption.IsSet)
                if (edFiAssessment.AssessmentFormOption.Value != null)
                    writer.WriteString("assessmentForm", edFiAssessment.AssessmentForm);
                else
                    writer.WriteNull("assessmentForm");

            if (edFiAssessment.AssessmentVersionOption.IsSet)
                if (edFiAssessment.AssessmentVersionOption.Value != null)
                    writer.WriteNumber("assessmentVersion", edFiAssessment.AssessmentVersionOption.Value!.Value);
                else
                    writer.WriteNull("assessmentVersion");

            if (edFiAssessment.ContentStandardOption.IsSet)
            {
                writer.WritePropertyName("contentStandard");
                JsonSerializer.Serialize(writer, edFiAssessment.ContentStandard, jsonSerializerOptions);
            }
            if (edFiAssessment.IdentificationCodesOption.IsSet)
            {
                writer.WritePropertyName("identificationCodes");
                JsonSerializer.Serialize(writer, edFiAssessment.IdentificationCodes, jsonSerializerOptions);
            }
            if (edFiAssessment.LanguagesOption.IsSet)
            {
                writer.WritePropertyName("languages");
                JsonSerializer.Serialize(writer, edFiAssessment.Languages, jsonSerializerOptions);
            }
            if (edFiAssessment.MaxRawScoreOption.IsSet)
                if (edFiAssessment.MaxRawScoreOption.Value != null)
                    writer.WriteNumber("maxRawScore", edFiAssessment.MaxRawScoreOption.Value!.Value);
                else
                    writer.WriteNull("maxRawScore");

            if (edFiAssessment.NomenclatureOption.IsSet)
                if (edFiAssessment.NomenclatureOption.Value != null)
                    writer.WriteString("nomenclature", edFiAssessment.Nomenclature);
                else
                    writer.WriteNull("nomenclature");

            if (edFiAssessment.PerformanceLevelsOption.IsSet)
            {
                writer.WritePropertyName("performanceLevels");
                JsonSerializer.Serialize(writer, edFiAssessment.PerformanceLevels, jsonSerializerOptions);
            }
            if (edFiAssessment.PeriodsOption.IsSet)
            {
                writer.WritePropertyName("periods");
                JsonSerializer.Serialize(writer, edFiAssessment.Periods, jsonSerializerOptions);
            }
            if (edFiAssessment.PlatformTypesOption.IsSet)
            {
                writer.WritePropertyName("platformTypes");
                JsonSerializer.Serialize(writer, edFiAssessment.PlatformTypes, jsonSerializerOptions);
            }
            if (edFiAssessment.ProgramsOption.IsSet)
            {
                writer.WritePropertyName("programs");
                JsonSerializer.Serialize(writer, edFiAssessment.Programs, jsonSerializerOptions);
            }
            if (edFiAssessment.RevisionDateOption.IsSet)
                if (edFiAssessment.RevisionDateOption.Value != null)
                    writer.WriteString("revisionDate", edFiAssessment.RevisionDateOption.Value!.Value.ToString(RevisionDateFormat));
                else
                    writer.WriteNull("revisionDate");

            if (edFiAssessment.ScoresOption.IsSet)
            {
                writer.WritePropertyName("scores");
                JsonSerializer.Serialize(writer, edFiAssessment.Scores, jsonSerializerOptions);
            }
            if (edFiAssessment.SectionsOption.IsSet)
            {
                writer.WritePropertyName("sections");
                JsonSerializer.Serialize(writer, edFiAssessment.Sections, jsonSerializerOptions);
            }
            if (edFiAssessment.EtagOption.IsSet)
                writer.WriteString("_etag", edFiAssessment.Etag);

            if (edFiAssessment.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiAssessment.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiAssessment.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAssessment.Ext, jsonSerializerOptions);
            }
        }
    }
}
