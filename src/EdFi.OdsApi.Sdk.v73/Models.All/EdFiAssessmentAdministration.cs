// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiAssessmentAdministration
    /// </summary>
    public partial class EdFiAssessmentAdministration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessmentAdministration" /> class.
        /// </summary>
        /// <param name="administrationIdentifier">The title or name of the assessment in the context of its administration.</param>
        /// <param name="assessmentReference">assessmentReference</param>
        /// <param name="assigningEducationOrganizationReference">assigningEducationOrganizationReference</param>
        /// <param name="id">id</param>
        /// <param name="assessmentBatteryParts">An unordered collection of assessmentAdministrationAssessmentBatteryParts. A reference to the parts of the assessment battery that are offered in this administration of the assessment.</param>
        /// <param name="periods">An unordered collection of assessmentAdministrationPeriods. The anticipated dates for the assessment or administration window.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the AssessmentAdministration entity.</param>
        [JsonConstructor]
        public EdFiAssessmentAdministration(string administrationIdentifier, EdFiAssessmentReference assessmentReference, EdFiEducationOrganizationReference assigningEducationOrganizationReference, Option<string?> id = default, Option<List<EdFiAssessmentAdministrationAssessmentBatteryPart>?> assessmentBatteryParts = default, Option<List<EdFiAssessmentAdministrationPeriod>?> periods = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            AdministrationIdentifier = administrationIdentifier;
            AssessmentReference = assessmentReference;
            AssigningEducationOrganizationReference = assigningEducationOrganizationReference;
            IdOption = id;
            AssessmentBatteryPartsOption = assessmentBatteryParts;
            PeriodsOption = periods;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The title or name of the assessment in the context of its administration.
        /// </summary>
        /// <value>The title or name of the assessment in the context of its administration.</value>
        [JsonPropertyName("administrationIdentifier")]
        public string AdministrationIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentReference
        /// </summary>
        [JsonPropertyName("assessmentReference")]
        public EdFiAssessmentReference AssessmentReference { get; set; }

        /// <summary>
        /// Gets or Sets AssigningEducationOrganizationReference
        /// </summary>
        [JsonPropertyName("assigningEducationOrganizationReference")]
        public EdFiEducationOrganizationReference AssigningEducationOrganizationReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentBatteryParts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentAdministrationAssessmentBatteryPart>?> AssessmentBatteryPartsOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentAdministrationAssessmentBatteryParts. A reference to the parts of the assessment battery that are offered in this administration of the assessment.
        /// </summary>
        /// <value>An unordered collection of assessmentAdministrationAssessmentBatteryParts. A reference to the parts of the assessment battery that are offered in this administration of the assessment.</value>
        [JsonPropertyName("assessmentBatteryParts")]
        public List<EdFiAssessmentAdministrationAssessmentBatteryPart>? AssessmentBatteryParts { get { return this.AssessmentBatteryPartsOption; } set { this.AssessmentBatteryPartsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Periods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentAdministrationPeriod>?> PeriodsOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentAdministrationPeriods. The anticipated dates for the assessment or administration window.
        /// </summary>
        /// <value>An unordered collection of assessmentAdministrationPeriods. The anticipated dates for the assessment or administration window.</value>
        [JsonPropertyName("periods")]
        public List<EdFiAssessmentAdministrationPeriod>? Periods { get { return this.PeriodsOption; } set { this.PeriodsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the AssessmentAdministration entity.
        /// </summary>
        /// <value>Extensions to the AssessmentAdministration entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAssessmentAdministration {\n");
            sb.Append("  AdministrationIdentifier: ").Append(AdministrationIdentifier).Append("\n");
            sb.Append("  AssessmentReference: ").Append(AssessmentReference).Append("\n");
            sb.Append("  AssigningEducationOrganizationReference: ").Append(AssigningEducationOrganizationReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssessmentBatteryParts: ").Append(AssessmentBatteryParts).Append("\n");
            sb.Append("  Periods: ").Append(Periods).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AdministrationIdentifier (string) maxLength
            if (this.AdministrationIdentifier != null && this.AdministrationIdentifier.Length > 255)
            {
                yield return new ValidationResult("Invalid value for AdministrationIdentifier, length must be less than 255.", new [] { "AdministrationIdentifier" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAssessmentAdministration" />
    /// </summary>
    public class EdFiAssessmentAdministrationJsonConverter : JsonConverter<EdFiAssessmentAdministration>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiAssessmentAdministration" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAssessmentAdministration Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> administrationIdentifier = default;
            Option<EdFiAssessmentReference?> assessmentReference = default;
            Option<EdFiEducationOrganizationReference?> assigningEducationOrganizationReference = default;
            Option<string?> id = default;
            Option<List<EdFiAssessmentAdministrationAssessmentBatteryPart>?> assessmentBatteryParts = default;
            Option<List<EdFiAssessmentAdministrationPeriod>?> periods = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "administrationIdentifier":
                            administrationIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assessmentReference":
                            assessmentReference = new Option<EdFiAssessmentReference?>(JsonSerializer.Deserialize<EdFiAssessmentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assigningEducationOrganizationReference":
                            assigningEducationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assessmentBatteryParts":
                            assessmentBatteryParts = new Option<List<EdFiAssessmentAdministrationAssessmentBatteryPart>?>(JsonSerializer.Deserialize<List<EdFiAssessmentAdministrationAssessmentBatteryPart>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "periods":
                            periods = new Option<List<EdFiAssessmentAdministrationPeriod>?>(JsonSerializer.Deserialize<List<EdFiAssessmentAdministrationPeriod>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!administrationIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentAdministration.", nameof(administrationIdentifier));

            if (!assessmentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentAdministration.", nameof(assessmentReference));

            if (!assigningEducationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentAdministration.", nameof(assigningEducationOrganizationReference));

            if (administrationIdentifier.IsSet && administrationIdentifier.Value == null)
                throw new ArgumentNullException(nameof(administrationIdentifier), "Property is not nullable for class EdFiAssessmentAdministration.");

            if (assessmentReference.IsSet && assessmentReference.Value == null)
                throw new ArgumentNullException(nameof(assessmentReference), "Property is not nullable for class EdFiAssessmentAdministration.");

            if (assigningEducationOrganizationReference.IsSet && assigningEducationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(assigningEducationOrganizationReference), "Property is not nullable for class EdFiAssessmentAdministration.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiAssessmentAdministration.");

            if (assessmentBatteryParts.IsSet && assessmentBatteryParts.Value == null)
                throw new ArgumentNullException(nameof(assessmentBatteryParts), "Property is not nullable for class EdFiAssessmentAdministration.");

            if (periods.IsSet && periods.Value == null)
                throw new ArgumentNullException(nameof(periods), "Property is not nullable for class EdFiAssessmentAdministration.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiAssessmentAdministration.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiAssessmentAdministration.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAssessmentAdministration.");

            return new EdFiAssessmentAdministration(administrationIdentifier.Value!, assessmentReference.Value!, assigningEducationOrganizationReference.Value!, id, assessmentBatteryParts, periods, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAssessmentAdministration" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentAdministration"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAssessmentAdministration edFiAssessmentAdministration, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAssessmentAdministration, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAssessmentAdministration" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentAdministration"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAssessmentAdministration edFiAssessmentAdministration, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAssessmentAdministration.AdministrationIdentifier == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministration.AdministrationIdentifier), "Property is required for class EdFiAssessmentAdministration.");

            if (edFiAssessmentAdministration.AssessmentReference == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministration.AssessmentReference), "Property is required for class EdFiAssessmentAdministration.");

            if (edFiAssessmentAdministration.AssigningEducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministration.AssigningEducationOrganizationReference), "Property is required for class EdFiAssessmentAdministration.");

            if (edFiAssessmentAdministration.IdOption.IsSet && edFiAssessmentAdministration.Id == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministration.Id), "Property is required for class EdFiAssessmentAdministration.");

            if (edFiAssessmentAdministration.AssessmentBatteryPartsOption.IsSet && edFiAssessmentAdministration.AssessmentBatteryParts == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministration.AssessmentBatteryParts), "Property is required for class EdFiAssessmentAdministration.");

            if (edFiAssessmentAdministration.PeriodsOption.IsSet && edFiAssessmentAdministration.Periods == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministration.Periods), "Property is required for class EdFiAssessmentAdministration.");

            if (edFiAssessmentAdministration.EtagOption.IsSet && edFiAssessmentAdministration.Etag == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministration.Etag), "Property is required for class EdFiAssessmentAdministration.");

            if (edFiAssessmentAdministration.ExtOption.IsSet && edFiAssessmentAdministration.Ext == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministration.Ext), "Property is required for class EdFiAssessmentAdministration.");

            writer.WriteString("administrationIdentifier", edFiAssessmentAdministration.AdministrationIdentifier);

            writer.WritePropertyName("assessmentReference");
            JsonSerializer.Serialize(writer, edFiAssessmentAdministration.AssessmentReference, jsonSerializerOptions);
            writer.WritePropertyName("assigningEducationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiAssessmentAdministration.AssigningEducationOrganizationReference, jsonSerializerOptions);
            if (edFiAssessmentAdministration.IdOption.IsSet)
                writer.WriteString("id", edFiAssessmentAdministration.Id);

            if (edFiAssessmentAdministration.AssessmentBatteryPartsOption.IsSet)
            {
                writer.WritePropertyName("assessmentBatteryParts");
                JsonSerializer.Serialize(writer, edFiAssessmentAdministration.AssessmentBatteryParts, jsonSerializerOptions);
            }
            if (edFiAssessmentAdministration.PeriodsOption.IsSet)
            {
                writer.WritePropertyName("periods");
                JsonSerializer.Serialize(writer, edFiAssessmentAdministration.Periods, jsonSerializerOptions);
            }
            if (edFiAssessmentAdministration.EtagOption.IsSet)
                writer.WriteString("_etag", edFiAssessmentAdministration.Etag);

            if (edFiAssessmentAdministration.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiAssessmentAdministration.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiAssessmentAdministration.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAssessmentAdministration.Ext, jsonSerializerOptions);
            }
        }
    }
}
