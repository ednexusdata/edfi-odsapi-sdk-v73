// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiAssessmentAdministrationParticipationAdministrationPointOfContact
    /// </summary>
    public partial class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessmentAdministrationParticipationAdministrationPointOfContact" /> class.
        /// </summary>
        /// <param name="electronicMailAddress">The email address for the contact.</param>
        /// <param name="firstName">The contact&#39;s first name.</param>
        /// <param name="lastSurname">The contact&#39;s last name.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface.</param>
        /// <param name="ext">Extensions to the AssessmentAdministrationParticipationAdministrationPointOfContact entity.</param>
        [JsonConstructor]
        public EdFiAssessmentAdministrationParticipationAdministrationPointOfContact(string electronicMailAddress, string firstName, string lastSurname, EdFiEducationOrganizationReference educationOrganizationReference, Option<string?> loginId = default, Option<Object?> ext = default)
        {
            ElectronicMailAddress = electronicMailAddress;
            FirstName = firstName;
            LastSurname = lastSurname;
            EducationOrganizationReference = educationOrganizationReference;
            LoginIdOption = loginId;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The email address for the contact.
        /// </summary>
        /// <value>The email address for the contact.</value>
        [JsonPropertyName("electronicMailAddress")]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// The contact&#39;s first name.
        /// </summary>
        /// <value>The contact&#39;s first name.</value>
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The contact&#39;s last name.
        /// </summary>
        /// <value>The contact&#39;s last name.</value>
        [JsonPropertyName("lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Used to track the state of LoginId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LoginIdOption { get; private set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        /// <value>The login ID for the user; used for security access control interface.</value>
        [JsonPropertyName("loginId")]
        public string? LoginId { get { return this.LoginIdOption; } set { this.LoginIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the AssessmentAdministrationParticipationAdministrationPointOfContact entity.
        /// </summary>
        /// <value>Extensions to the AssessmentAdministrationParticipationAdministrationPointOfContact entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact {\n");
            sb.Append("  ElectronicMailAddress: ").Append(ElectronicMailAddress).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ElectronicMailAddress (string) maxLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length > 128)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be less than 128.", new [] { "ElectronicMailAddress" });
            }

            // ElectronicMailAddress (string) minLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length < 7)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be greater than 7.", new [] { "ElectronicMailAddress" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // LastSurname (string) maxLength
            if (this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // LoginId (string) maxLength
            if (this.LoginId != null && this.LoginId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LoginId, length must be less than 60.", new [] { "LoginId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAssessmentAdministrationParticipationAdministrationPointOfContact" />
    /// </summary>
    public class EdFiAssessmentAdministrationParticipationAdministrationPointOfContactJsonConverter : JsonConverter<EdFiAssessmentAdministrationParticipationAdministrationPointOfContact>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiAssessmentAdministrationParticipationAdministrationPointOfContact" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAssessmentAdministrationParticipationAdministrationPointOfContact Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> electronicMailAddress = default;
            Option<string?> firstName = default;
            Option<string?> lastSurname = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<string?> loginId = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "electronicMailAddress":
                            electronicMailAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastSurname":
                            lastSurname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "loginId":
                            loginId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!electronicMailAddress.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.", nameof(electronicMailAddress));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.", nameof(firstName));

            if (!lastSurname.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.", nameof(lastSurname));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.", nameof(educationOrganizationReference));

            if (electronicMailAddress.IsSet && electronicMailAddress.Value == null)
                throw new ArgumentNullException(nameof(electronicMailAddress), "Property is not nullable for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.");

            if (lastSurname.IsSet && lastSurname.Value == null)
                throw new ArgumentNullException(nameof(lastSurname), "Property is not nullable for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.");

            return new EdFiAssessmentAdministrationParticipationAdministrationPointOfContact(electronicMailAddress.Value!, firstName.Value!, lastSurname.Value!, educationOrganizationReference.Value!, loginId, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAssessmentAdministrationParticipationAdministrationPointOfContact" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentAdministrationParticipationAdministrationPointOfContact"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAssessmentAdministrationParticipationAdministrationPointOfContact edFiAssessmentAdministrationParticipationAdministrationPointOfContact, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAssessmentAdministrationParticipationAdministrationPointOfContact, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAssessmentAdministrationParticipationAdministrationPointOfContact" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentAdministrationParticipationAdministrationPointOfContact"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAssessmentAdministrationParticipationAdministrationPointOfContact edFiAssessmentAdministrationParticipationAdministrationPointOfContact, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAssessmentAdministrationParticipationAdministrationPointOfContact.ElectronicMailAddress == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministrationParticipationAdministrationPointOfContact.ElectronicMailAddress), "Property is required for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.");

            if (edFiAssessmentAdministrationParticipationAdministrationPointOfContact.FirstName == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministrationParticipationAdministrationPointOfContact.FirstName), "Property is required for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.");

            if (edFiAssessmentAdministrationParticipationAdministrationPointOfContact.LastSurname == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministrationParticipationAdministrationPointOfContact.LastSurname), "Property is required for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.");

            if (edFiAssessmentAdministrationParticipationAdministrationPointOfContact.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministrationParticipationAdministrationPointOfContact.EducationOrganizationReference), "Property is required for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.");

            if (edFiAssessmentAdministrationParticipationAdministrationPointOfContact.ExtOption.IsSet && edFiAssessmentAdministrationParticipationAdministrationPointOfContact.Ext == null)
                throw new ArgumentNullException(nameof(edFiAssessmentAdministrationParticipationAdministrationPointOfContact.Ext), "Property is required for class EdFiAssessmentAdministrationParticipationAdministrationPointOfContact.");

            writer.WriteString("electronicMailAddress", edFiAssessmentAdministrationParticipationAdministrationPointOfContact.ElectronicMailAddress);

            writer.WriteString("firstName", edFiAssessmentAdministrationParticipationAdministrationPointOfContact.FirstName);

            writer.WriteString("lastSurname", edFiAssessmentAdministrationParticipationAdministrationPointOfContact.LastSurname);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiAssessmentAdministrationParticipationAdministrationPointOfContact.EducationOrganizationReference, jsonSerializerOptions);
            if (edFiAssessmentAdministrationParticipationAdministrationPointOfContact.LoginIdOption.IsSet)
                if (edFiAssessmentAdministrationParticipationAdministrationPointOfContact.LoginIdOption.Value != null)
                    writer.WriteString("loginId", edFiAssessmentAdministrationParticipationAdministrationPointOfContact.LoginId);
                else
                    writer.WriteNull("loginId");

            if (edFiAssessmentAdministrationParticipationAdministrationPointOfContact.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAssessmentAdministrationParticipationAdministrationPointOfContact.Ext, jsonSerializerOptions);
            }
        }
    }
}
