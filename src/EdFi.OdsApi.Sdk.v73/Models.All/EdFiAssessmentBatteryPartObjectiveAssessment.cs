// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiAssessmentBatteryPartObjectiveAssessment
    /// </summary>
    public partial class EdFiAssessmentBatteryPartObjectiveAssessment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessmentBatteryPartObjectiveAssessment" /> class.
        /// </summary>
        /// <param name="objectiveAssessmentReference">objectiveAssessmentReference</param>
        /// <param name="ext">Extensions to the AssessmentBatteryPartObjectiveAssessment entity.</param>
        [JsonConstructor]
        public EdFiAssessmentBatteryPartObjectiveAssessment(EdFiObjectiveAssessmentReference objectiveAssessmentReference, Option<Object?> ext = default)
        {
            ObjectiveAssessmentReference = objectiveAssessmentReference;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ObjectiveAssessmentReference
        /// </summary>
        [JsonPropertyName("objectiveAssessmentReference")]
        public EdFiObjectiveAssessmentReference ObjectiveAssessmentReference { get; set; }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the AssessmentBatteryPartObjectiveAssessment entity.
        /// </summary>
        /// <value>Extensions to the AssessmentBatteryPartObjectiveAssessment entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAssessmentBatteryPartObjectiveAssessment {\n");
            sb.Append("  ObjectiveAssessmentReference: ").Append(ObjectiveAssessmentReference).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAssessmentBatteryPartObjectiveAssessment" />
    /// </summary>
    public class EdFiAssessmentBatteryPartObjectiveAssessmentJsonConverter : JsonConverter<EdFiAssessmentBatteryPartObjectiveAssessment>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiAssessmentBatteryPartObjectiveAssessment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAssessmentBatteryPartObjectiveAssessment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiObjectiveAssessmentReference?> objectiveAssessmentReference = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "objectiveAssessmentReference":
                            objectiveAssessmentReference = new Option<EdFiObjectiveAssessmentReference?>(JsonSerializer.Deserialize<EdFiObjectiveAssessmentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!objectiveAssessmentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentBatteryPartObjectiveAssessment.", nameof(objectiveAssessmentReference));

            if (objectiveAssessmentReference.IsSet && objectiveAssessmentReference.Value == null)
                throw new ArgumentNullException(nameof(objectiveAssessmentReference), "Property is not nullable for class EdFiAssessmentBatteryPartObjectiveAssessment.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAssessmentBatteryPartObjectiveAssessment.");

            return new EdFiAssessmentBatteryPartObjectiveAssessment(objectiveAssessmentReference.Value!, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAssessmentBatteryPartObjectiveAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentBatteryPartObjectiveAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAssessmentBatteryPartObjectiveAssessment edFiAssessmentBatteryPartObjectiveAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAssessmentBatteryPartObjectiveAssessment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAssessmentBatteryPartObjectiveAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentBatteryPartObjectiveAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAssessmentBatteryPartObjectiveAssessment edFiAssessmentBatteryPartObjectiveAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAssessmentBatteryPartObjectiveAssessment.ObjectiveAssessmentReference == null)
                throw new ArgumentNullException(nameof(edFiAssessmentBatteryPartObjectiveAssessment.ObjectiveAssessmentReference), "Property is required for class EdFiAssessmentBatteryPartObjectiveAssessment.");

            if (edFiAssessmentBatteryPartObjectiveAssessment.ExtOption.IsSet && edFiAssessmentBatteryPartObjectiveAssessment.Ext == null)
                throw new ArgumentNullException(nameof(edFiAssessmentBatteryPartObjectiveAssessment.Ext), "Property is required for class EdFiAssessmentBatteryPartObjectiveAssessment.");

            writer.WritePropertyName("objectiveAssessmentReference");
            JsonSerializer.Serialize(writer, edFiAssessmentBatteryPartObjectiveAssessment.ObjectiveAssessmentReference, jsonSerializerOptions);
            if (edFiAssessmentBatteryPartObjectiveAssessment.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAssessmentBatteryPartObjectiveAssessment.Ext, jsonSerializerOptions);
            }
        }
    }
}
