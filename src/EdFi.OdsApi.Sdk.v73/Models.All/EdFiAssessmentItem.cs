// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiAssessmentItem
    /// </summary>
    public partial class EdFiAssessmentItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessmentItem" /> class.
        /// </summary>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.</param>
        /// <param name="assessmentReference">assessmentReference</param>
        /// <param name="id">id</param>
        /// <param name="assessmentItemCategoryDescriptor">Category or type of the assessment item.</param>
        /// <param name="assessmentItemURI">The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item.</param>
        /// <param name="expectedTimeAssessed">The duration allotted for the assessment item expressed in minutes.</param>
        /// <param name="itemText">The text of the item.</param>
        /// <param name="learningStandards">An unordered collection of assessmentItemLearningStandards. Learning standard tested by this item.</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum.</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for assessment item.</param>
        /// <param name="possibleResponses">An unordered collection of assessmentItemPossibleResponses. A possible response to an assessment item.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the AssessmentItem entity.</param>
        [JsonConstructor]
        public EdFiAssessmentItem(string identificationCode, EdFiAssessmentReference assessmentReference, Option<string?> id = default, Option<string?> assessmentItemCategoryDescriptor = default, Option<string?> assessmentItemURI = default, Option<string?> expectedTimeAssessed = default, Option<string?> itemText = default, Option<List<EdFiAssessmentItemLearningStandard>?> learningStandards = default, Option<double?> maxRawScore = default, Option<string?> nomenclature = default, Option<List<EdFiAssessmentItemPossibleResponse>?> possibleResponses = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            IdentificationCode = identificationCode;
            AssessmentReference = assessmentReference;
            IdOption = id;
            AssessmentItemCategoryDescriptorOption = assessmentItemCategoryDescriptor;
            AssessmentItemURIOption = assessmentItemURI;
            ExpectedTimeAssessedOption = expectedTimeAssessed;
            ItemTextOption = itemText;
            LearningStandardsOption = learningStandards;
            MaxRawScoreOption = maxRawScore;
            NomenclatureOption = nomenclature;
            PossibleResponsesOption = possibleResponses;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.</value>
        [JsonPropertyName("identificationCode")]
        public string IdentificationCode { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentReference
        /// </summary>
        [JsonPropertyName("assessmentReference")]
        public EdFiAssessmentReference AssessmentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentItemCategoryDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssessmentItemCategoryDescriptorOption { get; private set; }

        /// <summary>
        /// Category or type of the assessment item.
        /// </summary>
        /// <value>Category or type of the assessment item.</value>
        [JsonPropertyName("assessmentItemCategoryDescriptor")]
        public string? AssessmentItemCategoryDescriptor { get { return this.AssessmentItemCategoryDescriptorOption; } set { this.AssessmentItemCategoryDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentItemURI
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssessmentItemURIOption { get; private set; }

        /// <summary>
        /// The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item.
        /// </summary>
        /// <value>The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item.</value>
        [JsonPropertyName("assessmentItemURI")]
        public string? AssessmentItemURI { get { return this.AssessmentItemURIOption; } set { this.AssessmentItemURIOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpectedTimeAssessed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpectedTimeAssessedOption { get; private set; }

        /// <summary>
        /// The duration allotted for the assessment item expressed in minutes.
        /// </summary>
        /// <value>The duration allotted for the assessment item expressed in minutes.</value>
        [JsonPropertyName("expectedTimeAssessed")]
        public string? ExpectedTimeAssessed { get { return this.ExpectedTimeAssessedOption; } set { this.ExpectedTimeAssessedOption = new(value); } }

        /// <summary>
        /// Used to track the state of ItemText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ItemTextOption { get; private set; }

        /// <summary>
        /// The text of the item.
        /// </summary>
        /// <value>The text of the item.</value>
        [JsonPropertyName("itemText")]
        public string? ItemText { get { return this.ItemTextOption; } set { this.ItemTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandards
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentItemLearningStandard>?> LearningStandardsOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentItemLearningStandards. Learning standard tested by this item.
        /// </summary>
        /// <value>An unordered collection of assessmentItemLearningStandards. Learning standard tested by this item.</value>
        [JsonPropertyName("learningStandards")]
        public List<EdFiAssessmentItemLearningStandard>? LearningStandards { get { return this.LearningStandardsOption; } set { this.LearningStandardsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxRawScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MaxRawScoreOption { get; private set; }

        /// <summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        /// </summary>
        /// <value>The maximum raw score achievable across all assessment items that are correct and scored at the maximum.</value>
        [JsonPropertyName("maxRawScore")]
        public double? MaxRawScore { get { return this.MaxRawScoreOption; } set { this.MaxRawScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nomenclature
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NomenclatureOption { get; private set; }

        /// <summary>
        /// Reflects the specific nomenclature used for assessment item.
        /// </summary>
        /// <value>Reflects the specific nomenclature used for assessment item.</value>
        [JsonPropertyName("nomenclature")]
        public string? Nomenclature { get { return this.NomenclatureOption; } set { this.NomenclatureOption = new(value); } }

        /// <summary>
        /// Used to track the state of PossibleResponses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiAssessmentItemPossibleResponse>?> PossibleResponsesOption { get; private set; }

        /// <summary>
        /// An unordered collection of assessmentItemPossibleResponses. A possible response to an assessment item.
        /// </summary>
        /// <value>An unordered collection of assessmentItemPossibleResponses. A possible response to an assessment item.</value>
        [JsonPropertyName("possibleResponses")]
        public List<EdFiAssessmentItemPossibleResponse>? PossibleResponses { get { return this.PossibleResponsesOption; } set { this.PossibleResponsesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the AssessmentItem entity.
        /// </summary>
        /// <value>Extensions to the AssessmentItem entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAssessmentItem {\n");
            sb.Append("  IdentificationCode: ").Append(IdentificationCode).Append("\n");
            sb.Append("  AssessmentReference: ").Append(AssessmentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssessmentItemCategoryDescriptor: ").Append(AssessmentItemCategoryDescriptor).Append("\n");
            sb.Append("  AssessmentItemURI: ").Append(AssessmentItemURI).Append("\n");
            sb.Append("  ExpectedTimeAssessed: ").Append(ExpectedTimeAssessed).Append("\n");
            sb.Append("  ItemText: ").Append(ItemText).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  MaxRawScore: ").Append(MaxRawScore).Append("\n");
            sb.Append("  Nomenclature: ").Append(Nomenclature).Append("\n");
            sb.Append("  PossibleResponses: ").Append(PossibleResponses).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IdentificationCode (string) maxLength
            if (this.IdentificationCode != null && this.IdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for IdentificationCode, length must be less than 60.", new [] { "IdentificationCode" });
            }

            // AssessmentItemCategoryDescriptor (string) maxLength
            if (this.AssessmentItemCategoryDescriptor != null && this.AssessmentItemCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssessmentItemCategoryDescriptor, length must be less than 306.", new [] { "AssessmentItemCategoryDescriptor" });
            }

            // AssessmentItemURI (string) maxLength
            if (this.AssessmentItemURI != null && this.AssessmentItemURI.Length > 255)
            {
                yield return new ValidationResult("Invalid value for AssessmentItemURI, length must be less than 255.", new [] { "AssessmentItemURI" });
            }

            // AssessmentItemURI (string) minLength
            if (this.AssessmentItemURI != null && this.AssessmentItemURI.Length < 5)
            {
                yield return new ValidationResult("Invalid value for AssessmentItemURI, length must be greater than 5.", new [] { "AssessmentItemURI" });
            }

            // ExpectedTimeAssessed (string) maxLength
            if (this.ExpectedTimeAssessed != null && this.ExpectedTimeAssessed.Length > 30)
            {
                yield return new ValidationResult("Invalid value for ExpectedTimeAssessed, length must be less than 30.", new [] { "ExpectedTimeAssessed" });
            }

            // ItemText (string) maxLength
            if (this.ItemText != null && this.ItemText.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for ItemText, length must be less than 1024.", new [] { "ItemText" });
            }

            // MaxRawScore (double) maximum
            if (this.MaxRawScoreOption.IsSet && this.MaxRawScoreOption.Value > (double)9999999999.99999)
            {
                yield return new ValidationResult("Invalid value for MaxRawScore, must be a value less than or equal to 9999999999.99999.", new [] { "MaxRawScore" });
            }

            // MaxRawScore (double) minimum
            if (this.MaxRawScoreOption.IsSet && this.MaxRawScoreOption.Value < (double)-9999999999.99999)
            {
                yield return new ValidationResult("Invalid value for MaxRawScore, must be a value greater than or equal to -9999999999.99999.", new [] { "MaxRawScore" });
            }

            // Nomenclature (string) maxLength
            if (this.Nomenclature != null && this.Nomenclature.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Nomenclature, length must be less than 100.", new [] { "Nomenclature" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAssessmentItem" />
    /// </summary>
    public class EdFiAssessmentItemJsonConverter : JsonConverter<EdFiAssessmentItem>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiAssessmentItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAssessmentItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> identificationCode = default;
            Option<EdFiAssessmentReference?> assessmentReference = default;
            Option<string?> id = default;
            Option<string?> assessmentItemCategoryDescriptor = default;
            Option<string?> assessmentItemURI = default;
            Option<string?> expectedTimeAssessed = default;
            Option<string?> itemText = default;
            Option<List<EdFiAssessmentItemLearningStandard>?> learningStandards = default;
            Option<double?> maxRawScore = default;
            Option<string?> nomenclature = default;
            Option<List<EdFiAssessmentItemPossibleResponse>?> possibleResponses = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "identificationCode":
                            identificationCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assessmentReference":
                            assessmentReference = new Option<EdFiAssessmentReference?>(JsonSerializer.Deserialize<EdFiAssessmentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assessmentItemCategoryDescriptor":
                            assessmentItemCategoryDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "assessmentItemURI":
                            assessmentItemURI = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "expectedTimeAssessed":
                            expectedTimeAssessed = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "itemText":
                            itemText = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "learningStandards":
                            learningStandards = new Option<List<EdFiAssessmentItemLearningStandard>?>(JsonSerializer.Deserialize<List<EdFiAssessmentItemLearningStandard>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "maxRawScore":
                            maxRawScore = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "nomenclature":
                            nomenclature = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "possibleResponses":
                            possibleResponses = new Option<List<EdFiAssessmentItemPossibleResponse>?>(JsonSerializer.Deserialize<List<EdFiAssessmentItemPossibleResponse>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!identificationCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentItem.", nameof(identificationCode));

            if (!assessmentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentItem.", nameof(assessmentReference));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode), "Property is not nullable for class EdFiAssessmentItem.");

            if (assessmentReference.IsSet && assessmentReference.Value == null)
                throw new ArgumentNullException(nameof(assessmentReference), "Property is not nullable for class EdFiAssessmentItem.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiAssessmentItem.");

            if (learningStandards.IsSet && learningStandards.Value == null)
                throw new ArgumentNullException(nameof(learningStandards), "Property is not nullable for class EdFiAssessmentItem.");

            if (possibleResponses.IsSet && possibleResponses.Value == null)
                throw new ArgumentNullException(nameof(possibleResponses), "Property is not nullable for class EdFiAssessmentItem.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiAssessmentItem.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiAssessmentItem.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAssessmentItem.");

            return new EdFiAssessmentItem(identificationCode.Value!, assessmentReference.Value!, id, assessmentItemCategoryDescriptor, assessmentItemURI, expectedTimeAssessed, itemText, learningStandards, maxRawScore, nomenclature, possibleResponses, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAssessmentItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAssessmentItem edFiAssessmentItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAssessmentItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAssessmentItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAssessmentItem edFiAssessmentItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAssessmentItem.IdentificationCode == null)
                throw new ArgumentNullException(nameof(edFiAssessmentItem.IdentificationCode), "Property is required for class EdFiAssessmentItem.");

            if (edFiAssessmentItem.AssessmentReference == null)
                throw new ArgumentNullException(nameof(edFiAssessmentItem.AssessmentReference), "Property is required for class EdFiAssessmentItem.");

            if (edFiAssessmentItem.IdOption.IsSet && edFiAssessmentItem.Id == null)
                throw new ArgumentNullException(nameof(edFiAssessmentItem.Id), "Property is required for class EdFiAssessmentItem.");

            if (edFiAssessmentItem.LearningStandardsOption.IsSet && edFiAssessmentItem.LearningStandards == null)
                throw new ArgumentNullException(nameof(edFiAssessmentItem.LearningStandards), "Property is required for class EdFiAssessmentItem.");

            if (edFiAssessmentItem.PossibleResponsesOption.IsSet && edFiAssessmentItem.PossibleResponses == null)
                throw new ArgumentNullException(nameof(edFiAssessmentItem.PossibleResponses), "Property is required for class EdFiAssessmentItem.");

            if (edFiAssessmentItem.EtagOption.IsSet && edFiAssessmentItem.Etag == null)
                throw new ArgumentNullException(nameof(edFiAssessmentItem.Etag), "Property is required for class EdFiAssessmentItem.");

            if (edFiAssessmentItem.ExtOption.IsSet && edFiAssessmentItem.Ext == null)
                throw new ArgumentNullException(nameof(edFiAssessmentItem.Ext), "Property is required for class EdFiAssessmentItem.");

            writer.WriteString("identificationCode", edFiAssessmentItem.IdentificationCode);

            writer.WritePropertyName("assessmentReference");
            JsonSerializer.Serialize(writer, edFiAssessmentItem.AssessmentReference, jsonSerializerOptions);
            if (edFiAssessmentItem.IdOption.IsSet)
                writer.WriteString("id", edFiAssessmentItem.Id);

            if (edFiAssessmentItem.AssessmentItemCategoryDescriptorOption.IsSet)
                if (edFiAssessmentItem.AssessmentItemCategoryDescriptorOption.Value != null)
                    writer.WriteString("assessmentItemCategoryDescriptor", edFiAssessmentItem.AssessmentItemCategoryDescriptor);
                else
                    writer.WriteNull("assessmentItemCategoryDescriptor");

            if (edFiAssessmentItem.AssessmentItemURIOption.IsSet)
                if (edFiAssessmentItem.AssessmentItemURIOption.Value != null)
                    writer.WriteString("assessmentItemURI", edFiAssessmentItem.AssessmentItemURI);
                else
                    writer.WriteNull("assessmentItemURI");

            if (edFiAssessmentItem.ExpectedTimeAssessedOption.IsSet)
                if (edFiAssessmentItem.ExpectedTimeAssessedOption.Value != null)
                    writer.WriteString("expectedTimeAssessed", edFiAssessmentItem.ExpectedTimeAssessed);
                else
                    writer.WriteNull("expectedTimeAssessed");

            if (edFiAssessmentItem.ItemTextOption.IsSet)
                if (edFiAssessmentItem.ItemTextOption.Value != null)
                    writer.WriteString("itemText", edFiAssessmentItem.ItemText);
                else
                    writer.WriteNull("itemText");

            if (edFiAssessmentItem.LearningStandardsOption.IsSet)
            {
                writer.WritePropertyName("learningStandards");
                JsonSerializer.Serialize(writer, edFiAssessmentItem.LearningStandards, jsonSerializerOptions);
            }
            if (edFiAssessmentItem.MaxRawScoreOption.IsSet)
                if (edFiAssessmentItem.MaxRawScoreOption.Value != null)
                    writer.WriteNumber("maxRawScore", edFiAssessmentItem.MaxRawScoreOption.Value!.Value);
                else
                    writer.WriteNull("maxRawScore");

            if (edFiAssessmentItem.NomenclatureOption.IsSet)
                if (edFiAssessmentItem.NomenclatureOption.Value != null)
                    writer.WriteString("nomenclature", edFiAssessmentItem.Nomenclature);
                else
                    writer.WriteNull("nomenclature");

            if (edFiAssessmentItem.PossibleResponsesOption.IsSet)
            {
                writer.WritePropertyName("possibleResponses");
                JsonSerializer.Serialize(writer, edFiAssessmentItem.PossibleResponses, jsonSerializerOptions);
            }
            if (edFiAssessmentItem.EtagOption.IsSet)
                writer.WriteString("_etag", edFiAssessmentItem.Etag);

            if (edFiAssessmentItem.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiAssessmentItem.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiAssessmentItem.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAssessmentItem.Ext, jsonSerializerOptions);
            }
        }
    }
}
