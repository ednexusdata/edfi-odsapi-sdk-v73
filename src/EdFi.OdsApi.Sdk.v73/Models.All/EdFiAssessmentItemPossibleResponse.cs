// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiAssessmentItemPossibleResponse
    /// </summary>
    public partial class EdFiAssessmentItemPossibleResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessmentItemPossibleResponse" /> class.
        /// </summary>
        /// <param name="responseValue">The response value, often an option number or code value (e.g., 1, 2, A, B, true, false).</param>
        /// <param name="correctResponse">Indicates the response is correct.</param>
        /// <param name="responseDescription">Additional text provided to define the response value.</param>
        /// <param name="ext">Extensions to the AssessmentItemPossibleResponse entity.</param>
        [JsonConstructor]
        public EdFiAssessmentItemPossibleResponse(string responseValue, Option<bool?> correctResponse = default, Option<string?> responseDescription = default, Option<Object?> ext = default)
        {
            ResponseValue = responseValue;
            CorrectResponseOption = correctResponse;
            ResponseDescriptionOption = responseDescription;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The response value, often an option number or code value (e.g., 1, 2, A, B, true, false).
        /// </summary>
        /// <value>The response value, often an option number or code value (e.g., 1, 2, A, B, true, false).</value>
        [JsonPropertyName("responseValue")]
        public string ResponseValue { get; set; }

        /// <summary>
        /// Used to track the state of CorrectResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CorrectResponseOption { get; private set; }

        /// <summary>
        /// Indicates the response is correct.
        /// </summary>
        /// <value>Indicates the response is correct.</value>
        [JsonPropertyName("correctResponse")]
        public bool? CorrectResponse { get { return this.CorrectResponseOption; } set { this.CorrectResponseOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResponseDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResponseDescriptionOption { get; private set; }

        /// <summary>
        /// Additional text provided to define the response value.
        /// </summary>
        /// <value>Additional text provided to define the response value.</value>
        [JsonPropertyName("responseDescription")]
        public string? ResponseDescription { get { return this.ResponseDescriptionOption; } set { this.ResponseDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the AssessmentItemPossibleResponse entity.
        /// </summary>
        /// <value>Extensions to the AssessmentItemPossibleResponse entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAssessmentItemPossibleResponse {\n");
            sb.Append("  ResponseValue: ").Append(ResponseValue).Append("\n");
            sb.Append("  CorrectResponse: ").Append(CorrectResponse).Append("\n");
            sb.Append("  ResponseDescription: ").Append(ResponseDescription).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ResponseValue (string) maxLength
            if (this.ResponseValue != null && this.ResponseValue.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ResponseValue, length must be less than 60.", new [] { "ResponseValue" });
            }

            // ResponseDescription (string) maxLength
            if (this.ResponseDescription != null && this.ResponseDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for ResponseDescription, length must be less than 1024.", new [] { "ResponseDescription" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAssessmentItemPossibleResponse" />
    /// </summary>
    public class EdFiAssessmentItemPossibleResponseJsonConverter : JsonConverter<EdFiAssessmentItemPossibleResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiAssessmentItemPossibleResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAssessmentItemPossibleResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> responseValue = default;
            Option<bool?> correctResponse = default;
            Option<string?> responseDescription = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "responseValue":
                            responseValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "correctResponse":
                            correctResponse = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "responseDescription":
                            responseDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!responseValue.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentItemPossibleResponse.", nameof(responseValue));

            if (responseValue.IsSet && responseValue.Value == null)
                throw new ArgumentNullException(nameof(responseValue), "Property is not nullable for class EdFiAssessmentItemPossibleResponse.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAssessmentItemPossibleResponse.");

            return new EdFiAssessmentItemPossibleResponse(responseValue.Value!, correctResponse, responseDescription, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAssessmentItemPossibleResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentItemPossibleResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAssessmentItemPossibleResponse edFiAssessmentItemPossibleResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAssessmentItemPossibleResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAssessmentItemPossibleResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentItemPossibleResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAssessmentItemPossibleResponse edFiAssessmentItemPossibleResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAssessmentItemPossibleResponse.ResponseValue == null)
                throw new ArgumentNullException(nameof(edFiAssessmentItemPossibleResponse.ResponseValue), "Property is required for class EdFiAssessmentItemPossibleResponse.");

            if (edFiAssessmentItemPossibleResponse.ExtOption.IsSet && edFiAssessmentItemPossibleResponse.Ext == null)
                throw new ArgumentNullException(nameof(edFiAssessmentItemPossibleResponse.Ext), "Property is required for class EdFiAssessmentItemPossibleResponse.");

            writer.WriteString("responseValue", edFiAssessmentItemPossibleResponse.ResponseValue);

            if (edFiAssessmentItemPossibleResponse.CorrectResponseOption.IsSet)
                if (edFiAssessmentItemPossibleResponse.CorrectResponseOption.Value != null)
                    writer.WriteBoolean("correctResponse", edFiAssessmentItemPossibleResponse.CorrectResponseOption.Value!.Value);
                else
                    writer.WriteNull("correctResponse");

            if (edFiAssessmentItemPossibleResponse.ResponseDescriptionOption.IsSet)
                if (edFiAssessmentItemPossibleResponse.ResponseDescriptionOption.Value != null)
                    writer.WriteString("responseDescription", edFiAssessmentItemPossibleResponse.ResponseDescription);
                else
                    writer.WriteNull("responseDescription");

            if (edFiAssessmentItemPossibleResponse.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAssessmentItemPossibleResponse.Ext, jsonSerializerOptions);
            }
        }
    }
}
