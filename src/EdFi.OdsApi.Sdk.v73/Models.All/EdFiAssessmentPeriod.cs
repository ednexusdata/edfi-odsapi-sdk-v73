// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiAssessmentPeriod
    /// </summary>
    public partial class EdFiAssessmentPeriod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessmentPeriod" /> class.
        /// </summary>
        /// <param name="assessmentPeriodDescriptor">The period of time in which an assessment is supposed to be administered (e.g., Beginning of Year, Middle of Year, End of Year).</param>
        /// <param name="beginDate">The first date the assessment is to be administered.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="endDate">The last date the assessment is to be administered.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="ext">Extensions to the AssessmentPeriod entity.</param>
        [JsonConstructor]
        public EdFiAssessmentPeriod(string assessmentPeriodDescriptor, Option<DateOnly?> beginDate = default, Option<DateOnly?> endDate = default, Option<Object?> ext = default)
        {
            AssessmentPeriodDescriptor = assessmentPeriodDescriptor;
            BeginDateOption = beginDate;
            EndDateOption = endDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The period of time in which an assessment is supposed to be administered (e.g., Beginning of Year, Middle of Year, End of Year).
        /// </summary>
        /// <value>The period of time in which an assessment is supposed to be administered (e.g., Beginning of Year, Middle of Year, End of Year).</value>
        [JsonPropertyName("assessmentPeriodDescriptor")]
        public string AssessmentPeriodDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of BeginDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> BeginDateOption { get; private set; }

        /// <summary>
        /// The first date the assessment is to be administered.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The first date the assessment is to be administered.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly? BeginDate { get { return this.BeginDateOption; } set { this.BeginDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The last date the assessment is to be administered.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The last date the assessment is to be administered.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the AssessmentPeriod entity.
        /// </summary>
        /// <value>Extensions to the AssessmentPeriod entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAssessmentPeriod {\n");
            sb.Append("  AssessmentPeriodDescriptor: ").Append(AssessmentPeriodDescriptor).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssessmentPeriodDescriptor (string) maxLength
            if (this.AssessmentPeriodDescriptor != null && this.AssessmentPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssessmentPeriodDescriptor, length must be less than 306.", new [] { "AssessmentPeriodDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAssessmentPeriod" />
    /// </summary>
    public class EdFiAssessmentPeriodJsonConverter : JsonConverter<EdFiAssessmentPeriod>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EdFiAssessmentPeriod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAssessmentPeriod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> assessmentPeriodDescriptor = default;
            Option<DateOnly?> beginDate = default;
            Option<DateOnly?> endDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assessmentPeriodDescriptor":
                            assessmentPeriodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assessmentPeriodDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentPeriod.", nameof(assessmentPeriodDescriptor));

            if (assessmentPeriodDescriptor.IsSet && assessmentPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(assessmentPeriodDescriptor), "Property is not nullable for class EdFiAssessmentPeriod.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAssessmentPeriod.");

            return new EdFiAssessmentPeriod(assessmentPeriodDescriptor.Value!, beginDate, endDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAssessmentPeriod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentPeriod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAssessmentPeriod edFiAssessmentPeriod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAssessmentPeriod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAssessmentPeriod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentPeriod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAssessmentPeriod edFiAssessmentPeriod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAssessmentPeriod.AssessmentPeriodDescriptor == null)
                throw new ArgumentNullException(nameof(edFiAssessmentPeriod.AssessmentPeriodDescriptor), "Property is required for class EdFiAssessmentPeriod.");

            if (edFiAssessmentPeriod.ExtOption.IsSet && edFiAssessmentPeriod.Ext == null)
                throw new ArgumentNullException(nameof(edFiAssessmentPeriod.Ext), "Property is required for class EdFiAssessmentPeriod.");

            writer.WriteString("assessmentPeriodDescriptor", edFiAssessmentPeriod.AssessmentPeriodDescriptor);

            if (edFiAssessmentPeriod.BeginDateOption.IsSet)
                if (edFiAssessmentPeriod.BeginDateOption.Value != null)
                    writer.WriteString("beginDate", edFiAssessmentPeriod.BeginDateOption.Value!.Value.ToString(BeginDateFormat));
                else
                    writer.WriteNull("beginDate");

            if (edFiAssessmentPeriod.EndDateOption.IsSet)
                if (edFiAssessmentPeriod.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiAssessmentPeriod.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiAssessmentPeriod.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAssessmentPeriod.Ext, jsonSerializerOptions);
            }
        }
    }
}
