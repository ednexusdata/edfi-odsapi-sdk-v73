// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiAssessmentScore
    /// </summary>
    public partial class EdFiAssessmentScore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessmentScore" /> class.
        /// </summary>
        /// <param name="assessmentReportingMethodDescriptor">The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.</param>
        /// <param name="resultDatatypeTypeDescriptor">The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.</param>
        /// <param name="maximumScore">The maximum score possible on the assessment.</param>
        /// <param name="minimumScore">The minimum score possible on the assessment.</param>
        /// <param name="ext">Extensions to the AssessmentScore entity.</param>
        [JsonConstructor]
        public EdFiAssessmentScore(string assessmentReportingMethodDescriptor, Option<string?> resultDatatypeTypeDescriptor = default, Option<string?> maximumScore = default, Option<string?> minimumScore = default, Option<Object?> ext = default)
        {
            AssessmentReportingMethodDescriptor = assessmentReportingMethodDescriptor;
            ResultDatatypeTypeDescriptorOption = resultDatatypeTypeDescriptor;
            MaximumScoreOption = maximumScore;
            MinimumScoreOption = minimumScore;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        /// </summary>
        /// <value>The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.</value>
        [JsonPropertyName("assessmentReportingMethodDescriptor")]
        public string AssessmentReportingMethodDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of ResultDatatypeTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResultDatatypeTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        /// <value>The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.</value>
        [JsonPropertyName("resultDatatypeTypeDescriptor")]
        public string? ResultDatatypeTypeDescriptor { get { return this.ResultDatatypeTypeDescriptorOption; } set { this.ResultDatatypeTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaximumScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MaximumScoreOption { get; private set; }

        /// <summary>
        /// The maximum score possible on the assessment.
        /// </summary>
        /// <value>The maximum score possible on the assessment.</value>
        [JsonPropertyName("maximumScore")]
        public string? MaximumScore { get { return this.MaximumScoreOption; } set { this.MaximumScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinimumScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MinimumScoreOption { get; private set; }

        /// <summary>
        /// The minimum score possible on the assessment.
        /// </summary>
        /// <value>The minimum score possible on the assessment.</value>
        [JsonPropertyName("minimumScore")]
        public string? MinimumScore { get { return this.MinimumScoreOption; } set { this.MinimumScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the AssessmentScore entity.
        /// </summary>
        /// <value>Extensions to the AssessmentScore entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAssessmentScore {\n");
            sb.Append("  AssessmentReportingMethodDescriptor: ").Append(AssessmentReportingMethodDescriptor).Append("\n");
            sb.Append("  ResultDatatypeTypeDescriptor: ").Append(ResultDatatypeTypeDescriptor).Append("\n");
            sb.Append("  MaximumScore: ").Append(MaximumScore).Append("\n");
            sb.Append("  MinimumScore: ").Append(MinimumScore).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssessmentReportingMethodDescriptor (string) maxLength
            if (this.AssessmentReportingMethodDescriptor != null && this.AssessmentReportingMethodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssessmentReportingMethodDescriptor, length must be less than 306.", new [] { "AssessmentReportingMethodDescriptor" });
            }

            // ResultDatatypeTypeDescriptor (string) maxLength
            if (this.ResultDatatypeTypeDescriptor != null && this.ResultDatatypeTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ResultDatatypeTypeDescriptor, length must be less than 306.", new [] { "ResultDatatypeTypeDescriptor" });
            }

            // MaximumScore (string) maxLength
            if (this.MaximumScore != null && this.MaximumScore.Length > 35)
            {
                yield return new ValidationResult("Invalid value for MaximumScore, length must be less than 35.", new [] { "MaximumScore" });
            }

            // MinimumScore (string) maxLength
            if (this.MinimumScore != null && this.MinimumScore.Length > 35)
            {
                yield return new ValidationResult("Invalid value for MinimumScore, length must be less than 35.", new [] { "MinimumScore" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAssessmentScore" />
    /// </summary>
    public class EdFiAssessmentScoreJsonConverter : JsonConverter<EdFiAssessmentScore>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiAssessmentScore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAssessmentScore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> assessmentReportingMethodDescriptor = default;
            Option<string?> resultDatatypeTypeDescriptor = default;
            Option<string?> maximumScore = default;
            Option<string?> minimumScore = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assessmentReportingMethodDescriptor":
                            assessmentReportingMethodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "resultDatatypeTypeDescriptor":
                            resultDatatypeTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "maximumScore":
                            maximumScore = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "minimumScore":
                            minimumScore = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assessmentReportingMethodDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentScore.", nameof(assessmentReportingMethodDescriptor));

            if (assessmentReportingMethodDescriptor.IsSet && assessmentReportingMethodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(assessmentReportingMethodDescriptor), "Property is not nullable for class EdFiAssessmentScore.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAssessmentScore.");

            return new EdFiAssessmentScore(assessmentReportingMethodDescriptor.Value!, resultDatatypeTypeDescriptor, maximumScore, minimumScore, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAssessmentScore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentScore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAssessmentScore edFiAssessmentScore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAssessmentScore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAssessmentScore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentScore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAssessmentScore edFiAssessmentScore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAssessmentScore.AssessmentReportingMethodDescriptor == null)
                throw new ArgumentNullException(nameof(edFiAssessmentScore.AssessmentReportingMethodDescriptor), "Property is required for class EdFiAssessmentScore.");

            if (edFiAssessmentScore.ExtOption.IsSet && edFiAssessmentScore.Ext == null)
                throw new ArgumentNullException(nameof(edFiAssessmentScore.Ext), "Property is required for class EdFiAssessmentScore.");

            writer.WriteString("assessmentReportingMethodDescriptor", edFiAssessmentScore.AssessmentReportingMethodDescriptor);

            if (edFiAssessmentScore.ResultDatatypeTypeDescriptorOption.IsSet)
                if (edFiAssessmentScore.ResultDatatypeTypeDescriptorOption.Value != null)
                    writer.WriteString("resultDatatypeTypeDescriptor", edFiAssessmentScore.ResultDatatypeTypeDescriptor);
                else
                    writer.WriteNull("resultDatatypeTypeDescriptor");

            if (edFiAssessmentScore.MaximumScoreOption.IsSet)
                if (edFiAssessmentScore.MaximumScoreOption.Value != null)
                    writer.WriteString("maximumScore", edFiAssessmentScore.MaximumScore);
                else
                    writer.WriteNull("maximumScore");

            if (edFiAssessmentScore.MinimumScoreOption.IsSet)
                if (edFiAssessmentScore.MinimumScoreOption.Value != null)
                    writer.WriteString("minimumScore", edFiAssessmentScore.MinimumScore);
                else
                    writer.WriteNull("minimumScore");

            if (edFiAssessmentScore.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAssessmentScore.Ext, jsonSerializerOptions);
            }
        }
    }
}
