// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiAssessmentScoreRangeLearningStandard
    /// </summary>
    public partial class EdFiAssessmentScoreRangeLearningStandard : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiAssessmentScoreRangeLearningStandard" /> class.
        /// </summary>
        /// <param name="learningStandards">An unordered collection of assessmentScoreRangeLearningStandardLearningStandards. Learning standard associated with the score range.</param>
        /// <param name="scoreRangeId">A unique number or alphanumeric code assigned to the score range associated with one or more learning standards.</param>
        /// <param name="assessmentReference">assessmentReference</param>
        /// <param name="maximumScore">The maximum score in the score range.</param>
        /// <param name="minimumScore">The minimum score in the score range.</param>
        /// <param name="id">id</param>
        /// <param name="objectiveAssessmentReference">objectiveAssessmentReference</param>
        /// <param name="assessmentReportingMethodDescriptor">The assessment reporting method defined (e.g., scale score, RIT scale score) associated with the referenced learning standard(s).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the AssessmentScoreRangeLearningStandard entity.</param>
        [JsonConstructor]
        public EdFiAssessmentScoreRangeLearningStandard(List<EdFiAssessmentScoreRangeLearningStandardLearningStandard> learningStandards, string scoreRangeId, EdFiAssessmentReference assessmentReference, string maximumScore, string minimumScore, Option<string?> id = default, Option<EdFiObjectiveAssessmentReference?> objectiveAssessmentReference = default, Option<string?> assessmentReportingMethodDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            LearningStandards = learningStandards;
            ScoreRangeId = scoreRangeId;
            AssessmentReference = assessmentReference;
            MaximumScore = maximumScore;
            MinimumScore = minimumScore;
            IdOption = id;
            ObjectiveAssessmentReferenceOption = objectiveAssessmentReference;
            AssessmentReportingMethodDescriptorOption = assessmentReportingMethodDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An unordered collection of assessmentScoreRangeLearningStandardLearningStandards. Learning standard associated with the score range.
        /// </summary>
        /// <value>An unordered collection of assessmentScoreRangeLearningStandardLearningStandards. Learning standard associated with the score range.</value>
        [JsonPropertyName("learningStandards")]
        public List<EdFiAssessmentScoreRangeLearningStandardLearningStandard> LearningStandards { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to the score range associated with one or more learning standards.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to the score range associated with one or more learning standards.</value>
        [JsonPropertyName("scoreRangeId")]
        public string ScoreRangeId { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentReference
        /// </summary>
        [JsonPropertyName("assessmentReference")]
        public EdFiAssessmentReference AssessmentReference { get; set; }

        /// <summary>
        /// The maximum score in the score range.
        /// </summary>
        /// <value>The maximum score in the score range.</value>
        [JsonPropertyName("maximumScore")]
        public string MaximumScore { get; set; }

        /// <summary>
        /// The minimum score in the score range.
        /// </summary>
        /// <value>The minimum score in the score range.</value>
        [JsonPropertyName("minimumScore")]
        public string MinimumScore { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectiveAssessmentReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiObjectiveAssessmentReference?> ObjectiveAssessmentReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ObjectiveAssessmentReference
        /// </summary>
        [JsonPropertyName("objectiveAssessmentReference")]
        public EdFiObjectiveAssessmentReference? ObjectiveAssessmentReference { get { return this.ObjectiveAssessmentReferenceOption; } set { this.ObjectiveAssessmentReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentReportingMethodDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssessmentReportingMethodDescriptorOption { get; private set; }

        /// <summary>
        /// The assessment reporting method defined (e.g., scale score, RIT scale score) associated with the referenced learning standard(s).
        /// </summary>
        /// <value>The assessment reporting method defined (e.g., scale score, RIT scale score) associated with the referenced learning standard(s).</value>
        [JsonPropertyName("assessmentReportingMethodDescriptor")]
        public string? AssessmentReportingMethodDescriptor { get { return this.AssessmentReportingMethodDescriptorOption; } set { this.AssessmentReportingMethodDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the AssessmentScoreRangeLearningStandard entity.
        /// </summary>
        /// <value>Extensions to the AssessmentScoreRangeLearningStandard entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiAssessmentScoreRangeLearningStandard {\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  ScoreRangeId: ").Append(ScoreRangeId).Append("\n");
            sb.Append("  AssessmentReference: ").Append(AssessmentReference).Append("\n");
            sb.Append("  MaximumScore: ").Append(MaximumScore).Append("\n");
            sb.Append("  MinimumScore: ").Append(MinimumScore).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ObjectiveAssessmentReference: ").Append(ObjectiveAssessmentReference).Append("\n");
            sb.Append("  AssessmentReportingMethodDescriptor: ").Append(AssessmentReportingMethodDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ScoreRangeId (string) maxLength
            if (this.ScoreRangeId != null && this.ScoreRangeId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ScoreRangeId, length must be less than 60.", new [] { "ScoreRangeId" });
            }

            // MaximumScore (string) maxLength
            if (this.MaximumScore != null && this.MaximumScore.Length > 35)
            {
                yield return new ValidationResult("Invalid value for MaximumScore, length must be less than 35.", new [] { "MaximumScore" });
            }

            // MinimumScore (string) maxLength
            if (this.MinimumScore != null && this.MinimumScore.Length > 35)
            {
                yield return new ValidationResult("Invalid value for MinimumScore, length must be less than 35.", new [] { "MinimumScore" });
            }

            // AssessmentReportingMethodDescriptor (string) maxLength
            if (this.AssessmentReportingMethodDescriptor != null && this.AssessmentReportingMethodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssessmentReportingMethodDescriptor, length must be less than 306.", new [] { "AssessmentReportingMethodDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiAssessmentScoreRangeLearningStandard" />
    /// </summary>
    public class EdFiAssessmentScoreRangeLearningStandardJsonConverter : JsonConverter<EdFiAssessmentScoreRangeLearningStandard>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiAssessmentScoreRangeLearningStandard" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiAssessmentScoreRangeLearningStandard Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EdFiAssessmentScoreRangeLearningStandardLearningStandard>?> learningStandards = default;
            Option<string?> scoreRangeId = default;
            Option<EdFiAssessmentReference?> assessmentReference = default;
            Option<string?> maximumScore = default;
            Option<string?> minimumScore = default;
            Option<string?> id = default;
            Option<EdFiObjectiveAssessmentReference?> objectiveAssessmentReference = default;
            Option<string?> assessmentReportingMethodDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "learningStandards":
                            learningStandards = new Option<List<EdFiAssessmentScoreRangeLearningStandardLearningStandard>?>(JsonSerializer.Deserialize<List<EdFiAssessmentScoreRangeLearningStandardLearningStandard>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "scoreRangeId":
                            scoreRangeId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assessmentReference":
                            assessmentReference = new Option<EdFiAssessmentReference?>(JsonSerializer.Deserialize<EdFiAssessmentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "maximumScore":
                            maximumScore = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "minimumScore":
                            minimumScore = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "objectiveAssessmentReference":
                            objectiveAssessmentReference = new Option<EdFiObjectiveAssessmentReference?>(JsonSerializer.Deserialize<EdFiObjectiveAssessmentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assessmentReportingMethodDescriptor":
                            assessmentReportingMethodDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!learningStandards.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentScoreRangeLearningStandard.", nameof(learningStandards));

            if (!scoreRangeId.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentScoreRangeLearningStandard.", nameof(scoreRangeId));

            if (!assessmentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentScoreRangeLearningStandard.", nameof(assessmentReference));

            if (!maximumScore.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentScoreRangeLearningStandard.", nameof(maximumScore));

            if (!minimumScore.IsSet)
                throw new ArgumentException("Property is required for class EdFiAssessmentScoreRangeLearningStandard.", nameof(minimumScore));

            if (learningStandards.IsSet && learningStandards.Value == null)
                throw new ArgumentNullException(nameof(learningStandards), "Property is not nullable for class EdFiAssessmentScoreRangeLearningStandard.");

            if (scoreRangeId.IsSet && scoreRangeId.Value == null)
                throw new ArgumentNullException(nameof(scoreRangeId), "Property is not nullable for class EdFiAssessmentScoreRangeLearningStandard.");

            if (assessmentReference.IsSet && assessmentReference.Value == null)
                throw new ArgumentNullException(nameof(assessmentReference), "Property is not nullable for class EdFiAssessmentScoreRangeLearningStandard.");

            if (maximumScore.IsSet && maximumScore.Value == null)
                throw new ArgumentNullException(nameof(maximumScore), "Property is not nullable for class EdFiAssessmentScoreRangeLearningStandard.");

            if (minimumScore.IsSet && minimumScore.Value == null)
                throw new ArgumentNullException(nameof(minimumScore), "Property is not nullable for class EdFiAssessmentScoreRangeLearningStandard.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiAssessmentScoreRangeLearningStandard.");

            if (objectiveAssessmentReference.IsSet && objectiveAssessmentReference.Value == null)
                throw new ArgumentNullException(nameof(objectiveAssessmentReference), "Property is not nullable for class EdFiAssessmentScoreRangeLearningStandard.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiAssessmentScoreRangeLearningStandard.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiAssessmentScoreRangeLearningStandard.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiAssessmentScoreRangeLearningStandard.");

            return new EdFiAssessmentScoreRangeLearningStandard(learningStandards.Value!, scoreRangeId.Value!, assessmentReference.Value!, maximumScore.Value!, minimumScore.Value!, id, objectiveAssessmentReference, assessmentReportingMethodDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiAssessmentScoreRangeLearningStandard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentScoreRangeLearningStandard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiAssessmentScoreRangeLearningStandard edFiAssessmentScoreRangeLearningStandard, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiAssessmentScoreRangeLearningStandard, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiAssessmentScoreRangeLearningStandard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiAssessmentScoreRangeLearningStandard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiAssessmentScoreRangeLearningStandard edFiAssessmentScoreRangeLearningStandard, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiAssessmentScoreRangeLearningStandard.LearningStandards == null)
                throw new ArgumentNullException(nameof(edFiAssessmentScoreRangeLearningStandard.LearningStandards), "Property is required for class EdFiAssessmentScoreRangeLearningStandard.");

            if (edFiAssessmentScoreRangeLearningStandard.ScoreRangeId == null)
                throw new ArgumentNullException(nameof(edFiAssessmentScoreRangeLearningStandard.ScoreRangeId), "Property is required for class EdFiAssessmentScoreRangeLearningStandard.");

            if (edFiAssessmentScoreRangeLearningStandard.AssessmentReference == null)
                throw new ArgumentNullException(nameof(edFiAssessmentScoreRangeLearningStandard.AssessmentReference), "Property is required for class EdFiAssessmentScoreRangeLearningStandard.");

            if (edFiAssessmentScoreRangeLearningStandard.MaximumScore == null)
                throw new ArgumentNullException(nameof(edFiAssessmentScoreRangeLearningStandard.MaximumScore), "Property is required for class EdFiAssessmentScoreRangeLearningStandard.");

            if (edFiAssessmentScoreRangeLearningStandard.MinimumScore == null)
                throw new ArgumentNullException(nameof(edFiAssessmentScoreRangeLearningStandard.MinimumScore), "Property is required for class EdFiAssessmentScoreRangeLearningStandard.");

            if (edFiAssessmentScoreRangeLearningStandard.IdOption.IsSet && edFiAssessmentScoreRangeLearningStandard.Id == null)
                throw new ArgumentNullException(nameof(edFiAssessmentScoreRangeLearningStandard.Id), "Property is required for class EdFiAssessmentScoreRangeLearningStandard.");

            if (edFiAssessmentScoreRangeLearningStandard.ObjectiveAssessmentReferenceOption.IsSet && edFiAssessmentScoreRangeLearningStandard.ObjectiveAssessmentReference == null)
                throw new ArgumentNullException(nameof(edFiAssessmentScoreRangeLearningStandard.ObjectiveAssessmentReference), "Property is required for class EdFiAssessmentScoreRangeLearningStandard.");

            if (edFiAssessmentScoreRangeLearningStandard.EtagOption.IsSet && edFiAssessmentScoreRangeLearningStandard.Etag == null)
                throw new ArgumentNullException(nameof(edFiAssessmentScoreRangeLearningStandard.Etag), "Property is required for class EdFiAssessmentScoreRangeLearningStandard.");

            if (edFiAssessmentScoreRangeLearningStandard.ExtOption.IsSet && edFiAssessmentScoreRangeLearningStandard.Ext == null)
                throw new ArgumentNullException(nameof(edFiAssessmentScoreRangeLearningStandard.Ext), "Property is required for class EdFiAssessmentScoreRangeLearningStandard.");

            writer.WritePropertyName("learningStandards");
            JsonSerializer.Serialize(writer, edFiAssessmentScoreRangeLearningStandard.LearningStandards, jsonSerializerOptions);
            writer.WriteString("scoreRangeId", edFiAssessmentScoreRangeLearningStandard.ScoreRangeId);

            writer.WritePropertyName("assessmentReference");
            JsonSerializer.Serialize(writer, edFiAssessmentScoreRangeLearningStandard.AssessmentReference, jsonSerializerOptions);
            writer.WriteString("maximumScore", edFiAssessmentScoreRangeLearningStandard.MaximumScore);

            writer.WriteString("minimumScore", edFiAssessmentScoreRangeLearningStandard.MinimumScore);

            if (edFiAssessmentScoreRangeLearningStandard.IdOption.IsSet)
                writer.WriteString("id", edFiAssessmentScoreRangeLearningStandard.Id);

            if (edFiAssessmentScoreRangeLearningStandard.ObjectiveAssessmentReferenceOption.IsSet)
            {
                writer.WritePropertyName("objectiveAssessmentReference");
                JsonSerializer.Serialize(writer, edFiAssessmentScoreRangeLearningStandard.ObjectiveAssessmentReference, jsonSerializerOptions);
            }
            if (edFiAssessmentScoreRangeLearningStandard.AssessmentReportingMethodDescriptorOption.IsSet)
                if (edFiAssessmentScoreRangeLearningStandard.AssessmentReportingMethodDescriptorOption.Value != null)
                    writer.WriteString("assessmentReportingMethodDescriptor", edFiAssessmentScoreRangeLearningStandard.AssessmentReportingMethodDescriptor);
                else
                    writer.WriteNull("assessmentReportingMethodDescriptor");

            if (edFiAssessmentScoreRangeLearningStandard.EtagOption.IsSet)
                writer.WriteString("_etag", edFiAssessmentScoreRangeLearningStandard.Etag);

            if (edFiAssessmentScoreRangeLearningStandard.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiAssessmentScoreRangeLearningStandard.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiAssessmentScoreRangeLearningStandard.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiAssessmentScoreRangeLearningStandard.Ext, jsonSerializerOptions);
            }
        }
    }
}
