// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiCalendar
    /// </summary>
    public partial class EdFiCalendar : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCalendar" /> class.
        /// </summary>
        /// <param name="calendarCode">The identifier for the calendar.</param>
        /// <param name="schoolReference">schoolReference</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference</param>
        /// <param name="calendarTypeDescriptor">Indicates the type of calendar.</param>
        /// <param name="id">id</param>
        /// <param name="gradeLevels">An unordered collection of calendarGradeLevels. Indicates the grade level associated with the calendar.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Calendar entity.</param>
        [JsonConstructor]
        public EdFiCalendar(string calendarCode, EdFiSchoolReference schoolReference, EdFiSchoolYearTypeReference schoolYearTypeReference, string calendarTypeDescriptor, Option<string?> id = default, Option<List<EdFiCalendarGradeLevel>?> gradeLevels = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            CalendarCode = calendarCode;
            SchoolReference = schoolReference;
            SchoolYearTypeReference = schoolYearTypeReference;
            CalendarTypeDescriptor = calendarTypeDescriptor;
            IdOption = id;
            GradeLevelsOption = gradeLevels;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The identifier for the calendar.
        /// </summary>
        /// <value>The identifier for the calendar.</value>
        [JsonPropertyName("calendarCode")]
        public string CalendarCode { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [JsonPropertyName("schoolReference")]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [JsonPropertyName("schoolYearTypeReference")]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Indicates the type of calendar.
        /// </summary>
        /// <value>Indicates the type of calendar.</value>
        [JsonPropertyName("calendarTypeDescriptor")]
        public string CalendarTypeDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCalendarGradeLevel>?> GradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of calendarGradeLevels. Indicates the grade level associated with the calendar.
        /// </summary>
        /// <value>An unordered collection of calendarGradeLevels. Indicates the grade level associated with the calendar.</value>
        [JsonPropertyName("gradeLevels")]
        public List<EdFiCalendarGradeLevel>? GradeLevels { get { return this.GradeLevelsOption; } set { this.GradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Calendar entity.
        /// </summary>
        /// <value>Extensions to the Calendar entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCalendar {\n");
            sb.Append("  CalendarCode: ").Append(CalendarCode).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  CalendarTypeDescriptor: ").Append(CalendarTypeDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CalendarCode (string) maxLength
            if (this.CalendarCode != null && this.CalendarCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CalendarCode, length must be less than 60.", new [] { "CalendarCode" });
            }

            // CalendarTypeDescriptor (string) maxLength
            if (this.CalendarTypeDescriptor != null && this.CalendarTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CalendarTypeDescriptor, length must be less than 306.", new [] { "CalendarTypeDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiCalendar" />
    /// </summary>
    public class EdFiCalendarJsonConverter : JsonConverter<EdFiCalendar>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiCalendar" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiCalendar Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> calendarCode = default;
            Option<EdFiSchoolReference?> schoolReference = default;
            Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default;
            Option<string?> calendarTypeDescriptor = default;
            Option<string?> id = default;
            Option<List<EdFiCalendarGradeLevel>?> gradeLevels = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "calendarCode":
                            calendarCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schoolReference":
                            schoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "schoolYearTypeReference":
                            schoolYearTypeReference = new Option<EdFiSchoolYearTypeReference?>(JsonSerializer.Deserialize<EdFiSchoolYearTypeReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "calendarTypeDescriptor":
                            calendarTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradeLevels":
                            gradeLevels = new Option<List<EdFiCalendarGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiCalendarGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!calendarCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiCalendar.", nameof(calendarCode));

            if (!schoolReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiCalendar.", nameof(schoolReference));

            if (!schoolYearTypeReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiCalendar.", nameof(schoolYearTypeReference));

            if (!calendarTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiCalendar.", nameof(calendarTypeDescriptor));

            if (calendarCode.IsSet && calendarCode.Value == null)
                throw new ArgumentNullException(nameof(calendarCode), "Property is not nullable for class EdFiCalendar.");

            if (schoolReference.IsSet && schoolReference.Value == null)
                throw new ArgumentNullException(nameof(schoolReference), "Property is not nullable for class EdFiCalendar.");

            if (schoolYearTypeReference.IsSet && schoolYearTypeReference.Value == null)
                throw new ArgumentNullException(nameof(schoolYearTypeReference), "Property is not nullable for class EdFiCalendar.");

            if (calendarTypeDescriptor.IsSet && calendarTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(calendarTypeDescriptor), "Property is not nullable for class EdFiCalendar.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiCalendar.");

            if (gradeLevels.IsSet && gradeLevels.Value == null)
                throw new ArgumentNullException(nameof(gradeLevels), "Property is not nullable for class EdFiCalendar.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiCalendar.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiCalendar.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiCalendar.");

            return new EdFiCalendar(calendarCode.Value!, schoolReference.Value!, schoolYearTypeReference.Value!, calendarTypeDescriptor.Value!, id, gradeLevels, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiCalendar" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCalendar"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiCalendar edFiCalendar, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiCalendar, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiCalendar" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCalendar"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiCalendar edFiCalendar, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiCalendar.CalendarCode == null)
                throw new ArgumentNullException(nameof(edFiCalendar.CalendarCode), "Property is required for class EdFiCalendar.");

            if (edFiCalendar.SchoolReference == null)
                throw new ArgumentNullException(nameof(edFiCalendar.SchoolReference), "Property is required for class EdFiCalendar.");

            if (edFiCalendar.SchoolYearTypeReference == null)
                throw new ArgumentNullException(nameof(edFiCalendar.SchoolYearTypeReference), "Property is required for class EdFiCalendar.");

            if (edFiCalendar.CalendarTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiCalendar.CalendarTypeDescriptor), "Property is required for class EdFiCalendar.");

            if (edFiCalendar.IdOption.IsSet && edFiCalendar.Id == null)
                throw new ArgumentNullException(nameof(edFiCalendar.Id), "Property is required for class EdFiCalendar.");

            if (edFiCalendar.GradeLevelsOption.IsSet && edFiCalendar.GradeLevels == null)
                throw new ArgumentNullException(nameof(edFiCalendar.GradeLevels), "Property is required for class EdFiCalendar.");

            if (edFiCalendar.EtagOption.IsSet && edFiCalendar.Etag == null)
                throw new ArgumentNullException(nameof(edFiCalendar.Etag), "Property is required for class EdFiCalendar.");

            if (edFiCalendar.ExtOption.IsSet && edFiCalendar.Ext == null)
                throw new ArgumentNullException(nameof(edFiCalendar.Ext), "Property is required for class EdFiCalendar.");

            writer.WriteString("calendarCode", edFiCalendar.CalendarCode);

            writer.WritePropertyName("schoolReference");
            JsonSerializer.Serialize(writer, edFiCalendar.SchoolReference, jsonSerializerOptions);
            writer.WritePropertyName("schoolYearTypeReference");
            JsonSerializer.Serialize(writer, edFiCalendar.SchoolYearTypeReference, jsonSerializerOptions);
            writer.WriteString("calendarTypeDescriptor", edFiCalendar.CalendarTypeDescriptor);

            if (edFiCalendar.IdOption.IsSet)
                writer.WriteString("id", edFiCalendar.Id);

            if (edFiCalendar.GradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("gradeLevels");
                JsonSerializer.Serialize(writer, edFiCalendar.GradeLevels, jsonSerializerOptions);
            }
            if (edFiCalendar.EtagOption.IsSet)
                writer.WriteString("_etag", edFiCalendar.Etag);

            if (edFiCalendar.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiCalendar.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiCalendar.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiCalendar.Ext, jsonSerializerOptions);
            }
        }
    }
}
