// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiChartOfAccount
    /// </summary>
    public partial class EdFiChartOfAccount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiChartOfAccount" /> class.
        /// </summary>
        /// <param name="accountIdentifier">SEA populated code value for the valid combination of account dimensions under which financials are reported.</param>
        /// <param name="fiscalYear">The fiscal year for the account</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="accountTypeDescriptor">The type of account used in accounting such as revenue, expenditure, or balance sheet.</param>
        /// <param name="id">id</param>
        /// <param name="balanceSheetDimensionReference">balanceSheetDimensionReference</param>
        /// <param name="functionDimensionReference">functionDimensionReference</param>
        /// <param name="fundDimensionReference">fundDimensionReference</param>
        /// <param name="objectDimensionReference">objectDimensionReference</param>
        /// <param name="operationalUnitDimensionReference">operationalUnitDimensionReference</param>
        /// <param name="programDimensionReference">programDimensionReference</param>
        /// <param name="projectDimensionReference">projectDimensionReference</param>
        /// <param name="sourceDimensionReference">sourceDimensionReference</param>
        /// <param name="accountName">A descriptive name for the account.</param>
        /// <param name="reportingTags">An unordered collection of chartOfAccountReportingTags. Optional tag for accountability reporting.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the ChartOfAccount entity.</param>
        [JsonConstructor]
        public EdFiChartOfAccount(string accountIdentifier, int fiscalYear, EdFiEducationOrganizationReference educationOrganizationReference, string accountTypeDescriptor, Option<string?> id = default, Option<EdFiBalanceSheetDimensionReference?> balanceSheetDimensionReference = default, Option<EdFiFunctionDimensionReference?> functionDimensionReference = default, Option<EdFiFundDimensionReference?> fundDimensionReference = default, Option<EdFiObjectDimensionReference?> objectDimensionReference = default, Option<EdFiOperationalUnitDimensionReference?> operationalUnitDimensionReference = default, Option<EdFiProgramDimensionReference?> programDimensionReference = default, Option<EdFiProjectDimensionReference?> projectDimensionReference = default, Option<EdFiSourceDimensionReference?> sourceDimensionReference = default, Option<string?> accountName = default, Option<List<EdFiChartOfAccountReportingTag>?> reportingTags = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            AccountIdentifier = accountIdentifier;
            FiscalYear = fiscalYear;
            EducationOrganizationReference = educationOrganizationReference;
            AccountTypeDescriptor = accountTypeDescriptor;
            IdOption = id;
            BalanceSheetDimensionReferenceOption = balanceSheetDimensionReference;
            FunctionDimensionReferenceOption = functionDimensionReference;
            FundDimensionReferenceOption = fundDimensionReference;
            ObjectDimensionReferenceOption = objectDimensionReference;
            OperationalUnitDimensionReferenceOption = operationalUnitDimensionReference;
            ProgramDimensionReferenceOption = programDimensionReference;
            ProjectDimensionReferenceOption = projectDimensionReference;
            SourceDimensionReferenceOption = sourceDimensionReference;
            AccountNameOption = accountName;
            ReportingTagsOption = reportingTags;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// SEA populated code value for the valid combination of account dimensions under which financials are reported.
        /// </summary>
        /// <value>SEA populated code value for the valid combination of account dimensions under which financials are reported.</value>
        [JsonPropertyName("accountIdentifier")]
        public string AccountIdentifier { get; set; }

        /// <summary>
        /// The fiscal year for the account
        /// </summary>
        /// <value>The fiscal year for the account</value>
        [JsonPropertyName("fiscalYear")]
        public int FiscalYear { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// The type of account used in accounting such as revenue, expenditure, or balance sheet.
        /// </summary>
        /// <value>The type of account used in accounting such as revenue, expenditure, or balance sheet.</value>
        [JsonPropertyName("accountTypeDescriptor")]
        public string AccountTypeDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BalanceSheetDimensionReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiBalanceSheetDimensionReference?> BalanceSheetDimensionReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets BalanceSheetDimensionReference
        /// </summary>
        [JsonPropertyName("balanceSheetDimensionReference")]
        public EdFiBalanceSheetDimensionReference? BalanceSheetDimensionReference { get { return this.BalanceSheetDimensionReferenceOption; } set { this.BalanceSheetDimensionReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of FunctionDimensionReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiFunctionDimensionReference?> FunctionDimensionReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets FunctionDimensionReference
        /// </summary>
        [JsonPropertyName("functionDimensionReference")]
        public EdFiFunctionDimensionReference? FunctionDimensionReference { get { return this.FunctionDimensionReferenceOption; } set { this.FunctionDimensionReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of FundDimensionReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiFundDimensionReference?> FundDimensionReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets FundDimensionReference
        /// </summary>
        [JsonPropertyName("fundDimensionReference")]
        public EdFiFundDimensionReference? FundDimensionReference { get { return this.FundDimensionReferenceOption; } set { this.FundDimensionReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectDimensionReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiObjectDimensionReference?> ObjectDimensionReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ObjectDimensionReference
        /// </summary>
        [JsonPropertyName("objectDimensionReference")]
        public EdFiObjectDimensionReference? ObjectDimensionReference { get { return this.ObjectDimensionReferenceOption; } set { this.ObjectDimensionReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of OperationalUnitDimensionReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiOperationalUnitDimensionReference?> OperationalUnitDimensionReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperationalUnitDimensionReference
        /// </summary>
        [JsonPropertyName("operationalUnitDimensionReference")]
        public EdFiOperationalUnitDimensionReference? OperationalUnitDimensionReference { get { return this.OperationalUnitDimensionReferenceOption; } set { this.OperationalUnitDimensionReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramDimensionReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiProgramDimensionReference?> ProgramDimensionReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProgramDimensionReference
        /// </summary>
        [JsonPropertyName("programDimensionReference")]
        public EdFiProgramDimensionReference? ProgramDimensionReference { get { return this.ProgramDimensionReferenceOption; } set { this.ProgramDimensionReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectDimensionReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiProjectDimensionReference?> ProjectDimensionReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectDimensionReference
        /// </summary>
        [JsonPropertyName("projectDimensionReference")]
        public EdFiProjectDimensionReference? ProjectDimensionReference { get { return this.ProjectDimensionReferenceOption; } set { this.ProjectDimensionReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceDimensionReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiSourceDimensionReference?> SourceDimensionReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceDimensionReference
        /// </summary>
        [JsonPropertyName("sourceDimensionReference")]
        public EdFiSourceDimensionReference? SourceDimensionReference { get { return this.SourceDimensionReferenceOption; } set { this.SourceDimensionReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccountNameOption { get; private set; }

        /// <summary>
        /// A descriptive name for the account.
        /// </summary>
        /// <value>A descriptive name for the account.</value>
        [JsonPropertyName("accountName")]
        public string? AccountName { get { return this.AccountNameOption; } set { this.AccountNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReportingTags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiChartOfAccountReportingTag>?> ReportingTagsOption { get; private set; }

        /// <summary>
        /// An unordered collection of chartOfAccountReportingTags. Optional tag for accountability reporting.
        /// </summary>
        /// <value>An unordered collection of chartOfAccountReportingTags. Optional tag for accountability reporting.</value>
        [JsonPropertyName("reportingTags")]
        public List<EdFiChartOfAccountReportingTag>? ReportingTags { get { return this.ReportingTagsOption; } set { this.ReportingTagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the ChartOfAccount entity.
        /// </summary>
        /// <value>Extensions to the ChartOfAccount entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiChartOfAccount {\n");
            sb.Append("  AccountIdentifier: ").Append(AccountIdentifier).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  AccountTypeDescriptor: ").Append(AccountTypeDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BalanceSheetDimensionReference: ").Append(BalanceSheetDimensionReference).Append("\n");
            sb.Append("  FunctionDimensionReference: ").Append(FunctionDimensionReference).Append("\n");
            sb.Append("  FundDimensionReference: ").Append(FundDimensionReference).Append("\n");
            sb.Append("  ObjectDimensionReference: ").Append(ObjectDimensionReference).Append("\n");
            sb.Append("  OperationalUnitDimensionReference: ").Append(OperationalUnitDimensionReference).Append("\n");
            sb.Append("  ProgramDimensionReference: ").Append(ProgramDimensionReference).Append("\n");
            sb.Append("  ProjectDimensionReference: ").Append(ProjectDimensionReference).Append("\n");
            sb.Append("  SourceDimensionReference: ").Append(SourceDimensionReference).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ReportingTags: ").Append(ReportingTags).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountIdentifier (string) maxLength
            if (this.AccountIdentifier != null && this.AccountIdentifier.Length > 50)
            {
                yield return new ValidationResult("Invalid value for AccountIdentifier, length must be less than 50.", new [] { "AccountIdentifier" });
            }

            // FiscalYear (int) maximum
            if (this.FiscalYear > (int)2040)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value less than or equal to 2040.", new [] { "FiscalYear" });
            }

            // FiscalYear (int) minimum
            if (this.FiscalYear < (int)2020)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value greater than or equal to 2020.", new [] { "FiscalYear" });
            }

            // AccountTypeDescriptor (string) maxLength
            if (this.AccountTypeDescriptor != null && this.AccountTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AccountTypeDescriptor, length must be less than 306.", new [] { "AccountTypeDescriptor" });
            }

            // AccountName (string) maxLength
            if (this.AccountName != null && this.AccountName.Length > 100)
            {
                yield return new ValidationResult("Invalid value for AccountName, length must be less than 100.", new [] { "AccountName" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiChartOfAccount" />
    /// </summary>
    public class EdFiChartOfAccountJsonConverter : JsonConverter<EdFiChartOfAccount>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiChartOfAccount" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiChartOfAccount Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accountIdentifier = default;
            Option<int?> fiscalYear = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<string?> accountTypeDescriptor = default;
            Option<string?> id = default;
            Option<EdFiBalanceSheetDimensionReference?> balanceSheetDimensionReference = default;
            Option<EdFiFunctionDimensionReference?> functionDimensionReference = default;
            Option<EdFiFundDimensionReference?> fundDimensionReference = default;
            Option<EdFiObjectDimensionReference?> objectDimensionReference = default;
            Option<EdFiOperationalUnitDimensionReference?> operationalUnitDimensionReference = default;
            Option<EdFiProgramDimensionReference?> programDimensionReference = default;
            Option<EdFiProjectDimensionReference?> projectDimensionReference = default;
            Option<EdFiSourceDimensionReference?> sourceDimensionReference = default;
            Option<string?> accountName = default;
            Option<List<EdFiChartOfAccountReportingTag>?> reportingTags = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountIdentifier":
                            accountIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fiscalYear":
                            fiscalYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "accountTypeDescriptor":
                            accountTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "balanceSheetDimensionReference":
                            balanceSheetDimensionReference = new Option<EdFiBalanceSheetDimensionReference?>(JsonSerializer.Deserialize<EdFiBalanceSheetDimensionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "functionDimensionReference":
                            functionDimensionReference = new Option<EdFiFunctionDimensionReference?>(JsonSerializer.Deserialize<EdFiFunctionDimensionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "fundDimensionReference":
                            fundDimensionReference = new Option<EdFiFundDimensionReference?>(JsonSerializer.Deserialize<EdFiFundDimensionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "objectDimensionReference":
                            objectDimensionReference = new Option<EdFiObjectDimensionReference?>(JsonSerializer.Deserialize<EdFiObjectDimensionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "operationalUnitDimensionReference":
                            operationalUnitDimensionReference = new Option<EdFiOperationalUnitDimensionReference?>(JsonSerializer.Deserialize<EdFiOperationalUnitDimensionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programDimensionReference":
                            programDimensionReference = new Option<EdFiProgramDimensionReference?>(JsonSerializer.Deserialize<EdFiProgramDimensionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "projectDimensionReference":
                            projectDimensionReference = new Option<EdFiProjectDimensionReference?>(JsonSerializer.Deserialize<EdFiProjectDimensionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sourceDimensionReference":
                            sourceDimensionReference = new Option<EdFiSourceDimensionReference?>(JsonSerializer.Deserialize<EdFiSourceDimensionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "accountName":
                            accountName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "reportingTags":
                            reportingTags = new Option<List<EdFiChartOfAccountReportingTag>?>(JsonSerializer.Deserialize<List<EdFiChartOfAccountReportingTag>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accountIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiChartOfAccount.", nameof(accountIdentifier));

            if (!fiscalYear.IsSet)
                throw new ArgumentException("Property is required for class EdFiChartOfAccount.", nameof(fiscalYear));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiChartOfAccount.", nameof(educationOrganizationReference));

            if (!accountTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiChartOfAccount.", nameof(accountTypeDescriptor));

            if (accountIdentifier.IsSet && accountIdentifier.Value == null)
                throw new ArgumentNullException(nameof(accountIdentifier), "Property is not nullable for class EdFiChartOfAccount.");

            if (fiscalYear.IsSet && fiscalYear.Value == null)
                throw new ArgumentNullException(nameof(fiscalYear), "Property is not nullable for class EdFiChartOfAccount.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiChartOfAccount.");

            if (accountTypeDescriptor.IsSet && accountTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(accountTypeDescriptor), "Property is not nullable for class EdFiChartOfAccount.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiChartOfAccount.");

            if (balanceSheetDimensionReference.IsSet && balanceSheetDimensionReference.Value == null)
                throw new ArgumentNullException(nameof(balanceSheetDimensionReference), "Property is not nullable for class EdFiChartOfAccount.");

            if (functionDimensionReference.IsSet && functionDimensionReference.Value == null)
                throw new ArgumentNullException(nameof(functionDimensionReference), "Property is not nullable for class EdFiChartOfAccount.");

            if (fundDimensionReference.IsSet && fundDimensionReference.Value == null)
                throw new ArgumentNullException(nameof(fundDimensionReference), "Property is not nullable for class EdFiChartOfAccount.");

            if (objectDimensionReference.IsSet && objectDimensionReference.Value == null)
                throw new ArgumentNullException(nameof(objectDimensionReference), "Property is not nullable for class EdFiChartOfAccount.");

            if (operationalUnitDimensionReference.IsSet && operationalUnitDimensionReference.Value == null)
                throw new ArgumentNullException(nameof(operationalUnitDimensionReference), "Property is not nullable for class EdFiChartOfAccount.");

            if (programDimensionReference.IsSet && programDimensionReference.Value == null)
                throw new ArgumentNullException(nameof(programDimensionReference), "Property is not nullable for class EdFiChartOfAccount.");

            if (projectDimensionReference.IsSet && projectDimensionReference.Value == null)
                throw new ArgumentNullException(nameof(projectDimensionReference), "Property is not nullable for class EdFiChartOfAccount.");

            if (sourceDimensionReference.IsSet && sourceDimensionReference.Value == null)
                throw new ArgumentNullException(nameof(sourceDimensionReference), "Property is not nullable for class EdFiChartOfAccount.");

            if (reportingTags.IsSet && reportingTags.Value == null)
                throw new ArgumentNullException(nameof(reportingTags), "Property is not nullable for class EdFiChartOfAccount.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiChartOfAccount.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiChartOfAccount.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiChartOfAccount.");

            return new EdFiChartOfAccount(accountIdentifier.Value!, fiscalYear.Value!.Value!, educationOrganizationReference.Value!, accountTypeDescriptor.Value!, id, balanceSheetDimensionReference, functionDimensionReference, fundDimensionReference, objectDimensionReference, operationalUnitDimensionReference, programDimensionReference, projectDimensionReference, sourceDimensionReference, accountName, reportingTags, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiChartOfAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiChartOfAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiChartOfAccount edFiChartOfAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiChartOfAccount, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiChartOfAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiChartOfAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiChartOfAccount edFiChartOfAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiChartOfAccount.AccountIdentifier == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.AccountIdentifier), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.EducationOrganizationReference), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.AccountTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.AccountTypeDescriptor), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.IdOption.IsSet && edFiChartOfAccount.Id == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.Id), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.BalanceSheetDimensionReferenceOption.IsSet && edFiChartOfAccount.BalanceSheetDimensionReference == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.BalanceSheetDimensionReference), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.FunctionDimensionReferenceOption.IsSet && edFiChartOfAccount.FunctionDimensionReference == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.FunctionDimensionReference), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.FundDimensionReferenceOption.IsSet && edFiChartOfAccount.FundDimensionReference == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.FundDimensionReference), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.ObjectDimensionReferenceOption.IsSet && edFiChartOfAccount.ObjectDimensionReference == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.ObjectDimensionReference), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.OperationalUnitDimensionReferenceOption.IsSet && edFiChartOfAccount.OperationalUnitDimensionReference == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.OperationalUnitDimensionReference), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.ProgramDimensionReferenceOption.IsSet && edFiChartOfAccount.ProgramDimensionReference == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.ProgramDimensionReference), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.ProjectDimensionReferenceOption.IsSet && edFiChartOfAccount.ProjectDimensionReference == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.ProjectDimensionReference), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.SourceDimensionReferenceOption.IsSet && edFiChartOfAccount.SourceDimensionReference == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.SourceDimensionReference), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.ReportingTagsOption.IsSet && edFiChartOfAccount.ReportingTags == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.ReportingTags), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.EtagOption.IsSet && edFiChartOfAccount.Etag == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.Etag), "Property is required for class EdFiChartOfAccount.");

            if (edFiChartOfAccount.ExtOption.IsSet && edFiChartOfAccount.Ext == null)
                throw new ArgumentNullException(nameof(edFiChartOfAccount.Ext), "Property is required for class EdFiChartOfAccount.");

            writer.WriteString("accountIdentifier", edFiChartOfAccount.AccountIdentifier);

            writer.WriteNumber("fiscalYear", edFiChartOfAccount.FiscalYear);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiChartOfAccount.EducationOrganizationReference, jsonSerializerOptions);
            writer.WriteString("accountTypeDescriptor", edFiChartOfAccount.AccountTypeDescriptor);

            if (edFiChartOfAccount.IdOption.IsSet)
                writer.WriteString("id", edFiChartOfAccount.Id);

            if (edFiChartOfAccount.BalanceSheetDimensionReferenceOption.IsSet)
            {
                writer.WritePropertyName("balanceSheetDimensionReference");
                JsonSerializer.Serialize(writer, edFiChartOfAccount.BalanceSheetDimensionReference, jsonSerializerOptions);
            }
            if (edFiChartOfAccount.FunctionDimensionReferenceOption.IsSet)
            {
                writer.WritePropertyName("functionDimensionReference");
                JsonSerializer.Serialize(writer, edFiChartOfAccount.FunctionDimensionReference, jsonSerializerOptions);
            }
            if (edFiChartOfAccount.FundDimensionReferenceOption.IsSet)
            {
                writer.WritePropertyName("fundDimensionReference");
                JsonSerializer.Serialize(writer, edFiChartOfAccount.FundDimensionReference, jsonSerializerOptions);
            }
            if (edFiChartOfAccount.ObjectDimensionReferenceOption.IsSet)
            {
                writer.WritePropertyName("objectDimensionReference");
                JsonSerializer.Serialize(writer, edFiChartOfAccount.ObjectDimensionReference, jsonSerializerOptions);
            }
            if (edFiChartOfAccount.OperationalUnitDimensionReferenceOption.IsSet)
            {
                writer.WritePropertyName("operationalUnitDimensionReference");
                JsonSerializer.Serialize(writer, edFiChartOfAccount.OperationalUnitDimensionReference, jsonSerializerOptions);
            }
            if (edFiChartOfAccount.ProgramDimensionReferenceOption.IsSet)
            {
                writer.WritePropertyName("programDimensionReference");
                JsonSerializer.Serialize(writer, edFiChartOfAccount.ProgramDimensionReference, jsonSerializerOptions);
            }
            if (edFiChartOfAccount.ProjectDimensionReferenceOption.IsSet)
            {
                writer.WritePropertyName("projectDimensionReference");
                JsonSerializer.Serialize(writer, edFiChartOfAccount.ProjectDimensionReference, jsonSerializerOptions);
            }
            if (edFiChartOfAccount.SourceDimensionReferenceOption.IsSet)
            {
                writer.WritePropertyName("sourceDimensionReference");
                JsonSerializer.Serialize(writer, edFiChartOfAccount.SourceDimensionReference, jsonSerializerOptions);
            }
            if (edFiChartOfAccount.AccountNameOption.IsSet)
                if (edFiChartOfAccount.AccountNameOption.Value != null)
                    writer.WriteString("accountName", edFiChartOfAccount.AccountName);
                else
                    writer.WriteNull("accountName");

            if (edFiChartOfAccount.ReportingTagsOption.IsSet)
            {
                writer.WritePropertyName("reportingTags");
                JsonSerializer.Serialize(writer, edFiChartOfAccount.ReportingTags, jsonSerializerOptions);
            }
            if (edFiChartOfAccount.EtagOption.IsSet)
                writer.WriteString("_etag", edFiChartOfAccount.Etag);

            if (edFiChartOfAccount.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiChartOfAccount.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiChartOfAccount.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiChartOfAccount.Ext, jsonSerializerOptions);
            }
        }
    }
}
