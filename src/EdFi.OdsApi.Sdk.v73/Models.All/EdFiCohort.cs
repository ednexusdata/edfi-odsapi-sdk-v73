// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiCohort
    /// </summary>
    public partial class EdFiCohort : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCohort" /> class.
        /// </summary>
        /// <param name="cohortIdentifier">The name or ID for the cohort.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="cohortTypeDescriptor">The type of cohort (e.g., academic intervention, classroom breakout).</param>
        /// <param name="id">id</param>
        /// <param name="academicSubjectDescriptor">The academic subject associated with an academic intervention.</param>
        /// <param name="cohortDescription">The description of the cohort and its purpose.</param>
        /// <param name="cohortScopeDescriptor">The scope of cohort (e.g., school, district, classroom).</param>
        /// <param name="programs">An unordered collection of cohortPrograms. The (optional) program associated with this cohort (e.g., special education).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Cohort entity.</param>
        [JsonConstructor]
        public EdFiCohort(string cohortIdentifier, EdFiEducationOrganizationReference educationOrganizationReference, string cohortTypeDescriptor, Option<string?> id = default, Option<string?> academicSubjectDescriptor = default, Option<string?> cohortDescription = default, Option<string?> cohortScopeDescriptor = default, Option<List<EdFiCohortProgram>?> programs = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            CohortIdentifier = cohortIdentifier;
            EducationOrganizationReference = educationOrganizationReference;
            CohortTypeDescriptor = cohortTypeDescriptor;
            IdOption = id;
            AcademicSubjectDescriptorOption = academicSubjectDescriptor;
            CohortDescriptionOption = cohortDescription;
            CohortScopeDescriptorOption = cohortScopeDescriptor;
            ProgramsOption = programs;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name or ID for the cohort.
        /// </summary>
        /// <value>The name or ID for the cohort.</value>
        [JsonPropertyName("cohortIdentifier")]
        public string CohortIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// The type of cohort (e.g., academic intervention, classroom breakout).
        /// </summary>
        /// <value>The type of cohort (e.g., academic intervention, classroom breakout).</value>
        [JsonPropertyName("cohortTypeDescriptor")]
        public string CohortTypeDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AcademicSubjectDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AcademicSubjectDescriptorOption { get; private set; }

        /// <summary>
        /// The academic subject associated with an academic intervention.
        /// </summary>
        /// <value>The academic subject associated with an academic intervention.</value>
        [JsonPropertyName("academicSubjectDescriptor")]
        public string? AcademicSubjectDescriptor { get { return this.AcademicSubjectDescriptorOption; } set { this.AcademicSubjectDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CohortDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CohortDescriptionOption { get; private set; }

        /// <summary>
        /// The description of the cohort and its purpose.
        /// </summary>
        /// <value>The description of the cohort and its purpose.</value>
        [JsonPropertyName("cohortDescription")]
        public string? CohortDescription { get { return this.CohortDescriptionOption; } set { this.CohortDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of CohortScopeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CohortScopeDescriptorOption { get; private set; }

        /// <summary>
        /// The scope of cohort (e.g., school, district, classroom).
        /// </summary>
        /// <value>The scope of cohort (e.g., school, district, classroom).</value>
        [JsonPropertyName("cohortScopeDescriptor")]
        public string? CohortScopeDescriptor { get { return this.CohortScopeDescriptorOption; } set { this.CohortScopeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Programs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCohortProgram>?> ProgramsOption { get; private set; }

        /// <summary>
        /// An unordered collection of cohortPrograms. The (optional) program associated with this cohort (e.g., special education).
        /// </summary>
        /// <value>An unordered collection of cohortPrograms. The (optional) program associated with this cohort (e.g., special education).</value>
        [JsonPropertyName("programs")]
        public List<EdFiCohortProgram>? Programs { get { return this.ProgramsOption; } set { this.ProgramsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Cohort entity.
        /// </summary>
        /// <value>Extensions to the Cohort entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCohort {\n");
            sb.Append("  CohortIdentifier: ").Append(CohortIdentifier).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  CohortTypeDescriptor: ").Append(CohortTypeDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AcademicSubjectDescriptor: ").Append(AcademicSubjectDescriptor).Append("\n");
            sb.Append("  CohortDescription: ").Append(CohortDescription).Append("\n");
            sb.Append("  CohortScopeDescriptor: ").Append(CohortScopeDescriptor).Append("\n");
            sb.Append("  Programs: ").Append(Programs).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CohortIdentifier (string) maxLength
            if (this.CohortIdentifier != null && this.CohortIdentifier.Length > 36)
            {
                yield return new ValidationResult("Invalid value for CohortIdentifier, length must be less than 36.", new [] { "CohortIdentifier" });
            }

            // CohortTypeDescriptor (string) maxLength
            if (this.CohortTypeDescriptor != null && this.CohortTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CohortTypeDescriptor, length must be less than 306.", new [] { "CohortTypeDescriptor" });
            }

            // AcademicSubjectDescriptor (string) maxLength
            if (this.AcademicSubjectDescriptor != null && this.AcademicSubjectDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AcademicSubjectDescriptor, length must be less than 306.", new [] { "AcademicSubjectDescriptor" });
            }

            // CohortDescription (string) maxLength
            if (this.CohortDescription != null && this.CohortDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for CohortDescription, length must be less than 1024.", new [] { "CohortDescription" });
            }

            // CohortScopeDescriptor (string) maxLength
            if (this.CohortScopeDescriptor != null && this.CohortScopeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CohortScopeDescriptor, length must be less than 306.", new [] { "CohortScopeDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiCohort" />
    /// </summary>
    public class EdFiCohortJsonConverter : JsonConverter<EdFiCohort>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiCohort" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiCohort Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> cohortIdentifier = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<string?> cohortTypeDescriptor = default;
            Option<string?> id = default;
            Option<string?> academicSubjectDescriptor = default;
            Option<string?> cohortDescription = default;
            Option<string?> cohortScopeDescriptor = default;
            Option<List<EdFiCohortProgram>?> programs = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cohortIdentifier":
                            cohortIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cohortTypeDescriptor":
                            cohortTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "academicSubjectDescriptor":
                            academicSubjectDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "cohortDescription":
                            cohortDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "cohortScopeDescriptor":
                            cohortScopeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "programs":
                            programs = new Option<List<EdFiCohortProgram>?>(JsonSerializer.Deserialize<List<EdFiCohortProgram>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!cohortIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiCohort.", nameof(cohortIdentifier));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiCohort.", nameof(educationOrganizationReference));

            if (!cohortTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiCohort.", nameof(cohortTypeDescriptor));

            if (cohortIdentifier.IsSet && cohortIdentifier.Value == null)
                throw new ArgumentNullException(nameof(cohortIdentifier), "Property is not nullable for class EdFiCohort.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiCohort.");

            if (cohortTypeDescriptor.IsSet && cohortTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(cohortTypeDescriptor), "Property is not nullable for class EdFiCohort.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiCohort.");

            if (programs.IsSet && programs.Value == null)
                throw new ArgumentNullException(nameof(programs), "Property is not nullable for class EdFiCohort.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiCohort.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiCohort.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiCohort.");

            return new EdFiCohort(cohortIdentifier.Value!, educationOrganizationReference.Value!, cohortTypeDescriptor.Value!, id, academicSubjectDescriptor, cohortDescription, cohortScopeDescriptor, programs, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiCohort" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCohort"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiCohort edFiCohort, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiCohort, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiCohort" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCohort"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiCohort edFiCohort, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiCohort.CohortIdentifier == null)
                throw new ArgumentNullException(nameof(edFiCohort.CohortIdentifier), "Property is required for class EdFiCohort.");

            if (edFiCohort.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiCohort.EducationOrganizationReference), "Property is required for class EdFiCohort.");

            if (edFiCohort.CohortTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiCohort.CohortTypeDescriptor), "Property is required for class EdFiCohort.");

            if (edFiCohort.IdOption.IsSet && edFiCohort.Id == null)
                throw new ArgumentNullException(nameof(edFiCohort.Id), "Property is required for class EdFiCohort.");

            if (edFiCohort.ProgramsOption.IsSet && edFiCohort.Programs == null)
                throw new ArgumentNullException(nameof(edFiCohort.Programs), "Property is required for class EdFiCohort.");

            if (edFiCohort.EtagOption.IsSet && edFiCohort.Etag == null)
                throw new ArgumentNullException(nameof(edFiCohort.Etag), "Property is required for class EdFiCohort.");

            if (edFiCohort.ExtOption.IsSet && edFiCohort.Ext == null)
                throw new ArgumentNullException(nameof(edFiCohort.Ext), "Property is required for class EdFiCohort.");

            writer.WriteString("cohortIdentifier", edFiCohort.CohortIdentifier);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiCohort.EducationOrganizationReference, jsonSerializerOptions);
            writer.WriteString("cohortTypeDescriptor", edFiCohort.CohortTypeDescriptor);

            if (edFiCohort.IdOption.IsSet)
                writer.WriteString("id", edFiCohort.Id);

            if (edFiCohort.AcademicSubjectDescriptorOption.IsSet)
                if (edFiCohort.AcademicSubjectDescriptorOption.Value != null)
                    writer.WriteString("academicSubjectDescriptor", edFiCohort.AcademicSubjectDescriptor);
                else
                    writer.WriteNull("academicSubjectDescriptor");

            if (edFiCohort.CohortDescriptionOption.IsSet)
                if (edFiCohort.CohortDescriptionOption.Value != null)
                    writer.WriteString("cohortDescription", edFiCohort.CohortDescription);
                else
                    writer.WriteNull("cohortDescription");

            if (edFiCohort.CohortScopeDescriptorOption.IsSet)
                if (edFiCohort.CohortScopeDescriptorOption.Value != null)
                    writer.WriteString("cohortScopeDescriptor", edFiCohort.CohortScopeDescriptor);
                else
                    writer.WriteNull("cohortScopeDescriptor");

            if (edFiCohort.ProgramsOption.IsSet)
            {
                writer.WritePropertyName("programs");
                JsonSerializer.Serialize(writer, edFiCohort.Programs, jsonSerializerOptions);
            }
            if (edFiCohort.EtagOption.IsSet)
                writer.WriteString("_etag", edFiCohort.Etag);

            if (edFiCohort.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiCohort.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiCohort.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiCohort.Ext, jsonSerializerOptions);
            }
        }
    }
}
