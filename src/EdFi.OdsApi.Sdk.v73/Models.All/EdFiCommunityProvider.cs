// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiCommunityProvider
    /// </summary>
    public partial class EdFiCommunityProvider : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCommunityProvider" /> class.
        /// </summary>
        /// <param name="categories">An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.</param>
        /// <param name="communityProviderId">The identifier assigned to a community provider. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution.</param>
        /// <param name="providerCategoryDescriptor">Indicates the category of the provider.</param>
        /// <param name="providerStatusDescriptor">Indicates the status of the provider.</param>
        /// <param name="id">id</param>
        /// <param name="communityOrganizationReference">communityOrganizationReference</param>
        /// <param name="addresses">An unordered collection of educationOrganizationAddresses. The set of elements that describes an address for the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.</param>
        /// <param name="identificationCodes">An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.</param>
        /// <param name="indicators">An unordered collection of educationOrganizationIndicators. An indicator or metric of an education organization.</param>
        /// <param name="institutionTelephones">An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.</param>
        /// <param name="internationalAddresses">An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.</param>
        /// <param name="licenseExemptIndicator">An indication of whether the provider is exempt from having a license.</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive).</param>
        /// <param name="providerProfitabilityDescriptor">Indicates the profitability status of the provider.</param>
        /// <param name="schoolIndicator">An indication of whether the community provider is a school.</param>
        /// <param name="shortNameOfInstitution">A short name for the institution.</param>
        /// <param name="webSite">The public web site address (URL) for the education organization.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the CommunityProvider entity.</param>
        [JsonConstructor]
        public EdFiCommunityProvider(List<EdFiEducationOrganizationCategory> categories, long communityProviderId, string nameOfInstitution, string providerCategoryDescriptor, string providerStatusDescriptor, Option<string?> id = default, Option<EdFiCommunityOrganizationReference?> communityOrganizationReference = default, Option<List<EdFiEducationOrganizationAddress>?> addresses = default, Option<List<EdFiEducationOrganizationIdentificationCode>?> identificationCodes = default, Option<List<EdFiEducationOrganizationIndicator>?> indicators = default, Option<List<EdFiEducationOrganizationInstitutionTelephone>?> institutionTelephones = default, Option<List<EdFiEducationOrganizationInternationalAddress>?> internationalAddresses = default, Option<bool?> licenseExemptIndicator = default, Option<string?> operationalStatusDescriptor = default, Option<string?> providerProfitabilityDescriptor = default, Option<bool?> schoolIndicator = default, Option<string?> shortNameOfInstitution = default, Option<string?> webSite = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            Categories = categories;
            CommunityProviderId = communityProviderId;
            NameOfInstitution = nameOfInstitution;
            ProviderCategoryDescriptor = providerCategoryDescriptor;
            ProviderStatusDescriptor = providerStatusDescriptor;
            IdOption = id;
            CommunityOrganizationReferenceOption = communityOrganizationReference;
            AddressesOption = addresses;
            IdentificationCodesOption = identificationCodes;
            IndicatorsOption = indicators;
            InstitutionTelephonesOption = institutionTelephones;
            InternationalAddressesOption = internationalAddresses;
            LicenseExemptIndicatorOption = licenseExemptIndicator;
            OperationalStatusDescriptorOption = operationalStatusDescriptor;
            ProviderProfitabilityDescriptorOption = providerProfitabilityDescriptor;
            SchoolIndicatorOption = schoolIndicator;
            ShortNameOfInstitutionOption = shortNameOfInstitution;
            WebSiteOption = webSite;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.</value>
        [JsonPropertyName("categories")]
        public List<EdFiEducationOrganizationCategory> Categories { get; set; }

        /// <summary>
        /// The identifier assigned to a community provider. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.
        /// </summary>
        /// <value>The identifier assigned to a community provider. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</value>
        [JsonPropertyName("communityProviderId")]
        public long CommunityProviderId { get; set; }

        /// <summary>
        /// The full, legally accepted name of the institution.
        /// </summary>
        /// <value>The full, legally accepted name of the institution.</value>
        [JsonPropertyName("nameOfInstitution")]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// Indicates the category of the provider.
        /// </summary>
        /// <value>Indicates the category of the provider.</value>
        [JsonPropertyName("providerCategoryDescriptor")]
        public string ProviderCategoryDescriptor { get; set; }

        /// <summary>
        /// Indicates the status of the provider.
        /// </summary>
        /// <value>Indicates the status of the provider.</value>
        [JsonPropertyName("providerStatusDescriptor")]
        public string ProviderStatusDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommunityOrganizationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiCommunityOrganizationReference?> CommunityOrganizationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommunityOrganizationReference
        /// </summary>
        [JsonPropertyName("communityOrganizationReference")]
        public EdFiCommunityOrganizationReference? CommunityOrganizationReference { get { return this.CommunityOrganizationReferenceOption; } set { this.CommunityOrganizationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Addresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationAddress>?> AddressesOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationAddresses. The set of elements that describes an address for the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationAddresses. The set of elements that describes an address for the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.</value>
        [JsonPropertyName("addresses")]
        public List<EdFiEducationOrganizationAddress>? Addresses { get { return this.AddressesOption; } set { this.AddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdentificationCodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationIdentificationCode>?> IdentificationCodesOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.</value>
        [JsonPropertyName("identificationCodes")]
        public List<EdFiEducationOrganizationIdentificationCode>? IdentificationCodes { get { return this.IdentificationCodesOption; } set { this.IdentificationCodesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Indicators
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationIndicator>?> IndicatorsOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationIndicators. An indicator or metric of an education organization.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationIndicators. An indicator or metric of an education organization.</value>
        [JsonPropertyName("indicators")]
        public List<EdFiEducationOrganizationIndicator>? Indicators { get { return this.IndicatorsOption; } set { this.IndicatorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of InstitutionTelephones
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationInstitutionTelephone>?> InstitutionTelephonesOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.</value>
        [JsonPropertyName("institutionTelephones")]
        public List<EdFiEducationOrganizationInstitutionTelephone>? InstitutionTelephones { get { return this.InstitutionTelephonesOption; } set { this.InstitutionTelephonesOption = new(value); } }

        /// <summary>
        /// Used to track the state of InternationalAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationInternationalAddress>?> InternationalAddressesOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.</value>
        [JsonPropertyName("internationalAddresses")]
        public List<EdFiEducationOrganizationInternationalAddress>? InternationalAddresses { get { return this.InternationalAddressesOption; } set { this.InternationalAddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of LicenseExemptIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LicenseExemptIndicatorOption { get; private set; }

        /// <summary>
        /// An indication of whether the provider is exempt from having a license.
        /// </summary>
        /// <value>An indication of whether the provider is exempt from having a license.</value>
        [JsonPropertyName("licenseExemptIndicator")]
        public bool? LicenseExemptIndicator { get { return this.LicenseExemptIndicatorOption; } set { this.LicenseExemptIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of OperationalStatusDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OperationalStatusDescriptorOption { get; private set; }

        /// <summary>
        /// The current operational status of the education organization (e.g., active, inactive).
        /// </summary>
        /// <value>The current operational status of the education organization (e.g., active, inactive).</value>
        [JsonPropertyName("operationalStatusDescriptor")]
        public string? OperationalStatusDescriptor { get { return this.OperationalStatusDescriptorOption; } set { this.OperationalStatusDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProviderProfitabilityDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProviderProfitabilityDescriptorOption { get; private set; }

        /// <summary>
        /// Indicates the profitability status of the provider.
        /// </summary>
        /// <value>Indicates the profitability status of the provider.</value>
        [JsonPropertyName("providerProfitabilityDescriptor")]
        public string? ProviderProfitabilityDescriptor { get { return this.ProviderProfitabilityDescriptorOption; } set { this.ProviderProfitabilityDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of SchoolIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SchoolIndicatorOption { get; private set; }

        /// <summary>
        /// An indication of whether the community provider is a school.
        /// </summary>
        /// <value>An indication of whether the community provider is a school.</value>
        [JsonPropertyName("schoolIndicator")]
        public bool? SchoolIndicator { get { return this.SchoolIndicatorOption; } set { this.SchoolIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShortNameOfInstitution
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShortNameOfInstitutionOption { get; private set; }

        /// <summary>
        /// A short name for the institution.
        /// </summary>
        /// <value>A short name for the institution.</value>
        [JsonPropertyName("shortNameOfInstitution")]
        public string? ShortNameOfInstitution { get { return this.ShortNameOfInstitutionOption; } set { this.ShortNameOfInstitutionOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebSite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebSiteOption { get; private set; }

        /// <summary>
        /// The public web site address (URL) for the education organization.
        /// </summary>
        /// <value>The public web site address (URL) for the education organization.</value>
        [JsonPropertyName("webSite")]
        public string? WebSite { get { return this.WebSiteOption; } set { this.WebSiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the CommunityProvider entity.
        /// </summary>
        /// <value>Extensions to the CommunityProvider entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCommunityProvider {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  CommunityProviderId: ").Append(CommunityProviderId).Append("\n");
            sb.Append("  NameOfInstitution: ").Append(NameOfInstitution).Append("\n");
            sb.Append("  ProviderCategoryDescriptor: ").Append(ProviderCategoryDescriptor).Append("\n");
            sb.Append("  ProviderStatusDescriptor: ").Append(ProviderStatusDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CommunityOrganizationReference: ").Append(CommunityOrganizationReference).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  Indicators: ").Append(Indicators).Append("\n");
            sb.Append("  InstitutionTelephones: ").Append(InstitutionTelephones).Append("\n");
            sb.Append("  InternationalAddresses: ").Append(InternationalAddresses).Append("\n");
            sb.Append("  LicenseExemptIndicator: ").Append(LicenseExemptIndicator).Append("\n");
            sb.Append("  OperationalStatusDescriptor: ").Append(OperationalStatusDescriptor).Append("\n");
            sb.Append("  ProviderProfitabilityDescriptor: ").Append(ProviderProfitabilityDescriptor).Append("\n");
            sb.Append("  SchoolIndicator: ").Append(SchoolIndicator).Append("\n");
            sb.Append("  ShortNameOfInstitution: ").Append(ShortNameOfInstitution).Append("\n");
            sb.Append("  WebSite: ").Append(WebSite).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NameOfInstitution (string) maxLength
            if (this.NameOfInstitution != null && this.NameOfInstitution.Length > 75)
            {
                yield return new ValidationResult("Invalid value for NameOfInstitution, length must be less than 75.", new [] { "NameOfInstitution" });
            }

            // ProviderCategoryDescriptor (string) maxLength
            if (this.ProviderCategoryDescriptor != null && this.ProviderCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProviderCategoryDescriptor, length must be less than 306.", new [] { "ProviderCategoryDescriptor" });
            }

            // ProviderStatusDescriptor (string) maxLength
            if (this.ProviderStatusDescriptor != null && this.ProviderStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProviderStatusDescriptor, length must be less than 306.", new [] { "ProviderStatusDescriptor" });
            }

            // OperationalStatusDescriptor (string) maxLength
            if (this.OperationalStatusDescriptor != null && this.OperationalStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for OperationalStatusDescriptor, length must be less than 306.", new [] { "OperationalStatusDescriptor" });
            }

            // ProviderProfitabilityDescriptor (string) maxLength
            if (this.ProviderProfitabilityDescriptor != null && this.ProviderProfitabilityDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProviderProfitabilityDescriptor, length must be less than 306.", new [] { "ProviderProfitabilityDescriptor" });
            }

            // ShortNameOfInstitution (string) maxLength
            if (this.ShortNameOfInstitution != null && this.ShortNameOfInstitution.Length > 75)
            {
                yield return new ValidationResult("Invalid value for ShortNameOfInstitution, length must be less than 75.", new [] { "ShortNameOfInstitution" });
            }

            // WebSite (string) maxLength
            if (this.WebSite != null && this.WebSite.Length > 255)
            {
                yield return new ValidationResult("Invalid value for WebSite, length must be less than 255.", new [] { "WebSite" });
            }

            // WebSite (string) minLength
            if (this.WebSite != null && this.WebSite.Length < 5)
            {
                yield return new ValidationResult("Invalid value for WebSite, length must be greater than 5.", new [] { "WebSite" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiCommunityProvider" />
    /// </summary>
    public class EdFiCommunityProviderJsonConverter : JsonConverter<EdFiCommunityProvider>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiCommunityProvider" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiCommunityProvider Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EdFiEducationOrganizationCategory>?> categories = default;
            Option<long?> communityProviderId = default;
            Option<string?> nameOfInstitution = default;
            Option<string?> providerCategoryDescriptor = default;
            Option<string?> providerStatusDescriptor = default;
            Option<string?> id = default;
            Option<EdFiCommunityOrganizationReference?> communityOrganizationReference = default;
            Option<List<EdFiEducationOrganizationAddress>?> addresses = default;
            Option<List<EdFiEducationOrganizationIdentificationCode>?> identificationCodes = default;
            Option<List<EdFiEducationOrganizationIndicator>?> indicators = default;
            Option<List<EdFiEducationOrganizationInstitutionTelephone>?> institutionTelephones = default;
            Option<List<EdFiEducationOrganizationInternationalAddress>?> internationalAddresses = default;
            Option<bool?> licenseExemptIndicator = default;
            Option<string?> operationalStatusDescriptor = default;
            Option<string?> providerProfitabilityDescriptor = default;
            Option<bool?> schoolIndicator = default;
            Option<string?> shortNameOfInstitution = default;
            Option<string?> webSite = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "categories":
                            categories = new Option<List<EdFiEducationOrganizationCategory>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationCategory>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "communityProviderId":
                            communityProviderId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "nameOfInstitution":
                            nameOfInstitution = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "providerCategoryDescriptor":
                            providerCategoryDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "providerStatusDescriptor":
                            providerStatusDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "communityOrganizationReference":
                            communityOrganizationReference = new Option<EdFiCommunityOrganizationReference?>(JsonSerializer.Deserialize<EdFiCommunityOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "addresses":
                            addresses = new Option<List<EdFiEducationOrganizationAddress>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationAddress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "identificationCodes":
                            identificationCodes = new Option<List<EdFiEducationOrganizationIdentificationCode>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationIdentificationCode>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "indicators":
                            indicators = new Option<List<EdFiEducationOrganizationIndicator>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationIndicator>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "institutionTelephones":
                            institutionTelephones = new Option<List<EdFiEducationOrganizationInstitutionTelephone>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationInstitutionTelephone>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "internationalAddresses":
                            internationalAddresses = new Option<List<EdFiEducationOrganizationInternationalAddress>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationInternationalAddress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "licenseExemptIndicator":
                            licenseExemptIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "operationalStatusDescriptor":
                            operationalStatusDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "providerProfitabilityDescriptor":
                            providerProfitabilityDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "schoolIndicator":
                            schoolIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "shortNameOfInstitution":
                            shortNameOfInstitution = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "webSite":
                            webSite = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!categories.IsSet)
                throw new ArgumentException("Property is required for class EdFiCommunityProvider.", nameof(categories));

            if (!communityProviderId.IsSet)
                throw new ArgumentException("Property is required for class EdFiCommunityProvider.", nameof(communityProviderId));

            if (!nameOfInstitution.IsSet)
                throw new ArgumentException("Property is required for class EdFiCommunityProvider.", nameof(nameOfInstitution));

            if (!providerCategoryDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiCommunityProvider.", nameof(providerCategoryDescriptor));

            if (!providerStatusDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiCommunityProvider.", nameof(providerStatusDescriptor));

            if (categories.IsSet && categories.Value == null)
                throw new ArgumentNullException(nameof(categories), "Property is not nullable for class EdFiCommunityProvider.");

            if (communityProviderId.IsSet && communityProviderId.Value == null)
                throw new ArgumentNullException(nameof(communityProviderId), "Property is not nullable for class EdFiCommunityProvider.");

            if (nameOfInstitution.IsSet && nameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(nameOfInstitution), "Property is not nullable for class EdFiCommunityProvider.");

            if (providerCategoryDescriptor.IsSet && providerCategoryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(providerCategoryDescriptor), "Property is not nullable for class EdFiCommunityProvider.");

            if (providerStatusDescriptor.IsSet && providerStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(providerStatusDescriptor), "Property is not nullable for class EdFiCommunityProvider.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiCommunityProvider.");

            if (communityOrganizationReference.IsSet && communityOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(communityOrganizationReference), "Property is not nullable for class EdFiCommunityProvider.");

            if (addresses.IsSet && addresses.Value == null)
                throw new ArgumentNullException(nameof(addresses), "Property is not nullable for class EdFiCommunityProvider.");

            if (identificationCodes.IsSet && identificationCodes.Value == null)
                throw new ArgumentNullException(nameof(identificationCodes), "Property is not nullable for class EdFiCommunityProvider.");

            if (indicators.IsSet && indicators.Value == null)
                throw new ArgumentNullException(nameof(indicators), "Property is not nullable for class EdFiCommunityProvider.");

            if (institutionTelephones.IsSet && institutionTelephones.Value == null)
                throw new ArgumentNullException(nameof(institutionTelephones), "Property is not nullable for class EdFiCommunityProvider.");

            if (internationalAddresses.IsSet && internationalAddresses.Value == null)
                throw new ArgumentNullException(nameof(internationalAddresses), "Property is not nullable for class EdFiCommunityProvider.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiCommunityProvider.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiCommunityProvider.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiCommunityProvider.");

            return new EdFiCommunityProvider(categories.Value!, communityProviderId.Value!.Value!, nameOfInstitution.Value!, providerCategoryDescriptor.Value!, providerStatusDescriptor.Value!, id, communityOrganizationReference, addresses, identificationCodes, indicators, institutionTelephones, internationalAddresses, licenseExemptIndicator, operationalStatusDescriptor, providerProfitabilityDescriptor, schoolIndicator, shortNameOfInstitution, webSite, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiCommunityProvider" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCommunityProvider"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiCommunityProvider edFiCommunityProvider, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiCommunityProvider, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiCommunityProvider" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCommunityProvider"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiCommunityProvider edFiCommunityProvider, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiCommunityProvider.Categories == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.Categories), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.NameOfInstitution == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.NameOfInstitution), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.ProviderCategoryDescriptor == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.ProviderCategoryDescriptor), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.ProviderStatusDescriptor == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.ProviderStatusDescriptor), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.IdOption.IsSet && edFiCommunityProvider.Id == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.Id), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.CommunityOrganizationReferenceOption.IsSet && edFiCommunityProvider.CommunityOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.CommunityOrganizationReference), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.AddressesOption.IsSet && edFiCommunityProvider.Addresses == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.Addresses), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.IdentificationCodesOption.IsSet && edFiCommunityProvider.IdentificationCodes == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.IdentificationCodes), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.IndicatorsOption.IsSet && edFiCommunityProvider.Indicators == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.Indicators), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.InstitutionTelephonesOption.IsSet && edFiCommunityProvider.InstitutionTelephones == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.InstitutionTelephones), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.InternationalAddressesOption.IsSet && edFiCommunityProvider.InternationalAddresses == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.InternationalAddresses), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.EtagOption.IsSet && edFiCommunityProvider.Etag == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.Etag), "Property is required for class EdFiCommunityProvider.");

            if (edFiCommunityProvider.ExtOption.IsSet && edFiCommunityProvider.Ext == null)
                throw new ArgumentNullException(nameof(edFiCommunityProvider.Ext), "Property is required for class EdFiCommunityProvider.");

            writer.WritePropertyName("categories");
            JsonSerializer.Serialize(writer, edFiCommunityProvider.Categories, jsonSerializerOptions);
            writer.WriteNumber("communityProviderId", edFiCommunityProvider.CommunityProviderId);

            writer.WriteString("nameOfInstitution", edFiCommunityProvider.NameOfInstitution);

            writer.WriteString("providerCategoryDescriptor", edFiCommunityProvider.ProviderCategoryDescriptor);

            writer.WriteString("providerStatusDescriptor", edFiCommunityProvider.ProviderStatusDescriptor);

            if (edFiCommunityProvider.IdOption.IsSet)
                writer.WriteString("id", edFiCommunityProvider.Id);

            if (edFiCommunityProvider.CommunityOrganizationReferenceOption.IsSet)
            {
                writer.WritePropertyName("communityOrganizationReference");
                JsonSerializer.Serialize(writer, edFiCommunityProvider.CommunityOrganizationReference, jsonSerializerOptions);
            }
            if (edFiCommunityProvider.AddressesOption.IsSet)
            {
                writer.WritePropertyName("addresses");
                JsonSerializer.Serialize(writer, edFiCommunityProvider.Addresses, jsonSerializerOptions);
            }
            if (edFiCommunityProvider.IdentificationCodesOption.IsSet)
            {
                writer.WritePropertyName("identificationCodes");
                JsonSerializer.Serialize(writer, edFiCommunityProvider.IdentificationCodes, jsonSerializerOptions);
            }
            if (edFiCommunityProvider.IndicatorsOption.IsSet)
            {
                writer.WritePropertyName("indicators");
                JsonSerializer.Serialize(writer, edFiCommunityProvider.Indicators, jsonSerializerOptions);
            }
            if (edFiCommunityProvider.InstitutionTelephonesOption.IsSet)
            {
                writer.WritePropertyName("institutionTelephones");
                JsonSerializer.Serialize(writer, edFiCommunityProvider.InstitutionTelephones, jsonSerializerOptions);
            }
            if (edFiCommunityProvider.InternationalAddressesOption.IsSet)
            {
                writer.WritePropertyName("internationalAddresses");
                JsonSerializer.Serialize(writer, edFiCommunityProvider.InternationalAddresses, jsonSerializerOptions);
            }
            if (edFiCommunityProvider.LicenseExemptIndicatorOption.IsSet)
                if (edFiCommunityProvider.LicenseExemptIndicatorOption.Value != null)
                    writer.WriteBoolean("licenseExemptIndicator", edFiCommunityProvider.LicenseExemptIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("licenseExemptIndicator");

            if (edFiCommunityProvider.OperationalStatusDescriptorOption.IsSet)
                if (edFiCommunityProvider.OperationalStatusDescriptorOption.Value != null)
                    writer.WriteString("operationalStatusDescriptor", edFiCommunityProvider.OperationalStatusDescriptor);
                else
                    writer.WriteNull("operationalStatusDescriptor");

            if (edFiCommunityProvider.ProviderProfitabilityDescriptorOption.IsSet)
                if (edFiCommunityProvider.ProviderProfitabilityDescriptorOption.Value != null)
                    writer.WriteString("providerProfitabilityDescriptor", edFiCommunityProvider.ProviderProfitabilityDescriptor);
                else
                    writer.WriteNull("providerProfitabilityDescriptor");

            if (edFiCommunityProvider.SchoolIndicatorOption.IsSet)
                if (edFiCommunityProvider.SchoolIndicatorOption.Value != null)
                    writer.WriteBoolean("schoolIndicator", edFiCommunityProvider.SchoolIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("schoolIndicator");

            if (edFiCommunityProvider.ShortNameOfInstitutionOption.IsSet)
                if (edFiCommunityProvider.ShortNameOfInstitutionOption.Value != null)
                    writer.WriteString("shortNameOfInstitution", edFiCommunityProvider.ShortNameOfInstitution);
                else
                    writer.WriteNull("shortNameOfInstitution");

            if (edFiCommunityProvider.WebSiteOption.IsSet)
                if (edFiCommunityProvider.WebSiteOption.Value != null)
                    writer.WriteString("webSite", edFiCommunityProvider.WebSite);
                else
                    writer.WriteNull("webSite");

            if (edFiCommunityProvider.EtagOption.IsSet)
                writer.WriteString("_etag", edFiCommunityProvider.Etag);

            if (edFiCommunityProvider.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiCommunityProvider.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiCommunityProvider.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiCommunityProvider.Ext, jsonSerializerOptions);
            }
        }
    }
}
