// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiCommunityProviderLicense
    /// </summary>
    public partial class EdFiCommunityProviderLicense : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCommunityProviderLicense" /> class.
        /// </summary>
        /// <param name="licenseIdentifier">The unique identifier issued by the licensing organization.</param>
        /// <param name="licensingOrganization">The organization issuing the license.</param>
        /// <param name="communityProviderReference">communityProviderReference</param>
        /// <param name="licenseEffectiveDate">The month, day, and year on which a license is active or becomes effective.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="licenseTypeDescriptor">An indication of the category of the license.</param>
        /// <param name="id">id</param>
        /// <param name="authorizedFacilityCapacity">The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.</param>
        /// <param name="licenseExpirationDate">The month, day, and year on which a license will expire.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="licenseIssueDate">The month, day, and year on which an active license was issued.</param>
        /// <param name="licenseStatusDescriptor">An indication of the status of the license.</param>
        /// <param name="oldestAgeAuthorizedToServe">The oldest age of children a provider is authorized or licensed to serve.</param>
        /// <param name="youngestAgeAuthorizedToServe">The youngest age of children a provider is authorized or licensed to serve.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the CommunityProviderLicense entity.</param>
        [JsonConstructor]
        public EdFiCommunityProviderLicense(string licenseIdentifier, string licensingOrganization, EdFiCommunityProviderReference communityProviderReference, DateOnly licenseEffectiveDate, string licenseTypeDescriptor, Option<string?> id = default, Option<int?> authorizedFacilityCapacity = default, Option<DateOnly?> licenseExpirationDate = default, Option<DateOnly?> licenseIssueDate = default, Option<string?> licenseStatusDescriptor = default, Option<int?> oldestAgeAuthorizedToServe = default, Option<int?> youngestAgeAuthorizedToServe = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            LicenseIdentifier = licenseIdentifier;
            LicensingOrganization = licensingOrganization;
            CommunityProviderReference = communityProviderReference;
            LicenseEffectiveDate = licenseEffectiveDate;
            LicenseTypeDescriptor = licenseTypeDescriptor;
            IdOption = id;
            AuthorizedFacilityCapacityOption = authorizedFacilityCapacity;
            LicenseExpirationDateOption = licenseExpirationDate;
            LicenseIssueDateOption = licenseIssueDate;
            LicenseStatusDescriptorOption = licenseStatusDescriptor;
            OldestAgeAuthorizedToServeOption = oldestAgeAuthorizedToServe;
            YoungestAgeAuthorizedToServeOption = youngestAgeAuthorizedToServe;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The unique identifier issued by the licensing organization.
        /// </summary>
        /// <value>The unique identifier issued by the licensing organization.</value>
        [JsonPropertyName("licenseIdentifier")]
        public string LicenseIdentifier { get; set; }

        /// <summary>
        /// The organization issuing the license.
        /// </summary>
        /// <value>The organization issuing the license.</value>
        [JsonPropertyName("licensingOrganization")]
        public string LicensingOrganization { get; set; }

        /// <summary>
        /// Gets or Sets CommunityProviderReference
        /// </summary>
        [JsonPropertyName("communityProviderReference")]
        public EdFiCommunityProviderReference CommunityProviderReference { get; set; }

        /// <summary>
        /// The month, day, and year on which a license is active or becomes effective.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The month, day, and year on which a license is active or becomes effective.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("licenseEffectiveDate")]
        public DateOnly LicenseEffectiveDate { get; set; }

        /// <summary>
        /// An indication of the category of the license.
        /// </summary>
        /// <value>An indication of the category of the license.</value>
        [JsonPropertyName("licenseTypeDescriptor")]
        public string LicenseTypeDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuthorizedFacilityCapacity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AuthorizedFacilityCapacityOption { get; private set; }

        /// <summary>
        /// The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.
        /// </summary>
        /// <value>The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.</value>
        [JsonPropertyName("authorizedFacilityCapacity")]
        public int? AuthorizedFacilityCapacity { get { return this.AuthorizedFacilityCapacityOption; } set { this.AuthorizedFacilityCapacityOption = new(value); } }

        /// <summary>
        /// Used to track the state of LicenseExpirationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> LicenseExpirationDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which a license will expire.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The month, day, and year on which a license will expire.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("licenseExpirationDate")]
        public DateOnly? LicenseExpirationDate { get { return this.LicenseExpirationDateOption; } set { this.LicenseExpirationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of LicenseIssueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> LicenseIssueDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which an active license was issued.
        /// </summary>
        /// <value>The month, day, and year on which an active license was issued.</value>
        [JsonPropertyName("licenseIssueDate")]
        public DateOnly? LicenseIssueDate { get { return this.LicenseIssueDateOption; } set { this.LicenseIssueDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of LicenseStatusDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LicenseStatusDescriptorOption { get; private set; }

        /// <summary>
        /// An indication of the status of the license.
        /// </summary>
        /// <value>An indication of the status of the license.</value>
        [JsonPropertyName("licenseStatusDescriptor")]
        public string? LicenseStatusDescriptor { get { return this.LicenseStatusDescriptorOption; } set { this.LicenseStatusDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of OldestAgeAuthorizedToServe
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OldestAgeAuthorizedToServeOption { get; private set; }

        /// <summary>
        /// The oldest age of children a provider is authorized or licensed to serve.
        /// </summary>
        /// <value>The oldest age of children a provider is authorized or licensed to serve.</value>
        [JsonPropertyName("oldestAgeAuthorizedToServe")]
        public int? OldestAgeAuthorizedToServe { get { return this.OldestAgeAuthorizedToServeOption; } set { this.OldestAgeAuthorizedToServeOption = new(value); } }

        /// <summary>
        /// Used to track the state of YoungestAgeAuthorizedToServe
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> YoungestAgeAuthorizedToServeOption { get; private set; }

        /// <summary>
        /// The youngest age of children a provider is authorized or licensed to serve.
        /// </summary>
        /// <value>The youngest age of children a provider is authorized or licensed to serve.</value>
        [JsonPropertyName("youngestAgeAuthorizedToServe")]
        public int? YoungestAgeAuthorizedToServe { get { return this.YoungestAgeAuthorizedToServeOption; } set { this.YoungestAgeAuthorizedToServeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the CommunityProviderLicense entity.
        /// </summary>
        /// <value>Extensions to the CommunityProviderLicense entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCommunityProviderLicense {\n");
            sb.Append("  LicenseIdentifier: ").Append(LicenseIdentifier).Append("\n");
            sb.Append("  LicensingOrganization: ").Append(LicensingOrganization).Append("\n");
            sb.Append("  CommunityProviderReference: ").Append(CommunityProviderReference).Append("\n");
            sb.Append("  LicenseEffectiveDate: ").Append(LicenseEffectiveDate).Append("\n");
            sb.Append("  LicenseTypeDescriptor: ").Append(LicenseTypeDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AuthorizedFacilityCapacity: ").Append(AuthorizedFacilityCapacity).Append("\n");
            sb.Append("  LicenseExpirationDate: ").Append(LicenseExpirationDate).Append("\n");
            sb.Append("  LicenseIssueDate: ").Append(LicenseIssueDate).Append("\n");
            sb.Append("  LicenseStatusDescriptor: ").Append(LicenseStatusDescriptor).Append("\n");
            sb.Append("  OldestAgeAuthorizedToServe: ").Append(OldestAgeAuthorizedToServe).Append("\n");
            sb.Append("  YoungestAgeAuthorizedToServe: ").Append(YoungestAgeAuthorizedToServe).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LicenseIdentifier (string) maxLength
            if (this.LicenseIdentifier != null && this.LicenseIdentifier.Length > 36)
            {
                yield return new ValidationResult("Invalid value for LicenseIdentifier, length must be less than 36.", new [] { "LicenseIdentifier" });
            }

            // LicensingOrganization (string) maxLength
            if (this.LicensingOrganization != null && this.LicensingOrganization.Length > 75)
            {
                yield return new ValidationResult("Invalid value for LicensingOrganization, length must be less than 75.", new [] { "LicensingOrganization" });
            }

            // LicenseTypeDescriptor (string) maxLength
            if (this.LicenseTypeDescriptor != null && this.LicenseTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LicenseTypeDescriptor, length must be less than 306.", new [] { "LicenseTypeDescriptor" });
            }

            // LicenseStatusDescriptor (string) maxLength
            if (this.LicenseStatusDescriptor != null && this.LicenseStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LicenseStatusDescriptor, length must be less than 306.", new [] { "LicenseStatusDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiCommunityProviderLicense" />
    /// </summary>
    public class EdFiCommunityProviderLicenseJsonConverter : JsonConverter<EdFiCommunityProviderLicense>
    {
        /// <summary>
        /// The format to use to serialize LicenseEffectiveDate
        /// </summary>
        public static string LicenseEffectiveDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LicenseExpirationDate
        /// </summary>
        public static string LicenseExpirationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LicenseIssueDate
        /// </summary>
        public static string LicenseIssueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiCommunityProviderLicense" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiCommunityProviderLicense Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> licenseIdentifier = default;
            Option<string?> licensingOrganization = default;
            Option<EdFiCommunityProviderReference?> communityProviderReference = default;
            Option<DateOnly?> licenseEffectiveDate = default;
            Option<string?> licenseTypeDescriptor = default;
            Option<string?> id = default;
            Option<int?> authorizedFacilityCapacity = default;
            Option<DateOnly?> licenseExpirationDate = default;
            Option<DateOnly?> licenseIssueDate = default;
            Option<string?> licenseStatusDescriptor = default;
            Option<int?> oldestAgeAuthorizedToServe = default;
            Option<int?> youngestAgeAuthorizedToServe = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "licenseIdentifier":
                            licenseIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "licensingOrganization":
                            licensingOrganization = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "communityProviderReference":
                            communityProviderReference = new Option<EdFiCommunityProviderReference?>(JsonSerializer.Deserialize<EdFiCommunityProviderReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "licenseEffectiveDate":
                            licenseEffectiveDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "licenseTypeDescriptor":
                            licenseTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "authorizedFacilityCapacity":
                            authorizedFacilityCapacity = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "licenseExpirationDate":
                            licenseExpirationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "licenseIssueDate":
                            licenseIssueDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "licenseStatusDescriptor":
                            licenseStatusDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "oldestAgeAuthorizedToServe":
                            oldestAgeAuthorizedToServe = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "youngestAgeAuthorizedToServe":
                            youngestAgeAuthorizedToServe = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!licenseIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiCommunityProviderLicense.", nameof(licenseIdentifier));

            if (!licensingOrganization.IsSet)
                throw new ArgumentException("Property is required for class EdFiCommunityProviderLicense.", nameof(licensingOrganization));

            if (!communityProviderReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiCommunityProviderLicense.", nameof(communityProviderReference));

            if (!licenseEffectiveDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiCommunityProviderLicense.", nameof(licenseEffectiveDate));

            if (!licenseTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiCommunityProviderLicense.", nameof(licenseTypeDescriptor));

            if (licenseIdentifier.IsSet && licenseIdentifier.Value == null)
                throw new ArgumentNullException(nameof(licenseIdentifier), "Property is not nullable for class EdFiCommunityProviderLicense.");

            if (licensingOrganization.IsSet && licensingOrganization.Value == null)
                throw new ArgumentNullException(nameof(licensingOrganization), "Property is not nullable for class EdFiCommunityProviderLicense.");

            if (communityProviderReference.IsSet && communityProviderReference.Value == null)
                throw new ArgumentNullException(nameof(communityProviderReference), "Property is not nullable for class EdFiCommunityProviderLicense.");

            if (licenseEffectiveDate.IsSet && licenseEffectiveDate.Value == null)
                throw new ArgumentNullException(nameof(licenseEffectiveDate), "Property is not nullable for class EdFiCommunityProviderLicense.");

            if (licenseTypeDescriptor.IsSet && licenseTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(licenseTypeDescriptor), "Property is not nullable for class EdFiCommunityProviderLicense.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiCommunityProviderLicense.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiCommunityProviderLicense.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiCommunityProviderLicense.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiCommunityProviderLicense.");

            return new EdFiCommunityProviderLicense(licenseIdentifier.Value!, licensingOrganization.Value!, communityProviderReference.Value!, licenseEffectiveDate.Value!.Value!, licenseTypeDescriptor.Value!, id, authorizedFacilityCapacity, licenseExpirationDate, licenseIssueDate, licenseStatusDescriptor, oldestAgeAuthorizedToServe, youngestAgeAuthorizedToServe, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiCommunityProviderLicense" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCommunityProviderLicense"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiCommunityProviderLicense edFiCommunityProviderLicense, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiCommunityProviderLicense, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiCommunityProviderLicense" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCommunityProviderLicense"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiCommunityProviderLicense edFiCommunityProviderLicense, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiCommunityProviderLicense.LicenseIdentifier == null)
                throw new ArgumentNullException(nameof(edFiCommunityProviderLicense.LicenseIdentifier), "Property is required for class EdFiCommunityProviderLicense.");

            if (edFiCommunityProviderLicense.LicensingOrganization == null)
                throw new ArgumentNullException(nameof(edFiCommunityProviderLicense.LicensingOrganization), "Property is required for class EdFiCommunityProviderLicense.");

            if (edFiCommunityProviderLicense.CommunityProviderReference == null)
                throw new ArgumentNullException(nameof(edFiCommunityProviderLicense.CommunityProviderReference), "Property is required for class EdFiCommunityProviderLicense.");

            if (edFiCommunityProviderLicense.LicenseTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiCommunityProviderLicense.LicenseTypeDescriptor), "Property is required for class EdFiCommunityProviderLicense.");

            if (edFiCommunityProviderLicense.IdOption.IsSet && edFiCommunityProviderLicense.Id == null)
                throw new ArgumentNullException(nameof(edFiCommunityProviderLicense.Id), "Property is required for class EdFiCommunityProviderLicense.");

            if (edFiCommunityProviderLicense.EtagOption.IsSet && edFiCommunityProviderLicense.Etag == null)
                throw new ArgumentNullException(nameof(edFiCommunityProviderLicense.Etag), "Property is required for class EdFiCommunityProviderLicense.");

            if (edFiCommunityProviderLicense.ExtOption.IsSet && edFiCommunityProviderLicense.Ext == null)
                throw new ArgumentNullException(nameof(edFiCommunityProviderLicense.Ext), "Property is required for class EdFiCommunityProviderLicense.");

            writer.WriteString("licenseIdentifier", edFiCommunityProviderLicense.LicenseIdentifier);

            writer.WriteString("licensingOrganization", edFiCommunityProviderLicense.LicensingOrganization);

            writer.WritePropertyName("communityProviderReference");
            JsonSerializer.Serialize(writer, edFiCommunityProviderLicense.CommunityProviderReference, jsonSerializerOptions);
            writer.WriteString("licenseEffectiveDate", edFiCommunityProviderLicense.LicenseEffectiveDate.ToString(LicenseEffectiveDateFormat));

            writer.WriteString("licenseTypeDescriptor", edFiCommunityProviderLicense.LicenseTypeDescriptor);

            if (edFiCommunityProviderLicense.IdOption.IsSet)
                writer.WriteString("id", edFiCommunityProviderLicense.Id);

            if (edFiCommunityProviderLicense.AuthorizedFacilityCapacityOption.IsSet)
                if (edFiCommunityProviderLicense.AuthorizedFacilityCapacityOption.Value != null)
                    writer.WriteNumber("authorizedFacilityCapacity", edFiCommunityProviderLicense.AuthorizedFacilityCapacityOption.Value!.Value);
                else
                    writer.WriteNull("authorizedFacilityCapacity");

            if (edFiCommunityProviderLicense.LicenseExpirationDateOption.IsSet)
                if (edFiCommunityProviderLicense.LicenseExpirationDateOption.Value != null)
                    writer.WriteString("licenseExpirationDate", edFiCommunityProviderLicense.LicenseExpirationDateOption.Value!.Value.ToString(LicenseExpirationDateFormat));
                else
                    writer.WriteNull("licenseExpirationDate");

            if (edFiCommunityProviderLicense.LicenseIssueDateOption.IsSet)
                if (edFiCommunityProviderLicense.LicenseIssueDateOption.Value != null)
                    writer.WriteString("licenseIssueDate", edFiCommunityProviderLicense.LicenseIssueDateOption.Value!.Value.ToString(LicenseIssueDateFormat));
                else
                    writer.WriteNull("licenseIssueDate");

            if (edFiCommunityProviderLicense.LicenseStatusDescriptorOption.IsSet)
                if (edFiCommunityProviderLicense.LicenseStatusDescriptorOption.Value != null)
                    writer.WriteString("licenseStatusDescriptor", edFiCommunityProviderLicense.LicenseStatusDescriptor);
                else
                    writer.WriteNull("licenseStatusDescriptor");

            if (edFiCommunityProviderLicense.OldestAgeAuthorizedToServeOption.IsSet)
                if (edFiCommunityProviderLicense.OldestAgeAuthorizedToServeOption.Value != null)
                    writer.WriteNumber("oldestAgeAuthorizedToServe", edFiCommunityProviderLicense.OldestAgeAuthorizedToServeOption.Value!.Value);
                else
                    writer.WriteNull("oldestAgeAuthorizedToServe");

            if (edFiCommunityProviderLicense.YoungestAgeAuthorizedToServeOption.IsSet)
                if (edFiCommunityProviderLicense.YoungestAgeAuthorizedToServeOption.Value != null)
                    writer.WriteNumber("youngestAgeAuthorizedToServe", edFiCommunityProviderLicense.YoungestAgeAuthorizedToServeOption.Value!.Value);
                else
                    writer.WriteNull("youngestAgeAuthorizedToServe");

            if (edFiCommunityProviderLicense.EtagOption.IsSet)
                writer.WriteString("_etag", edFiCommunityProviderLicense.Etag);

            if (edFiCommunityProviderLicense.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiCommunityProviderLicense.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiCommunityProviderLicense.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiCommunityProviderLicense.Ext, jsonSerializerOptions);
            }
        }
    }
}
