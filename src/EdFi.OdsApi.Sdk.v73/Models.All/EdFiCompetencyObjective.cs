// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiCompetencyObjective
    /// </summary>
    public partial class EdFiCompetencyObjective : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCompetencyObjective" /> class.
        /// </summary>
        /// <param name="objective">The designated title of the competency objective.</param>
        /// <param name="objectiveGradeLevelDescriptor">The grade level for which the competency objective is targeted.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="id">id</param>
        /// <param name="competencyObjectiveId">The Identifier for the competency objective.</param>
        /// <param name="description">The description of the student competency objective.</param>
        /// <param name="successCriteria">One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the competency objective.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the CompetencyObjective entity.</param>
        [JsonConstructor]
        public EdFiCompetencyObjective(string objective, string objectiveGradeLevelDescriptor, EdFiEducationOrganizationReference educationOrganizationReference, Option<string?> id = default, Option<string?> competencyObjectiveId = default, Option<string?> description = default, Option<string?> successCriteria = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            Objective = objective;
            ObjectiveGradeLevelDescriptor = objectiveGradeLevelDescriptor;
            EducationOrganizationReference = educationOrganizationReference;
            IdOption = id;
            CompetencyObjectiveIdOption = competencyObjectiveId;
            DescriptionOption = description;
            SuccessCriteriaOption = successCriteria;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The designated title of the competency objective.
        /// </summary>
        /// <value>The designated title of the competency objective.</value>
        [JsonPropertyName("objective")]
        public string Objective { get; set; }

        /// <summary>
        /// The grade level for which the competency objective is targeted.
        /// </summary>
        /// <value>The grade level for which the competency objective is targeted.</value>
        [JsonPropertyName("objectiveGradeLevelDescriptor")]
        public string ObjectiveGradeLevelDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CompetencyObjectiveId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CompetencyObjectiveIdOption { get; private set; }

        /// <summary>
        /// The Identifier for the competency objective.
        /// </summary>
        /// <value>The Identifier for the competency objective.</value>
        [JsonPropertyName("competencyObjectiveId")]
        public string? CompetencyObjectiveId { get { return this.CompetencyObjectiveIdOption; } set { this.CompetencyObjectiveIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the student competency objective.
        /// </summary>
        /// <value>The description of the student competency objective.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of SuccessCriteria
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SuccessCriteriaOption { get; private set; }

        /// <summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the competency objective.
        /// </summary>
        /// <value>One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the competency objective.</value>
        [JsonPropertyName("successCriteria")]
        public string? SuccessCriteria { get { return this.SuccessCriteriaOption; } set { this.SuccessCriteriaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the CompetencyObjective entity.
        /// </summary>
        /// <value>Extensions to the CompetencyObjective entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCompetencyObjective {\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  ObjectiveGradeLevelDescriptor: ").Append(ObjectiveGradeLevelDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompetencyObjectiveId: ").Append(CompetencyObjectiveId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SuccessCriteria: ").Append(SuccessCriteria).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Objective (string) maxLength
            if (this.Objective != null && this.Objective.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Objective, length must be less than 60.", new [] { "Objective" });
            }

            // ObjectiveGradeLevelDescriptor (string) maxLength
            if (this.ObjectiveGradeLevelDescriptor != null && this.ObjectiveGradeLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ObjectiveGradeLevelDescriptor, length must be less than 306.", new [] { "ObjectiveGradeLevelDescriptor" });
            }

            // CompetencyObjectiveId (string) maxLength
            if (this.CompetencyObjectiveId != null && this.CompetencyObjectiveId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CompetencyObjectiveId, length must be less than 60.", new [] { "CompetencyObjectiveId" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // SuccessCriteria (string) maxLength
            if (this.SuccessCriteria != null && this.SuccessCriteria.Length > 150)
            {
                yield return new ValidationResult("Invalid value for SuccessCriteria, length must be less than 150.", new [] { "SuccessCriteria" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiCompetencyObjective" />
    /// </summary>
    public class EdFiCompetencyObjectiveJsonConverter : JsonConverter<EdFiCompetencyObjective>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiCompetencyObjective" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiCompetencyObjective Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> objective = default;
            Option<string?> objectiveGradeLevelDescriptor = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<string?> id = default;
            Option<string?> competencyObjectiveId = default;
            Option<string?> description = default;
            Option<string?> successCriteria = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "objective":
                            objective = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "objectiveGradeLevelDescriptor":
                            objectiveGradeLevelDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "competencyObjectiveId":
                            competencyObjectiveId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "successCriteria":
                            successCriteria = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!objective.IsSet)
                throw new ArgumentException("Property is required for class EdFiCompetencyObjective.", nameof(objective));

            if (!objectiveGradeLevelDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiCompetencyObjective.", nameof(objectiveGradeLevelDescriptor));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiCompetencyObjective.", nameof(educationOrganizationReference));

            if (objective.IsSet && objective.Value == null)
                throw new ArgumentNullException(nameof(objective), "Property is not nullable for class EdFiCompetencyObjective.");

            if (objectiveGradeLevelDescriptor.IsSet && objectiveGradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(objectiveGradeLevelDescriptor), "Property is not nullable for class EdFiCompetencyObjective.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiCompetencyObjective.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiCompetencyObjective.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiCompetencyObjective.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiCompetencyObjective.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiCompetencyObjective.");

            return new EdFiCompetencyObjective(objective.Value!, objectiveGradeLevelDescriptor.Value!, educationOrganizationReference.Value!, id, competencyObjectiveId, description, successCriteria, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiCompetencyObjective" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCompetencyObjective"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiCompetencyObjective edFiCompetencyObjective, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiCompetencyObjective, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiCompetencyObjective" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCompetencyObjective"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiCompetencyObjective edFiCompetencyObjective, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiCompetencyObjective.Objective == null)
                throw new ArgumentNullException(nameof(edFiCompetencyObjective.Objective), "Property is required for class EdFiCompetencyObjective.");

            if (edFiCompetencyObjective.ObjectiveGradeLevelDescriptor == null)
                throw new ArgumentNullException(nameof(edFiCompetencyObjective.ObjectiveGradeLevelDescriptor), "Property is required for class EdFiCompetencyObjective.");

            if (edFiCompetencyObjective.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiCompetencyObjective.EducationOrganizationReference), "Property is required for class EdFiCompetencyObjective.");

            if (edFiCompetencyObjective.IdOption.IsSet && edFiCompetencyObjective.Id == null)
                throw new ArgumentNullException(nameof(edFiCompetencyObjective.Id), "Property is required for class EdFiCompetencyObjective.");

            if (edFiCompetencyObjective.EtagOption.IsSet && edFiCompetencyObjective.Etag == null)
                throw new ArgumentNullException(nameof(edFiCompetencyObjective.Etag), "Property is required for class EdFiCompetencyObjective.");

            if (edFiCompetencyObjective.ExtOption.IsSet && edFiCompetencyObjective.Ext == null)
                throw new ArgumentNullException(nameof(edFiCompetencyObjective.Ext), "Property is required for class EdFiCompetencyObjective.");

            writer.WriteString("objective", edFiCompetencyObjective.Objective);

            writer.WriteString("objectiveGradeLevelDescriptor", edFiCompetencyObjective.ObjectiveGradeLevelDescriptor);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiCompetencyObjective.EducationOrganizationReference, jsonSerializerOptions);
            if (edFiCompetencyObjective.IdOption.IsSet)
                writer.WriteString("id", edFiCompetencyObjective.Id);

            if (edFiCompetencyObjective.CompetencyObjectiveIdOption.IsSet)
                if (edFiCompetencyObjective.CompetencyObjectiveIdOption.Value != null)
                    writer.WriteString("competencyObjectiveId", edFiCompetencyObjective.CompetencyObjectiveId);
                else
                    writer.WriteNull("competencyObjectiveId");

            if (edFiCompetencyObjective.DescriptionOption.IsSet)
                if (edFiCompetencyObjective.DescriptionOption.Value != null)
                    writer.WriteString("description", edFiCompetencyObjective.Description);
                else
                    writer.WriteNull("description");

            if (edFiCompetencyObjective.SuccessCriteriaOption.IsSet)
                if (edFiCompetencyObjective.SuccessCriteriaOption.Value != null)
                    writer.WriteString("successCriteria", edFiCompetencyObjective.SuccessCriteria);
                else
                    writer.WriteNull("successCriteria");

            if (edFiCompetencyObjective.EtagOption.IsSet)
                writer.WriteString("_etag", edFiCompetencyObjective.Etag);

            if (edFiCompetencyObjective.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiCompetencyObjective.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiCompetencyObjective.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiCompetencyObjective.Ext, jsonSerializerOptions);
            }
        }
    }
}
