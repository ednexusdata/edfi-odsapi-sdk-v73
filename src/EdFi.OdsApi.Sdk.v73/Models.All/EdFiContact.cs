// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiContact
    /// </summary>
    public partial class EdFiContact : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiContact" /> class.
        /// </summary>
        /// <param name="contactUniqueId">A unique alphanumeric code assigned to a contact.</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</param>
        /// <param name="lastSurname">The name borne in common by members of a family.</param>
        /// <param name="id">id</param>
        /// <param name="personReference">personReference</param>
        /// <param name="addresses">An unordered collection of contactAddresses. Contact&#39;s address, if different from the student address.</param>
        /// <param name="electronicMails">An unordered collection of contactElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</param>
        /// <param name="genderIdentity">The gender the contact identifies themselves as.</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).</param>
        /// <param name="internationalAddresses">An unordered collection of contactInternationalAddresses. The set of elements that describes an international address.</param>
        /// <param name="languages">An unordered collection of contactLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface.</param>
        /// <param name="maidenName">The individual&#39;s maiden name.</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony.</param>
        /// <param name="otherNames">An unordered collection of contactOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of contactPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual.</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name</param>
        /// <param name="sexDescriptor">A person&#39;s birth sex.</param>
        /// <param name="telephones">An unordered collection of contactTelephones. The 10-digit telephone number, including the area code, for the person.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Contact entity.</param>
        [JsonConstructor]
        public EdFiContact(string contactUniqueId, string firstName, string lastSurname, Option<string?> id = default, Option<EdFiPersonReference?> personReference = default, Option<List<EdFiContactAddress>?> addresses = default, Option<List<EdFiContactElectronicMail>?> electronicMails = default, Option<string?> genderIdentity = default, Option<string?> generationCodeSuffix = default, Option<string?> highestCompletedLevelOfEducationDescriptor = default, Option<List<EdFiContactInternationalAddress>?> internationalAddresses = default, Option<List<EdFiContactLanguage>?> languages = default, Option<string?> loginId = default, Option<string?> maidenName = default, Option<string?> middleName = default, Option<List<EdFiContactOtherName>?> otherNames = default, Option<List<EdFiContactPersonalIdentificationDocument>?> personalIdentificationDocuments = default, Option<string?> personalTitlePrefix = default, Option<string?> preferredFirstName = default, Option<string?> preferredLastSurname = default, Option<string?> sexDescriptor = default, Option<List<EdFiContactTelephone>?> telephones = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            ContactUniqueId = contactUniqueId;
            FirstName = firstName;
            LastSurname = lastSurname;
            IdOption = id;
            PersonReferenceOption = personReference;
            AddressesOption = addresses;
            ElectronicMailsOption = electronicMails;
            GenderIdentityOption = genderIdentity;
            GenerationCodeSuffixOption = generationCodeSuffix;
            HighestCompletedLevelOfEducationDescriptorOption = highestCompletedLevelOfEducationDescriptor;
            InternationalAddressesOption = internationalAddresses;
            LanguagesOption = languages;
            LoginIdOption = loginId;
            MaidenNameOption = maidenName;
            MiddleNameOption = middleName;
            OtherNamesOption = otherNames;
            PersonalIdentificationDocumentsOption = personalIdentificationDocuments;
            PersonalTitlePrefixOption = personalTitlePrefix;
            PreferredFirstNameOption = preferredFirstName;
            PreferredLastSurnameOption = preferredLastSurname;
            SexDescriptorOption = sexDescriptor;
            TelephonesOption = telephones;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique alphanumeric code assigned to a contact.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a contact.</value>
        [JsonPropertyName("contactUniqueId")]
        public string ContactUniqueId { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [JsonPropertyName("lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiPersonReference?> PersonReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [JsonPropertyName("personReference")]
        public EdFiPersonReference? PersonReference { get { return this.PersonReferenceOption; } set { this.PersonReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Addresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiContactAddress>?> AddressesOption { get; private set; }

        /// <summary>
        /// An unordered collection of contactAddresses. Contact&#39;s address, if different from the student address.
        /// </summary>
        /// <value>An unordered collection of contactAddresses. Contact&#39;s address, if different from the student address.</value>
        [JsonPropertyName("addresses")]
        public List<EdFiContactAddress>? Addresses { get { return this.AddressesOption; } set { this.AddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ElectronicMails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiContactElectronicMail>?> ElectronicMailsOption { get; private set; }

        /// <summary>
        /// An unordered collection of contactElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>An unordered collection of contactElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [JsonPropertyName("electronicMails")]
        public List<EdFiContactElectronicMail>? ElectronicMails { get { return this.ElectronicMailsOption; } set { this.ElectronicMailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GenderIdentity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GenderIdentityOption { get; private set; }

        /// <summary>
        /// The gender the contact identifies themselves as.
        /// </summary>
        /// <value>The gender the contact identifies themselves as.</value>
        [JsonPropertyName("genderIdentity")]
        public string? GenderIdentity { get { return this.GenderIdentityOption; } set { this.GenderIdentityOption = new(value); } }

        /// <summary>
        /// Used to track the state of GenerationCodeSuffix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GenerationCodeSuffixOption { get; private set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [JsonPropertyName("generationCodeSuffix")]
        public string? GenerationCodeSuffix { get { return this.GenerationCodeSuffixOption; } set { this.GenerationCodeSuffixOption = new(value); } }

        /// <summary>
        /// Used to track the state of HighestCompletedLevelOfEducationDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HighestCompletedLevelOfEducationDescriptorOption { get; private set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        /// <value>The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).</value>
        [JsonPropertyName("highestCompletedLevelOfEducationDescriptor")]
        public string? HighestCompletedLevelOfEducationDescriptor { get { return this.HighestCompletedLevelOfEducationDescriptorOption; } set { this.HighestCompletedLevelOfEducationDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of InternationalAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiContactInternationalAddress>?> InternationalAddressesOption { get; private set; }

        /// <summary>
        /// An unordered collection of contactInternationalAddresses. The set of elements that describes an international address.
        /// </summary>
        /// <value>An unordered collection of contactInternationalAddresses. The set of elements that describes an international address.</value>
        [JsonPropertyName("internationalAddresses")]
        public List<EdFiContactInternationalAddress>? InternationalAddresses { get { return this.InternationalAddressesOption; } set { this.InternationalAddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Languages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiContactLanguage>?> LanguagesOption { get; private set; }

        /// <summary>
        /// An unordered collection of contactLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.
        /// </summary>
        /// <value>An unordered collection of contactLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.</value>
        [JsonPropertyName("languages")]
        public List<EdFiContactLanguage>? Languages { get { return this.LanguagesOption; } set { this.LanguagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of LoginId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LoginIdOption { get; private set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        /// <value>The login ID for the user; used for security access control interface.</value>
        [JsonPropertyName("loginId")]
        public string? LoginId { get { return this.LoginIdOption; } set { this.LoginIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaidenName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MaidenNameOption { get; private set; }

        /// <summary>
        /// The individual&#39;s maiden name.
        /// </summary>
        /// <value>The individual&#39;s maiden name.</value>
        [JsonPropertyName("maidenName")]
        public string? MaidenName { get { return this.MaidenNameOption; } set { this.MaidenNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of MiddleName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MiddleNameOption { get; private set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [JsonPropertyName("middleName")]
        public string? MiddleName { get { return this.MiddleNameOption; } set { this.MiddleNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of OtherNames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiContactOtherName>?> OtherNamesOption { get; private set; }

        /// <summary>
        /// An unordered collection of contactOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
        /// </summary>
        /// <value>An unordered collection of contactOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</value>
        [JsonPropertyName("otherNames")]
        public List<EdFiContactOtherName>? OtherNames { get { return this.OtherNamesOption; } set { this.OtherNamesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonalIdentificationDocuments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiContactPersonalIdentificationDocument>?> PersonalIdentificationDocumentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of contactPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of contactPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [JsonPropertyName("personalIdentificationDocuments")]
        public List<EdFiContactPersonalIdentificationDocument>? PersonalIdentificationDocuments { get { return this.PersonalIdentificationDocumentsOption; } set { this.PersonalIdentificationDocumentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonalTitlePrefix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PersonalTitlePrefixOption { get; private set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the individual.</value>
        [JsonPropertyName("personalTitlePrefix")]
        public string? PersonalTitlePrefix { get { return this.PersonalTitlePrefixOption; } set { this.PersonalTitlePrefixOption = new(value); } }

        /// <summary>
        /// Used to track the state of PreferredFirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreferredFirstNameOption { get; private set; }

        /// <summary>
        /// The first name the individual prefers, if different from their legal first name
        /// </summary>
        /// <value>The first name the individual prefers, if different from their legal first name</value>
        [JsonPropertyName("preferredFirstName")]
        public string? PreferredFirstName { get { return this.PreferredFirstNameOption; } set { this.PreferredFirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of PreferredLastSurname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreferredLastSurnameOption { get; private set; }

        /// <summary>
        /// The last name the individual prefers, if different from their legal last name
        /// </summary>
        /// <value>The last name the individual prefers, if different from their legal last name</value>
        [JsonPropertyName("preferredLastSurname")]
        public string? PreferredLastSurname { get { return this.PreferredLastSurnameOption; } set { this.PreferredLastSurnameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SexDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SexDescriptorOption { get; private set; }

        /// <summary>
        /// A person&#39;s birth sex.
        /// </summary>
        /// <value>A person&#39;s birth sex.</value>
        [JsonPropertyName("sexDescriptor")]
        public string? SexDescriptor { get { return this.SexDescriptorOption; } set { this.SexDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Telephones
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiContactTelephone>?> TelephonesOption { get; private set; }

        /// <summary>
        /// An unordered collection of contactTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of contactTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [JsonPropertyName("telephones")]
        public List<EdFiContactTelephone>? Telephones { get { return this.TelephonesOption; } set { this.TelephonesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Contact entity.
        /// </summary>
        /// <value>Extensions to the Contact entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiContact {\n");
            sb.Append("  ContactUniqueId: ").Append(ContactUniqueId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            sb.Append("  GenderIdentity: ").Append(GenderIdentity).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  HighestCompletedLevelOfEducationDescriptor: ").Append(HighestCompletedLevelOfEducationDescriptor).Append("\n");
            sb.Append("  InternationalAddresses: ").Append(InternationalAddresses).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  OtherNames: ").Append(OtherNames).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  PreferredFirstName: ").Append(PreferredFirstName).Append("\n");
            sb.Append("  PreferredLastSurname: ").Append(PreferredLastSurname).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContactUniqueId (string) maxLength
            if (this.ContactUniqueId != null && this.ContactUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for ContactUniqueId, length must be less than 32.", new [] { "ContactUniqueId" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // LastSurname (string) maxLength
            if (this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // GenderIdentity (string) maxLength
            if (this.GenderIdentity != null && this.GenderIdentity.Length > 60)
            {
                yield return new ValidationResult("Invalid value for GenderIdentity, length must be less than 60.", new [] { "GenderIdentity" });
            }

            // GenerationCodeSuffix (string) maxLength
            if (this.GenerationCodeSuffix != null && this.GenerationCodeSuffix.Length > 10)
            {
                yield return new ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new [] { "GenerationCodeSuffix" });
            }

            // HighestCompletedLevelOfEducationDescriptor (string) maxLength
            if (this.HighestCompletedLevelOfEducationDescriptor != null && this.HighestCompletedLevelOfEducationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for HighestCompletedLevelOfEducationDescriptor, length must be less than 306.", new [] { "HighestCompletedLevelOfEducationDescriptor" });
            }

            // LoginId (string) maxLength
            if (this.LoginId != null && this.LoginId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LoginId, length must be less than 60.", new [] { "LoginId" });
            }

            // MaidenName (string) maxLength
            if (this.MaidenName != null && this.MaidenName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MaidenName, length must be less than 75.", new [] { "MaidenName" });
            }

            // MiddleName (string) maxLength
            if (this.MiddleName != null && this.MiddleName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MiddleName, length must be less than 75.", new [] { "MiddleName" });
            }

            // PersonalTitlePrefix (string) maxLength
            if (this.PersonalTitlePrefix != null && this.PersonalTitlePrefix.Length > 30)
            {
                yield return new ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new [] { "PersonalTitlePrefix" });
            }

            // PreferredFirstName (string) maxLength
            if (this.PreferredFirstName != null && this.PreferredFirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for PreferredFirstName, length must be less than 75.", new [] { "PreferredFirstName" });
            }

            // PreferredLastSurname (string) maxLength
            if (this.PreferredLastSurname != null && this.PreferredLastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for PreferredLastSurname, length must be less than 75.", new [] { "PreferredLastSurname" });
            }

            // SexDescriptor (string) maxLength
            if (this.SexDescriptor != null && this.SexDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SexDescriptor, length must be less than 306.", new [] { "SexDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiContact" />
    /// </summary>
    public class EdFiContactJsonConverter : JsonConverter<EdFiContact>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiContact" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiContact Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> contactUniqueId = default;
            Option<string?> firstName = default;
            Option<string?> lastSurname = default;
            Option<string?> id = default;
            Option<EdFiPersonReference?> personReference = default;
            Option<List<EdFiContactAddress>?> addresses = default;
            Option<List<EdFiContactElectronicMail>?> electronicMails = default;
            Option<string?> genderIdentity = default;
            Option<string?> generationCodeSuffix = default;
            Option<string?> highestCompletedLevelOfEducationDescriptor = default;
            Option<List<EdFiContactInternationalAddress>?> internationalAddresses = default;
            Option<List<EdFiContactLanguage>?> languages = default;
            Option<string?> loginId = default;
            Option<string?> maidenName = default;
            Option<string?> middleName = default;
            Option<List<EdFiContactOtherName>?> otherNames = default;
            Option<List<EdFiContactPersonalIdentificationDocument>?> personalIdentificationDocuments = default;
            Option<string?> personalTitlePrefix = default;
            Option<string?> preferredFirstName = default;
            Option<string?> preferredLastSurname = default;
            Option<string?> sexDescriptor = default;
            Option<List<EdFiContactTelephone>?> telephones = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contactUniqueId":
                            contactUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastSurname":
                            lastSurname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "personReference":
                            personReference = new Option<EdFiPersonReference?>(JsonSerializer.Deserialize<EdFiPersonReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "addresses":
                            addresses = new Option<List<EdFiContactAddress>?>(JsonSerializer.Deserialize<List<EdFiContactAddress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "electronicMails":
                            electronicMails = new Option<List<EdFiContactElectronicMail>?>(JsonSerializer.Deserialize<List<EdFiContactElectronicMail>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "genderIdentity":
                            genderIdentity = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "generationCodeSuffix":
                            generationCodeSuffix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "highestCompletedLevelOfEducationDescriptor":
                            highestCompletedLevelOfEducationDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "internationalAddresses":
                            internationalAddresses = new Option<List<EdFiContactInternationalAddress>?>(JsonSerializer.Deserialize<List<EdFiContactInternationalAddress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "languages":
                            languages = new Option<List<EdFiContactLanguage>?>(JsonSerializer.Deserialize<List<EdFiContactLanguage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "loginId":
                            loginId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "maidenName":
                            maidenName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "middleName":
                            middleName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "otherNames":
                            otherNames = new Option<List<EdFiContactOtherName>?>(JsonSerializer.Deserialize<List<EdFiContactOtherName>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "personalIdentificationDocuments":
                            personalIdentificationDocuments = new Option<List<EdFiContactPersonalIdentificationDocument>?>(JsonSerializer.Deserialize<List<EdFiContactPersonalIdentificationDocument>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "personalTitlePrefix":
                            personalTitlePrefix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "preferredFirstName":
                            preferredFirstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "preferredLastSurname":
                            preferredLastSurname = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sexDescriptor":
                            sexDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "telephones":
                            telephones = new Option<List<EdFiContactTelephone>?>(JsonSerializer.Deserialize<List<EdFiContactTelephone>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!contactUniqueId.IsSet)
                throw new ArgumentException("Property is required for class EdFiContact.", nameof(contactUniqueId));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class EdFiContact.", nameof(firstName));

            if (!lastSurname.IsSet)
                throw new ArgumentException("Property is required for class EdFiContact.", nameof(lastSurname));

            if (contactUniqueId.IsSet && contactUniqueId.Value == null)
                throw new ArgumentNullException(nameof(contactUniqueId), "Property is not nullable for class EdFiContact.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class EdFiContact.");

            if (lastSurname.IsSet && lastSurname.Value == null)
                throw new ArgumentNullException(nameof(lastSurname), "Property is not nullable for class EdFiContact.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiContact.");

            if (personReference.IsSet && personReference.Value == null)
                throw new ArgumentNullException(nameof(personReference), "Property is not nullable for class EdFiContact.");

            if (addresses.IsSet && addresses.Value == null)
                throw new ArgumentNullException(nameof(addresses), "Property is not nullable for class EdFiContact.");

            if (electronicMails.IsSet && electronicMails.Value == null)
                throw new ArgumentNullException(nameof(electronicMails), "Property is not nullable for class EdFiContact.");

            if (internationalAddresses.IsSet && internationalAddresses.Value == null)
                throw new ArgumentNullException(nameof(internationalAddresses), "Property is not nullable for class EdFiContact.");

            if (languages.IsSet && languages.Value == null)
                throw new ArgumentNullException(nameof(languages), "Property is not nullable for class EdFiContact.");

            if (otherNames.IsSet && otherNames.Value == null)
                throw new ArgumentNullException(nameof(otherNames), "Property is not nullable for class EdFiContact.");

            if (personalIdentificationDocuments.IsSet && personalIdentificationDocuments.Value == null)
                throw new ArgumentNullException(nameof(personalIdentificationDocuments), "Property is not nullable for class EdFiContact.");

            if (telephones.IsSet && telephones.Value == null)
                throw new ArgumentNullException(nameof(telephones), "Property is not nullable for class EdFiContact.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiContact.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiContact.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiContact.");

            return new EdFiContact(contactUniqueId.Value!, firstName.Value!, lastSurname.Value!, id, personReference, addresses, electronicMails, genderIdentity, generationCodeSuffix, highestCompletedLevelOfEducationDescriptor, internationalAddresses, languages, loginId, maidenName, middleName, otherNames, personalIdentificationDocuments, personalTitlePrefix, preferredFirstName, preferredLastSurname, sexDescriptor, telephones, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiContact" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiContact"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiContact edFiContact, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiContact, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiContact" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiContact"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiContact edFiContact, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiContact.ContactUniqueId == null)
                throw new ArgumentNullException(nameof(edFiContact.ContactUniqueId), "Property is required for class EdFiContact.");

            if (edFiContact.FirstName == null)
                throw new ArgumentNullException(nameof(edFiContact.FirstName), "Property is required for class EdFiContact.");

            if (edFiContact.LastSurname == null)
                throw new ArgumentNullException(nameof(edFiContact.LastSurname), "Property is required for class EdFiContact.");

            if (edFiContact.IdOption.IsSet && edFiContact.Id == null)
                throw new ArgumentNullException(nameof(edFiContact.Id), "Property is required for class EdFiContact.");

            if (edFiContact.PersonReferenceOption.IsSet && edFiContact.PersonReference == null)
                throw new ArgumentNullException(nameof(edFiContact.PersonReference), "Property is required for class EdFiContact.");

            if (edFiContact.AddressesOption.IsSet && edFiContact.Addresses == null)
                throw new ArgumentNullException(nameof(edFiContact.Addresses), "Property is required for class EdFiContact.");

            if (edFiContact.ElectronicMailsOption.IsSet && edFiContact.ElectronicMails == null)
                throw new ArgumentNullException(nameof(edFiContact.ElectronicMails), "Property is required for class EdFiContact.");

            if (edFiContact.InternationalAddressesOption.IsSet && edFiContact.InternationalAddresses == null)
                throw new ArgumentNullException(nameof(edFiContact.InternationalAddresses), "Property is required for class EdFiContact.");

            if (edFiContact.LanguagesOption.IsSet && edFiContact.Languages == null)
                throw new ArgumentNullException(nameof(edFiContact.Languages), "Property is required for class EdFiContact.");

            if (edFiContact.OtherNamesOption.IsSet && edFiContact.OtherNames == null)
                throw new ArgumentNullException(nameof(edFiContact.OtherNames), "Property is required for class EdFiContact.");

            if (edFiContact.PersonalIdentificationDocumentsOption.IsSet && edFiContact.PersonalIdentificationDocuments == null)
                throw new ArgumentNullException(nameof(edFiContact.PersonalIdentificationDocuments), "Property is required for class EdFiContact.");

            if (edFiContact.TelephonesOption.IsSet && edFiContact.Telephones == null)
                throw new ArgumentNullException(nameof(edFiContact.Telephones), "Property is required for class EdFiContact.");

            if (edFiContact.EtagOption.IsSet && edFiContact.Etag == null)
                throw new ArgumentNullException(nameof(edFiContact.Etag), "Property is required for class EdFiContact.");

            if (edFiContact.ExtOption.IsSet && edFiContact.Ext == null)
                throw new ArgumentNullException(nameof(edFiContact.Ext), "Property is required for class EdFiContact.");

            writer.WriteString("contactUniqueId", edFiContact.ContactUniqueId);

            writer.WriteString("firstName", edFiContact.FirstName);

            writer.WriteString("lastSurname", edFiContact.LastSurname);

            if (edFiContact.IdOption.IsSet)
                writer.WriteString("id", edFiContact.Id);

            if (edFiContact.PersonReferenceOption.IsSet)
            {
                writer.WritePropertyName("personReference");
                JsonSerializer.Serialize(writer, edFiContact.PersonReference, jsonSerializerOptions);
            }
            if (edFiContact.AddressesOption.IsSet)
            {
                writer.WritePropertyName("addresses");
                JsonSerializer.Serialize(writer, edFiContact.Addresses, jsonSerializerOptions);
            }
            if (edFiContact.ElectronicMailsOption.IsSet)
            {
                writer.WritePropertyName("electronicMails");
                JsonSerializer.Serialize(writer, edFiContact.ElectronicMails, jsonSerializerOptions);
            }
            if (edFiContact.GenderIdentityOption.IsSet)
                if (edFiContact.GenderIdentityOption.Value != null)
                    writer.WriteString("genderIdentity", edFiContact.GenderIdentity);
                else
                    writer.WriteNull("genderIdentity");

            if (edFiContact.GenerationCodeSuffixOption.IsSet)
                if (edFiContact.GenerationCodeSuffixOption.Value != null)
                    writer.WriteString("generationCodeSuffix", edFiContact.GenerationCodeSuffix);
                else
                    writer.WriteNull("generationCodeSuffix");

            if (edFiContact.HighestCompletedLevelOfEducationDescriptorOption.IsSet)
                if (edFiContact.HighestCompletedLevelOfEducationDescriptorOption.Value != null)
                    writer.WriteString("highestCompletedLevelOfEducationDescriptor", edFiContact.HighestCompletedLevelOfEducationDescriptor);
                else
                    writer.WriteNull("highestCompletedLevelOfEducationDescriptor");

            if (edFiContact.InternationalAddressesOption.IsSet)
            {
                writer.WritePropertyName("internationalAddresses");
                JsonSerializer.Serialize(writer, edFiContact.InternationalAddresses, jsonSerializerOptions);
            }
            if (edFiContact.LanguagesOption.IsSet)
            {
                writer.WritePropertyName("languages");
                JsonSerializer.Serialize(writer, edFiContact.Languages, jsonSerializerOptions);
            }
            if (edFiContact.LoginIdOption.IsSet)
                if (edFiContact.LoginIdOption.Value != null)
                    writer.WriteString("loginId", edFiContact.LoginId);
                else
                    writer.WriteNull("loginId");

            if (edFiContact.MaidenNameOption.IsSet)
                if (edFiContact.MaidenNameOption.Value != null)
                    writer.WriteString("maidenName", edFiContact.MaidenName);
                else
                    writer.WriteNull("maidenName");

            if (edFiContact.MiddleNameOption.IsSet)
                if (edFiContact.MiddleNameOption.Value != null)
                    writer.WriteString("middleName", edFiContact.MiddleName);
                else
                    writer.WriteNull("middleName");

            if (edFiContact.OtherNamesOption.IsSet)
            {
                writer.WritePropertyName("otherNames");
                JsonSerializer.Serialize(writer, edFiContact.OtherNames, jsonSerializerOptions);
            }
            if (edFiContact.PersonalIdentificationDocumentsOption.IsSet)
            {
                writer.WritePropertyName("personalIdentificationDocuments");
                JsonSerializer.Serialize(writer, edFiContact.PersonalIdentificationDocuments, jsonSerializerOptions);
            }
            if (edFiContact.PersonalTitlePrefixOption.IsSet)
                if (edFiContact.PersonalTitlePrefixOption.Value != null)
                    writer.WriteString("personalTitlePrefix", edFiContact.PersonalTitlePrefix);
                else
                    writer.WriteNull("personalTitlePrefix");

            if (edFiContact.PreferredFirstNameOption.IsSet)
                if (edFiContact.PreferredFirstNameOption.Value != null)
                    writer.WriteString("preferredFirstName", edFiContact.PreferredFirstName);
                else
                    writer.WriteNull("preferredFirstName");

            if (edFiContact.PreferredLastSurnameOption.IsSet)
                if (edFiContact.PreferredLastSurnameOption.Value != null)
                    writer.WriteString("preferredLastSurname", edFiContact.PreferredLastSurname);
                else
                    writer.WriteNull("preferredLastSurname");

            if (edFiContact.SexDescriptorOption.IsSet)
                if (edFiContact.SexDescriptorOption.Value != null)
                    writer.WriteString("sexDescriptor", edFiContact.SexDescriptor);
                else
                    writer.WriteNull("sexDescriptor");

            if (edFiContact.TelephonesOption.IsSet)
            {
                writer.WritePropertyName("telephones");
                JsonSerializer.Serialize(writer, edFiContact.Telephones, jsonSerializerOptions);
            }
            if (edFiContact.EtagOption.IsSet)
                writer.WriteString("_etag", edFiContact.Etag);

            if (edFiContact.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiContact.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiContact.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiContact.Ext, jsonSerializerOptions);
            }
        }
    }
}
