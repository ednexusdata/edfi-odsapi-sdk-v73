// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiContactElectronicMail
    /// </summary>
    public partial class EdFiContactElectronicMail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiContactElectronicMail" /> class.
        /// </summary>
        /// <param name="electronicMailTypeDescriptor">The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)</param>
        /// <param name="electronicMailAddress">The electronic mail (e-mail) address listed for an individual or organization.</param>
        /// <param name="doNotPublishIndicator">An indication that the electronic email address should not be published.</param>
        /// <param name="primaryEmailAddressIndicator">An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.</param>
        /// <param name="ext">Extensions to the ContactElectronicMail entity.</param>
        [JsonConstructor]
        public EdFiContactElectronicMail(string electronicMailTypeDescriptor, string electronicMailAddress, Option<bool?> doNotPublishIndicator = default, Option<bool?> primaryEmailAddressIndicator = default, Option<Object?> ext = default)
        {
            ElectronicMailTypeDescriptor = electronicMailTypeDescriptor;
            ElectronicMailAddress = electronicMailAddress;
            DoNotPublishIndicatorOption = doNotPublishIndicator;
            PrimaryEmailAddressIndicatorOption = primaryEmailAddressIndicator;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        /// </summary>
        /// <value>The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)</value>
        [JsonPropertyName("electronicMailTypeDescriptor")]
        public string ElectronicMailTypeDescriptor { get; set; }

        /// <summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        /// </summary>
        /// <value>The electronic mail (e-mail) address listed for an individual or organization.</value>
        [JsonPropertyName("electronicMailAddress")]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// Used to track the state of DoNotPublishIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DoNotPublishIndicatorOption { get; private set; }

        /// <summary>
        /// An indication that the electronic email address should not be published.
        /// </summary>
        /// <value>An indication that the electronic email address should not be published.</value>
        [JsonPropertyName("doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get { return this.DoNotPublishIndicatorOption; } set { this.DoNotPublishIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimaryEmailAddressIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrimaryEmailAddressIndicatorOption { get; private set; }

        /// <summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        /// </summary>
        /// <value>An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.</value>
        [JsonPropertyName("primaryEmailAddressIndicator")]
        public bool? PrimaryEmailAddressIndicator { get { return this.PrimaryEmailAddressIndicatorOption; } set { this.PrimaryEmailAddressIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the ContactElectronicMail entity.
        /// </summary>
        /// <value>Extensions to the ContactElectronicMail entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiContactElectronicMail {\n");
            sb.Append("  ElectronicMailTypeDescriptor: ").Append(ElectronicMailTypeDescriptor).Append("\n");
            sb.Append("  ElectronicMailAddress: ").Append(ElectronicMailAddress).Append("\n");
            sb.Append("  DoNotPublishIndicator: ").Append(DoNotPublishIndicator).Append("\n");
            sb.Append("  PrimaryEmailAddressIndicator: ").Append(PrimaryEmailAddressIndicator).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ElectronicMailTypeDescriptor (string) maxLength
            if (this.ElectronicMailTypeDescriptor != null && this.ElectronicMailTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailTypeDescriptor, length must be less than 306.", new [] { "ElectronicMailTypeDescriptor" });
            }

            // ElectronicMailAddress (string) maxLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length > 128)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be less than 128.", new [] { "ElectronicMailAddress" });
            }

            // ElectronicMailAddress (string) minLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length < 7)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be greater than 7.", new [] { "ElectronicMailAddress" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiContactElectronicMail" />
    /// </summary>
    public class EdFiContactElectronicMailJsonConverter : JsonConverter<EdFiContactElectronicMail>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiContactElectronicMail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiContactElectronicMail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> electronicMailTypeDescriptor = default;
            Option<string?> electronicMailAddress = default;
            Option<bool?> doNotPublishIndicator = default;
            Option<bool?> primaryEmailAddressIndicator = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "electronicMailTypeDescriptor":
                            electronicMailTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "electronicMailAddress":
                            electronicMailAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "doNotPublishIndicator":
                            doNotPublishIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "primaryEmailAddressIndicator":
                            primaryEmailAddressIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!electronicMailTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiContactElectronicMail.", nameof(electronicMailTypeDescriptor));

            if (!electronicMailAddress.IsSet)
                throw new ArgumentException("Property is required for class EdFiContactElectronicMail.", nameof(electronicMailAddress));

            if (electronicMailTypeDescriptor.IsSet && electronicMailTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(electronicMailTypeDescriptor), "Property is not nullable for class EdFiContactElectronicMail.");

            if (electronicMailAddress.IsSet && electronicMailAddress.Value == null)
                throw new ArgumentNullException(nameof(electronicMailAddress), "Property is not nullable for class EdFiContactElectronicMail.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiContactElectronicMail.");

            return new EdFiContactElectronicMail(electronicMailTypeDescriptor.Value!, electronicMailAddress.Value!, doNotPublishIndicator, primaryEmailAddressIndicator, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiContactElectronicMail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiContactElectronicMail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiContactElectronicMail edFiContactElectronicMail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiContactElectronicMail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiContactElectronicMail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiContactElectronicMail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiContactElectronicMail edFiContactElectronicMail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiContactElectronicMail.ElectronicMailTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiContactElectronicMail.ElectronicMailTypeDescriptor), "Property is required for class EdFiContactElectronicMail.");

            if (edFiContactElectronicMail.ElectronicMailAddress == null)
                throw new ArgumentNullException(nameof(edFiContactElectronicMail.ElectronicMailAddress), "Property is required for class EdFiContactElectronicMail.");

            if (edFiContactElectronicMail.ExtOption.IsSet && edFiContactElectronicMail.Ext == null)
                throw new ArgumentNullException(nameof(edFiContactElectronicMail.Ext), "Property is required for class EdFiContactElectronicMail.");

            writer.WriteString("electronicMailTypeDescriptor", edFiContactElectronicMail.ElectronicMailTypeDescriptor);

            writer.WriteString("electronicMailAddress", edFiContactElectronicMail.ElectronicMailAddress);

            if (edFiContactElectronicMail.DoNotPublishIndicatorOption.IsSet)
                if (edFiContactElectronicMail.DoNotPublishIndicatorOption.Value != null)
                    writer.WriteBoolean("doNotPublishIndicator", edFiContactElectronicMail.DoNotPublishIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("doNotPublishIndicator");

            if (edFiContactElectronicMail.PrimaryEmailAddressIndicatorOption.IsSet)
                if (edFiContactElectronicMail.PrimaryEmailAddressIndicatorOption.Value != null)
                    writer.WriteBoolean("primaryEmailAddressIndicator", edFiContactElectronicMail.PrimaryEmailAddressIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("primaryEmailAddressIndicator");

            if (edFiContactElectronicMail.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiContactElectronicMail.Ext, jsonSerializerOptions);
            }
        }
    }
}
