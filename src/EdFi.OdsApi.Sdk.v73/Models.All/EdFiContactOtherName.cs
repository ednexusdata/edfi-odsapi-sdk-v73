// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiContactOtherName
    /// </summary>
    public partial class EdFiContactOtherName : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiContactOtherName" /> class.
        /// </summary>
        /// <param name="otherNameTypeDescriptor">The types of alternate names for an individual.</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</param>
        /// <param name="lastSurname">The name borne in common by members of a family.</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony.</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual.</param>
        /// <param name="ext">Extensions to the ContactOtherName entity.</param>
        [JsonConstructor]
        public EdFiContactOtherName(string otherNameTypeDescriptor, string firstName, string lastSurname, Option<string?> generationCodeSuffix = default, Option<string?> middleName = default, Option<string?> personalTitlePrefix = default, Option<Object?> ext = default)
        {
            OtherNameTypeDescriptor = otherNameTypeDescriptor;
            FirstName = firstName;
            LastSurname = lastSurname;
            GenerationCodeSuffixOption = generationCodeSuffix;
            MiddleNameOption = middleName;
            PersonalTitlePrefixOption = personalTitlePrefix;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The types of alternate names for an individual.
        /// </summary>
        /// <value>The types of alternate names for an individual.</value>
        [JsonPropertyName("otherNameTypeDescriptor")]
        public string OtherNameTypeDescriptor { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [JsonPropertyName("lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// Used to track the state of GenerationCodeSuffix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GenerationCodeSuffixOption { get; private set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [JsonPropertyName("generationCodeSuffix")]
        public string? GenerationCodeSuffix { get { return this.GenerationCodeSuffixOption; } set { this.GenerationCodeSuffixOption = new(value); } }

        /// <summary>
        /// Used to track the state of MiddleName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MiddleNameOption { get; private set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [JsonPropertyName("middleName")]
        public string? MiddleName { get { return this.MiddleNameOption; } set { this.MiddleNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonalTitlePrefix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PersonalTitlePrefixOption { get; private set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the individual.</value>
        [JsonPropertyName("personalTitlePrefix")]
        public string? PersonalTitlePrefix { get { return this.PersonalTitlePrefixOption; } set { this.PersonalTitlePrefixOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the ContactOtherName entity.
        /// </summary>
        /// <value>Extensions to the ContactOtherName entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiContactOtherName {\n");
            sb.Append("  OtherNameTypeDescriptor: ").Append(OtherNameTypeDescriptor).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OtherNameTypeDescriptor (string) maxLength
            if (this.OtherNameTypeDescriptor != null && this.OtherNameTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for OtherNameTypeDescriptor, length must be less than 306.", new [] { "OtherNameTypeDescriptor" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // LastSurname (string) maxLength
            if (this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // GenerationCodeSuffix (string) maxLength
            if (this.GenerationCodeSuffix != null && this.GenerationCodeSuffix.Length > 10)
            {
                yield return new ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new [] { "GenerationCodeSuffix" });
            }

            // MiddleName (string) maxLength
            if (this.MiddleName != null && this.MiddleName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MiddleName, length must be less than 75.", new [] { "MiddleName" });
            }

            // PersonalTitlePrefix (string) maxLength
            if (this.PersonalTitlePrefix != null && this.PersonalTitlePrefix.Length > 30)
            {
                yield return new ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new [] { "PersonalTitlePrefix" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiContactOtherName" />
    /// </summary>
    public class EdFiContactOtherNameJsonConverter : JsonConverter<EdFiContactOtherName>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiContactOtherName" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiContactOtherName Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> otherNameTypeDescriptor = default;
            Option<string?> firstName = default;
            Option<string?> lastSurname = default;
            Option<string?> generationCodeSuffix = default;
            Option<string?> middleName = default;
            Option<string?> personalTitlePrefix = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "otherNameTypeDescriptor":
                            otherNameTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastSurname":
                            lastSurname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "generationCodeSuffix":
                            generationCodeSuffix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "middleName":
                            middleName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "personalTitlePrefix":
                            personalTitlePrefix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!otherNameTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiContactOtherName.", nameof(otherNameTypeDescriptor));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class EdFiContactOtherName.", nameof(firstName));

            if (!lastSurname.IsSet)
                throw new ArgumentException("Property is required for class EdFiContactOtherName.", nameof(lastSurname));

            if (otherNameTypeDescriptor.IsSet && otherNameTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(otherNameTypeDescriptor), "Property is not nullable for class EdFiContactOtherName.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class EdFiContactOtherName.");

            if (lastSurname.IsSet && lastSurname.Value == null)
                throw new ArgumentNullException(nameof(lastSurname), "Property is not nullable for class EdFiContactOtherName.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiContactOtherName.");

            return new EdFiContactOtherName(otherNameTypeDescriptor.Value!, firstName.Value!, lastSurname.Value!, generationCodeSuffix, middleName, personalTitlePrefix, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiContactOtherName" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiContactOtherName"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiContactOtherName edFiContactOtherName, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiContactOtherName, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiContactOtherName" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiContactOtherName"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiContactOtherName edFiContactOtherName, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiContactOtherName.OtherNameTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiContactOtherName.OtherNameTypeDescriptor), "Property is required for class EdFiContactOtherName.");

            if (edFiContactOtherName.FirstName == null)
                throw new ArgumentNullException(nameof(edFiContactOtherName.FirstName), "Property is required for class EdFiContactOtherName.");

            if (edFiContactOtherName.LastSurname == null)
                throw new ArgumentNullException(nameof(edFiContactOtherName.LastSurname), "Property is required for class EdFiContactOtherName.");

            if (edFiContactOtherName.ExtOption.IsSet && edFiContactOtherName.Ext == null)
                throw new ArgumentNullException(nameof(edFiContactOtherName.Ext), "Property is required for class EdFiContactOtherName.");

            writer.WriteString("otherNameTypeDescriptor", edFiContactOtherName.OtherNameTypeDescriptor);

            writer.WriteString("firstName", edFiContactOtherName.FirstName);

            writer.WriteString("lastSurname", edFiContactOtherName.LastSurname);

            if (edFiContactOtherName.GenerationCodeSuffixOption.IsSet)
                if (edFiContactOtherName.GenerationCodeSuffixOption.Value != null)
                    writer.WriteString("generationCodeSuffix", edFiContactOtherName.GenerationCodeSuffix);
                else
                    writer.WriteNull("generationCodeSuffix");

            if (edFiContactOtherName.MiddleNameOption.IsSet)
                if (edFiContactOtherName.MiddleNameOption.Value != null)
                    writer.WriteString("middleName", edFiContactOtherName.MiddleName);
                else
                    writer.WriteNull("middleName");

            if (edFiContactOtherName.PersonalTitlePrefixOption.IsSet)
                if (edFiContactOtherName.PersonalTitlePrefixOption.Value != null)
                    writer.WriteString("personalTitlePrefix", edFiContactOtherName.PersonalTitlePrefix);
                else
                    writer.WriteNull("personalTitlePrefix");

            if (edFiContactOtherName.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiContactOtherName.Ext, jsonSerializerOptions);
            }
        }
    }
}
