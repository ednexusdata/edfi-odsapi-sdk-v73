// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiContactReference
    /// </summary>
    public partial class EdFiContactReference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiContactReference" /> class.
        /// </summary>
        /// <param name="contactUniqueId">A unique alphanumeric code assigned to a contact.</param>
        /// <param name="link">link</param>
        [JsonConstructor]
        public EdFiContactReference(string contactUniqueId, Option<Link?> link = default)
        {
            ContactUniqueId = contactUniqueId;
            LinkOption = link;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique alphanumeric code assigned to a contact.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a contact.</value>
        [JsonPropertyName("contactUniqueId")]
        public string ContactUniqueId { get; set; }

        /// <summary>
        /// Used to track the state of Link
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Link?> LinkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [JsonPropertyName("link")]
        public Link? Link { get { return this.LinkOption; } set { this.LinkOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiContactReference {\n");
            sb.Append("  ContactUniqueId: ").Append(ContactUniqueId).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContactUniqueId (string) maxLength
            if (this.ContactUniqueId != null && this.ContactUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for ContactUniqueId, length must be less than 32.", new [] { "ContactUniqueId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiContactReference" />
    /// </summary>
    public class EdFiContactReferenceJsonConverter : JsonConverter<EdFiContactReference>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiContactReference" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiContactReference Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> contactUniqueId = default;
            Option<Link?> link = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contactUniqueId":
                            contactUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "link":
                            link = new Option<Link?>(JsonSerializer.Deserialize<Link>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!contactUniqueId.IsSet)
                throw new ArgumentException("Property is required for class EdFiContactReference.", nameof(contactUniqueId));

            if (contactUniqueId.IsSet && contactUniqueId.Value == null)
                throw new ArgumentNullException(nameof(contactUniqueId), "Property is not nullable for class EdFiContactReference.");

            if (link.IsSet && link.Value == null)
                throw new ArgumentNullException(nameof(link), "Property is not nullable for class EdFiContactReference.");

            return new EdFiContactReference(contactUniqueId.Value!, link);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiContactReference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiContactReference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiContactReference edFiContactReference, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiContactReference, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiContactReference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiContactReference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiContactReference edFiContactReference, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiContactReference.ContactUniqueId == null)
                throw new ArgumentNullException(nameof(edFiContactReference.ContactUniqueId), "Property is required for class EdFiContactReference.");

            if (edFiContactReference.LinkOption.IsSet && edFiContactReference.Link == null)
                throw new ArgumentNullException(nameof(edFiContactReference.Link), "Property is required for class EdFiContactReference.");

            writer.WriteString("contactUniqueId", edFiContactReference.ContactUniqueId);

            if (edFiContactReference.LinkOption.IsSet)
            {
                writer.WritePropertyName("link");
                JsonSerializer.Serialize(writer, edFiContactReference.Link, jsonSerializerOptions);
            }
        }
    }
}
