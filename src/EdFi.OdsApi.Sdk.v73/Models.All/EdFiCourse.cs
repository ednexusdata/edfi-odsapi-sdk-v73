// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiCourse
    /// </summary>
    public partial class EdFiCourse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCourse" /> class.
        /// </summary>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course.</param>
        /// <param name="identificationCodes">An unordered collection of courseIdentificationCodes. The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).</param>
        /// <param name="numberOfParts">The number of parts identified for a course.</param>
        /// <param name="id">id</param>
        /// <param name="academicSubjects">An unordered collection of courseAcademicSubjects. The intended major subject/s area of the course.</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.</param>
        /// <param name="competencyLevels">An unordered collection of courseCompetencyLevels. The competency levels defined to rate the student for the course.</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization.</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses.</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency.</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area.</param>
        /// <param name="learningStandards">An unordered collection of courseLearningStandards. Learning standard(s) to be taught by the course.</param>
        /// <param name="levelCharacteristics">An unordered collection of courseLevelCharacteristics. The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student.</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course.</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course.</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course.</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course.</param>
        /// <param name="offeredGradeLevels">An unordered collection of courseOfferedGradeLevels. The grade levels in which the course is offered.</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Course entity.</param>
        [JsonConstructor]
        public EdFiCourse(string courseCode, List<EdFiCourseIdentificationCode> identificationCodes, EdFiEducationOrganizationReference educationOrganizationReference, string courseTitle, int numberOfParts, Option<string?> id = default, Option<List<EdFiCourseAcademicSubject>?> academicSubjects = default, Option<string?> careerPathwayDescriptor = default, Option<List<EdFiCourseCompetencyLevel>?> competencyLevels = default, Option<string?> courseDefinedByDescriptor = default, Option<string?> courseDescription = default, Option<string?> courseGPAApplicabilityDescriptor = default, Option<DateOnly?> dateCourseAdopted = default, Option<bool?> highSchoolCourseRequirement = default, Option<List<EdFiCourseLearningStandard>?> learningStandards = default, Option<List<EdFiCourseLevelCharacteristic>?> levelCharacteristics = default, Option<int?> maxCompletionsForCredit = default, Option<double?> maximumAvailableCreditConversion = default, Option<double?> maximumAvailableCredits = default, Option<string?> maximumAvailableCreditTypeDescriptor = default, Option<double?> minimumAvailableCreditConversion = default, Option<double?> minimumAvailableCredits = default, Option<string?> minimumAvailableCreditTypeDescriptor = default, Option<List<EdFiCourseOfferedGradeLevel>?> offeredGradeLevels = default, Option<int?> timeRequiredForCompletion = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            CourseCode = courseCode;
            IdentificationCodes = identificationCodes;
            EducationOrganizationReference = educationOrganizationReference;
            CourseTitle = courseTitle;
            NumberOfParts = numberOfParts;
            IdOption = id;
            AcademicSubjectsOption = academicSubjects;
            CareerPathwayDescriptorOption = careerPathwayDescriptor;
            CompetencyLevelsOption = competencyLevels;
            CourseDefinedByDescriptorOption = courseDefinedByDescriptor;
            CourseDescriptionOption = courseDescription;
            CourseGPAApplicabilityDescriptorOption = courseGPAApplicabilityDescriptor;
            DateCourseAdoptedOption = dateCourseAdopted;
            HighSchoolCourseRequirementOption = highSchoolCourseRequirement;
            LearningStandardsOption = learningStandards;
            LevelCharacteristicsOption = levelCharacteristics;
            MaxCompletionsForCreditOption = maxCompletionsForCredit;
            MaximumAvailableCreditConversionOption = maximumAvailableCreditConversion;
            MaximumAvailableCreditsOption = maximumAvailableCredits;
            MaximumAvailableCreditTypeDescriptorOption = maximumAvailableCreditTypeDescriptor;
            MinimumAvailableCreditConversionOption = minimumAvailableCreditConversion;
            MinimumAvailableCreditsOption = minimumAvailableCredits;
            MinimumAvailableCreditTypeDescriptorOption = minimumAvailableCreditTypeDescriptor;
            OfferedGradeLevelsOption = offeredGradeLevels;
            TimeRequiredForCompletionOption = timeRequiredForCompletion;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique alphanumeric code assigned to a course.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a course.</value>
        [JsonPropertyName("courseCode")]
        public string CourseCode { get; set; }

        /// <summary>
        /// An unordered collection of courseIdentificationCodes. The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
        /// </summary>
        /// <value>An unordered collection of courseIdentificationCodes. The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.</value>
        [JsonPropertyName("identificationCodes")]
        public List<EdFiCourseIdentificationCode> IdentificationCodes { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
        /// </summary>
        /// <value>The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).</value>
        [JsonPropertyName("courseTitle")]
        public string CourseTitle { get; set; }

        /// <summary>
        /// The number of parts identified for a course.
        /// </summary>
        /// <value>The number of parts identified for a course.</value>
        [JsonPropertyName("numberOfParts")]
        public int NumberOfParts { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AcademicSubjects
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseAcademicSubject>?> AcademicSubjectsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseAcademicSubjects. The intended major subject/s area of the course.
        /// </summary>
        /// <value>An unordered collection of courseAcademicSubjects. The intended major subject/s area of the course.</value>
        [JsonPropertyName("academicSubjects")]
        public List<EdFiCourseAcademicSubject>? AcademicSubjects { get { return this.AcademicSubjectsOption; } set { this.AcademicSubjectsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CareerPathwayDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CareerPathwayDescriptorOption { get; private set; }

        /// <summary>
        /// Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.
        /// </summary>
        /// <value>Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.</value>
        [JsonPropertyName("careerPathwayDescriptor")]
        public string? CareerPathwayDescriptor { get { return this.CareerPathwayDescriptorOption; } set { this.CareerPathwayDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CompetencyLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseCompetencyLevel>?> CompetencyLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseCompetencyLevels. The competency levels defined to rate the student for the course.
        /// </summary>
        /// <value>An unordered collection of courseCompetencyLevels. The competency levels defined to rate the student for the course.</value>
        [JsonPropertyName("competencyLevels")]
        public List<EdFiCourseCompetencyLevel>? CompetencyLevels { get { return this.CompetencyLevelsOption; } set { this.CompetencyLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CourseDefinedByDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CourseDefinedByDescriptorOption { get; private set; }

        /// <summary>
        /// Specifies whether the course was defined by the SEA, LEA, School, or national organization.
        /// </summary>
        /// <value>Specifies whether the course was defined by the SEA, LEA, School, or national organization.</value>
        [JsonPropertyName("courseDefinedByDescriptor")]
        public string? CourseDefinedByDescriptor { get { return this.CourseDefinedByDescriptorOption; } set { this.CourseDefinedByDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CourseDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CourseDescriptionOption { get; private set; }

        /// <summary>
        /// A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.
        /// </summary>
        /// <value>A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.</value>
        [JsonPropertyName("courseDescription")]
        public string? CourseDescription { get { return this.CourseDescriptionOption; } set { this.CourseDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of CourseGPAApplicabilityDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CourseGPAApplicabilityDescriptorOption { get; private set; }

        /// <summary>
        /// An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses.
        /// </summary>
        /// <value>An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses.</value>
        [JsonPropertyName("courseGPAApplicabilityDescriptor")]
        public string? CourseGPAApplicabilityDescriptor { get { return this.CourseGPAApplicabilityDescriptorOption; } set { this.CourseGPAApplicabilityDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCourseAdopted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DateCourseAdoptedOption { get; private set; }

        /// <summary>
        /// Date the course was adopted by the education agency.
        /// </summary>
        /// <value>Date the course was adopted by the education agency.</value>
        [JsonPropertyName("dateCourseAdopted")]
        public DateOnly? DateCourseAdopted { get { return this.DateCourseAdoptedOption; } set { this.DateCourseAdoptedOption = new(value); } }

        /// <summary>
        /// Used to track the state of HighSchoolCourseRequirement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HighSchoolCourseRequirementOption { get; private set; }

        /// <summary>
        /// An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area.
        /// </summary>
        /// <value>An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area.</value>
        [JsonPropertyName("highSchoolCourseRequirement")]
        public bool? HighSchoolCourseRequirement { get { return this.HighSchoolCourseRequirementOption; } set { this.HighSchoolCourseRequirementOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandards
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseLearningStandard>?> LearningStandardsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseLearningStandards. Learning standard(s) to be taught by the course.
        /// </summary>
        /// <value>An unordered collection of courseLearningStandards. Learning standard(s) to be taught by the course.</value>
        [JsonPropertyName("learningStandards")]
        public List<EdFiCourseLearningStandard>? LearningStandards { get { return this.LearningStandardsOption; } set { this.LearningStandardsOption = new(value); } }

        /// <summary>
        /// Used to track the state of LevelCharacteristics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseLevelCharacteristic>?> LevelCharacteristicsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseLevelCharacteristics. The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).
        /// </summary>
        /// <value>An unordered collection of courseLevelCharacteristics. The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).</value>
        [JsonPropertyName("levelCharacteristics")]
        public List<EdFiCourseLevelCharacteristic>? LevelCharacteristics { get { return this.LevelCharacteristicsOption; } set { this.LevelCharacteristicsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxCompletionsForCredit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxCompletionsForCreditOption { get; private set; }

        /// <summary>
        /// Designates how many times the course may be taken with credit received by the student.
        /// </summary>
        /// <value>Designates how many times the course may be taken with credit received by the student.</value>
        [JsonPropertyName("maxCompletionsForCredit")]
        public int? MaxCompletionsForCredit { get { return this.MaxCompletionsForCreditOption; } set { this.MaxCompletionsForCreditOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaximumAvailableCreditConversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MaximumAvailableCreditConversionOption { get; private set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [JsonPropertyName("maximumAvailableCreditConversion")]
        public double? MaximumAvailableCreditConversion { get { return this.MaximumAvailableCreditConversionOption; } set { this.MaximumAvailableCreditConversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaximumAvailableCredits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MaximumAvailableCreditsOption { get; private set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("maximumAvailableCredits")]
        public double? MaximumAvailableCredits { get { return this.MaximumAvailableCreditsOption; } set { this.MaximumAvailableCreditsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaximumAvailableCreditTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MaximumAvailableCreditTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("maximumAvailableCreditTypeDescriptor")]
        public string? MaximumAvailableCreditTypeDescriptor { get { return this.MaximumAvailableCreditTypeDescriptorOption; } set { this.MaximumAvailableCreditTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinimumAvailableCreditConversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MinimumAvailableCreditConversionOption { get; private set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [JsonPropertyName("minimumAvailableCreditConversion")]
        public double? MinimumAvailableCreditConversion { get { return this.MinimumAvailableCreditConversionOption; } set { this.MinimumAvailableCreditConversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinimumAvailableCredits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MinimumAvailableCreditsOption { get; private set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("minimumAvailableCredits")]
        public double? MinimumAvailableCredits { get { return this.MinimumAvailableCreditsOption; } set { this.MinimumAvailableCreditsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinimumAvailableCreditTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MinimumAvailableCreditTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("minimumAvailableCreditTypeDescriptor")]
        public string? MinimumAvailableCreditTypeDescriptor { get { return this.MinimumAvailableCreditTypeDescriptorOption; } set { this.MinimumAvailableCreditTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of OfferedGradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseOfferedGradeLevel>?> OfferedGradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseOfferedGradeLevels. The grade levels in which the course is offered.
        /// </summary>
        /// <value>An unordered collection of courseOfferedGradeLevels. The grade levels in which the course is offered.</value>
        [JsonPropertyName("offeredGradeLevels")]
        public List<EdFiCourseOfferedGradeLevel>? OfferedGradeLevels { get { return this.OfferedGradeLevelsOption; } set { this.OfferedGradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeRequiredForCompletion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimeRequiredForCompletionOption { get; private set; }

        /// <summary>
        /// The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.
        /// </summary>
        /// <value>The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.</value>
        [JsonPropertyName("timeRequiredForCompletion")]
        public int? TimeRequiredForCompletion { get { return this.TimeRequiredForCompletionOption; } set { this.TimeRequiredForCompletionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Course entity.
        /// </summary>
        /// <value>Extensions to the Course entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCourse {\n");
            sb.Append("  CourseCode: ").Append(CourseCode).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  CourseTitle: ").Append(CourseTitle).Append("\n");
            sb.Append("  NumberOfParts: ").Append(NumberOfParts).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  CareerPathwayDescriptor: ").Append(CareerPathwayDescriptor).Append("\n");
            sb.Append("  CompetencyLevels: ").Append(CompetencyLevels).Append("\n");
            sb.Append("  CourseDefinedByDescriptor: ").Append(CourseDefinedByDescriptor).Append("\n");
            sb.Append("  CourseDescription: ").Append(CourseDescription).Append("\n");
            sb.Append("  CourseGPAApplicabilityDescriptor: ").Append(CourseGPAApplicabilityDescriptor).Append("\n");
            sb.Append("  DateCourseAdopted: ").Append(DateCourseAdopted).Append("\n");
            sb.Append("  HighSchoolCourseRequirement: ").Append(HighSchoolCourseRequirement).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  LevelCharacteristics: ").Append(LevelCharacteristics).Append("\n");
            sb.Append("  MaxCompletionsForCredit: ").Append(MaxCompletionsForCredit).Append("\n");
            sb.Append("  MaximumAvailableCreditConversion: ").Append(MaximumAvailableCreditConversion).Append("\n");
            sb.Append("  MaximumAvailableCredits: ").Append(MaximumAvailableCredits).Append("\n");
            sb.Append("  MaximumAvailableCreditTypeDescriptor: ").Append(MaximumAvailableCreditTypeDescriptor).Append("\n");
            sb.Append("  MinimumAvailableCreditConversion: ").Append(MinimumAvailableCreditConversion).Append("\n");
            sb.Append("  MinimumAvailableCredits: ").Append(MinimumAvailableCredits).Append("\n");
            sb.Append("  MinimumAvailableCreditTypeDescriptor: ").Append(MinimumAvailableCreditTypeDescriptor).Append("\n");
            sb.Append("  OfferedGradeLevels: ").Append(OfferedGradeLevels).Append("\n");
            sb.Append("  TimeRequiredForCompletion: ").Append(TimeRequiredForCompletion).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CourseCode (string) maxLength
            if (this.CourseCode != null && this.CourseCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CourseCode, length must be less than 60.", new [] { "CourseCode" });
            }

            // CourseTitle (string) maxLength
            if (this.CourseTitle != null && this.CourseTitle.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CourseTitle, length must be less than 60.", new [] { "CourseTitle" });
            }

            // NumberOfParts (int) maximum
            if (this.NumberOfParts > (int)8)
            {
                yield return new ValidationResult("Invalid value for NumberOfParts, must be a value less than or equal to 8.", new [] { "NumberOfParts" });
            }

            // NumberOfParts (int) minimum
            if (this.NumberOfParts < (int)1)
            {
                yield return new ValidationResult("Invalid value for NumberOfParts, must be a value greater than or equal to 1.", new [] { "NumberOfParts" });
            }

            // CareerPathwayDescriptor (string) maxLength
            if (this.CareerPathwayDescriptor != null && this.CareerPathwayDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CareerPathwayDescriptor, length must be less than 306.", new [] { "CareerPathwayDescriptor" });
            }

            // CourseDefinedByDescriptor (string) maxLength
            if (this.CourseDefinedByDescriptor != null && this.CourseDefinedByDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CourseDefinedByDescriptor, length must be less than 306.", new [] { "CourseDefinedByDescriptor" });
            }

            // CourseDescription (string) maxLength
            if (this.CourseDescription != null && this.CourseDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for CourseDescription, length must be less than 1024.", new [] { "CourseDescription" });
            }

            // CourseGPAApplicabilityDescriptor (string) maxLength
            if (this.CourseGPAApplicabilityDescriptor != null && this.CourseGPAApplicabilityDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CourseGPAApplicabilityDescriptor, length must be less than 306.", new [] { "CourseGPAApplicabilityDescriptor" });
            }

            // MaxCompletionsForCredit (int) minimum
            if (this.MaxCompletionsForCreditOption.IsSet && this.MaxCompletionsForCreditOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for MaxCompletionsForCredit, must be a value greater than or equal to 1.", new [] { "MaxCompletionsForCredit" });
            }

            // MaximumAvailableCreditConversion (double) maximum
            if (this.MaximumAvailableCreditConversionOption.IsSet && this.MaximumAvailableCreditConversionOption.Value > (double)9999999.99)
            {
                yield return new ValidationResult("Invalid value for MaximumAvailableCreditConversion, must be a value less than or equal to 9999999.99.", new [] { "MaximumAvailableCreditConversion" });
            }

            // MaximumAvailableCreditConversion (double) minimum
            if (this.MaximumAvailableCreditConversionOption.IsSet && this.MaximumAvailableCreditConversionOption.Value < (double)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for MaximumAvailableCreditConversion, must be a value greater than or equal to -9999999.99.", new [] { "MaximumAvailableCreditConversion" });
            }

            // MaximumAvailableCredits (double) maximum
            if (this.MaximumAvailableCreditsOption.IsSet && this.MaximumAvailableCreditsOption.Value > (double)999999.999)
            {
                yield return new ValidationResult("Invalid value for MaximumAvailableCredits, must be a value less than or equal to 999999.999.", new [] { "MaximumAvailableCredits" });
            }

            // MaximumAvailableCredits (double) minimum
            if (this.MaximumAvailableCreditsOption.IsSet && this.MaximumAvailableCreditsOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for MaximumAvailableCredits, must be a value greater than or equal to 0.0.", new [] { "MaximumAvailableCredits" });
            }

            // MaximumAvailableCreditTypeDescriptor (string) maxLength
            if (this.MaximumAvailableCreditTypeDescriptor != null && this.MaximumAvailableCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for MaximumAvailableCreditTypeDescriptor, length must be less than 306.", new [] { "MaximumAvailableCreditTypeDescriptor" });
            }

            // MinimumAvailableCreditConversion (double) maximum
            if (this.MinimumAvailableCreditConversionOption.IsSet && this.MinimumAvailableCreditConversionOption.Value > (double)9999999.99)
            {
                yield return new ValidationResult("Invalid value for MinimumAvailableCreditConversion, must be a value less than or equal to 9999999.99.", new [] { "MinimumAvailableCreditConversion" });
            }

            // MinimumAvailableCreditConversion (double) minimum
            if (this.MinimumAvailableCreditConversionOption.IsSet && this.MinimumAvailableCreditConversionOption.Value < (double)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for MinimumAvailableCreditConversion, must be a value greater than or equal to -9999999.99.", new [] { "MinimumAvailableCreditConversion" });
            }

            // MinimumAvailableCredits (double) maximum
            if (this.MinimumAvailableCreditsOption.IsSet && this.MinimumAvailableCreditsOption.Value > (double)999999.999)
            {
                yield return new ValidationResult("Invalid value for MinimumAvailableCredits, must be a value less than or equal to 999999.999.", new [] { "MinimumAvailableCredits" });
            }

            // MinimumAvailableCredits (double) minimum
            if (this.MinimumAvailableCreditsOption.IsSet && this.MinimumAvailableCreditsOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for MinimumAvailableCredits, must be a value greater than or equal to 0.0.", new [] { "MinimumAvailableCredits" });
            }

            // MinimumAvailableCreditTypeDescriptor (string) maxLength
            if (this.MinimumAvailableCreditTypeDescriptor != null && this.MinimumAvailableCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for MinimumAvailableCreditTypeDescriptor, length must be less than 306.", new [] { "MinimumAvailableCreditTypeDescriptor" });
            }

            // TimeRequiredForCompletion (int) minimum
            if (this.TimeRequiredForCompletionOption.IsSet && this.TimeRequiredForCompletionOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for TimeRequiredForCompletion, must be a value greater than or equal to 1.", new [] { "TimeRequiredForCompletion" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiCourse" />
    /// </summary>
    public class EdFiCourseJsonConverter : JsonConverter<EdFiCourse>
    {
        /// <summary>
        /// The format to use to serialize DateCourseAdopted
        /// </summary>
        public static string DateCourseAdoptedFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiCourse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiCourse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> courseCode = default;
            Option<List<EdFiCourseIdentificationCode>?> identificationCodes = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<string?> courseTitle = default;
            Option<int?> numberOfParts = default;
            Option<string?> id = default;
            Option<List<EdFiCourseAcademicSubject>?> academicSubjects = default;
            Option<string?> careerPathwayDescriptor = default;
            Option<List<EdFiCourseCompetencyLevel>?> competencyLevels = default;
            Option<string?> courseDefinedByDescriptor = default;
            Option<string?> courseDescription = default;
            Option<string?> courseGPAApplicabilityDescriptor = default;
            Option<DateOnly?> dateCourseAdopted = default;
            Option<bool?> highSchoolCourseRequirement = default;
            Option<List<EdFiCourseLearningStandard>?> learningStandards = default;
            Option<List<EdFiCourseLevelCharacteristic>?> levelCharacteristics = default;
            Option<int?> maxCompletionsForCredit = default;
            Option<double?> maximumAvailableCreditConversion = default;
            Option<double?> maximumAvailableCredits = default;
            Option<string?> maximumAvailableCreditTypeDescriptor = default;
            Option<double?> minimumAvailableCreditConversion = default;
            Option<double?> minimumAvailableCredits = default;
            Option<string?> minimumAvailableCreditTypeDescriptor = default;
            Option<List<EdFiCourseOfferedGradeLevel>?> offeredGradeLevels = default;
            Option<int?> timeRequiredForCompletion = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "courseCode":
                            courseCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "identificationCodes":
                            identificationCodes = new Option<List<EdFiCourseIdentificationCode>?>(JsonSerializer.Deserialize<List<EdFiCourseIdentificationCode>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "courseTitle":
                            courseTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "numberOfParts":
                            numberOfParts = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "academicSubjects":
                            academicSubjects = new Option<List<EdFiCourseAcademicSubject>?>(JsonSerializer.Deserialize<List<EdFiCourseAcademicSubject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "careerPathwayDescriptor":
                            careerPathwayDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "competencyLevels":
                            competencyLevels = new Option<List<EdFiCourseCompetencyLevel>?>(JsonSerializer.Deserialize<List<EdFiCourseCompetencyLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "courseDefinedByDescriptor":
                            courseDefinedByDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "courseDescription":
                            courseDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "courseGPAApplicabilityDescriptor":
                            courseGPAApplicabilityDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dateCourseAdopted":
                            dateCourseAdopted = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "highSchoolCourseRequirement":
                            highSchoolCourseRequirement = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "learningStandards":
                            learningStandards = new Option<List<EdFiCourseLearningStandard>?>(JsonSerializer.Deserialize<List<EdFiCourseLearningStandard>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "levelCharacteristics":
                            levelCharacteristics = new Option<List<EdFiCourseLevelCharacteristic>?>(JsonSerializer.Deserialize<List<EdFiCourseLevelCharacteristic>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "maxCompletionsForCredit":
                            maxCompletionsForCredit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "maximumAvailableCreditConversion":
                            maximumAvailableCreditConversion = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "maximumAvailableCredits":
                            maximumAvailableCredits = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "maximumAvailableCreditTypeDescriptor":
                            maximumAvailableCreditTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "minimumAvailableCreditConversion":
                            minimumAvailableCreditConversion = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "minimumAvailableCredits":
                            minimumAvailableCredits = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "minimumAvailableCreditTypeDescriptor":
                            minimumAvailableCreditTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "offeredGradeLevels":
                            offeredGradeLevels = new Option<List<EdFiCourseOfferedGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiCourseOfferedGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "timeRequiredForCompletion":
                            timeRequiredForCompletion = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!courseCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourse.", nameof(courseCode));

            if (!identificationCodes.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourse.", nameof(identificationCodes));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourse.", nameof(educationOrganizationReference));

            if (!courseTitle.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourse.", nameof(courseTitle));

            if (!numberOfParts.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourse.", nameof(numberOfParts));

            if (courseCode.IsSet && courseCode.Value == null)
                throw new ArgumentNullException(nameof(courseCode), "Property is not nullable for class EdFiCourse.");

            if (identificationCodes.IsSet && identificationCodes.Value == null)
                throw new ArgumentNullException(nameof(identificationCodes), "Property is not nullable for class EdFiCourse.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiCourse.");

            if (courseTitle.IsSet && courseTitle.Value == null)
                throw new ArgumentNullException(nameof(courseTitle), "Property is not nullable for class EdFiCourse.");

            if (numberOfParts.IsSet && numberOfParts.Value == null)
                throw new ArgumentNullException(nameof(numberOfParts), "Property is not nullable for class EdFiCourse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiCourse.");

            if (academicSubjects.IsSet && academicSubjects.Value == null)
                throw new ArgumentNullException(nameof(academicSubjects), "Property is not nullable for class EdFiCourse.");

            if (competencyLevels.IsSet && competencyLevels.Value == null)
                throw new ArgumentNullException(nameof(competencyLevels), "Property is not nullable for class EdFiCourse.");

            if (learningStandards.IsSet && learningStandards.Value == null)
                throw new ArgumentNullException(nameof(learningStandards), "Property is not nullable for class EdFiCourse.");

            if (levelCharacteristics.IsSet && levelCharacteristics.Value == null)
                throw new ArgumentNullException(nameof(levelCharacteristics), "Property is not nullable for class EdFiCourse.");

            if (offeredGradeLevels.IsSet && offeredGradeLevels.Value == null)
                throw new ArgumentNullException(nameof(offeredGradeLevels), "Property is not nullable for class EdFiCourse.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiCourse.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiCourse.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiCourse.");

            return new EdFiCourse(courseCode.Value!, identificationCodes.Value!, educationOrganizationReference.Value!, courseTitle.Value!, numberOfParts.Value!.Value!, id, academicSubjects, careerPathwayDescriptor, competencyLevels, courseDefinedByDescriptor, courseDescription, courseGPAApplicabilityDescriptor, dateCourseAdopted, highSchoolCourseRequirement, learningStandards, levelCharacteristics, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, maximumAvailableCreditTypeDescriptor, minimumAvailableCreditConversion, minimumAvailableCredits, minimumAvailableCreditTypeDescriptor, offeredGradeLevels, timeRequiredForCompletion, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiCourse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCourse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiCourse edFiCourse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiCourse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiCourse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCourse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiCourse edFiCourse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiCourse.CourseCode == null)
                throw new ArgumentNullException(nameof(edFiCourse.CourseCode), "Property is required for class EdFiCourse.");

            if (edFiCourse.IdentificationCodes == null)
                throw new ArgumentNullException(nameof(edFiCourse.IdentificationCodes), "Property is required for class EdFiCourse.");

            if (edFiCourse.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiCourse.EducationOrganizationReference), "Property is required for class EdFiCourse.");

            if (edFiCourse.CourseTitle == null)
                throw new ArgumentNullException(nameof(edFiCourse.CourseTitle), "Property is required for class EdFiCourse.");

            if (edFiCourse.IdOption.IsSet && edFiCourse.Id == null)
                throw new ArgumentNullException(nameof(edFiCourse.Id), "Property is required for class EdFiCourse.");

            if (edFiCourse.AcademicSubjectsOption.IsSet && edFiCourse.AcademicSubjects == null)
                throw new ArgumentNullException(nameof(edFiCourse.AcademicSubjects), "Property is required for class EdFiCourse.");

            if (edFiCourse.CompetencyLevelsOption.IsSet && edFiCourse.CompetencyLevels == null)
                throw new ArgumentNullException(nameof(edFiCourse.CompetencyLevels), "Property is required for class EdFiCourse.");

            if (edFiCourse.LearningStandardsOption.IsSet && edFiCourse.LearningStandards == null)
                throw new ArgumentNullException(nameof(edFiCourse.LearningStandards), "Property is required for class EdFiCourse.");

            if (edFiCourse.LevelCharacteristicsOption.IsSet && edFiCourse.LevelCharacteristics == null)
                throw new ArgumentNullException(nameof(edFiCourse.LevelCharacteristics), "Property is required for class EdFiCourse.");

            if (edFiCourse.OfferedGradeLevelsOption.IsSet && edFiCourse.OfferedGradeLevels == null)
                throw new ArgumentNullException(nameof(edFiCourse.OfferedGradeLevels), "Property is required for class EdFiCourse.");

            if (edFiCourse.EtagOption.IsSet && edFiCourse.Etag == null)
                throw new ArgumentNullException(nameof(edFiCourse.Etag), "Property is required for class EdFiCourse.");

            if (edFiCourse.ExtOption.IsSet && edFiCourse.Ext == null)
                throw new ArgumentNullException(nameof(edFiCourse.Ext), "Property is required for class EdFiCourse.");

            writer.WriteString("courseCode", edFiCourse.CourseCode);

            writer.WritePropertyName("identificationCodes");
            JsonSerializer.Serialize(writer, edFiCourse.IdentificationCodes, jsonSerializerOptions);
            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiCourse.EducationOrganizationReference, jsonSerializerOptions);
            writer.WriteString("courseTitle", edFiCourse.CourseTitle);

            writer.WriteNumber("numberOfParts", edFiCourse.NumberOfParts);

            if (edFiCourse.IdOption.IsSet)
                writer.WriteString("id", edFiCourse.Id);

            if (edFiCourse.AcademicSubjectsOption.IsSet)
            {
                writer.WritePropertyName("academicSubjects");
                JsonSerializer.Serialize(writer, edFiCourse.AcademicSubjects, jsonSerializerOptions);
            }
            if (edFiCourse.CareerPathwayDescriptorOption.IsSet)
                if (edFiCourse.CareerPathwayDescriptorOption.Value != null)
                    writer.WriteString("careerPathwayDescriptor", edFiCourse.CareerPathwayDescriptor);
                else
                    writer.WriteNull("careerPathwayDescriptor");

            if (edFiCourse.CompetencyLevelsOption.IsSet)
            {
                writer.WritePropertyName("competencyLevels");
                JsonSerializer.Serialize(writer, edFiCourse.CompetencyLevels, jsonSerializerOptions);
            }
            if (edFiCourse.CourseDefinedByDescriptorOption.IsSet)
                if (edFiCourse.CourseDefinedByDescriptorOption.Value != null)
                    writer.WriteString("courseDefinedByDescriptor", edFiCourse.CourseDefinedByDescriptor);
                else
                    writer.WriteNull("courseDefinedByDescriptor");

            if (edFiCourse.CourseDescriptionOption.IsSet)
                if (edFiCourse.CourseDescriptionOption.Value != null)
                    writer.WriteString("courseDescription", edFiCourse.CourseDescription);
                else
                    writer.WriteNull("courseDescription");

            if (edFiCourse.CourseGPAApplicabilityDescriptorOption.IsSet)
                if (edFiCourse.CourseGPAApplicabilityDescriptorOption.Value != null)
                    writer.WriteString("courseGPAApplicabilityDescriptor", edFiCourse.CourseGPAApplicabilityDescriptor);
                else
                    writer.WriteNull("courseGPAApplicabilityDescriptor");

            if (edFiCourse.DateCourseAdoptedOption.IsSet)
                if (edFiCourse.DateCourseAdoptedOption.Value != null)
                    writer.WriteString("dateCourseAdopted", edFiCourse.DateCourseAdoptedOption.Value!.Value.ToString(DateCourseAdoptedFormat));
                else
                    writer.WriteNull("dateCourseAdopted");

            if (edFiCourse.HighSchoolCourseRequirementOption.IsSet)
                if (edFiCourse.HighSchoolCourseRequirementOption.Value != null)
                    writer.WriteBoolean("highSchoolCourseRequirement", edFiCourse.HighSchoolCourseRequirementOption.Value!.Value);
                else
                    writer.WriteNull("highSchoolCourseRequirement");

            if (edFiCourse.LearningStandardsOption.IsSet)
            {
                writer.WritePropertyName("learningStandards");
                JsonSerializer.Serialize(writer, edFiCourse.LearningStandards, jsonSerializerOptions);
            }
            if (edFiCourse.LevelCharacteristicsOption.IsSet)
            {
                writer.WritePropertyName("levelCharacteristics");
                JsonSerializer.Serialize(writer, edFiCourse.LevelCharacteristics, jsonSerializerOptions);
            }
            if (edFiCourse.MaxCompletionsForCreditOption.IsSet)
                if (edFiCourse.MaxCompletionsForCreditOption.Value != null)
                    writer.WriteNumber("maxCompletionsForCredit", edFiCourse.MaxCompletionsForCreditOption.Value!.Value);
                else
                    writer.WriteNull("maxCompletionsForCredit");

            if (edFiCourse.MaximumAvailableCreditConversionOption.IsSet)
                if (edFiCourse.MaximumAvailableCreditConversionOption.Value != null)
                    writer.WriteNumber("maximumAvailableCreditConversion", edFiCourse.MaximumAvailableCreditConversionOption.Value!.Value);
                else
                    writer.WriteNull("maximumAvailableCreditConversion");

            if (edFiCourse.MaximumAvailableCreditsOption.IsSet)
                if (edFiCourse.MaximumAvailableCreditsOption.Value != null)
                    writer.WriteNumber("maximumAvailableCredits", edFiCourse.MaximumAvailableCreditsOption.Value!.Value);
                else
                    writer.WriteNull("maximumAvailableCredits");

            if (edFiCourse.MaximumAvailableCreditTypeDescriptorOption.IsSet)
                if (edFiCourse.MaximumAvailableCreditTypeDescriptorOption.Value != null)
                    writer.WriteString("maximumAvailableCreditTypeDescriptor", edFiCourse.MaximumAvailableCreditTypeDescriptor);
                else
                    writer.WriteNull("maximumAvailableCreditTypeDescriptor");

            if (edFiCourse.MinimumAvailableCreditConversionOption.IsSet)
                if (edFiCourse.MinimumAvailableCreditConversionOption.Value != null)
                    writer.WriteNumber("minimumAvailableCreditConversion", edFiCourse.MinimumAvailableCreditConversionOption.Value!.Value);
                else
                    writer.WriteNull("minimumAvailableCreditConversion");

            if (edFiCourse.MinimumAvailableCreditsOption.IsSet)
                if (edFiCourse.MinimumAvailableCreditsOption.Value != null)
                    writer.WriteNumber("minimumAvailableCredits", edFiCourse.MinimumAvailableCreditsOption.Value!.Value);
                else
                    writer.WriteNull("minimumAvailableCredits");

            if (edFiCourse.MinimumAvailableCreditTypeDescriptorOption.IsSet)
                if (edFiCourse.MinimumAvailableCreditTypeDescriptorOption.Value != null)
                    writer.WriteString("minimumAvailableCreditTypeDescriptor", edFiCourse.MinimumAvailableCreditTypeDescriptor);
                else
                    writer.WriteNull("minimumAvailableCreditTypeDescriptor");

            if (edFiCourse.OfferedGradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("offeredGradeLevels");
                JsonSerializer.Serialize(writer, edFiCourse.OfferedGradeLevels, jsonSerializerOptions);
            }
            if (edFiCourse.TimeRequiredForCompletionOption.IsSet)
                if (edFiCourse.TimeRequiredForCompletionOption.Value != null)
                    writer.WriteNumber("timeRequiredForCompletion", edFiCourse.TimeRequiredForCompletionOption.Value!.Value);
                else
                    writer.WriteNull("timeRequiredForCompletion");

            if (edFiCourse.EtagOption.IsSet)
                writer.WriteString("_etag", edFiCourse.Etag);

            if (edFiCourse.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiCourse.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiCourse.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiCourse.Ext, jsonSerializerOptions);
            }
        }
    }
}
