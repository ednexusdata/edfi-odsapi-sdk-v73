// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiCourseOffering
    /// </summary>
    public partial class EdFiCourseOffering : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCourseOffering" /> class.
        /// </summary>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students.</param>
        /// <param name="courseReference">courseReference</param>
        /// <param name="schoolReference">schoolReference</param>
        /// <param name="sessionReference">sessionReference</param>
        /// <param name="id">id</param>
        /// <param name="courseLevelCharacteristics">An unordered collection of courseOfferingCourseLevelCharacteristics. The type of specific program or designation with which the course offering is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the course level characteristics identified at the course level.</param>
        /// <param name="curriculumUseds">An unordered collection of courseOfferingCurriculumUseds. The type of curriculum used in an early learning classroom or group.</param>
        /// <param name="instructionalTimePlanned">The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.</param>
        /// <param name="localCourseTitle">The descriptive name given to a course of study offered in the school, if different from the course title.</param>
        /// <param name="offeredGradeLevels">An unordered collection of courseOfferingOfferedGradeLevels. The grade levels in which the course is offered. This collection should only be populated if it differs from the offered grade levels identified at the course level.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the CourseOffering entity.</param>
        [JsonConstructor]
        public EdFiCourseOffering(string localCourseCode, EdFiCourseReference courseReference, EdFiSchoolReference schoolReference, EdFiSessionReference sessionReference, Option<string?> id = default, Option<List<EdFiCourseOfferingCourseLevelCharacteristic>?> courseLevelCharacteristics = default, Option<List<EdFiCourseOfferingCurriculumUsed>?> curriculumUseds = default, Option<int?> instructionalTimePlanned = default, Option<string?> localCourseTitle = default, Option<List<EdFiCourseOfferingOfferedGradeLevel>?> offeredGradeLevels = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            LocalCourseCode = localCourseCode;
            CourseReference = courseReference;
            SchoolReference = schoolReference;
            SessionReference = sessionReference;
            IdOption = id;
            CourseLevelCharacteristicsOption = courseLevelCharacteristics;
            CurriculumUsedsOption = curriculumUseds;
            InstructionalTimePlannedOption = instructionalTimePlanned;
            LocalCourseTitleOption = localCourseTitle;
            OfferedGradeLevelsOption = offeredGradeLevels;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        /// <value>The local code assigned by the School that identifies the course offering provided for the instruction of students.</value>
        [JsonPropertyName("localCourseCode")]
        public string LocalCourseCode { get; set; }

        /// <summary>
        /// Gets or Sets CourseReference
        /// </summary>
        [JsonPropertyName("courseReference")]
        public EdFiCourseReference CourseReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [JsonPropertyName("schoolReference")]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets SessionReference
        /// </summary>
        [JsonPropertyName("sessionReference")]
        public EdFiSessionReference SessionReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CourseLevelCharacteristics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseOfferingCourseLevelCharacteristic>?> CourseLevelCharacteristicsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseOfferingCourseLevelCharacteristics. The type of specific program or designation with which the course offering is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the course level characteristics identified at the course level.
        /// </summary>
        /// <value>An unordered collection of courseOfferingCourseLevelCharacteristics. The type of specific program or designation with which the course offering is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the course level characteristics identified at the course level.</value>
        [JsonPropertyName("courseLevelCharacteristics")]
        public List<EdFiCourseOfferingCourseLevelCharacteristic>? CourseLevelCharacteristics { get { return this.CourseLevelCharacteristicsOption; } set { this.CourseLevelCharacteristicsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurriculumUseds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseOfferingCurriculumUsed>?> CurriculumUsedsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseOfferingCurriculumUseds. The type of curriculum used in an early learning classroom or group.
        /// </summary>
        /// <value>An unordered collection of courseOfferingCurriculumUseds. The type of curriculum used in an early learning classroom or group.</value>
        [JsonPropertyName("curriculumUseds")]
        public List<EdFiCourseOfferingCurriculumUsed>? CurriculumUseds { get { return this.CurriculumUsedsOption; } set { this.CurriculumUsedsOption = new(value); } }

        /// <summary>
        /// Used to track the state of InstructionalTimePlanned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InstructionalTimePlannedOption { get; private set; }

        /// <summary>
        /// The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.
        /// </summary>
        /// <value>The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.</value>
        [JsonPropertyName("instructionalTimePlanned")]
        public int? InstructionalTimePlanned { get { return this.InstructionalTimePlannedOption; } set { this.InstructionalTimePlannedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LocalCourseTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocalCourseTitleOption { get; private set; }

        /// <summary>
        /// The descriptive name given to a course of study offered in the school, if different from the course title.
        /// </summary>
        /// <value>The descriptive name given to a course of study offered in the school, if different from the course title.</value>
        [JsonPropertyName("localCourseTitle")]
        public string? LocalCourseTitle { get { return this.LocalCourseTitleOption; } set { this.LocalCourseTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of OfferedGradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseOfferingOfferedGradeLevel>?> OfferedGradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseOfferingOfferedGradeLevels. The grade levels in which the course is offered. This collection should only be populated if it differs from the offered grade levels identified at the course level.
        /// </summary>
        /// <value>An unordered collection of courseOfferingOfferedGradeLevels. The grade levels in which the course is offered. This collection should only be populated if it differs from the offered grade levels identified at the course level.</value>
        [JsonPropertyName("offeredGradeLevels")]
        public List<EdFiCourseOfferingOfferedGradeLevel>? OfferedGradeLevels { get { return this.OfferedGradeLevelsOption; } set { this.OfferedGradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the CourseOffering entity.
        /// </summary>
        /// <value>Extensions to the CourseOffering entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCourseOffering {\n");
            sb.Append("  LocalCourseCode: ").Append(LocalCourseCode).Append("\n");
            sb.Append("  CourseReference: ").Append(CourseReference).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  SessionReference: ").Append(SessionReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CourseLevelCharacteristics: ").Append(CourseLevelCharacteristics).Append("\n");
            sb.Append("  CurriculumUseds: ").Append(CurriculumUseds).Append("\n");
            sb.Append("  InstructionalTimePlanned: ").Append(InstructionalTimePlanned).Append("\n");
            sb.Append("  LocalCourseTitle: ").Append(LocalCourseTitle).Append("\n");
            sb.Append("  OfferedGradeLevels: ").Append(OfferedGradeLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LocalCourseCode (string) maxLength
            if (this.LocalCourseCode != null && this.LocalCourseCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LocalCourseCode, length must be less than 60.", new [] { "LocalCourseCode" });
            }

            // InstructionalTimePlanned (int) minimum
            if (this.InstructionalTimePlannedOption.IsSet && this.InstructionalTimePlannedOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for InstructionalTimePlanned, must be a value greater than or equal to 1.", new [] { "InstructionalTimePlanned" });
            }

            // LocalCourseTitle (string) maxLength
            if (this.LocalCourseTitle != null && this.LocalCourseTitle.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LocalCourseTitle, length must be less than 60.", new [] { "LocalCourseTitle" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiCourseOffering" />
    /// </summary>
    public class EdFiCourseOfferingJsonConverter : JsonConverter<EdFiCourseOffering>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiCourseOffering" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiCourseOffering Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> localCourseCode = default;
            Option<EdFiCourseReference?> courseReference = default;
            Option<EdFiSchoolReference?> schoolReference = default;
            Option<EdFiSessionReference?> sessionReference = default;
            Option<string?> id = default;
            Option<List<EdFiCourseOfferingCourseLevelCharacteristic>?> courseLevelCharacteristics = default;
            Option<List<EdFiCourseOfferingCurriculumUsed>?> curriculumUseds = default;
            Option<int?> instructionalTimePlanned = default;
            Option<string?> localCourseTitle = default;
            Option<List<EdFiCourseOfferingOfferedGradeLevel>?> offeredGradeLevels = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "localCourseCode":
                            localCourseCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "courseReference":
                            courseReference = new Option<EdFiCourseReference?>(JsonSerializer.Deserialize<EdFiCourseReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "schoolReference":
                            schoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sessionReference":
                            sessionReference = new Option<EdFiSessionReference?>(JsonSerializer.Deserialize<EdFiSessionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "courseLevelCharacteristics":
                            courseLevelCharacteristics = new Option<List<EdFiCourseOfferingCourseLevelCharacteristic>?>(JsonSerializer.Deserialize<List<EdFiCourseOfferingCourseLevelCharacteristic>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "curriculumUseds":
                            curriculumUseds = new Option<List<EdFiCourseOfferingCurriculumUsed>?>(JsonSerializer.Deserialize<List<EdFiCourseOfferingCurriculumUsed>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "instructionalTimePlanned":
                            instructionalTimePlanned = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "localCourseTitle":
                            localCourseTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "offeredGradeLevels":
                            offeredGradeLevels = new Option<List<EdFiCourseOfferingOfferedGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiCourseOfferingOfferedGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!localCourseCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourseOffering.", nameof(localCourseCode));

            if (!courseReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourseOffering.", nameof(courseReference));

            if (!schoolReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourseOffering.", nameof(schoolReference));

            if (!sessionReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourseOffering.", nameof(sessionReference));

            if (localCourseCode.IsSet && localCourseCode.Value == null)
                throw new ArgumentNullException(nameof(localCourseCode), "Property is not nullable for class EdFiCourseOffering.");

            if (courseReference.IsSet && courseReference.Value == null)
                throw new ArgumentNullException(nameof(courseReference), "Property is not nullable for class EdFiCourseOffering.");

            if (schoolReference.IsSet && schoolReference.Value == null)
                throw new ArgumentNullException(nameof(schoolReference), "Property is not nullable for class EdFiCourseOffering.");

            if (sessionReference.IsSet && sessionReference.Value == null)
                throw new ArgumentNullException(nameof(sessionReference), "Property is not nullable for class EdFiCourseOffering.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiCourseOffering.");

            if (courseLevelCharacteristics.IsSet && courseLevelCharacteristics.Value == null)
                throw new ArgumentNullException(nameof(courseLevelCharacteristics), "Property is not nullable for class EdFiCourseOffering.");

            if (curriculumUseds.IsSet && curriculumUseds.Value == null)
                throw new ArgumentNullException(nameof(curriculumUseds), "Property is not nullable for class EdFiCourseOffering.");

            if (offeredGradeLevels.IsSet && offeredGradeLevels.Value == null)
                throw new ArgumentNullException(nameof(offeredGradeLevels), "Property is not nullable for class EdFiCourseOffering.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiCourseOffering.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiCourseOffering.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiCourseOffering.");

            return new EdFiCourseOffering(localCourseCode.Value!, courseReference.Value!, schoolReference.Value!, sessionReference.Value!, id, courseLevelCharacteristics, curriculumUseds, instructionalTimePlanned, localCourseTitle, offeredGradeLevels, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiCourseOffering" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCourseOffering"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiCourseOffering edFiCourseOffering, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiCourseOffering, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiCourseOffering" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCourseOffering"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiCourseOffering edFiCourseOffering, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiCourseOffering.LocalCourseCode == null)
                throw new ArgumentNullException(nameof(edFiCourseOffering.LocalCourseCode), "Property is required for class EdFiCourseOffering.");

            if (edFiCourseOffering.CourseReference == null)
                throw new ArgumentNullException(nameof(edFiCourseOffering.CourseReference), "Property is required for class EdFiCourseOffering.");

            if (edFiCourseOffering.SchoolReference == null)
                throw new ArgumentNullException(nameof(edFiCourseOffering.SchoolReference), "Property is required for class EdFiCourseOffering.");

            if (edFiCourseOffering.SessionReference == null)
                throw new ArgumentNullException(nameof(edFiCourseOffering.SessionReference), "Property is required for class EdFiCourseOffering.");

            if (edFiCourseOffering.IdOption.IsSet && edFiCourseOffering.Id == null)
                throw new ArgumentNullException(nameof(edFiCourseOffering.Id), "Property is required for class EdFiCourseOffering.");

            if (edFiCourseOffering.CourseLevelCharacteristicsOption.IsSet && edFiCourseOffering.CourseLevelCharacteristics == null)
                throw new ArgumentNullException(nameof(edFiCourseOffering.CourseLevelCharacteristics), "Property is required for class EdFiCourseOffering.");

            if (edFiCourseOffering.CurriculumUsedsOption.IsSet && edFiCourseOffering.CurriculumUseds == null)
                throw new ArgumentNullException(nameof(edFiCourseOffering.CurriculumUseds), "Property is required for class EdFiCourseOffering.");

            if (edFiCourseOffering.OfferedGradeLevelsOption.IsSet && edFiCourseOffering.OfferedGradeLevels == null)
                throw new ArgumentNullException(nameof(edFiCourseOffering.OfferedGradeLevels), "Property is required for class EdFiCourseOffering.");

            if (edFiCourseOffering.EtagOption.IsSet && edFiCourseOffering.Etag == null)
                throw new ArgumentNullException(nameof(edFiCourseOffering.Etag), "Property is required for class EdFiCourseOffering.");

            if (edFiCourseOffering.ExtOption.IsSet && edFiCourseOffering.Ext == null)
                throw new ArgumentNullException(nameof(edFiCourseOffering.Ext), "Property is required for class EdFiCourseOffering.");

            writer.WriteString("localCourseCode", edFiCourseOffering.LocalCourseCode);

            writer.WritePropertyName("courseReference");
            JsonSerializer.Serialize(writer, edFiCourseOffering.CourseReference, jsonSerializerOptions);
            writer.WritePropertyName("schoolReference");
            JsonSerializer.Serialize(writer, edFiCourseOffering.SchoolReference, jsonSerializerOptions);
            writer.WritePropertyName("sessionReference");
            JsonSerializer.Serialize(writer, edFiCourseOffering.SessionReference, jsonSerializerOptions);
            if (edFiCourseOffering.IdOption.IsSet)
                writer.WriteString("id", edFiCourseOffering.Id);

            if (edFiCourseOffering.CourseLevelCharacteristicsOption.IsSet)
            {
                writer.WritePropertyName("courseLevelCharacteristics");
                JsonSerializer.Serialize(writer, edFiCourseOffering.CourseLevelCharacteristics, jsonSerializerOptions);
            }
            if (edFiCourseOffering.CurriculumUsedsOption.IsSet)
            {
                writer.WritePropertyName("curriculumUseds");
                JsonSerializer.Serialize(writer, edFiCourseOffering.CurriculumUseds, jsonSerializerOptions);
            }
            if (edFiCourseOffering.InstructionalTimePlannedOption.IsSet)
                if (edFiCourseOffering.InstructionalTimePlannedOption.Value != null)
                    writer.WriteNumber("instructionalTimePlanned", edFiCourseOffering.InstructionalTimePlannedOption.Value!.Value);
                else
                    writer.WriteNull("instructionalTimePlanned");

            if (edFiCourseOffering.LocalCourseTitleOption.IsSet)
                if (edFiCourseOffering.LocalCourseTitleOption.Value != null)
                    writer.WriteString("localCourseTitle", edFiCourseOffering.LocalCourseTitle);
                else
                    writer.WriteNull("localCourseTitle");

            if (edFiCourseOffering.OfferedGradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("offeredGradeLevels");
                JsonSerializer.Serialize(writer, edFiCourseOffering.OfferedGradeLevels, jsonSerializerOptions);
            }
            if (edFiCourseOffering.EtagOption.IsSet)
                writer.WriteString("_etag", edFiCourseOffering.Etag);

            if (edFiCourseOffering.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiCourseOffering.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiCourseOffering.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiCourseOffering.Ext, jsonSerializerOptions);
            }
        }
    }
}
