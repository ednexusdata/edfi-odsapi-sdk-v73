// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiCourseTranscript
    /// </summary>
    public partial class EdFiCourseTranscript : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCourseTranscript" /> class.
        /// </summary>
        /// <param name="courseAttemptResultDescriptor">The result from the student&#39;s attempt to take the course.</param>
        /// <param name="courseReference">courseReference</param>
        /// <param name="studentAcademicRecordReference">studentAcademicRecordReference</param>
        /// <param name="id">id</param>
        /// <param name="externalEducationOrganizationReference">externalEducationOrganizationReference</param>
        /// <param name="responsibleTeacherStaffReference">responsibleTeacherStaffReference</param>
        /// <param name="academicSubjects">An unordered collection of courseTranscriptAcademicSubjects. The subject area for the course transcript credits awarded in the course transcript.</param>
        /// <param name="alternativeCourseIdentificationCodes">An unordered collection of courseTranscriptAlternativeCourseIdentificationCodes. The code that identifies the course, course offering, the code from an external educational organization, or other alternate course code.</param>
        /// <param name="alternativeCourseTitle">The descriptive name given to a course of study offered in the school, if different from the CourseTitle.</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the course identification code.</param>
        /// <param name="attemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</param>
        /// <param name="attemptedCredits">The value of credits or units of value awarded for the completion of a course.</param>
        /// <param name="attemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course.</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code.</param>
        /// <param name="coursePrograms">An unordered collection of courseTranscriptCoursePrograms. The program(s) that the student participated in the context of the course.</param>
        /// <param name="courseRepeatCodeDescriptor">Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average.</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).</param>
        /// <param name="creditCategories">An unordered collection of courseTranscriptCreditCategories. A categorization for the course transcript credits awarded in the course transcript.</param>
        /// <param name="earnedAdditionalCredits">An unordered collection of courseTranscriptEarnedAdditionalCredits. The number of additional credits a student attempted and could earn for successfully completing a given course.</param>
        /// <param name="earnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</param>
        /// <param name="earnedCredits">The value of credits or units of value awarded for the completion of a course.</param>
        /// <param name="earnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course.</param>
        /// <param name="externalEducationOrganizationNameOfInstitution">Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available.</param>
        /// <param name="finalLetterGradeEarned">The final indicator of student performance in a class as submitted by the instructor.</param>
        /// <param name="finalNumericGradeEarned">The final indicator of student performance in a class as submitted by the instructor.</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned.</param>
        /// <param name="partialCourseTranscriptAwards">An unordered collection of courseTranscriptPartialCourseTranscriptAwards. A collection of partial credits and/or grades a student earned against the course over the session, used when awards of credit are incremental.</param>
        /// <param name="sections">An unordered collection of courseTranscriptSections. The section(s) associated with the course transcript.</param>
        /// <param name="whenTakenGradeLevelDescriptor">Student&#39;s grade level at time of course.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the CourseTranscript entity.</param>
        [JsonConstructor]
        public EdFiCourseTranscript(string courseAttemptResultDescriptor, EdFiCourseReference courseReference, EdFiStudentAcademicRecordReference studentAcademicRecordReference, Option<string?> id = default, Option<EdFiEducationOrganizationReference?> externalEducationOrganizationReference = default, Option<EdFiStaffReference?> responsibleTeacherStaffReference = default, Option<List<EdFiCourseTranscriptAcademicSubject>?> academicSubjects = default, Option<List<EdFiCourseTranscriptAlternativeCourseIdentificationCode>?> alternativeCourseIdentificationCodes = default, Option<string?> alternativeCourseTitle = default, Option<string?> assigningOrganizationIdentificationCode = default, Option<double?> attemptedCreditConversion = default, Option<double?> attemptedCredits = default, Option<string?> attemptedCreditTypeDescriptor = default, Option<string?> courseCatalogURL = default, Option<List<EdFiCourseTranscriptCourseProgram>?> coursePrograms = default, Option<string?> courseRepeatCodeDescriptor = default, Option<string?> courseTitle = default, Option<List<EdFiCourseTranscriptCreditCategory>?> creditCategories = default, Option<List<EdFiCourseTranscriptEarnedAdditionalCredits>?> earnedAdditionalCredits = default, Option<double?> earnedCreditConversion = default, Option<double?> earnedCredits = default, Option<string?> earnedCreditTypeDescriptor = default, Option<string?> externalEducationOrganizationNameOfInstitution = default, Option<string?> finalLetterGradeEarned = default, Option<double?> finalNumericGradeEarned = default, Option<string?> methodCreditEarnedDescriptor = default, Option<List<EdFiCourseTranscriptPartialCourseTranscriptAwards>?> partialCourseTranscriptAwards = default, Option<List<EdFiCourseTranscriptSection>?> sections = default, Option<string?> whenTakenGradeLevelDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            CourseAttemptResultDescriptor = courseAttemptResultDescriptor;
            CourseReference = courseReference;
            StudentAcademicRecordReference = studentAcademicRecordReference;
            IdOption = id;
            ExternalEducationOrganizationReferenceOption = externalEducationOrganizationReference;
            ResponsibleTeacherStaffReferenceOption = responsibleTeacherStaffReference;
            AcademicSubjectsOption = academicSubjects;
            AlternativeCourseIdentificationCodesOption = alternativeCourseIdentificationCodes;
            AlternativeCourseTitleOption = alternativeCourseTitle;
            AssigningOrganizationIdentificationCodeOption = assigningOrganizationIdentificationCode;
            AttemptedCreditConversionOption = attemptedCreditConversion;
            AttemptedCreditsOption = attemptedCredits;
            AttemptedCreditTypeDescriptorOption = attemptedCreditTypeDescriptor;
            CourseCatalogURLOption = courseCatalogURL;
            CourseProgramsOption = coursePrograms;
            CourseRepeatCodeDescriptorOption = courseRepeatCodeDescriptor;
            CourseTitleOption = courseTitle;
            CreditCategoriesOption = creditCategories;
            EarnedAdditionalCreditsOption = earnedAdditionalCredits;
            EarnedCreditConversionOption = earnedCreditConversion;
            EarnedCreditsOption = earnedCredits;
            EarnedCreditTypeDescriptorOption = earnedCreditTypeDescriptor;
            ExternalEducationOrganizationNameOfInstitutionOption = externalEducationOrganizationNameOfInstitution;
            FinalLetterGradeEarnedOption = finalLetterGradeEarned;
            FinalNumericGradeEarnedOption = finalNumericGradeEarned;
            MethodCreditEarnedDescriptorOption = methodCreditEarnedDescriptor;
            PartialCourseTranscriptAwardsOption = partialCourseTranscriptAwards;
            SectionsOption = sections;
            WhenTakenGradeLevelDescriptorOption = whenTakenGradeLevelDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The result from the student&#39;s attempt to take the course.
        /// </summary>
        /// <value>The result from the student&#39;s attempt to take the course.</value>
        [JsonPropertyName("courseAttemptResultDescriptor")]
        public string CourseAttemptResultDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets CourseReference
        /// </summary>
        [JsonPropertyName("courseReference")]
        public EdFiCourseReference CourseReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentAcademicRecordReference
        /// </summary>
        [JsonPropertyName("studentAcademicRecordReference")]
        public EdFiStudentAcademicRecordReference StudentAcademicRecordReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalEducationOrganizationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiEducationOrganizationReference?> ExternalEducationOrganizationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExternalEducationOrganizationReference
        /// </summary>
        [JsonPropertyName("externalEducationOrganizationReference")]
        public EdFiEducationOrganizationReference? ExternalEducationOrganizationReference { get { return this.ExternalEducationOrganizationReferenceOption; } set { this.ExternalEducationOrganizationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResponsibleTeacherStaffReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiStaffReference?> ResponsibleTeacherStaffReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResponsibleTeacherStaffReference
        /// </summary>
        [JsonPropertyName("responsibleTeacherStaffReference")]
        public EdFiStaffReference? ResponsibleTeacherStaffReference { get { return this.ResponsibleTeacherStaffReferenceOption; } set { this.ResponsibleTeacherStaffReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AcademicSubjects
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseTranscriptAcademicSubject>?> AcademicSubjectsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseTranscriptAcademicSubjects. The subject area for the course transcript credits awarded in the course transcript.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptAcademicSubjects. The subject area for the course transcript credits awarded in the course transcript.</value>
        [JsonPropertyName("academicSubjects")]
        public List<EdFiCourseTranscriptAcademicSubject>? AcademicSubjects { get { return this.AcademicSubjectsOption; } set { this.AcademicSubjectsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AlternativeCourseIdentificationCodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseTranscriptAlternativeCourseIdentificationCode>?> AlternativeCourseIdentificationCodesOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseTranscriptAlternativeCourseIdentificationCodes. The code that identifies the course, course offering, the code from an external educational organization, or other alternate course code.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptAlternativeCourseIdentificationCodes. The code that identifies the course, course offering, the code from an external educational organization, or other alternate course code.</value>
        [JsonPropertyName("alternativeCourseIdentificationCodes")]
        public List<EdFiCourseTranscriptAlternativeCourseIdentificationCode>? AlternativeCourseIdentificationCodes { get { return this.AlternativeCourseIdentificationCodesOption; } set { this.AlternativeCourseIdentificationCodesOption = new(value); } }

        /// <summary>
        /// Used to track the state of AlternativeCourseTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AlternativeCourseTitleOption { get; private set; }

        /// <summary>
        /// The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
        /// </summary>
        /// <value>The descriptive name given to a course of study offered in the school, if different from the CourseTitle.</value>
        [JsonPropertyName("alternativeCourseTitle")]
        public string? AlternativeCourseTitle { get { return this.AlternativeCourseTitleOption; } set { this.AlternativeCourseTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssigningOrganizationIdentificationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssigningOrganizationIdentificationCodeOption { get; private set; }

        /// <summary>
        /// The organization code or name assigning the course identification code.
        /// </summary>
        /// <value>The organization code or name assigning the course identification code.</value>
        [JsonPropertyName("assigningOrganizationIdentificationCode")]
        public string? AssigningOrganizationIdentificationCode { get { return this.AssigningOrganizationIdentificationCodeOption; } set { this.AssigningOrganizationIdentificationCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttemptedCreditConversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AttemptedCreditConversionOption { get; private set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [JsonPropertyName("attemptedCreditConversion")]
        public double? AttemptedCreditConversion { get { return this.AttemptedCreditConversionOption; } set { this.AttemptedCreditConversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttemptedCredits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AttemptedCreditsOption { get; private set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("attemptedCredits")]
        public double? AttemptedCredits { get { return this.AttemptedCreditsOption; } set { this.AttemptedCreditsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttemptedCreditTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AttemptedCreditTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("attemptedCreditTypeDescriptor")]
        public string? AttemptedCreditTypeDescriptor { get { return this.AttemptedCreditTypeDescriptorOption; } set { this.AttemptedCreditTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CourseCatalogURL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CourseCatalogURLOption { get; private set; }

        /// <summary>
        /// The URL for the course catalog that defines the course identification code.
        /// </summary>
        /// <value>The URL for the course catalog that defines the course identification code.</value>
        [JsonPropertyName("courseCatalogURL")]
        public string? CourseCatalogURL { get { return this.CourseCatalogURLOption; } set { this.CourseCatalogURLOption = new(value); } }

        /// <summary>
        /// Used to track the state of CoursePrograms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseTranscriptCourseProgram>?> CourseProgramsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseTranscriptCoursePrograms. The program(s) that the student participated in the context of the course.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptCoursePrograms. The program(s) that the student participated in the context of the course.</value>
        [JsonPropertyName("coursePrograms")]
        public List<EdFiCourseTranscriptCourseProgram>? CoursePrograms { get { return this.CourseProgramsOption; } set { this.CourseProgramsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CourseRepeatCodeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CourseRepeatCodeDescriptorOption { get; private set; }

        /// <summary>
        /// Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average.
        /// </summary>
        /// <value>Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average.</value>
        [JsonPropertyName("courseRepeatCodeDescriptor")]
        public string? CourseRepeatCodeDescriptor { get { return this.CourseRepeatCodeDescriptorOption; } set { this.CourseRepeatCodeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CourseTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CourseTitleOption { get; private set; }

        /// <summary>
        /// The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).
        /// </summary>
        /// <value>The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).</value>
        [JsonPropertyName("courseTitle")]
        public string? CourseTitle { get { return this.CourseTitleOption; } set { this.CourseTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditCategories
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseTranscriptCreditCategory>?> CreditCategoriesOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseTranscriptCreditCategories. A categorization for the course transcript credits awarded in the course transcript.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptCreditCategories. A categorization for the course transcript credits awarded in the course transcript.</value>
        [JsonPropertyName("creditCategories")]
        public List<EdFiCourseTranscriptCreditCategory>? CreditCategories { get { return this.CreditCategoriesOption; } set { this.CreditCategoriesOption = new(value); } }

        /// <summary>
        /// Used to track the state of EarnedAdditionalCredits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseTranscriptEarnedAdditionalCredits>?> EarnedAdditionalCreditsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseTranscriptEarnedAdditionalCredits. The number of additional credits a student attempted and could earn for successfully completing a given course.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptEarnedAdditionalCredits. The number of additional credits a student attempted and could earn for successfully completing a given course.</value>
        [JsonPropertyName("earnedAdditionalCredits")]
        public List<EdFiCourseTranscriptEarnedAdditionalCredits>? EarnedAdditionalCredits { get { return this.EarnedAdditionalCreditsOption; } set { this.EarnedAdditionalCreditsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EarnedCreditConversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> EarnedCreditConversionOption { get; private set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [JsonPropertyName("earnedCreditConversion")]
        public double? EarnedCreditConversion { get { return this.EarnedCreditConversionOption; } set { this.EarnedCreditConversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of EarnedCredits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> EarnedCreditsOption { get; private set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("earnedCredits")]
        public double? EarnedCredits { get { return this.EarnedCreditsOption; } set { this.EarnedCreditsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EarnedCreditTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EarnedCreditTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("earnedCreditTypeDescriptor")]
        public string? EarnedCreditTypeDescriptor { get { return this.EarnedCreditTypeDescriptorOption; } set { this.EarnedCreditTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalEducationOrganizationNameOfInstitution
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalEducationOrganizationNameOfInstitutionOption { get; private set; }

        /// <summary>
        /// Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available.
        /// </summary>
        /// <value>Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available.</value>
        [JsonPropertyName("externalEducationOrganizationNameOfInstitution")]
        public string? ExternalEducationOrganizationNameOfInstitution { get { return this.ExternalEducationOrganizationNameOfInstitutionOption; } set { this.ExternalEducationOrganizationNameOfInstitutionOption = new(value); } }

        /// <summary>
        /// Used to track the state of FinalLetterGradeEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FinalLetterGradeEarnedOption { get; private set; }

        /// <summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>The final indicator of student performance in a class as submitted by the instructor.</value>
        [JsonPropertyName("finalLetterGradeEarned")]
        public string? FinalLetterGradeEarned { get { return this.FinalLetterGradeEarnedOption; } set { this.FinalLetterGradeEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of FinalNumericGradeEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> FinalNumericGradeEarnedOption { get; private set; }

        /// <summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>The final indicator of student performance in a class as submitted by the instructor.</value>
        [JsonPropertyName("finalNumericGradeEarned")]
        public double? FinalNumericGradeEarned { get { return this.FinalNumericGradeEarnedOption; } set { this.FinalNumericGradeEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of MethodCreditEarnedDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MethodCreditEarnedDescriptorOption { get; private set; }

        /// <summary>
        /// The method the credits were earned.
        /// </summary>
        /// <value>The method the credits were earned.</value>
        [JsonPropertyName("methodCreditEarnedDescriptor")]
        public string? MethodCreditEarnedDescriptor { get { return this.MethodCreditEarnedDescriptorOption; } set { this.MethodCreditEarnedDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of PartialCourseTranscriptAwards
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseTranscriptPartialCourseTranscriptAwards>?> PartialCourseTranscriptAwardsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseTranscriptPartialCourseTranscriptAwards. A collection of partial credits and/or grades a student earned against the course over the session, used when awards of credit are incremental.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptPartialCourseTranscriptAwards. A collection of partial credits and/or grades a student earned against the course over the session, used when awards of credit are incremental.</value>
        [JsonPropertyName("partialCourseTranscriptAwards")]
        public List<EdFiCourseTranscriptPartialCourseTranscriptAwards>? PartialCourseTranscriptAwards { get { return this.PartialCourseTranscriptAwardsOption; } set { this.PartialCourseTranscriptAwardsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sections
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCourseTranscriptSection>?> SectionsOption { get; private set; }

        /// <summary>
        /// An unordered collection of courseTranscriptSections. The section(s) associated with the course transcript.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptSections. The section(s) associated with the course transcript.</value>
        [JsonPropertyName("sections")]
        public List<EdFiCourseTranscriptSection>? Sections { get { return this.SectionsOption; } set { this.SectionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of WhenTakenGradeLevelDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WhenTakenGradeLevelDescriptorOption { get; private set; }

        /// <summary>
        /// Student&#39;s grade level at time of course.
        /// </summary>
        /// <value>Student&#39;s grade level at time of course.</value>
        [JsonPropertyName("whenTakenGradeLevelDescriptor")]
        public string? WhenTakenGradeLevelDescriptor { get { return this.WhenTakenGradeLevelDescriptorOption; } set { this.WhenTakenGradeLevelDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the CourseTranscript entity.
        /// </summary>
        /// <value>Extensions to the CourseTranscript entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCourseTranscript {\n");
            sb.Append("  CourseAttemptResultDescriptor: ").Append(CourseAttemptResultDescriptor).Append("\n");
            sb.Append("  CourseReference: ").Append(CourseReference).Append("\n");
            sb.Append("  StudentAcademicRecordReference: ").Append(StudentAcademicRecordReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExternalEducationOrganizationReference: ").Append(ExternalEducationOrganizationReference).Append("\n");
            sb.Append("  ResponsibleTeacherStaffReference: ").Append(ResponsibleTeacherStaffReference).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  AlternativeCourseIdentificationCodes: ").Append(AlternativeCourseIdentificationCodes).Append("\n");
            sb.Append("  AlternativeCourseTitle: ").Append(AlternativeCourseTitle).Append("\n");
            sb.Append("  AssigningOrganizationIdentificationCode: ").Append(AssigningOrganizationIdentificationCode).Append("\n");
            sb.Append("  AttemptedCreditConversion: ").Append(AttemptedCreditConversion).Append("\n");
            sb.Append("  AttemptedCredits: ").Append(AttemptedCredits).Append("\n");
            sb.Append("  AttemptedCreditTypeDescriptor: ").Append(AttemptedCreditTypeDescriptor).Append("\n");
            sb.Append("  CourseCatalogURL: ").Append(CourseCatalogURL).Append("\n");
            sb.Append("  CoursePrograms: ").Append(CoursePrograms).Append("\n");
            sb.Append("  CourseRepeatCodeDescriptor: ").Append(CourseRepeatCodeDescriptor).Append("\n");
            sb.Append("  CourseTitle: ").Append(CourseTitle).Append("\n");
            sb.Append("  CreditCategories: ").Append(CreditCategories).Append("\n");
            sb.Append("  EarnedAdditionalCredits: ").Append(EarnedAdditionalCredits).Append("\n");
            sb.Append("  EarnedCreditConversion: ").Append(EarnedCreditConversion).Append("\n");
            sb.Append("  EarnedCredits: ").Append(EarnedCredits).Append("\n");
            sb.Append("  EarnedCreditTypeDescriptor: ").Append(EarnedCreditTypeDescriptor).Append("\n");
            sb.Append("  ExternalEducationOrganizationNameOfInstitution: ").Append(ExternalEducationOrganizationNameOfInstitution).Append("\n");
            sb.Append("  FinalLetterGradeEarned: ").Append(FinalLetterGradeEarned).Append("\n");
            sb.Append("  FinalNumericGradeEarned: ").Append(FinalNumericGradeEarned).Append("\n");
            sb.Append("  MethodCreditEarnedDescriptor: ").Append(MethodCreditEarnedDescriptor).Append("\n");
            sb.Append("  PartialCourseTranscriptAwards: ").Append(PartialCourseTranscriptAwards).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  WhenTakenGradeLevelDescriptor: ").Append(WhenTakenGradeLevelDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CourseAttemptResultDescriptor (string) maxLength
            if (this.CourseAttemptResultDescriptor != null && this.CourseAttemptResultDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CourseAttemptResultDescriptor, length must be less than 306.", new [] { "CourseAttemptResultDescriptor" });
            }

            // AlternativeCourseTitle (string) maxLength
            if (this.AlternativeCourseTitle != null && this.AlternativeCourseTitle.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AlternativeCourseTitle, length must be less than 60.", new [] { "AlternativeCourseTitle" });
            }

            // AssigningOrganizationIdentificationCode (string) maxLength
            if (this.AssigningOrganizationIdentificationCode != null && this.AssigningOrganizationIdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AssigningOrganizationIdentificationCode, length must be less than 60.", new [] { "AssigningOrganizationIdentificationCode" });
            }

            // AttemptedCreditConversion (double) maximum
            if (this.AttemptedCreditConversionOption.IsSet && this.AttemptedCreditConversionOption.Value > (double)9999999.99)
            {
                yield return new ValidationResult("Invalid value for AttemptedCreditConversion, must be a value less than or equal to 9999999.99.", new [] { "AttemptedCreditConversion" });
            }

            // AttemptedCreditConversion (double) minimum
            if (this.AttemptedCreditConversionOption.IsSet && this.AttemptedCreditConversionOption.Value < (double)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for AttemptedCreditConversion, must be a value greater than or equal to -9999999.99.", new [] { "AttemptedCreditConversion" });
            }

            // AttemptedCredits (double) maximum
            if (this.AttemptedCreditsOption.IsSet && this.AttemptedCreditsOption.Value > (double)999999.999)
            {
                yield return new ValidationResult("Invalid value for AttemptedCredits, must be a value less than or equal to 999999.999.", new [] { "AttemptedCredits" });
            }

            // AttemptedCredits (double) minimum
            if (this.AttemptedCreditsOption.IsSet && this.AttemptedCreditsOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for AttemptedCredits, must be a value greater than or equal to 0.0.", new [] { "AttemptedCredits" });
            }

            // AttemptedCreditTypeDescriptor (string) maxLength
            if (this.AttemptedCreditTypeDescriptor != null && this.AttemptedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AttemptedCreditTypeDescriptor, length must be less than 306.", new [] { "AttemptedCreditTypeDescriptor" });
            }

            // CourseCatalogURL (string) maxLength
            if (this.CourseCatalogURL != null && this.CourseCatalogURL.Length > 255)
            {
                yield return new ValidationResult("Invalid value for CourseCatalogURL, length must be less than 255.", new [] { "CourseCatalogURL" });
            }

            // CourseCatalogURL (string) minLength
            if (this.CourseCatalogURL != null && this.CourseCatalogURL.Length < 5)
            {
                yield return new ValidationResult("Invalid value for CourseCatalogURL, length must be greater than 5.", new [] { "CourseCatalogURL" });
            }

            // CourseRepeatCodeDescriptor (string) maxLength
            if (this.CourseRepeatCodeDescriptor != null && this.CourseRepeatCodeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CourseRepeatCodeDescriptor, length must be less than 306.", new [] { "CourseRepeatCodeDescriptor" });
            }

            // CourseTitle (string) maxLength
            if (this.CourseTitle != null && this.CourseTitle.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CourseTitle, length must be less than 60.", new [] { "CourseTitle" });
            }

            // EarnedCreditConversion (double) maximum
            if (this.EarnedCreditConversionOption.IsSet && this.EarnedCreditConversionOption.Value > (double)9999999.99)
            {
                yield return new ValidationResult("Invalid value for EarnedCreditConversion, must be a value less than or equal to 9999999.99.", new [] { "EarnedCreditConversion" });
            }

            // EarnedCreditConversion (double) minimum
            if (this.EarnedCreditConversionOption.IsSet && this.EarnedCreditConversionOption.Value < (double)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for EarnedCreditConversion, must be a value greater than or equal to -9999999.99.", new [] { "EarnedCreditConversion" });
            }

            // EarnedCredits (double) maximum
            if (this.EarnedCreditsOption.IsSet && this.EarnedCreditsOption.Value > (double)999999.999)
            {
                yield return new ValidationResult("Invalid value for EarnedCredits, must be a value less than or equal to 999999.999.", new [] { "EarnedCredits" });
            }

            // EarnedCredits (double) minimum
            if (this.EarnedCreditsOption.IsSet && this.EarnedCreditsOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for EarnedCredits, must be a value greater than or equal to 0.0.", new [] { "EarnedCredits" });
            }

            // EarnedCreditTypeDescriptor (string) maxLength
            if (this.EarnedCreditTypeDescriptor != null && this.EarnedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EarnedCreditTypeDescriptor, length must be less than 306.", new [] { "EarnedCreditTypeDescriptor" });
            }

            // ExternalEducationOrganizationNameOfInstitution (string) maxLength
            if (this.ExternalEducationOrganizationNameOfInstitution != null && this.ExternalEducationOrganizationNameOfInstitution.Length > 75)
            {
                yield return new ValidationResult("Invalid value for ExternalEducationOrganizationNameOfInstitution, length must be less than 75.", new [] { "ExternalEducationOrganizationNameOfInstitution" });
            }

            // FinalLetterGradeEarned (string) maxLength
            if (this.FinalLetterGradeEarned != null && this.FinalLetterGradeEarned.Length > 20)
            {
                yield return new ValidationResult("Invalid value for FinalLetterGradeEarned, length must be less than 20.", new [] { "FinalLetterGradeEarned" });
            }

            // FinalNumericGradeEarned (double) maximum
            if (this.FinalNumericGradeEarnedOption.IsSet && this.FinalNumericGradeEarnedOption.Value > (double)9999999.99)
            {
                yield return new ValidationResult("Invalid value for FinalNumericGradeEarned, must be a value less than or equal to 9999999.99.", new [] { "FinalNumericGradeEarned" });
            }

            // FinalNumericGradeEarned (double) minimum
            if (this.FinalNumericGradeEarnedOption.IsSet && this.FinalNumericGradeEarnedOption.Value < (double)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for FinalNumericGradeEarned, must be a value greater than or equal to -9999999.99.", new [] { "FinalNumericGradeEarned" });
            }

            // MethodCreditEarnedDescriptor (string) maxLength
            if (this.MethodCreditEarnedDescriptor != null && this.MethodCreditEarnedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for MethodCreditEarnedDescriptor, length must be less than 306.", new [] { "MethodCreditEarnedDescriptor" });
            }

            // WhenTakenGradeLevelDescriptor (string) maxLength
            if (this.WhenTakenGradeLevelDescriptor != null && this.WhenTakenGradeLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for WhenTakenGradeLevelDescriptor, length must be less than 306.", new [] { "WhenTakenGradeLevelDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiCourseTranscript" />
    /// </summary>
    public class EdFiCourseTranscriptJsonConverter : JsonConverter<EdFiCourseTranscript>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiCourseTranscript" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiCourseTranscript Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> courseAttemptResultDescriptor = default;
            Option<EdFiCourseReference?> courseReference = default;
            Option<EdFiStudentAcademicRecordReference?> studentAcademicRecordReference = default;
            Option<string?> id = default;
            Option<EdFiEducationOrganizationReference?> externalEducationOrganizationReference = default;
            Option<EdFiStaffReference?> responsibleTeacherStaffReference = default;
            Option<List<EdFiCourseTranscriptAcademicSubject>?> academicSubjects = default;
            Option<List<EdFiCourseTranscriptAlternativeCourseIdentificationCode>?> alternativeCourseIdentificationCodes = default;
            Option<string?> alternativeCourseTitle = default;
            Option<string?> assigningOrganizationIdentificationCode = default;
            Option<double?> attemptedCreditConversion = default;
            Option<double?> attemptedCredits = default;
            Option<string?> attemptedCreditTypeDescriptor = default;
            Option<string?> courseCatalogURL = default;
            Option<List<EdFiCourseTranscriptCourseProgram>?> coursePrograms = default;
            Option<string?> courseRepeatCodeDescriptor = default;
            Option<string?> courseTitle = default;
            Option<List<EdFiCourseTranscriptCreditCategory>?> creditCategories = default;
            Option<List<EdFiCourseTranscriptEarnedAdditionalCredits>?> earnedAdditionalCredits = default;
            Option<double?> earnedCreditConversion = default;
            Option<double?> earnedCredits = default;
            Option<string?> earnedCreditTypeDescriptor = default;
            Option<string?> externalEducationOrganizationNameOfInstitution = default;
            Option<string?> finalLetterGradeEarned = default;
            Option<double?> finalNumericGradeEarned = default;
            Option<string?> methodCreditEarnedDescriptor = default;
            Option<List<EdFiCourseTranscriptPartialCourseTranscriptAwards>?> partialCourseTranscriptAwards = default;
            Option<List<EdFiCourseTranscriptSection>?> sections = default;
            Option<string?> whenTakenGradeLevelDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "courseAttemptResultDescriptor":
                            courseAttemptResultDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "courseReference":
                            courseReference = new Option<EdFiCourseReference?>(JsonSerializer.Deserialize<EdFiCourseReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentAcademicRecordReference":
                            studentAcademicRecordReference = new Option<EdFiStudentAcademicRecordReference?>(JsonSerializer.Deserialize<EdFiStudentAcademicRecordReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "externalEducationOrganizationReference":
                            externalEducationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "responsibleTeacherStaffReference":
                            responsibleTeacherStaffReference = new Option<EdFiStaffReference?>(JsonSerializer.Deserialize<EdFiStaffReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "academicSubjects":
                            academicSubjects = new Option<List<EdFiCourseTranscriptAcademicSubject>?>(JsonSerializer.Deserialize<List<EdFiCourseTranscriptAcademicSubject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "alternativeCourseIdentificationCodes":
                            alternativeCourseIdentificationCodes = new Option<List<EdFiCourseTranscriptAlternativeCourseIdentificationCode>?>(JsonSerializer.Deserialize<List<EdFiCourseTranscriptAlternativeCourseIdentificationCode>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "alternativeCourseTitle":
                            alternativeCourseTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "assigningOrganizationIdentificationCode":
                            assigningOrganizationIdentificationCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "attemptedCreditConversion":
                            attemptedCreditConversion = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "attemptedCredits":
                            attemptedCredits = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "attemptedCreditTypeDescriptor":
                            attemptedCreditTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "courseCatalogURL":
                            courseCatalogURL = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "coursePrograms":
                            coursePrograms = new Option<List<EdFiCourseTranscriptCourseProgram>?>(JsonSerializer.Deserialize<List<EdFiCourseTranscriptCourseProgram>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "courseRepeatCodeDescriptor":
                            courseRepeatCodeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "courseTitle":
                            courseTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "creditCategories":
                            creditCategories = new Option<List<EdFiCourseTranscriptCreditCategory>?>(JsonSerializer.Deserialize<List<EdFiCourseTranscriptCreditCategory>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "earnedAdditionalCredits":
                            earnedAdditionalCredits = new Option<List<EdFiCourseTranscriptEarnedAdditionalCredits>?>(JsonSerializer.Deserialize<List<EdFiCourseTranscriptEarnedAdditionalCredits>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "earnedCreditConversion":
                            earnedCreditConversion = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "earnedCredits":
                            earnedCredits = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "earnedCreditTypeDescriptor":
                            earnedCreditTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "externalEducationOrganizationNameOfInstitution":
                            externalEducationOrganizationNameOfInstitution = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "finalLetterGradeEarned":
                            finalLetterGradeEarned = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "finalNumericGradeEarned":
                            finalNumericGradeEarned = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "methodCreditEarnedDescriptor":
                            methodCreditEarnedDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "partialCourseTranscriptAwards":
                            partialCourseTranscriptAwards = new Option<List<EdFiCourseTranscriptPartialCourseTranscriptAwards>?>(JsonSerializer.Deserialize<List<EdFiCourseTranscriptPartialCourseTranscriptAwards>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sections":
                            sections = new Option<List<EdFiCourseTranscriptSection>?>(JsonSerializer.Deserialize<List<EdFiCourseTranscriptSection>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "whenTakenGradeLevelDescriptor":
                            whenTakenGradeLevelDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!courseAttemptResultDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourseTranscript.", nameof(courseAttemptResultDescriptor));

            if (!courseReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourseTranscript.", nameof(courseReference));

            if (!studentAcademicRecordReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourseTranscript.", nameof(studentAcademicRecordReference));

            if (courseAttemptResultDescriptor.IsSet && courseAttemptResultDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseAttemptResultDescriptor), "Property is not nullable for class EdFiCourseTranscript.");

            if (courseReference.IsSet && courseReference.Value == null)
                throw new ArgumentNullException(nameof(courseReference), "Property is not nullable for class EdFiCourseTranscript.");

            if (studentAcademicRecordReference.IsSet && studentAcademicRecordReference.Value == null)
                throw new ArgumentNullException(nameof(studentAcademicRecordReference), "Property is not nullable for class EdFiCourseTranscript.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiCourseTranscript.");

            if (externalEducationOrganizationReference.IsSet && externalEducationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(externalEducationOrganizationReference), "Property is not nullable for class EdFiCourseTranscript.");

            if (responsibleTeacherStaffReference.IsSet && responsibleTeacherStaffReference.Value == null)
                throw new ArgumentNullException(nameof(responsibleTeacherStaffReference), "Property is not nullable for class EdFiCourseTranscript.");

            if (academicSubjects.IsSet && academicSubjects.Value == null)
                throw new ArgumentNullException(nameof(academicSubjects), "Property is not nullable for class EdFiCourseTranscript.");

            if (alternativeCourseIdentificationCodes.IsSet && alternativeCourseIdentificationCodes.Value == null)
                throw new ArgumentNullException(nameof(alternativeCourseIdentificationCodes), "Property is not nullable for class EdFiCourseTranscript.");

            if (coursePrograms.IsSet && coursePrograms.Value == null)
                throw new ArgumentNullException(nameof(coursePrograms), "Property is not nullable for class EdFiCourseTranscript.");

            if (creditCategories.IsSet && creditCategories.Value == null)
                throw new ArgumentNullException(nameof(creditCategories), "Property is not nullable for class EdFiCourseTranscript.");

            if (earnedAdditionalCredits.IsSet && earnedAdditionalCredits.Value == null)
                throw new ArgumentNullException(nameof(earnedAdditionalCredits), "Property is not nullable for class EdFiCourseTranscript.");

            if (partialCourseTranscriptAwards.IsSet && partialCourseTranscriptAwards.Value == null)
                throw new ArgumentNullException(nameof(partialCourseTranscriptAwards), "Property is not nullable for class EdFiCourseTranscript.");

            if (sections.IsSet && sections.Value == null)
                throw new ArgumentNullException(nameof(sections), "Property is not nullable for class EdFiCourseTranscript.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiCourseTranscript.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiCourseTranscript.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiCourseTranscript.");

            return new EdFiCourseTranscript(courseAttemptResultDescriptor.Value!, courseReference.Value!, studentAcademicRecordReference.Value!, id, externalEducationOrganizationReference, responsibleTeacherStaffReference, academicSubjects, alternativeCourseIdentificationCodes, alternativeCourseTitle, assigningOrganizationIdentificationCode, attemptedCreditConversion, attemptedCredits, attemptedCreditTypeDescriptor, courseCatalogURL, coursePrograms, courseRepeatCodeDescriptor, courseTitle, creditCategories, earnedAdditionalCredits, earnedCreditConversion, earnedCredits, earnedCreditTypeDescriptor, externalEducationOrganizationNameOfInstitution, finalLetterGradeEarned, finalNumericGradeEarned, methodCreditEarnedDescriptor, partialCourseTranscriptAwards, sections, whenTakenGradeLevelDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiCourseTranscript" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCourseTranscript"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiCourseTranscript edFiCourseTranscript, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiCourseTranscript, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiCourseTranscript" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCourseTranscript"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiCourseTranscript edFiCourseTranscript, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiCourseTranscript.CourseAttemptResultDescriptor == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.CourseAttemptResultDescriptor), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.CourseReference == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.CourseReference), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.StudentAcademicRecordReference == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.StudentAcademicRecordReference), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.IdOption.IsSet && edFiCourseTranscript.Id == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.Id), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.ExternalEducationOrganizationReferenceOption.IsSet && edFiCourseTranscript.ExternalEducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.ExternalEducationOrganizationReference), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.ResponsibleTeacherStaffReferenceOption.IsSet && edFiCourseTranscript.ResponsibleTeacherStaffReference == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.ResponsibleTeacherStaffReference), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.AcademicSubjectsOption.IsSet && edFiCourseTranscript.AcademicSubjects == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.AcademicSubjects), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.AlternativeCourseIdentificationCodesOption.IsSet && edFiCourseTranscript.AlternativeCourseIdentificationCodes == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.AlternativeCourseIdentificationCodes), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.CourseProgramsOption.IsSet && edFiCourseTranscript.CoursePrograms == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.CoursePrograms), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.CreditCategoriesOption.IsSet && edFiCourseTranscript.CreditCategories == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.CreditCategories), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.EarnedAdditionalCreditsOption.IsSet && edFiCourseTranscript.EarnedAdditionalCredits == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.EarnedAdditionalCredits), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.PartialCourseTranscriptAwardsOption.IsSet && edFiCourseTranscript.PartialCourseTranscriptAwards == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.PartialCourseTranscriptAwards), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.SectionsOption.IsSet && edFiCourseTranscript.Sections == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.Sections), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.EtagOption.IsSet && edFiCourseTranscript.Etag == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.Etag), "Property is required for class EdFiCourseTranscript.");

            if (edFiCourseTranscript.ExtOption.IsSet && edFiCourseTranscript.Ext == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscript.Ext), "Property is required for class EdFiCourseTranscript.");

            writer.WriteString("courseAttemptResultDescriptor", edFiCourseTranscript.CourseAttemptResultDescriptor);

            writer.WritePropertyName("courseReference");
            JsonSerializer.Serialize(writer, edFiCourseTranscript.CourseReference, jsonSerializerOptions);
            writer.WritePropertyName("studentAcademicRecordReference");
            JsonSerializer.Serialize(writer, edFiCourseTranscript.StudentAcademicRecordReference, jsonSerializerOptions);
            if (edFiCourseTranscript.IdOption.IsSet)
                writer.WriteString("id", edFiCourseTranscript.Id);

            if (edFiCourseTranscript.ExternalEducationOrganizationReferenceOption.IsSet)
            {
                writer.WritePropertyName("externalEducationOrganizationReference");
                JsonSerializer.Serialize(writer, edFiCourseTranscript.ExternalEducationOrganizationReference, jsonSerializerOptions);
            }
            if (edFiCourseTranscript.ResponsibleTeacherStaffReferenceOption.IsSet)
            {
                writer.WritePropertyName("responsibleTeacherStaffReference");
                JsonSerializer.Serialize(writer, edFiCourseTranscript.ResponsibleTeacherStaffReference, jsonSerializerOptions);
            }
            if (edFiCourseTranscript.AcademicSubjectsOption.IsSet)
            {
                writer.WritePropertyName("academicSubjects");
                JsonSerializer.Serialize(writer, edFiCourseTranscript.AcademicSubjects, jsonSerializerOptions);
            }
            if (edFiCourseTranscript.AlternativeCourseIdentificationCodesOption.IsSet)
            {
                writer.WritePropertyName("alternativeCourseIdentificationCodes");
                JsonSerializer.Serialize(writer, edFiCourseTranscript.AlternativeCourseIdentificationCodes, jsonSerializerOptions);
            }
            if (edFiCourseTranscript.AlternativeCourseTitleOption.IsSet)
                if (edFiCourseTranscript.AlternativeCourseTitleOption.Value != null)
                    writer.WriteString("alternativeCourseTitle", edFiCourseTranscript.AlternativeCourseTitle);
                else
                    writer.WriteNull("alternativeCourseTitle");

            if (edFiCourseTranscript.AssigningOrganizationIdentificationCodeOption.IsSet)
                if (edFiCourseTranscript.AssigningOrganizationIdentificationCodeOption.Value != null)
                    writer.WriteString("assigningOrganizationIdentificationCode", edFiCourseTranscript.AssigningOrganizationIdentificationCode);
                else
                    writer.WriteNull("assigningOrganizationIdentificationCode");

            if (edFiCourseTranscript.AttemptedCreditConversionOption.IsSet)
                if (edFiCourseTranscript.AttemptedCreditConversionOption.Value != null)
                    writer.WriteNumber("attemptedCreditConversion", edFiCourseTranscript.AttemptedCreditConversionOption.Value!.Value);
                else
                    writer.WriteNull("attemptedCreditConversion");

            if (edFiCourseTranscript.AttemptedCreditsOption.IsSet)
                if (edFiCourseTranscript.AttemptedCreditsOption.Value != null)
                    writer.WriteNumber("attemptedCredits", edFiCourseTranscript.AttemptedCreditsOption.Value!.Value);
                else
                    writer.WriteNull("attemptedCredits");

            if (edFiCourseTranscript.AttemptedCreditTypeDescriptorOption.IsSet)
                if (edFiCourseTranscript.AttemptedCreditTypeDescriptorOption.Value != null)
                    writer.WriteString("attemptedCreditTypeDescriptor", edFiCourseTranscript.AttemptedCreditTypeDescriptor);
                else
                    writer.WriteNull("attemptedCreditTypeDescriptor");

            if (edFiCourseTranscript.CourseCatalogURLOption.IsSet)
                if (edFiCourseTranscript.CourseCatalogURLOption.Value != null)
                    writer.WriteString("courseCatalogURL", edFiCourseTranscript.CourseCatalogURL);
                else
                    writer.WriteNull("courseCatalogURL");

            if (edFiCourseTranscript.CourseProgramsOption.IsSet)
            {
                writer.WritePropertyName("coursePrograms");
                JsonSerializer.Serialize(writer, edFiCourseTranscript.CoursePrograms, jsonSerializerOptions);
            }
            if (edFiCourseTranscript.CourseRepeatCodeDescriptorOption.IsSet)
                if (edFiCourseTranscript.CourseRepeatCodeDescriptorOption.Value != null)
                    writer.WriteString("courseRepeatCodeDescriptor", edFiCourseTranscript.CourseRepeatCodeDescriptor);
                else
                    writer.WriteNull("courseRepeatCodeDescriptor");

            if (edFiCourseTranscript.CourseTitleOption.IsSet)
                if (edFiCourseTranscript.CourseTitleOption.Value != null)
                    writer.WriteString("courseTitle", edFiCourseTranscript.CourseTitle);
                else
                    writer.WriteNull("courseTitle");

            if (edFiCourseTranscript.CreditCategoriesOption.IsSet)
            {
                writer.WritePropertyName("creditCategories");
                JsonSerializer.Serialize(writer, edFiCourseTranscript.CreditCategories, jsonSerializerOptions);
            }
            if (edFiCourseTranscript.EarnedAdditionalCreditsOption.IsSet)
            {
                writer.WritePropertyName("earnedAdditionalCredits");
                JsonSerializer.Serialize(writer, edFiCourseTranscript.EarnedAdditionalCredits, jsonSerializerOptions);
            }
            if (edFiCourseTranscript.EarnedCreditConversionOption.IsSet)
                if (edFiCourseTranscript.EarnedCreditConversionOption.Value != null)
                    writer.WriteNumber("earnedCreditConversion", edFiCourseTranscript.EarnedCreditConversionOption.Value!.Value);
                else
                    writer.WriteNull("earnedCreditConversion");

            if (edFiCourseTranscript.EarnedCreditsOption.IsSet)
                if (edFiCourseTranscript.EarnedCreditsOption.Value != null)
                    writer.WriteNumber("earnedCredits", edFiCourseTranscript.EarnedCreditsOption.Value!.Value);
                else
                    writer.WriteNull("earnedCredits");

            if (edFiCourseTranscript.EarnedCreditTypeDescriptorOption.IsSet)
                if (edFiCourseTranscript.EarnedCreditTypeDescriptorOption.Value != null)
                    writer.WriteString("earnedCreditTypeDescriptor", edFiCourseTranscript.EarnedCreditTypeDescriptor);
                else
                    writer.WriteNull("earnedCreditTypeDescriptor");

            if (edFiCourseTranscript.ExternalEducationOrganizationNameOfInstitutionOption.IsSet)
                if (edFiCourseTranscript.ExternalEducationOrganizationNameOfInstitutionOption.Value != null)
                    writer.WriteString("externalEducationOrganizationNameOfInstitution", edFiCourseTranscript.ExternalEducationOrganizationNameOfInstitution);
                else
                    writer.WriteNull("externalEducationOrganizationNameOfInstitution");

            if (edFiCourseTranscript.FinalLetterGradeEarnedOption.IsSet)
                if (edFiCourseTranscript.FinalLetterGradeEarnedOption.Value != null)
                    writer.WriteString("finalLetterGradeEarned", edFiCourseTranscript.FinalLetterGradeEarned);
                else
                    writer.WriteNull("finalLetterGradeEarned");

            if (edFiCourseTranscript.FinalNumericGradeEarnedOption.IsSet)
                if (edFiCourseTranscript.FinalNumericGradeEarnedOption.Value != null)
                    writer.WriteNumber("finalNumericGradeEarned", edFiCourseTranscript.FinalNumericGradeEarnedOption.Value!.Value);
                else
                    writer.WriteNull("finalNumericGradeEarned");

            if (edFiCourseTranscript.MethodCreditEarnedDescriptorOption.IsSet)
                if (edFiCourseTranscript.MethodCreditEarnedDescriptorOption.Value != null)
                    writer.WriteString("methodCreditEarnedDescriptor", edFiCourseTranscript.MethodCreditEarnedDescriptor);
                else
                    writer.WriteNull("methodCreditEarnedDescriptor");

            if (edFiCourseTranscript.PartialCourseTranscriptAwardsOption.IsSet)
            {
                writer.WritePropertyName("partialCourseTranscriptAwards");
                JsonSerializer.Serialize(writer, edFiCourseTranscript.PartialCourseTranscriptAwards, jsonSerializerOptions);
            }
            if (edFiCourseTranscript.SectionsOption.IsSet)
            {
                writer.WritePropertyName("sections");
                JsonSerializer.Serialize(writer, edFiCourseTranscript.Sections, jsonSerializerOptions);
            }
            if (edFiCourseTranscript.WhenTakenGradeLevelDescriptorOption.IsSet)
                if (edFiCourseTranscript.WhenTakenGradeLevelDescriptorOption.Value != null)
                    writer.WriteString("whenTakenGradeLevelDescriptor", edFiCourseTranscript.WhenTakenGradeLevelDescriptor);
                else
                    writer.WriteNull("whenTakenGradeLevelDescriptor");

            if (edFiCourseTranscript.EtagOption.IsSet)
                writer.WriteString("_etag", edFiCourseTranscript.Etag);

            if (edFiCourseTranscript.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiCourseTranscript.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiCourseTranscript.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiCourseTranscript.Ext, jsonSerializerOptions);
            }
        }
    }
}
