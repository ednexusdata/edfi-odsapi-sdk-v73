// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiCourseTranscriptPartialCourseTranscriptAwards
    /// </summary>
    public partial class EdFiCourseTranscriptPartialCourseTranscriptAwards : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCourseTranscriptPartialCourseTranscriptAwards" /> class.
        /// </summary>
        /// <param name="awardDate">The date the partial credits and/or grades were awarded or earned.</param>
        /// <param name="earnedCredits">The number of credits a student earned for completing a given course.</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned.</param>
        /// <param name="letterGradeEarned">The indicator of student performance as submitted by the instructor.</param>
        /// <param name="numericGradeEarned">The indicator of student performance as submitted by the instructor.</param>
        /// <param name="ext">Extensions to the CourseTranscriptPartialCourseTranscriptAwards entity.</param>
        [JsonConstructor]
        public EdFiCourseTranscriptPartialCourseTranscriptAwards(DateOnly awardDate, double earnedCredits, Option<string?> methodCreditEarnedDescriptor = default, Option<string?> letterGradeEarned = default, Option<string?> numericGradeEarned = default, Option<Object?> ext = default)
        {
            AwardDate = awardDate;
            EarnedCredits = earnedCredits;
            MethodCreditEarnedDescriptorOption = methodCreditEarnedDescriptor;
            LetterGradeEarnedOption = letterGradeEarned;
            NumericGradeEarnedOption = numericGradeEarned;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The date the partial credits and/or grades were awarded or earned.
        /// </summary>
        /// <value>The date the partial credits and/or grades were awarded or earned.</value>
        [JsonPropertyName("awardDate")]
        public DateOnly AwardDate { get; set; }

        /// <summary>
        /// The number of credits a student earned for completing a given course.
        /// </summary>
        /// <value>The number of credits a student earned for completing a given course.</value>
        [JsonPropertyName("earnedCredits")]
        public double EarnedCredits { get; set; }

        /// <summary>
        /// Used to track the state of MethodCreditEarnedDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MethodCreditEarnedDescriptorOption { get; private set; }

        /// <summary>
        /// The method the credits were earned.
        /// </summary>
        /// <value>The method the credits were earned.</value>
        [JsonPropertyName("methodCreditEarnedDescriptor")]
        public string? MethodCreditEarnedDescriptor { get { return this.MethodCreditEarnedDescriptorOption; } set { this.MethodCreditEarnedDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of LetterGradeEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LetterGradeEarnedOption { get; private set; }

        /// <summary>
        /// The indicator of student performance as submitted by the instructor.
        /// </summary>
        /// <value>The indicator of student performance as submitted by the instructor.</value>
        [JsonPropertyName("letterGradeEarned")]
        public string? LetterGradeEarned { get { return this.LetterGradeEarnedOption; } set { this.LetterGradeEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumericGradeEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NumericGradeEarnedOption { get; private set; }

        /// <summary>
        /// The indicator of student performance as submitted by the instructor.
        /// </summary>
        /// <value>The indicator of student performance as submitted by the instructor.</value>
        [JsonPropertyName("numericGradeEarned")]
        public string? NumericGradeEarned { get { return this.NumericGradeEarnedOption; } set { this.NumericGradeEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the CourseTranscriptPartialCourseTranscriptAwards entity.
        /// </summary>
        /// <value>Extensions to the CourseTranscriptPartialCourseTranscriptAwards entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCourseTranscriptPartialCourseTranscriptAwards {\n");
            sb.Append("  AwardDate: ").Append(AwardDate).Append("\n");
            sb.Append("  EarnedCredits: ").Append(EarnedCredits).Append("\n");
            sb.Append("  MethodCreditEarnedDescriptor: ").Append(MethodCreditEarnedDescriptor).Append("\n");
            sb.Append("  LetterGradeEarned: ").Append(LetterGradeEarned).Append("\n");
            sb.Append("  NumericGradeEarned: ").Append(NumericGradeEarned).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EarnedCredits (double) maximum
            if (this.EarnedCredits > (double)999999.999)
            {
                yield return new ValidationResult("Invalid value for EarnedCredits, must be a value less than or equal to 999999.999.", new [] { "EarnedCredits" });
            }

            // EarnedCredits (double) minimum
            if (this.EarnedCredits < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for EarnedCredits, must be a value greater than or equal to 0.0.", new [] { "EarnedCredits" });
            }

            // MethodCreditEarnedDescriptor (string) maxLength
            if (this.MethodCreditEarnedDescriptor != null && this.MethodCreditEarnedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for MethodCreditEarnedDescriptor, length must be less than 306.", new [] { "MethodCreditEarnedDescriptor" });
            }

            // LetterGradeEarned (string) maxLength
            if (this.LetterGradeEarned != null && this.LetterGradeEarned.Length > 20)
            {
                yield return new ValidationResult("Invalid value for LetterGradeEarned, length must be less than 20.", new [] { "LetterGradeEarned" });
            }

            // NumericGradeEarned (string) maxLength
            if (this.NumericGradeEarned != null && this.NumericGradeEarned.Length > 20)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, length must be less than 20.", new [] { "NumericGradeEarned" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiCourseTranscriptPartialCourseTranscriptAwards" />
    /// </summary>
    public class EdFiCourseTranscriptPartialCourseTranscriptAwardsJsonConverter : JsonConverter<EdFiCourseTranscriptPartialCourseTranscriptAwards>
    {
        /// <summary>
        /// The format to use to serialize AwardDate
        /// </summary>
        public static string AwardDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EdFiCourseTranscriptPartialCourseTranscriptAwards" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiCourseTranscriptPartialCourseTranscriptAwards Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> awardDate = default;
            Option<double?> earnedCredits = default;
            Option<string?> methodCreditEarnedDescriptor = default;
            Option<string?> letterGradeEarned = default;
            Option<string?> numericGradeEarned = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "awardDate":
                            awardDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "earnedCredits":
                            earnedCredits = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "methodCreditEarnedDescriptor":
                            methodCreditEarnedDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "letterGradeEarned":
                            letterGradeEarned = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "numericGradeEarned":
                            numericGradeEarned = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!awardDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourseTranscriptPartialCourseTranscriptAwards.", nameof(awardDate));

            if (!earnedCredits.IsSet)
                throw new ArgumentException("Property is required for class EdFiCourseTranscriptPartialCourseTranscriptAwards.", nameof(earnedCredits));

            if (awardDate.IsSet && awardDate.Value == null)
                throw new ArgumentNullException(nameof(awardDate), "Property is not nullable for class EdFiCourseTranscriptPartialCourseTranscriptAwards.");

            if (earnedCredits.IsSet && earnedCredits.Value == null)
                throw new ArgumentNullException(nameof(earnedCredits), "Property is not nullable for class EdFiCourseTranscriptPartialCourseTranscriptAwards.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiCourseTranscriptPartialCourseTranscriptAwards.");

            return new EdFiCourseTranscriptPartialCourseTranscriptAwards(awardDate.Value!.Value!, earnedCredits.Value!.Value!, methodCreditEarnedDescriptor, letterGradeEarned, numericGradeEarned, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiCourseTranscriptPartialCourseTranscriptAwards" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCourseTranscriptPartialCourseTranscriptAwards"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiCourseTranscriptPartialCourseTranscriptAwards edFiCourseTranscriptPartialCourseTranscriptAwards, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiCourseTranscriptPartialCourseTranscriptAwards, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiCourseTranscriptPartialCourseTranscriptAwards" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCourseTranscriptPartialCourseTranscriptAwards"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiCourseTranscriptPartialCourseTranscriptAwards edFiCourseTranscriptPartialCourseTranscriptAwards, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiCourseTranscriptPartialCourseTranscriptAwards.ExtOption.IsSet && edFiCourseTranscriptPartialCourseTranscriptAwards.Ext == null)
                throw new ArgumentNullException(nameof(edFiCourseTranscriptPartialCourseTranscriptAwards.Ext), "Property is required for class EdFiCourseTranscriptPartialCourseTranscriptAwards.");

            writer.WriteString("awardDate", edFiCourseTranscriptPartialCourseTranscriptAwards.AwardDate.ToString(AwardDateFormat));

            writer.WriteNumber("earnedCredits", edFiCourseTranscriptPartialCourseTranscriptAwards.EarnedCredits);

            if (edFiCourseTranscriptPartialCourseTranscriptAwards.MethodCreditEarnedDescriptorOption.IsSet)
                if (edFiCourseTranscriptPartialCourseTranscriptAwards.MethodCreditEarnedDescriptorOption.Value != null)
                    writer.WriteString("methodCreditEarnedDescriptor", edFiCourseTranscriptPartialCourseTranscriptAwards.MethodCreditEarnedDescriptor);
                else
                    writer.WriteNull("methodCreditEarnedDescriptor");

            if (edFiCourseTranscriptPartialCourseTranscriptAwards.LetterGradeEarnedOption.IsSet)
                if (edFiCourseTranscriptPartialCourseTranscriptAwards.LetterGradeEarnedOption.Value != null)
                    writer.WriteString("letterGradeEarned", edFiCourseTranscriptPartialCourseTranscriptAwards.LetterGradeEarned);
                else
                    writer.WriteNull("letterGradeEarned");

            if (edFiCourseTranscriptPartialCourseTranscriptAwards.NumericGradeEarnedOption.IsSet)
                if (edFiCourseTranscriptPartialCourseTranscriptAwards.NumericGradeEarnedOption.Value != null)
                    writer.WriteString("numericGradeEarned", edFiCourseTranscriptPartialCourseTranscriptAwards.NumericGradeEarned);
                else
                    writer.WriteNull("numericGradeEarned");

            if (edFiCourseTranscriptPartialCourseTranscriptAwards.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiCourseTranscriptPartialCourseTranscriptAwards.Ext, jsonSerializerOptions);
            }
        }
    }
}
