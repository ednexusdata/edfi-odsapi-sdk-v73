// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiCredential
    /// </summary>
    public partial class EdFiCredential : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCredential" /> class.
        /// </summary>
        /// <param name="credentialIdentifier">Identifier or serial number assigned to the credential.</param>
        /// <param name="stateOfIssueStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.</param>
        /// <param name="credentialTypeDescriptor">An indication of the category of credential an individual holds.</param>
        /// <param name="issuanceDate">The month, day, and year on which an active credential was issued to an individual.</param>
        /// <param name="namespace">Namespace for the credential.</param>
        /// <param name="id">id</param>
        /// <param name="academicSubjects">An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains.</param>
        /// <param name="credentialFieldDescriptor">The field of certification for the certificate (e.g., Mathematics, Music).</param>
        /// <param name="effectiveDate">The year, month and day on which an active credential held by an individual was issued.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="endorsements">An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization.</param>
        /// <param name="expirationDate">The month, day, and year on which an active credential held by an individual will expire.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="gradeLevels">An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching.</param>
        /// <param name="teachingCredentialBasisDescriptor">An indication of the pre-determined criteria for granting the teaching credential that an individual holds.</param>
        /// <param name="teachingCredentialDescriptor">An indication of the category of a legal document giving authorization to perform teaching assignment services.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Credential entity.</param>
        [JsonConstructor]
        public EdFiCredential(string credentialIdentifier, string stateOfIssueStateAbbreviationDescriptor, string credentialTypeDescriptor, DateOnly issuanceDate, string @namespace, Option<string?> id = default, Option<List<EdFiCredentialAcademicSubject>?> academicSubjects = default, Option<string?> credentialFieldDescriptor = default, Option<DateOnly?> effectiveDate = default, Option<List<EdFiCredentialEndorsement>?> endorsements = default, Option<DateOnly?> expirationDate = default, Option<List<EdFiCredentialGradeLevel>?> gradeLevels = default, Option<string?> teachingCredentialBasisDescriptor = default, Option<string?> teachingCredentialDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            CredentialIdentifier = credentialIdentifier;
            StateOfIssueStateAbbreviationDescriptor = stateOfIssueStateAbbreviationDescriptor;
            CredentialTypeDescriptor = credentialTypeDescriptor;
            IssuanceDate = issuanceDate;
            Namespace = @namespace;
            IdOption = id;
            AcademicSubjectsOption = academicSubjects;
            CredentialFieldDescriptorOption = credentialFieldDescriptor;
            EffectiveDateOption = effectiveDate;
            EndorsementsOption = endorsements;
            ExpirationDateOption = expirationDate;
            GradeLevelsOption = gradeLevels;
            TeachingCredentialBasisDescriptorOption = teachingCredentialBasisDescriptor;
            TeachingCredentialDescriptorOption = teachingCredentialDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        /// <value>Identifier or serial number assigned to the credential.</value>
        [JsonPropertyName("credentialIdentifier")]
        public string CredentialIdentifier { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>
        /// <value>The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.</value>
        [JsonPropertyName("stateOfIssueStateAbbreviationDescriptor")]
        public string StateOfIssueStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// An indication of the category of credential an individual holds.
        /// </summary>
        /// <value>An indication of the category of credential an individual holds.</value>
        [JsonPropertyName("credentialTypeDescriptor")]
        public string CredentialTypeDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an active credential was issued to an individual.
        /// </summary>
        /// <value>The month, day, and year on which an active credential was issued to an individual.</value>
        [JsonPropertyName("issuanceDate")]
        public DateOnly IssuanceDate { get; set; }

        /// <summary>
        /// Namespace for the credential.
        /// </summary>
        /// <value>Namespace for the credential.</value>
        [JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AcademicSubjects
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCredentialAcademicSubject>?> AcademicSubjectsOption { get; private set; }

        /// <summary>
        /// An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains.
        /// </summary>
        /// <value>An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains.</value>
        [JsonPropertyName("academicSubjects")]
        public List<EdFiCredentialAcademicSubject>? AcademicSubjects { get { return this.AcademicSubjectsOption; } set { this.AcademicSubjectsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CredentialFieldDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CredentialFieldDescriptorOption { get; private set; }

        /// <summary>
        /// The field of certification for the certificate (e.g., Mathematics, Music).
        /// </summary>
        /// <value>The field of certification for the certificate (e.g., Mathematics, Music).</value>
        [JsonPropertyName("credentialFieldDescriptor")]
        public string? CredentialFieldDescriptor { get { return this.CredentialFieldDescriptorOption; } set { this.CredentialFieldDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EffectiveDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EffectiveDateOption { get; private set; }

        /// <summary>
        /// The year, month and day on which an active credential held by an individual was issued.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The year, month and day on which an active credential held by an individual was issued.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("effectiveDate")]
        public DateOnly? EffectiveDate { get { return this.EffectiveDateOption; } set { this.EffectiveDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Endorsements
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCredentialEndorsement>?> EndorsementsOption { get; private set; }

        /// <summary>
        /// An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization.
        /// </summary>
        /// <value>An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization.</value>
        [JsonPropertyName("endorsements")]
        public List<EdFiCredentialEndorsement>? Endorsements { get { return this.EndorsementsOption; } set { this.EndorsementsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpirationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ExpirationDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which an active credential held by an individual will expire.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The month, day, and year on which an active credential held by an individual will expire.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("expirationDate")]
        public DateOnly? ExpirationDate { get { return this.ExpirationDateOption; } set { this.ExpirationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiCredentialGradeLevel>?> GradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching.
        /// </summary>
        /// <value>An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching.</value>
        [JsonPropertyName("gradeLevels")]
        public List<EdFiCredentialGradeLevel>? GradeLevels { get { return this.GradeLevelsOption; } set { this.GradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TeachingCredentialBasisDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TeachingCredentialBasisDescriptorOption { get; private set; }

        /// <summary>
        /// An indication of the pre-determined criteria for granting the teaching credential that an individual holds.
        /// </summary>
        /// <value>An indication of the pre-determined criteria for granting the teaching credential that an individual holds.</value>
        [JsonPropertyName("teachingCredentialBasisDescriptor")]
        public string? TeachingCredentialBasisDescriptor { get { return this.TeachingCredentialBasisDescriptorOption; } set { this.TeachingCredentialBasisDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of TeachingCredentialDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TeachingCredentialDescriptorOption { get; private set; }

        /// <summary>
        /// An indication of the category of a legal document giving authorization to perform teaching assignment services.
        /// </summary>
        /// <value>An indication of the category of a legal document giving authorization to perform teaching assignment services.</value>
        [JsonPropertyName("teachingCredentialDescriptor")]
        public string? TeachingCredentialDescriptor { get { return this.TeachingCredentialDescriptorOption; } set { this.TeachingCredentialDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Credential entity.
        /// </summary>
        /// <value>Extensions to the Credential entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCredential {\n");
            sb.Append("  CredentialIdentifier: ").Append(CredentialIdentifier).Append("\n");
            sb.Append("  StateOfIssueStateAbbreviationDescriptor: ").Append(StateOfIssueStateAbbreviationDescriptor).Append("\n");
            sb.Append("  CredentialTypeDescriptor: ").Append(CredentialTypeDescriptor).Append("\n");
            sb.Append("  IssuanceDate: ").Append(IssuanceDate).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  CredentialFieldDescriptor: ").Append(CredentialFieldDescriptor).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  Endorsements: ").Append(Endorsements).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  TeachingCredentialBasisDescriptor: ").Append(TeachingCredentialBasisDescriptor).Append("\n");
            sb.Append("  TeachingCredentialDescriptor: ").Append(TeachingCredentialDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CredentialIdentifier (string) maxLength
            if (this.CredentialIdentifier != null && this.CredentialIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CredentialIdentifier, length must be less than 60.", new [] { "CredentialIdentifier" });
            }

            // StateOfIssueStateAbbreviationDescriptor (string) maxLength
            if (this.StateOfIssueStateAbbreviationDescriptor != null && this.StateOfIssueStateAbbreviationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for StateOfIssueStateAbbreviationDescriptor, length must be less than 306.", new [] { "StateOfIssueStateAbbreviationDescriptor" });
            }

            // CredentialTypeDescriptor (string) maxLength
            if (this.CredentialTypeDescriptor != null && this.CredentialTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CredentialTypeDescriptor, length must be less than 306.", new [] { "CredentialTypeDescriptor" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // CredentialFieldDescriptor (string) maxLength
            if (this.CredentialFieldDescriptor != null && this.CredentialFieldDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CredentialFieldDescriptor, length must be less than 306.", new [] { "CredentialFieldDescriptor" });
            }

            // TeachingCredentialBasisDescriptor (string) maxLength
            if (this.TeachingCredentialBasisDescriptor != null && this.TeachingCredentialBasisDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for TeachingCredentialBasisDescriptor, length must be less than 306.", new [] { "TeachingCredentialBasisDescriptor" });
            }

            // TeachingCredentialDescriptor (string) maxLength
            if (this.TeachingCredentialDescriptor != null && this.TeachingCredentialDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for TeachingCredentialDescriptor, length must be less than 306.", new [] { "TeachingCredentialDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiCredential" />
    /// </summary>
    public class EdFiCredentialJsonConverter : JsonConverter<EdFiCredential>
    {
        /// <summary>
        /// The format to use to serialize IssuanceDate
        /// </summary>
        public static string IssuanceDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EffectiveDate
        /// </summary>
        public static string EffectiveDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize ExpirationDate
        /// </summary>
        public static string ExpirationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiCredential" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiCredential Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> credentialIdentifier = default;
            Option<string?> stateOfIssueStateAbbreviationDescriptor = default;
            Option<string?> credentialTypeDescriptor = default;
            Option<DateOnly?> issuanceDate = default;
            Option<string?> varNamespace = default;
            Option<string?> id = default;
            Option<List<EdFiCredentialAcademicSubject>?> academicSubjects = default;
            Option<string?> credentialFieldDescriptor = default;
            Option<DateOnly?> effectiveDate = default;
            Option<List<EdFiCredentialEndorsement>?> endorsements = default;
            Option<DateOnly?> expirationDate = default;
            Option<List<EdFiCredentialGradeLevel>?> gradeLevels = default;
            Option<string?> teachingCredentialBasisDescriptor = default;
            Option<string?> teachingCredentialDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "credentialIdentifier":
                            credentialIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stateOfIssueStateAbbreviationDescriptor":
                            stateOfIssueStateAbbreviationDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "credentialTypeDescriptor":
                            credentialTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "issuanceDate":
                            issuanceDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "academicSubjects":
                            academicSubjects = new Option<List<EdFiCredentialAcademicSubject>?>(JsonSerializer.Deserialize<List<EdFiCredentialAcademicSubject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "credentialFieldDescriptor":
                            credentialFieldDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "effectiveDate":
                            effectiveDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endorsements":
                            endorsements = new Option<List<EdFiCredentialEndorsement>?>(JsonSerializer.Deserialize<List<EdFiCredentialEndorsement>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "expirationDate":
                            expirationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "gradeLevels":
                            gradeLevels = new Option<List<EdFiCredentialGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiCredentialGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "teachingCredentialBasisDescriptor":
                            teachingCredentialBasisDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "teachingCredentialDescriptor":
                            teachingCredentialDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!credentialIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiCredential.", nameof(credentialIdentifier));

            if (!stateOfIssueStateAbbreviationDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiCredential.", nameof(stateOfIssueStateAbbreviationDescriptor));

            if (!credentialTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiCredential.", nameof(credentialTypeDescriptor));

            if (!issuanceDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiCredential.", nameof(issuanceDate));

            if (!varNamespace.IsSet)
                throw new ArgumentException("Property is required for class EdFiCredential.", nameof(varNamespace));

            if (credentialIdentifier.IsSet && credentialIdentifier.Value == null)
                throw new ArgumentNullException(nameof(credentialIdentifier), "Property is not nullable for class EdFiCredential.");

            if (stateOfIssueStateAbbreviationDescriptor.IsSet && stateOfIssueStateAbbreviationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(stateOfIssueStateAbbreviationDescriptor), "Property is not nullable for class EdFiCredential.");

            if (credentialTypeDescriptor.IsSet && credentialTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(credentialTypeDescriptor), "Property is not nullable for class EdFiCredential.");

            if (issuanceDate.IsSet && issuanceDate.Value == null)
                throw new ArgumentNullException(nameof(issuanceDate), "Property is not nullable for class EdFiCredential.");

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class EdFiCredential.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiCredential.");

            if (academicSubjects.IsSet && academicSubjects.Value == null)
                throw new ArgumentNullException(nameof(academicSubjects), "Property is not nullable for class EdFiCredential.");

            if (endorsements.IsSet && endorsements.Value == null)
                throw new ArgumentNullException(nameof(endorsements), "Property is not nullable for class EdFiCredential.");

            if (gradeLevels.IsSet && gradeLevels.Value == null)
                throw new ArgumentNullException(nameof(gradeLevels), "Property is not nullable for class EdFiCredential.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiCredential.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiCredential.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiCredential.");

            return new EdFiCredential(credentialIdentifier.Value!, stateOfIssueStateAbbreviationDescriptor.Value!, credentialTypeDescriptor.Value!, issuanceDate.Value!.Value!, varNamespace.Value!, id, academicSubjects, credentialFieldDescriptor, effectiveDate, endorsements, expirationDate, gradeLevels, teachingCredentialBasisDescriptor, teachingCredentialDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiCredential" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCredential"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiCredential edFiCredential, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiCredential, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiCredential" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCredential"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiCredential edFiCredential, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiCredential.CredentialIdentifier == null)
                throw new ArgumentNullException(nameof(edFiCredential.CredentialIdentifier), "Property is required for class EdFiCredential.");

            if (edFiCredential.StateOfIssueStateAbbreviationDescriptor == null)
                throw new ArgumentNullException(nameof(edFiCredential.StateOfIssueStateAbbreviationDescriptor), "Property is required for class EdFiCredential.");

            if (edFiCredential.CredentialTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiCredential.CredentialTypeDescriptor), "Property is required for class EdFiCredential.");

            if (edFiCredential.Namespace == null)
                throw new ArgumentNullException(nameof(edFiCredential.Namespace), "Property is required for class EdFiCredential.");

            if (edFiCredential.IdOption.IsSet && edFiCredential.Id == null)
                throw new ArgumentNullException(nameof(edFiCredential.Id), "Property is required for class EdFiCredential.");

            if (edFiCredential.AcademicSubjectsOption.IsSet && edFiCredential.AcademicSubjects == null)
                throw new ArgumentNullException(nameof(edFiCredential.AcademicSubjects), "Property is required for class EdFiCredential.");

            if (edFiCredential.EndorsementsOption.IsSet && edFiCredential.Endorsements == null)
                throw new ArgumentNullException(nameof(edFiCredential.Endorsements), "Property is required for class EdFiCredential.");

            if (edFiCredential.GradeLevelsOption.IsSet && edFiCredential.GradeLevels == null)
                throw new ArgumentNullException(nameof(edFiCredential.GradeLevels), "Property is required for class EdFiCredential.");

            if (edFiCredential.EtagOption.IsSet && edFiCredential.Etag == null)
                throw new ArgumentNullException(nameof(edFiCredential.Etag), "Property is required for class EdFiCredential.");

            if (edFiCredential.ExtOption.IsSet && edFiCredential.Ext == null)
                throw new ArgumentNullException(nameof(edFiCredential.Ext), "Property is required for class EdFiCredential.");

            writer.WriteString("credentialIdentifier", edFiCredential.CredentialIdentifier);

            writer.WriteString("stateOfIssueStateAbbreviationDescriptor", edFiCredential.StateOfIssueStateAbbreviationDescriptor);

            writer.WriteString("credentialTypeDescriptor", edFiCredential.CredentialTypeDescriptor);

            writer.WriteString("issuanceDate", edFiCredential.IssuanceDate.ToString(IssuanceDateFormat));

            writer.WriteString("namespace", edFiCredential.Namespace);

            if (edFiCredential.IdOption.IsSet)
                writer.WriteString("id", edFiCredential.Id);

            if (edFiCredential.AcademicSubjectsOption.IsSet)
            {
                writer.WritePropertyName("academicSubjects");
                JsonSerializer.Serialize(writer, edFiCredential.AcademicSubjects, jsonSerializerOptions);
            }
            if (edFiCredential.CredentialFieldDescriptorOption.IsSet)
                if (edFiCredential.CredentialFieldDescriptorOption.Value != null)
                    writer.WriteString("credentialFieldDescriptor", edFiCredential.CredentialFieldDescriptor);
                else
                    writer.WriteNull("credentialFieldDescriptor");

            if (edFiCredential.EffectiveDateOption.IsSet)
                if (edFiCredential.EffectiveDateOption.Value != null)
                    writer.WriteString("effectiveDate", edFiCredential.EffectiveDateOption.Value!.Value.ToString(EffectiveDateFormat));
                else
                    writer.WriteNull("effectiveDate");

            if (edFiCredential.EndorsementsOption.IsSet)
            {
                writer.WritePropertyName("endorsements");
                JsonSerializer.Serialize(writer, edFiCredential.Endorsements, jsonSerializerOptions);
            }
            if (edFiCredential.ExpirationDateOption.IsSet)
                if (edFiCredential.ExpirationDateOption.Value != null)
                    writer.WriteString("expirationDate", edFiCredential.ExpirationDateOption.Value!.Value.ToString(ExpirationDateFormat));
                else
                    writer.WriteNull("expirationDate");

            if (edFiCredential.GradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("gradeLevels");
                JsonSerializer.Serialize(writer, edFiCredential.GradeLevels, jsonSerializerOptions);
            }
            if (edFiCredential.TeachingCredentialBasisDescriptorOption.IsSet)
                if (edFiCredential.TeachingCredentialBasisDescriptorOption.Value != null)
                    writer.WriteString("teachingCredentialBasisDescriptor", edFiCredential.TeachingCredentialBasisDescriptor);
                else
                    writer.WriteNull("teachingCredentialBasisDescriptor");

            if (edFiCredential.TeachingCredentialDescriptorOption.IsSet)
                if (edFiCredential.TeachingCredentialDescriptorOption.Value != null)
                    writer.WriteString("teachingCredentialDescriptor", edFiCredential.TeachingCredentialDescriptor);
                else
                    writer.WriteNull("teachingCredentialDescriptor");

            if (edFiCredential.EtagOption.IsSet)
                writer.WriteString("_etag", edFiCredential.Etag);

            if (edFiCredential.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiCredential.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiCredential.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiCredential.Ext, jsonSerializerOptions);
            }
        }
    }
}
