// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiCrisisEvent
    /// </summary>
    public partial class EdFiCrisisEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCrisisEvent" /> class.
        /// </summary>
        /// <param name="crisisEventName">The name of the crisis event that occurred. If there is no generally accepted name for this crisis event, the suggested format: Location + Crisis type + Year.</param>
        /// <param name="crisisTypeDescriptor">The type or category of crisis.</param>
        /// <param name="id">id</param>
        /// <param name="crisisDescription">Provides a textual description of the crisis event affecting the student. It may include details such as the nature of the crisis (e.g., natural disaster, conflict, medical emergency), its severity, location, and any other relevant information describing the crisis situation.</param>
        /// <param name="crisisEndDate">The date on which the crisis ceased to affect the student. Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="crisisStartDate">The year, month and day on which the crisis affected the student. This date may not be the same as the date the crisis occurred if evacuation orders are implemented in anticipation of a crisis.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the CrisisEvent entity.</param>
        [JsonConstructor]
        public EdFiCrisisEvent(string crisisEventName, string crisisTypeDescriptor, Option<string?> id = default, Option<string?> crisisDescription = default, Option<DateOnly?> crisisEndDate = default, Option<DateOnly?> crisisStartDate = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            CrisisEventName = crisisEventName;
            CrisisTypeDescriptor = crisisTypeDescriptor;
            IdOption = id;
            CrisisDescriptionOption = crisisDescription;
            CrisisEndDateOption = crisisEndDate;
            CrisisStartDateOption = crisisStartDate;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name of the crisis event that occurred. If there is no generally accepted name for this crisis event, the suggested format: Location + Crisis type + Year.
        /// </summary>
        /// <value>The name of the crisis event that occurred. If there is no generally accepted name for this crisis event, the suggested format: Location + Crisis type + Year.</value>
        [JsonPropertyName("crisisEventName")]
        public string CrisisEventName { get; set; }

        /// <summary>
        /// The type or category of crisis.
        /// </summary>
        /// <value>The type or category of crisis.</value>
        [JsonPropertyName("crisisTypeDescriptor")]
        public string CrisisTypeDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CrisisDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CrisisDescriptionOption { get; private set; }

        /// <summary>
        /// Provides a textual description of the crisis event affecting the student. It may include details such as the nature of the crisis (e.g., natural disaster, conflict, medical emergency), its severity, location, and any other relevant information describing the crisis situation.
        /// </summary>
        /// <value>Provides a textual description of the crisis event affecting the student. It may include details such as the nature of the crisis (e.g., natural disaster, conflict, medical emergency), its severity, location, and any other relevant information describing the crisis situation.</value>
        [JsonPropertyName("crisisDescription")]
        public string? CrisisDescription { get { return this.CrisisDescriptionOption; } set { this.CrisisDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of CrisisEndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> CrisisEndDateOption { get; private set; }

        /// <summary>
        /// The date on which the crisis ceased to affect the student. Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The date on which the crisis ceased to affect the student. Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("crisisEndDate")]
        public DateOnly? CrisisEndDate { get { return this.CrisisEndDateOption; } set { this.CrisisEndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CrisisStartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> CrisisStartDateOption { get; private set; }

        /// <summary>
        /// The year, month and day on which the crisis affected the student. This date may not be the same as the date the crisis occurred if evacuation orders are implemented in anticipation of a crisis.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The year, month and day on which the crisis affected the student. This date may not be the same as the date the crisis occurred if evacuation orders are implemented in anticipation of a crisis.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("crisisStartDate")]
        public DateOnly? CrisisStartDate { get { return this.CrisisStartDateOption; } set { this.CrisisStartDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the CrisisEvent entity.
        /// </summary>
        /// <value>Extensions to the CrisisEvent entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCrisisEvent {\n");
            sb.Append("  CrisisEventName: ").Append(CrisisEventName).Append("\n");
            sb.Append("  CrisisTypeDescriptor: ").Append(CrisisTypeDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CrisisDescription: ").Append(CrisisDescription).Append("\n");
            sb.Append("  CrisisEndDate: ").Append(CrisisEndDate).Append("\n");
            sb.Append("  CrisisStartDate: ").Append(CrisisStartDate).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CrisisEventName (string) maxLength
            if (this.CrisisEventName != null && this.CrisisEventName.Length > 100)
            {
                yield return new ValidationResult("Invalid value for CrisisEventName, length must be less than 100.", new [] { "CrisisEventName" });
            }

            // CrisisTypeDescriptor (string) maxLength
            if (this.CrisisTypeDescriptor != null && this.CrisisTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CrisisTypeDescriptor, length must be less than 306.", new [] { "CrisisTypeDescriptor" });
            }

            // CrisisDescription (string) maxLength
            if (this.CrisisDescription != null && this.CrisisDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for CrisisDescription, length must be less than 1024.", new [] { "CrisisDescription" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiCrisisEvent" />
    /// </summary>
    public class EdFiCrisisEventJsonConverter : JsonConverter<EdFiCrisisEvent>
    {
        /// <summary>
        /// The format to use to serialize CrisisEndDate
        /// </summary>
        public static string CrisisEndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize CrisisStartDate
        /// </summary>
        public static string CrisisStartDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiCrisisEvent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiCrisisEvent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> crisisEventName = default;
            Option<string?> crisisTypeDescriptor = default;
            Option<string?> id = default;
            Option<string?> crisisDescription = default;
            Option<DateOnly?> crisisEndDate = default;
            Option<DateOnly?> crisisStartDate = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "crisisEventName":
                            crisisEventName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "crisisTypeDescriptor":
                            crisisTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "crisisDescription":
                            crisisDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "crisisEndDate":
                            crisisEndDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "crisisStartDate":
                            crisisStartDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!crisisEventName.IsSet)
                throw new ArgumentException("Property is required for class EdFiCrisisEvent.", nameof(crisisEventName));

            if (!crisisTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiCrisisEvent.", nameof(crisisTypeDescriptor));

            if (crisisEventName.IsSet && crisisEventName.Value == null)
                throw new ArgumentNullException(nameof(crisisEventName), "Property is not nullable for class EdFiCrisisEvent.");

            if (crisisTypeDescriptor.IsSet && crisisTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(crisisTypeDescriptor), "Property is not nullable for class EdFiCrisisEvent.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiCrisisEvent.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiCrisisEvent.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiCrisisEvent.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiCrisisEvent.");

            return new EdFiCrisisEvent(crisisEventName.Value!, crisisTypeDescriptor.Value!, id, crisisDescription, crisisEndDate, crisisStartDate, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiCrisisEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCrisisEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiCrisisEvent edFiCrisisEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiCrisisEvent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiCrisisEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiCrisisEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiCrisisEvent edFiCrisisEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiCrisisEvent.CrisisEventName == null)
                throw new ArgumentNullException(nameof(edFiCrisisEvent.CrisisEventName), "Property is required for class EdFiCrisisEvent.");

            if (edFiCrisisEvent.CrisisTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiCrisisEvent.CrisisTypeDescriptor), "Property is required for class EdFiCrisisEvent.");

            if (edFiCrisisEvent.IdOption.IsSet && edFiCrisisEvent.Id == null)
                throw new ArgumentNullException(nameof(edFiCrisisEvent.Id), "Property is required for class EdFiCrisisEvent.");

            if (edFiCrisisEvent.EtagOption.IsSet && edFiCrisisEvent.Etag == null)
                throw new ArgumentNullException(nameof(edFiCrisisEvent.Etag), "Property is required for class EdFiCrisisEvent.");

            if (edFiCrisisEvent.ExtOption.IsSet && edFiCrisisEvent.Ext == null)
                throw new ArgumentNullException(nameof(edFiCrisisEvent.Ext), "Property is required for class EdFiCrisisEvent.");

            writer.WriteString("crisisEventName", edFiCrisisEvent.CrisisEventName);

            writer.WriteString("crisisTypeDescriptor", edFiCrisisEvent.CrisisTypeDescriptor);

            if (edFiCrisisEvent.IdOption.IsSet)
                writer.WriteString("id", edFiCrisisEvent.Id);

            if (edFiCrisisEvent.CrisisDescriptionOption.IsSet)
                if (edFiCrisisEvent.CrisisDescriptionOption.Value != null)
                    writer.WriteString("crisisDescription", edFiCrisisEvent.CrisisDescription);
                else
                    writer.WriteNull("crisisDescription");

            if (edFiCrisisEvent.CrisisEndDateOption.IsSet)
                if (edFiCrisisEvent.CrisisEndDateOption.Value != null)
                    writer.WriteString("crisisEndDate", edFiCrisisEvent.CrisisEndDateOption.Value!.Value.ToString(CrisisEndDateFormat));
                else
                    writer.WriteNull("crisisEndDate");

            if (edFiCrisisEvent.CrisisStartDateOption.IsSet)
                if (edFiCrisisEvent.CrisisStartDateOption.Value != null)
                    writer.WriteString("crisisStartDate", edFiCrisisEvent.CrisisStartDateOption.Value!.Value.ToString(CrisisStartDateFormat));
                else
                    writer.WriteNull("crisisStartDate");

            if (edFiCrisisEvent.EtagOption.IsSet)
                writer.WriteString("_etag", edFiCrisisEvent.Etag);

            if (edFiCrisisEvent.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiCrisisEvent.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiCrisisEvent.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiCrisisEvent.Ext, jsonSerializerOptions);
            }
        }
    }
}
