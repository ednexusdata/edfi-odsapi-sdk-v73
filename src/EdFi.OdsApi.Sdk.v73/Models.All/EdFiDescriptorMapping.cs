// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiDescriptorMapping
    /// </summary>
    public partial class EdFiDescriptorMapping : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiDescriptorMapping" /> class.
        /// </summary>
        /// <param name="mappedNamespace">The namespace of the descriptor value to which the from descriptor value is mapped to.</param>
        /// <param name="mappedValue">The descriptor value to which the from descriptor value is being mapped to.</param>
        /// <param name="namespace">The namespace of the descriptor value that is being mapped to another value.</param>
        /// <param name="value">The descriptor value that is being mapped to another value.</param>
        /// <param name="id">id</param>
        /// <param name="modelEntities">An unordered collection of descriptorMappingModelEntities. The resources for which the descriptor mapping applies. If empty, the mapping is assumed to be applicable to all resources in which the descriptor appears.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the DescriptorMapping entity.</param>
        [JsonConstructor]
        public EdFiDescriptorMapping(string mappedNamespace, string mappedValue, string @namespace, string value, Option<string?> id = default, Option<List<EdFiDescriptorMappingModelEntity>?> modelEntities = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            MappedNamespace = mappedNamespace;
            MappedValue = mappedValue;
            Namespace = @namespace;
            Value = value;
            IdOption = id;
            ModelEntitiesOption = modelEntities;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The namespace of the descriptor value to which the from descriptor value is mapped to.
        /// </summary>
        /// <value>The namespace of the descriptor value to which the from descriptor value is mapped to.</value>
        [JsonPropertyName("mappedNamespace")]
        public string MappedNamespace { get; set; }

        /// <summary>
        /// The descriptor value to which the from descriptor value is being mapped to.
        /// </summary>
        /// <value>The descriptor value to which the from descriptor value is being mapped to.</value>
        [JsonPropertyName("mappedValue")]
        public string MappedValue { get; set; }

        /// <summary>
        /// The namespace of the descriptor value that is being mapped to another value.
        /// </summary>
        /// <value>The namespace of the descriptor value that is being mapped to another value.</value>
        [JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// The descriptor value that is being mapped to another value.
        /// </summary>
        /// <value>The descriptor value that is being mapped to another value.</value>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ModelEntities
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiDescriptorMappingModelEntity>?> ModelEntitiesOption { get; private set; }

        /// <summary>
        /// An unordered collection of descriptorMappingModelEntities. The resources for which the descriptor mapping applies. If empty, the mapping is assumed to be applicable to all resources in which the descriptor appears.
        /// </summary>
        /// <value>An unordered collection of descriptorMappingModelEntities. The resources for which the descriptor mapping applies. If empty, the mapping is assumed to be applicable to all resources in which the descriptor appears.</value>
        [JsonPropertyName("modelEntities")]
        public List<EdFiDescriptorMappingModelEntity>? ModelEntities { get { return this.ModelEntitiesOption; } set { this.ModelEntitiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the DescriptorMapping entity.
        /// </summary>
        /// <value>Extensions to the DescriptorMapping entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiDescriptorMapping {\n");
            sb.Append("  MappedNamespace: ").Append(MappedNamespace).Append("\n");
            sb.Append("  MappedValue: ").Append(MappedValue).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ModelEntities: ").Append(ModelEntities).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MappedNamespace (string) maxLength
            if (this.MappedNamespace != null && this.MappedNamespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for MappedNamespace, length must be less than 255.", new [] { "MappedNamespace" });
            }

            // MappedNamespace (string) minLength
            if (this.MappedNamespace != null && this.MappedNamespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for MappedNamespace, length must be greater than 5.", new [] { "MappedNamespace" });
            }

            // MappedValue (string) maxLength
            if (this.MappedValue != null && this.MappedValue.Length > 50)
            {
                yield return new ValidationResult("Invalid value for MappedValue, length must be less than 50.", new [] { "MappedValue" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // Value (string) maxLength
            if (this.Value != null && this.Value.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Value, length must be less than 50.", new [] { "Value" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiDescriptorMapping" />
    /// </summary>
    public class EdFiDescriptorMappingJsonConverter : JsonConverter<EdFiDescriptorMapping>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiDescriptorMapping" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiDescriptorMapping Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> mappedNamespace = default;
            Option<string?> mappedValue = default;
            Option<string?> varNamespace = default;
            Option<string?> value = default;
            Option<string?> id = default;
            Option<List<EdFiDescriptorMappingModelEntity>?> modelEntities = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "mappedNamespace":
                            mappedNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mappedValue":
                            mappedValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "modelEntities":
                            modelEntities = new Option<List<EdFiDescriptorMappingModelEntity>?>(JsonSerializer.Deserialize<List<EdFiDescriptorMappingModelEntity>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!mappedNamespace.IsSet)
                throw new ArgumentException("Property is required for class EdFiDescriptorMapping.", nameof(mappedNamespace));

            if (!mappedValue.IsSet)
                throw new ArgumentException("Property is required for class EdFiDescriptorMapping.", nameof(mappedValue));

            if (!varNamespace.IsSet)
                throw new ArgumentException("Property is required for class EdFiDescriptorMapping.", nameof(varNamespace));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class EdFiDescriptorMapping.", nameof(value));

            if (mappedNamespace.IsSet && mappedNamespace.Value == null)
                throw new ArgumentNullException(nameof(mappedNamespace), "Property is not nullable for class EdFiDescriptorMapping.");

            if (mappedValue.IsSet && mappedValue.Value == null)
                throw new ArgumentNullException(nameof(mappedValue), "Property is not nullable for class EdFiDescriptorMapping.");

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class EdFiDescriptorMapping.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class EdFiDescriptorMapping.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiDescriptorMapping.");

            if (modelEntities.IsSet && modelEntities.Value == null)
                throw new ArgumentNullException(nameof(modelEntities), "Property is not nullable for class EdFiDescriptorMapping.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiDescriptorMapping.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiDescriptorMapping.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiDescriptorMapping.");

            return new EdFiDescriptorMapping(mappedNamespace.Value!, mappedValue.Value!, varNamespace.Value!, value.Value!, id, modelEntities, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiDescriptorMapping" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiDescriptorMapping"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiDescriptorMapping edFiDescriptorMapping, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiDescriptorMapping, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiDescriptorMapping" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiDescriptorMapping"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiDescriptorMapping edFiDescriptorMapping, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiDescriptorMapping.MappedNamespace == null)
                throw new ArgumentNullException(nameof(edFiDescriptorMapping.MappedNamespace), "Property is required for class EdFiDescriptorMapping.");

            if (edFiDescriptorMapping.MappedValue == null)
                throw new ArgumentNullException(nameof(edFiDescriptorMapping.MappedValue), "Property is required for class EdFiDescriptorMapping.");

            if (edFiDescriptorMapping.Namespace == null)
                throw new ArgumentNullException(nameof(edFiDescriptorMapping.Namespace), "Property is required for class EdFiDescriptorMapping.");

            if (edFiDescriptorMapping.Value == null)
                throw new ArgumentNullException(nameof(edFiDescriptorMapping.Value), "Property is required for class EdFiDescriptorMapping.");

            if (edFiDescriptorMapping.IdOption.IsSet && edFiDescriptorMapping.Id == null)
                throw new ArgumentNullException(nameof(edFiDescriptorMapping.Id), "Property is required for class EdFiDescriptorMapping.");

            if (edFiDescriptorMapping.ModelEntitiesOption.IsSet && edFiDescriptorMapping.ModelEntities == null)
                throw new ArgumentNullException(nameof(edFiDescriptorMapping.ModelEntities), "Property is required for class EdFiDescriptorMapping.");

            if (edFiDescriptorMapping.EtagOption.IsSet && edFiDescriptorMapping.Etag == null)
                throw new ArgumentNullException(nameof(edFiDescriptorMapping.Etag), "Property is required for class EdFiDescriptorMapping.");

            if (edFiDescriptorMapping.ExtOption.IsSet && edFiDescriptorMapping.Ext == null)
                throw new ArgumentNullException(nameof(edFiDescriptorMapping.Ext), "Property is required for class EdFiDescriptorMapping.");

            writer.WriteString("mappedNamespace", edFiDescriptorMapping.MappedNamespace);

            writer.WriteString("mappedValue", edFiDescriptorMapping.MappedValue);

            writer.WriteString("namespace", edFiDescriptorMapping.Namespace);

            writer.WriteString("value", edFiDescriptorMapping.Value);

            if (edFiDescriptorMapping.IdOption.IsSet)
                writer.WriteString("id", edFiDescriptorMapping.Id);

            if (edFiDescriptorMapping.ModelEntitiesOption.IsSet)
            {
                writer.WritePropertyName("modelEntities");
                JsonSerializer.Serialize(writer, edFiDescriptorMapping.ModelEntities, jsonSerializerOptions);
            }
            if (edFiDescriptorMapping.EtagOption.IsSet)
                writer.WriteString("_etag", edFiDescriptorMapping.Etag);

            if (edFiDescriptorMapping.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiDescriptorMapping.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiDescriptorMapping.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiDescriptorMapping.Ext, jsonSerializerOptions);
            }
        }
    }
}
