// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiDisciplineAction
    /// </summary>
    public partial class EdFiDisciplineAction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiDisciplineAction" /> class.
        /// </summary>
        /// <param name="disciplineActionIdentifier">Identifier assigned by the education organization to the discipline action.</param>
        /// <param name="disciplineDate">The date of the discipline action.</param>
        /// <param name="disciplines">An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.</param>
        /// <param name="responsibilitySchoolReference">responsibilitySchoolReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="assignmentSchoolReference">assignmentSchoolReference</param>
        /// <param name="actualDisciplineActionLength">Indicates the actual length in school days of a student&#39;s disciplinary assignment.</param>
        /// <param name="disciplineActionLength">The length of time in school days for the discipline action (e.g. removal, detention), if applicable.</param>
        /// <param name="disciplineActionLengthDifferenceReasonDescriptor">Indicates the reason for the difference, if any, between the official and actual lengths of a student&#39;s disciplinary assignment.</param>
        /// <param name="iepPlacementMeetingIndicator">An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student&#39;s Individualized Education Program (IEP) team to determine appropriate placement.</param>
        /// <param name="relatedToZeroTolerancePolicy">An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.</param>
        /// <param name="staffs">An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the discipline action.</param>
        /// <param name="studentDisciplineIncidentBehaviorAssociations">An unordered collection of disciplineActionStudentDisciplineIncidentBehaviorAssociations. A reference to the behavior(s) by the student that led or contributed to this specific action.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the DisciplineAction entity.</param>
        [JsonConstructor]
        public EdFiDisciplineAction(string disciplineActionIdentifier, DateOnly disciplineDate, List<EdFiDisciplineActionDiscipline> disciplines, EdFiSchoolReference responsibilitySchoolReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<EdFiSchoolReference?> assignmentSchoolReference = default, Option<double?> actualDisciplineActionLength = default, Option<double?> disciplineActionLength = default, Option<string?> disciplineActionLengthDifferenceReasonDescriptor = default, Option<bool?> iepPlacementMeetingIndicator = default, Option<bool?> relatedToZeroTolerancePolicy = default, Option<List<EdFiDisciplineActionStaff>?> staffs = default, Option<List<EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation>?> studentDisciplineIncidentBehaviorAssociations = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            DisciplineActionIdentifier = disciplineActionIdentifier;
            DisciplineDate = disciplineDate;
            Disciplines = disciplines;
            ResponsibilitySchoolReference = responsibilitySchoolReference;
            StudentReference = studentReference;
            IdOption = id;
            AssignmentSchoolReferenceOption = assignmentSchoolReference;
            ActualDisciplineActionLengthOption = actualDisciplineActionLength;
            DisciplineActionLengthOption = disciplineActionLength;
            DisciplineActionLengthDifferenceReasonDescriptorOption = disciplineActionLengthDifferenceReasonDescriptor;
            IepPlacementMeetingIndicatorOption = iepPlacementMeetingIndicator;
            RelatedToZeroTolerancePolicyOption = relatedToZeroTolerancePolicy;
            StaffsOption = staffs;
            StudentDisciplineIncidentBehaviorAssociationsOption = studentDisciplineIncidentBehaviorAssociations;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Identifier assigned by the education organization to the discipline action.
        /// </summary>
        /// <value>Identifier assigned by the education organization to the discipline action.</value>
        [JsonPropertyName("disciplineActionIdentifier")]
        public string DisciplineActionIdentifier { get; set; }

        /// <summary>
        /// The date of the discipline action.
        /// </summary>
        /// <value>The date of the discipline action.</value>
        [JsonPropertyName("disciplineDate")]
        public DateOnly DisciplineDate { get; set; }

        /// <summary>
        /// An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.
        /// </summary>
        /// <value>An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.</value>
        [JsonPropertyName("disciplines")]
        public List<EdFiDisciplineActionDiscipline> Disciplines { get; set; }

        /// <summary>
        /// Gets or Sets ResponsibilitySchoolReference
        /// </summary>
        [JsonPropertyName("responsibilitySchoolReference")]
        public EdFiSchoolReference ResponsibilitySchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssignmentSchoolReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiSchoolReference?> AssignmentSchoolReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssignmentSchoolReference
        /// </summary>
        [JsonPropertyName("assignmentSchoolReference")]
        public EdFiSchoolReference? AssignmentSchoolReference { get { return this.AssignmentSchoolReferenceOption; } set { this.AssignmentSchoolReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ActualDisciplineActionLength
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ActualDisciplineActionLengthOption { get; private set; }

        /// <summary>
        /// Indicates the actual length in school days of a student&#39;s disciplinary assignment.
        /// </summary>
        /// <value>Indicates the actual length in school days of a student&#39;s disciplinary assignment.</value>
        [JsonPropertyName("actualDisciplineActionLength")]
        public double? ActualDisciplineActionLength { get { return this.ActualDisciplineActionLengthOption; } set { this.ActualDisciplineActionLengthOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisciplineActionLength
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> DisciplineActionLengthOption { get; private set; }

        /// <summary>
        /// The length of time in school days for the discipline action (e.g. removal, detention), if applicable.
        /// </summary>
        /// <value>The length of time in school days for the discipline action (e.g. removal, detention), if applicable.</value>
        [JsonPropertyName("disciplineActionLength")]
        public double? DisciplineActionLength { get { return this.DisciplineActionLengthOption; } set { this.DisciplineActionLengthOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisciplineActionLengthDifferenceReasonDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisciplineActionLengthDifferenceReasonDescriptorOption { get; private set; }

        /// <summary>
        /// Indicates the reason for the difference, if any, between the official and actual lengths of a student&#39;s disciplinary assignment.
        /// </summary>
        /// <value>Indicates the reason for the difference, if any, between the official and actual lengths of a student&#39;s disciplinary assignment.</value>
        [JsonPropertyName("disciplineActionLengthDifferenceReasonDescriptor")]
        public string? DisciplineActionLengthDifferenceReasonDescriptor { get { return this.DisciplineActionLengthDifferenceReasonDescriptorOption; } set { this.DisciplineActionLengthDifferenceReasonDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of IepPlacementMeetingIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IepPlacementMeetingIndicatorOption { get; private set; }

        /// <summary>
        /// An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student&#39;s Individualized Education Program (IEP) team to determine appropriate placement.
        /// </summary>
        /// <value>An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student&#39;s Individualized Education Program (IEP) team to determine appropriate placement.</value>
        [JsonPropertyName("iepPlacementMeetingIndicator")]
        public bool? IepPlacementMeetingIndicator { get { return this.IepPlacementMeetingIndicatorOption; } set { this.IepPlacementMeetingIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of RelatedToZeroTolerancePolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RelatedToZeroTolerancePolicyOption { get; private set; }

        /// <summary>
        /// An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.
        /// </summary>
        /// <value>An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.</value>
        [JsonPropertyName("relatedToZeroTolerancePolicy")]
        public bool? RelatedToZeroTolerancePolicy { get { return this.RelatedToZeroTolerancePolicyOption; } set { this.RelatedToZeroTolerancePolicyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Staffs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiDisciplineActionStaff>?> StaffsOption { get; private set; }

        /// <summary>
        /// An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the discipline action.
        /// </summary>
        /// <value>An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the discipline action.</value>
        [JsonPropertyName("staffs")]
        public List<EdFiDisciplineActionStaff>? Staffs { get { return this.StaffsOption; } set { this.StaffsOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentDisciplineIncidentBehaviorAssociations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation>?> StudentDisciplineIncidentBehaviorAssociationsOption { get; private set; }

        /// <summary>
        /// An unordered collection of disciplineActionStudentDisciplineIncidentBehaviorAssociations. A reference to the behavior(s) by the student that led or contributed to this specific action.
        /// </summary>
        /// <value>An unordered collection of disciplineActionStudentDisciplineIncidentBehaviorAssociations. A reference to the behavior(s) by the student that led or contributed to this specific action.</value>
        [JsonPropertyName("studentDisciplineIncidentBehaviorAssociations")]
        public List<EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation>? StudentDisciplineIncidentBehaviorAssociations { get { return this.StudentDisciplineIncidentBehaviorAssociationsOption; } set { this.StudentDisciplineIncidentBehaviorAssociationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the DisciplineAction entity.
        /// </summary>
        /// <value>Extensions to the DisciplineAction entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiDisciplineAction {\n");
            sb.Append("  DisciplineActionIdentifier: ").Append(DisciplineActionIdentifier).Append("\n");
            sb.Append("  DisciplineDate: ").Append(DisciplineDate).Append("\n");
            sb.Append("  Disciplines: ").Append(Disciplines).Append("\n");
            sb.Append("  ResponsibilitySchoolReference: ").Append(ResponsibilitySchoolReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssignmentSchoolReference: ").Append(AssignmentSchoolReference).Append("\n");
            sb.Append("  ActualDisciplineActionLength: ").Append(ActualDisciplineActionLength).Append("\n");
            sb.Append("  DisciplineActionLength: ").Append(DisciplineActionLength).Append("\n");
            sb.Append("  DisciplineActionLengthDifferenceReasonDescriptor: ").Append(DisciplineActionLengthDifferenceReasonDescriptor).Append("\n");
            sb.Append("  IepPlacementMeetingIndicator: ").Append(IepPlacementMeetingIndicator).Append("\n");
            sb.Append("  RelatedToZeroTolerancePolicy: ").Append(RelatedToZeroTolerancePolicy).Append("\n");
            sb.Append("  Staffs: ").Append(Staffs).Append("\n");
            sb.Append("  StudentDisciplineIncidentBehaviorAssociations: ").Append(StudentDisciplineIncidentBehaviorAssociations).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisciplineActionIdentifier (string) maxLength
            if (this.DisciplineActionIdentifier != null && this.DisciplineActionIdentifier.Length > 36)
            {
                yield return new ValidationResult("Invalid value for DisciplineActionIdentifier, length must be less than 36.", new [] { "DisciplineActionIdentifier" });
            }

            // ActualDisciplineActionLength (double) maximum
            if (this.ActualDisciplineActionLengthOption.IsSet && this.ActualDisciplineActionLengthOption.Value > (double)999.99)
            {
                yield return new ValidationResult("Invalid value for ActualDisciplineActionLength, must be a value less than or equal to 999.99.", new [] { "ActualDisciplineActionLength" });
            }

            // ActualDisciplineActionLength (double) minimum
            if (this.ActualDisciplineActionLengthOption.IsSet && this.ActualDisciplineActionLengthOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for ActualDisciplineActionLength, must be a value greater than or equal to 0.0.", new [] { "ActualDisciplineActionLength" });
            }

            // DisciplineActionLength (double) maximum
            if (this.DisciplineActionLengthOption.IsSet && this.DisciplineActionLengthOption.Value > (double)999.99)
            {
                yield return new ValidationResult("Invalid value for DisciplineActionLength, must be a value less than or equal to 999.99.", new [] { "DisciplineActionLength" });
            }

            // DisciplineActionLength (double) minimum
            if (this.DisciplineActionLengthOption.IsSet && this.DisciplineActionLengthOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for DisciplineActionLength, must be a value greater than or equal to 0.0.", new [] { "DisciplineActionLength" });
            }

            // DisciplineActionLengthDifferenceReasonDescriptor (string) maxLength
            if (this.DisciplineActionLengthDifferenceReasonDescriptor != null && this.DisciplineActionLengthDifferenceReasonDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DisciplineActionLengthDifferenceReasonDescriptor, length must be less than 306.", new [] { "DisciplineActionLengthDifferenceReasonDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiDisciplineAction" />
    /// </summary>
    public class EdFiDisciplineActionJsonConverter : JsonConverter<EdFiDisciplineAction>
    {
        /// <summary>
        /// The format to use to serialize DisciplineDate
        /// </summary>
        public static string DisciplineDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiDisciplineAction" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiDisciplineAction Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> disciplineActionIdentifier = default;
            Option<DateOnly?> disciplineDate = default;
            Option<List<EdFiDisciplineActionDiscipline>?> disciplines = default;
            Option<EdFiSchoolReference?> responsibilitySchoolReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<EdFiSchoolReference?> assignmentSchoolReference = default;
            Option<double?> actualDisciplineActionLength = default;
            Option<double?> disciplineActionLength = default;
            Option<string?> disciplineActionLengthDifferenceReasonDescriptor = default;
            Option<bool?> iepPlacementMeetingIndicator = default;
            Option<bool?> relatedToZeroTolerancePolicy = default;
            Option<List<EdFiDisciplineActionStaff>?> staffs = default;
            Option<List<EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation>?> studentDisciplineIncidentBehaviorAssociations = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "disciplineActionIdentifier":
                            disciplineActionIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "disciplineDate":
                            disciplineDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "disciplines":
                            disciplines = new Option<List<EdFiDisciplineActionDiscipline>?>(JsonSerializer.Deserialize<List<EdFiDisciplineActionDiscipline>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "responsibilitySchoolReference":
                            responsibilitySchoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assignmentSchoolReference":
                            assignmentSchoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "actualDisciplineActionLength":
                            actualDisciplineActionLength = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "disciplineActionLength":
                            disciplineActionLength = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "disciplineActionLengthDifferenceReasonDescriptor":
                            disciplineActionLengthDifferenceReasonDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "iepPlacementMeetingIndicator":
                            iepPlacementMeetingIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "relatedToZeroTolerancePolicy":
                            relatedToZeroTolerancePolicy = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "staffs":
                            staffs = new Option<List<EdFiDisciplineActionStaff>?>(JsonSerializer.Deserialize<List<EdFiDisciplineActionStaff>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentDisciplineIncidentBehaviorAssociations":
                            studentDisciplineIncidentBehaviorAssociations = new Option<List<EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation>?>(JsonSerializer.Deserialize<List<EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!disciplineActionIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiDisciplineAction.", nameof(disciplineActionIdentifier));

            if (!disciplineDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiDisciplineAction.", nameof(disciplineDate));

            if (!disciplines.IsSet)
                throw new ArgumentException("Property is required for class EdFiDisciplineAction.", nameof(disciplines));

            if (!responsibilitySchoolReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiDisciplineAction.", nameof(responsibilitySchoolReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiDisciplineAction.", nameof(studentReference));

            if (disciplineActionIdentifier.IsSet && disciplineActionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(disciplineActionIdentifier), "Property is not nullable for class EdFiDisciplineAction.");

            if (disciplineDate.IsSet && disciplineDate.Value == null)
                throw new ArgumentNullException(nameof(disciplineDate), "Property is not nullable for class EdFiDisciplineAction.");

            if (disciplines.IsSet && disciplines.Value == null)
                throw new ArgumentNullException(nameof(disciplines), "Property is not nullable for class EdFiDisciplineAction.");

            if (responsibilitySchoolReference.IsSet && responsibilitySchoolReference.Value == null)
                throw new ArgumentNullException(nameof(responsibilitySchoolReference), "Property is not nullable for class EdFiDisciplineAction.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiDisciplineAction.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiDisciplineAction.");

            if (assignmentSchoolReference.IsSet && assignmentSchoolReference.Value == null)
                throw new ArgumentNullException(nameof(assignmentSchoolReference), "Property is not nullable for class EdFiDisciplineAction.");

            if (staffs.IsSet && staffs.Value == null)
                throw new ArgumentNullException(nameof(staffs), "Property is not nullable for class EdFiDisciplineAction.");

            if (studentDisciplineIncidentBehaviorAssociations.IsSet && studentDisciplineIncidentBehaviorAssociations.Value == null)
                throw new ArgumentNullException(nameof(studentDisciplineIncidentBehaviorAssociations), "Property is not nullable for class EdFiDisciplineAction.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiDisciplineAction.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiDisciplineAction.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiDisciplineAction.");

            return new EdFiDisciplineAction(disciplineActionIdentifier.Value!, disciplineDate.Value!.Value!, disciplines.Value!, responsibilitySchoolReference.Value!, studentReference.Value!, id, assignmentSchoolReference, actualDisciplineActionLength, disciplineActionLength, disciplineActionLengthDifferenceReasonDescriptor, iepPlacementMeetingIndicator, relatedToZeroTolerancePolicy, staffs, studentDisciplineIncidentBehaviorAssociations, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiDisciplineAction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiDisciplineAction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiDisciplineAction edFiDisciplineAction, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiDisciplineAction, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiDisciplineAction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiDisciplineAction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiDisciplineAction edFiDisciplineAction, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiDisciplineAction.DisciplineActionIdentifier == null)
                throw new ArgumentNullException(nameof(edFiDisciplineAction.DisciplineActionIdentifier), "Property is required for class EdFiDisciplineAction.");

            if (edFiDisciplineAction.Disciplines == null)
                throw new ArgumentNullException(nameof(edFiDisciplineAction.Disciplines), "Property is required for class EdFiDisciplineAction.");

            if (edFiDisciplineAction.ResponsibilitySchoolReference == null)
                throw new ArgumentNullException(nameof(edFiDisciplineAction.ResponsibilitySchoolReference), "Property is required for class EdFiDisciplineAction.");

            if (edFiDisciplineAction.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiDisciplineAction.StudentReference), "Property is required for class EdFiDisciplineAction.");

            if (edFiDisciplineAction.IdOption.IsSet && edFiDisciplineAction.Id == null)
                throw new ArgumentNullException(nameof(edFiDisciplineAction.Id), "Property is required for class EdFiDisciplineAction.");

            if (edFiDisciplineAction.AssignmentSchoolReferenceOption.IsSet && edFiDisciplineAction.AssignmentSchoolReference == null)
                throw new ArgumentNullException(nameof(edFiDisciplineAction.AssignmentSchoolReference), "Property is required for class EdFiDisciplineAction.");

            if (edFiDisciplineAction.StaffsOption.IsSet && edFiDisciplineAction.Staffs == null)
                throw new ArgumentNullException(nameof(edFiDisciplineAction.Staffs), "Property is required for class EdFiDisciplineAction.");

            if (edFiDisciplineAction.StudentDisciplineIncidentBehaviorAssociationsOption.IsSet && edFiDisciplineAction.StudentDisciplineIncidentBehaviorAssociations == null)
                throw new ArgumentNullException(nameof(edFiDisciplineAction.StudentDisciplineIncidentBehaviorAssociations), "Property is required for class EdFiDisciplineAction.");

            if (edFiDisciplineAction.EtagOption.IsSet && edFiDisciplineAction.Etag == null)
                throw new ArgumentNullException(nameof(edFiDisciplineAction.Etag), "Property is required for class EdFiDisciplineAction.");

            if (edFiDisciplineAction.ExtOption.IsSet && edFiDisciplineAction.Ext == null)
                throw new ArgumentNullException(nameof(edFiDisciplineAction.Ext), "Property is required for class EdFiDisciplineAction.");

            writer.WriteString("disciplineActionIdentifier", edFiDisciplineAction.DisciplineActionIdentifier);

            writer.WriteString("disciplineDate", edFiDisciplineAction.DisciplineDate.ToString(DisciplineDateFormat));

            writer.WritePropertyName("disciplines");
            JsonSerializer.Serialize(writer, edFiDisciplineAction.Disciplines, jsonSerializerOptions);
            writer.WritePropertyName("responsibilitySchoolReference");
            JsonSerializer.Serialize(writer, edFiDisciplineAction.ResponsibilitySchoolReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiDisciplineAction.StudentReference, jsonSerializerOptions);
            if (edFiDisciplineAction.IdOption.IsSet)
                writer.WriteString("id", edFiDisciplineAction.Id);

            if (edFiDisciplineAction.AssignmentSchoolReferenceOption.IsSet)
            {
                writer.WritePropertyName("assignmentSchoolReference");
                JsonSerializer.Serialize(writer, edFiDisciplineAction.AssignmentSchoolReference, jsonSerializerOptions);
            }
            if (edFiDisciplineAction.ActualDisciplineActionLengthOption.IsSet)
                if (edFiDisciplineAction.ActualDisciplineActionLengthOption.Value != null)
                    writer.WriteNumber("actualDisciplineActionLength", edFiDisciplineAction.ActualDisciplineActionLengthOption.Value!.Value);
                else
                    writer.WriteNull("actualDisciplineActionLength");

            if (edFiDisciplineAction.DisciplineActionLengthOption.IsSet)
                if (edFiDisciplineAction.DisciplineActionLengthOption.Value != null)
                    writer.WriteNumber("disciplineActionLength", edFiDisciplineAction.DisciplineActionLengthOption.Value!.Value);
                else
                    writer.WriteNull("disciplineActionLength");

            if (edFiDisciplineAction.DisciplineActionLengthDifferenceReasonDescriptorOption.IsSet)
                if (edFiDisciplineAction.DisciplineActionLengthDifferenceReasonDescriptorOption.Value != null)
                    writer.WriteString("disciplineActionLengthDifferenceReasonDescriptor", edFiDisciplineAction.DisciplineActionLengthDifferenceReasonDescriptor);
                else
                    writer.WriteNull("disciplineActionLengthDifferenceReasonDescriptor");

            if (edFiDisciplineAction.IepPlacementMeetingIndicatorOption.IsSet)
                if (edFiDisciplineAction.IepPlacementMeetingIndicatorOption.Value != null)
                    writer.WriteBoolean("iepPlacementMeetingIndicator", edFiDisciplineAction.IepPlacementMeetingIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("iepPlacementMeetingIndicator");

            if (edFiDisciplineAction.RelatedToZeroTolerancePolicyOption.IsSet)
                if (edFiDisciplineAction.RelatedToZeroTolerancePolicyOption.Value != null)
                    writer.WriteBoolean("relatedToZeroTolerancePolicy", edFiDisciplineAction.RelatedToZeroTolerancePolicyOption.Value!.Value);
                else
                    writer.WriteNull("relatedToZeroTolerancePolicy");

            if (edFiDisciplineAction.StaffsOption.IsSet)
            {
                writer.WritePropertyName("staffs");
                JsonSerializer.Serialize(writer, edFiDisciplineAction.Staffs, jsonSerializerOptions);
            }
            if (edFiDisciplineAction.StudentDisciplineIncidentBehaviorAssociationsOption.IsSet)
            {
                writer.WritePropertyName("studentDisciplineIncidentBehaviorAssociations");
                JsonSerializer.Serialize(writer, edFiDisciplineAction.StudentDisciplineIncidentBehaviorAssociations, jsonSerializerOptions);
            }
            if (edFiDisciplineAction.EtagOption.IsSet)
                writer.WriteString("_etag", edFiDisciplineAction.Etag);

            if (edFiDisciplineAction.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiDisciplineAction.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiDisciplineAction.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiDisciplineAction.Ext, jsonSerializerOptions);
            }
        }
    }
}
