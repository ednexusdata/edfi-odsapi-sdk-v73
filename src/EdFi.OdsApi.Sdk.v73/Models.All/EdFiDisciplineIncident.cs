// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiDisciplineIncident
    /// </summary>
    public partial class EdFiDisciplineIncident : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiDisciplineIncident" /> class.
        /// </summary>
        /// <param name="incidentIdentifier">A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders.</param>
        /// <param name="schoolReference">schoolReference</param>
        /// <param name="incidentDate">The month, day, and year on which the discipline incident occurred.</param>
        /// <param name="id">id</param>
        /// <param name="behaviors">An unordered collection of disciplineIncidentBehaviors. Describes behavior by category and provides a detailed description.</param>
        /// <param name="caseNumber">The case number assigned to the DisciplineIncident by law enforcement or other organization.</param>
        /// <param name="externalParticipants">An unordered collection of disciplineIncidentExternalParticipants. Information on an individual involved in the discipline incident.</param>
        /// <param name="incidentCost">The value of any quantifiable monetary loss directly resulting from the discipline incident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.</param>
        /// <param name="incidentDescription">The description for an incident.</param>
        /// <param name="incidentLocationDescriptor">Identifies where the discipline incident occurred and whether or not it occurred on school.</param>
        /// <param name="incidentTime">An indication of the time of day the incident took place.</param>
        /// <param name="reportedToLawEnforcement">Indicator of whether the incident was reported to law enforcement.</param>
        /// <param name="reporterDescriptionDescriptor">Information on the type of individual who reported the discipline incident. When known and/or if useful, use a more specific option code (e.g., \&quot;Counselor\&quot; rather than \&quot;Professional Staff\&quot;).</param>
        /// <param name="reporterName">Identifies the reporter of the discipline incident by name.</param>
        /// <param name="weapons">An unordered collection of disciplineIncidentWeapons. Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the DisciplineIncident entity.</param>
        [JsonConstructor]
        public EdFiDisciplineIncident(string incidentIdentifier, EdFiSchoolReference schoolReference, DateOnly incidentDate, Option<string?> id = default, Option<List<EdFiDisciplineIncidentBehavior>?> behaviors = default, Option<string?> caseNumber = default, Option<List<EdFiDisciplineIncidentExternalParticipant>?> externalParticipants = default, Option<double?> incidentCost = default, Option<string?> incidentDescription = default, Option<string?> incidentLocationDescriptor = default, Option<string?> incidentTime = default, Option<bool?> reportedToLawEnforcement = default, Option<string?> reporterDescriptionDescriptor = default, Option<string?> reporterName = default, Option<List<EdFiDisciplineIncidentWeapon>?> weapons = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            IncidentIdentifier = incidentIdentifier;
            SchoolReference = schoolReference;
            IncidentDate = incidentDate;
            IdOption = id;
            BehaviorsOption = behaviors;
            CaseNumberOption = caseNumber;
            ExternalParticipantsOption = externalParticipants;
            IncidentCostOption = incidentCost;
            IncidentDescriptionOption = incidentDescription;
            IncidentLocationDescriptorOption = incidentLocationDescriptor;
            IncidentTimeOption = incidentTime;
            ReportedToLawEnforcementOption = reportedToLawEnforcement;
            ReporterDescriptionDescriptorOption = reporterDescriptionDescriptor;
            ReporterNameOption = reporterName;
            WeaponsOption = weapons;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders.
        /// </summary>
        /// <value>A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders.</value>
        [JsonPropertyName("incidentIdentifier")]
        public string IncidentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [JsonPropertyName("schoolReference")]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// The month, day, and year on which the discipline incident occurred.
        /// </summary>
        /// <value>The month, day, and year on which the discipline incident occurred.</value>
        [JsonPropertyName("incidentDate")]
        public DateOnly IncidentDate { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Behaviors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiDisciplineIncidentBehavior>?> BehaviorsOption { get; private set; }

        /// <summary>
        /// An unordered collection of disciplineIncidentBehaviors. Describes behavior by category and provides a detailed description.
        /// </summary>
        /// <value>An unordered collection of disciplineIncidentBehaviors. Describes behavior by category and provides a detailed description.</value>
        [JsonPropertyName("behaviors")]
        public List<EdFiDisciplineIncidentBehavior>? Behaviors { get { return this.BehaviorsOption; } set { this.BehaviorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CaseNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CaseNumberOption { get; private set; }

        /// <summary>
        /// The case number assigned to the DisciplineIncident by law enforcement or other organization.
        /// </summary>
        /// <value>The case number assigned to the DisciplineIncident by law enforcement or other organization.</value>
        [JsonPropertyName("caseNumber")]
        public string? CaseNumber { get { return this.CaseNumberOption; } set { this.CaseNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalParticipants
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiDisciplineIncidentExternalParticipant>?> ExternalParticipantsOption { get; private set; }

        /// <summary>
        /// An unordered collection of disciplineIncidentExternalParticipants. Information on an individual involved in the discipline incident.
        /// </summary>
        /// <value>An unordered collection of disciplineIncidentExternalParticipants. Information on an individual involved in the discipline incident.</value>
        [JsonPropertyName("externalParticipants")]
        public List<EdFiDisciplineIncidentExternalParticipant>? ExternalParticipants { get { return this.ExternalParticipantsOption; } set { this.ExternalParticipantsOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncidentCost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> IncidentCostOption { get; private set; }

        /// <summary>
        /// The value of any quantifiable monetary loss directly resulting from the discipline incident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.
        /// </summary>
        /// <value>The value of any quantifiable monetary loss directly resulting from the discipline incident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.</value>
        [JsonPropertyName("incidentCost")]
        public double? IncidentCost { get { return this.IncidentCostOption; } set { this.IncidentCostOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncidentDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IncidentDescriptionOption { get; private set; }

        /// <summary>
        /// The description for an incident.
        /// </summary>
        /// <value>The description for an incident.</value>
        [JsonPropertyName("incidentDescription")]
        public string? IncidentDescription { get { return this.IncidentDescriptionOption; } set { this.IncidentDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncidentLocationDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IncidentLocationDescriptorOption { get; private set; }

        /// <summary>
        /// Identifies where the discipline incident occurred and whether or not it occurred on school.
        /// </summary>
        /// <value>Identifies where the discipline incident occurred and whether or not it occurred on school.</value>
        [JsonPropertyName("incidentLocationDescriptor")]
        public string? IncidentLocationDescriptor { get { return this.IncidentLocationDescriptorOption; } set { this.IncidentLocationDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncidentTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IncidentTimeOption { get; private set; }

        /// <summary>
        /// An indication of the time of day the incident took place.
        /// </summary>
        /// <value>An indication of the time of day the incident took place.</value>
        [JsonPropertyName("incidentTime")]
        public string? IncidentTime { get { return this.IncidentTimeOption; } set { this.IncidentTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReportedToLawEnforcement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReportedToLawEnforcementOption { get; private set; }

        /// <summary>
        /// Indicator of whether the incident was reported to law enforcement.
        /// </summary>
        /// <value>Indicator of whether the incident was reported to law enforcement.</value>
        [JsonPropertyName("reportedToLawEnforcement")]
        public bool? ReportedToLawEnforcement { get { return this.ReportedToLawEnforcementOption; } set { this.ReportedToLawEnforcementOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReporterDescriptionDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReporterDescriptionDescriptorOption { get; private set; }

        /// <summary>
        /// Information on the type of individual who reported the discipline incident. When known and/or if useful, use a more specific option code (e.g., \&quot;Counselor\&quot; rather than \&quot;Professional Staff\&quot;).
        /// </summary>
        /// <value>Information on the type of individual who reported the discipline incident. When known and/or if useful, use a more specific option code (e.g., \&quot;Counselor\&quot; rather than \&quot;Professional Staff\&quot;).</value>
        [JsonPropertyName("reporterDescriptionDescriptor")]
        public string? ReporterDescriptionDescriptor { get { return this.ReporterDescriptionDescriptorOption; } set { this.ReporterDescriptionDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReporterName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReporterNameOption { get; private set; }

        /// <summary>
        /// Identifies the reporter of the discipline incident by name.
        /// </summary>
        /// <value>Identifies the reporter of the discipline incident by name.</value>
        [JsonPropertyName("reporterName")]
        public string? ReporterName { get { return this.ReporterNameOption; } set { this.ReporterNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Weapons
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiDisciplineIncidentWeapon>?> WeaponsOption { get; private set; }

        /// <summary>
        /// An unordered collection of disciplineIncidentWeapons. Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.
        /// </summary>
        /// <value>An unordered collection of disciplineIncidentWeapons. Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.</value>
        [JsonPropertyName("weapons")]
        public List<EdFiDisciplineIncidentWeapon>? Weapons { get { return this.WeaponsOption; } set { this.WeaponsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the DisciplineIncident entity.
        /// </summary>
        /// <value>Extensions to the DisciplineIncident entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiDisciplineIncident {\n");
            sb.Append("  IncidentIdentifier: ").Append(IncidentIdentifier).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  IncidentDate: ").Append(IncidentDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Behaviors: ").Append(Behaviors).Append("\n");
            sb.Append("  CaseNumber: ").Append(CaseNumber).Append("\n");
            sb.Append("  ExternalParticipants: ").Append(ExternalParticipants).Append("\n");
            sb.Append("  IncidentCost: ").Append(IncidentCost).Append("\n");
            sb.Append("  IncidentDescription: ").Append(IncidentDescription).Append("\n");
            sb.Append("  IncidentLocationDescriptor: ").Append(IncidentLocationDescriptor).Append("\n");
            sb.Append("  IncidentTime: ").Append(IncidentTime).Append("\n");
            sb.Append("  ReportedToLawEnforcement: ").Append(ReportedToLawEnforcement).Append("\n");
            sb.Append("  ReporterDescriptionDescriptor: ").Append(ReporterDescriptionDescriptor).Append("\n");
            sb.Append("  ReporterName: ").Append(ReporterName).Append("\n");
            sb.Append("  Weapons: ").Append(Weapons).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IncidentIdentifier (string) maxLength
            if (this.IncidentIdentifier != null && this.IncidentIdentifier.Length > 36)
            {
                yield return new ValidationResult("Invalid value for IncidentIdentifier, length must be less than 36.", new [] { "IncidentIdentifier" });
            }

            // CaseNumber (string) maxLength
            if (this.CaseNumber != null && this.CaseNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for CaseNumber, length must be less than 20.", new [] { "CaseNumber" });
            }

            // IncidentCost (double) maximum
            if (this.IncidentCostOption.IsSet && this.IncidentCostOption.Value > (double)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for IncidentCost, must be a value less than or equal to 922337203685477.6.", new [] { "IncidentCost" });
            }

            // IncidentCost (double) minimum
            if (this.IncidentCostOption.IsSet && this.IncidentCostOption.Value < (double)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for IncidentCost, must be a value greater than or equal to -922337203685477.6.", new [] { "IncidentCost" });
            }

            // IncidentDescription (string) maxLength
            if (this.IncidentDescription != null && this.IncidentDescription.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for IncidentDescription, length must be less than 1024.", new [] { "IncidentDescription" });
            }

            // IncidentLocationDescriptor (string) maxLength
            if (this.IncidentLocationDescriptor != null && this.IncidentLocationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for IncidentLocationDescriptor, length must be less than 306.", new [] { "IncidentLocationDescriptor" });
            }

            // ReporterDescriptionDescriptor (string) maxLength
            if (this.ReporterDescriptionDescriptor != null && this.ReporterDescriptionDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ReporterDescriptionDescriptor, length must be less than 306.", new [] { "ReporterDescriptionDescriptor" });
            }

            // ReporterName (string) maxLength
            if (this.ReporterName != null && this.ReporterName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for ReporterName, length must be less than 75.", new [] { "ReporterName" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiDisciplineIncident" />
    /// </summary>
    public class EdFiDisciplineIncidentJsonConverter : JsonConverter<EdFiDisciplineIncident>
    {
        /// <summary>
        /// The format to use to serialize IncidentDate
        /// </summary>
        public static string IncidentDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiDisciplineIncident" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiDisciplineIncident Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> incidentIdentifier = default;
            Option<EdFiSchoolReference?> schoolReference = default;
            Option<DateOnly?> incidentDate = default;
            Option<string?> id = default;
            Option<List<EdFiDisciplineIncidentBehavior>?> behaviors = default;
            Option<string?> caseNumber = default;
            Option<List<EdFiDisciplineIncidentExternalParticipant>?> externalParticipants = default;
            Option<double?> incidentCost = default;
            Option<string?> incidentDescription = default;
            Option<string?> incidentLocationDescriptor = default;
            Option<string?> incidentTime = default;
            Option<bool?> reportedToLawEnforcement = default;
            Option<string?> reporterDescriptionDescriptor = default;
            Option<string?> reporterName = default;
            Option<List<EdFiDisciplineIncidentWeapon>?> weapons = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "incidentIdentifier":
                            incidentIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schoolReference":
                            schoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "incidentDate":
                            incidentDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "behaviors":
                            behaviors = new Option<List<EdFiDisciplineIncidentBehavior>?>(JsonSerializer.Deserialize<List<EdFiDisciplineIncidentBehavior>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "caseNumber":
                            caseNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "externalParticipants":
                            externalParticipants = new Option<List<EdFiDisciplineIncidentExternalParticipant>?>(JsonSerializer.Deserialize<List<EdFiDisciplineIncidentExternalParticipant>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "incidentCost":
                            incidentCost = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "incidentDescription":
                            incidentDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "incidentLocationDescriptor":
                            incidentLocationDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "incidentTime":
                            incidentTime = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "reportedToLawEnforcement":
                            reportedToLawEnforcement = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "reporterDescriptionDescriptor":
                            reporterDescriptionDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "reporterName":
                            reporterName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "weapons":
                            weapons = new Option<List<EdFiDisciplineIncidentWeapon>?>(JsonSerializer.Deserialize<List<EdFiDisciplineIncidentWeapon>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!incidentIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiDisciplineIncident.", nameof(incidentIdentifier));

            if (!schoolReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiDisciplineIncident.", nameof(schoolReference));

            if (!incidentDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiDisciplineIncident.", nameof(incidentDate));

            if (incidentIdentifier.IsSet && incidentIdentifier.Value == null)
                throw new ArgumentNullException(nameof(incidentIdentifier), "Property is not nullable for class EdFiDisciplineIncident.");

            if (schoolReference.IsSet && schoolReference.Value == null)
                throw new ArgumentNullException(nameof(schoolReference), "Property is not nullable for class EdFiDisciplineIncident.");

            if (incidentDate.IsSet && incidentDate.Value == null)
                throw new ArgumentNullException(nameof(incidentDate), "Property is not nullable for class EdFiDisciplineIncident.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiDisciplineIncident.");

            if (behaviors.IsSet && behaviors.Value == null)
                throw new ArgumentNullException(nameof(behaviors), "Property is not nullable for class EdFiDisciplineIncident.");

            if (externalParticipants.IsSet && externalParticipants.Value == null)
                throw new ArgumentNullException(nameof(externalParticipants), "Property is not nullable for class EdFiDisciplineIncident.");

            if (weapons.IsSet && weapons.Value == null)
                throw new ArgumentNullException(nameof(weapons), "Property is not nullable for class EdFiDisciplineIncident.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiDisciplineIncident.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiDisciplineIncident.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiDisciplineIncident.");

            return new EdFiDisciplineIncident(incidentIdentifier.Value!, schoolReference.Value!, incidentDate.Value!.Value!, id, behaviors, caseNumber, externalParticipants, incidentCost, incidentDescription, incidentLocationDescriptor, incidentTime, reportedToLawEnforcement, reporterDescriptionDescriptor, reporterName, weapons, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiDisciplineIncident" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiDisciplineIncident"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiDisciplineIncident edFiDisciplineIncident, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiDisciplineIncident, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiDisciplineIncident" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiDisciplineIncident"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiDisciplineIncident edFiDisciplineIncident, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiDisciplineIncident.IncidentIdentifier == null)
                throw new ArgumentNullException(nameof(edFiDisciplineIncident.IncidentIdentifier), "Property is required for class EdFiDisciplineIncident.");

            if (edFiDisciplineIncident.SchoolReference == null)
                throw new ArgumentNullException(nameof(edFiDisciplineIncident.SchoolReference), "Property is required for class EdFiDisciplineIncident.");

            if (edFiDisciplineIncident.IdOption.IsSet && edFiDisciplineIncident.Id == null)
                throw new ArgumentNullException(nameof(edFiDisciplineIncident.Id), "Property is required for class EdFiDisciplineIncident.");

            if (edFiDisciplineIncident.BehaviorsOption.IsSet && edFiDisciplineIncident.Behaviors == null)
                throw new ArgumentNullException(nameof(edFiDisciplineIncident.Behaviors), "Property is required for class EdFiDisciplineIncident.");

            if (edFiDisciplineIncident.ExternalParticipantsOption.IsSet && edFiDisciplineIncident.ExternalParticipants == null)
                throw new ArgumentNullException(nameof(edFiDisciplineIncident.ExternalParticipants), "Property is required for class EdFiDisciplineIncident.");

            if (edFiDisciplineIncident.WeaponsOption.IsSet && edFiDisciplineIncident.Weapons == null)
                throw new ArgumentNullException(nameof(edFiDisciplineIncident.Weapons), "Property is required for class EdFiDisciplineIncident.");

            if (edFiDisciplineIncident.EtagOption.IsSet && edFiDisciplineIncident.Etag == null)
                throw new ArgumentNullException(nameof(edFiDisciplineIncident.Etag), "Property is required for class EdFiDisciplineIncident.");

            if (edFiDisciplineIncident.ExtOption.IsSet && edFiDisciplineIncident.Ext == null)
                throw new ArgumentNullException(nameof(edFiDisciplineIncident.Ext), "Property is required for class EdFiDisciplineIncident.");

            writer.WriteString("incidentIdentifier", edFiDisciplineIncident.IncidentIdentifier);

            writer.WritePropertyName("schoolReference");
            JsonSerializer.Serialize(writer, edFiDisciplineIncident.SchoolReference, jsonSerializerOptions);
            writer.WriteString("incidentDate", edFiDisciplineIncident.IncidentDate.ToString(IncidentDateFormat));

            if (edFiDisciplineIncident.IdOption.IsSet)
                writer.WriteString("id", edFiDisciplineIncident.Id);

            if (edFiDisciplineIncident.BehaviorsOption.IsSet)
            {
                writer.WritePropertyName("behaviors");
                JsonSerializer.Serialize(writer, edFiDisciplineIncident.Behaviors, jsonSerializerOptions);
            }
            if (edFiDisciplineIncident.CaseNumberOption.IsSet)
                if (edFiDisciplineIncident.CaseNumberOption.Value != null)
                    writer.WriteString("caseNumber", edFiDisciplineIncident.CaseNumber);
                else
                    writer.WriteNull("caseNumber");

            if (edFiDisciplineIncident.ExternalParticipantsOption.IsSet)
            {
                writer.WritePropertyName("externalParticipants");
                JsonSerializer.Serialize(writer, edFiDisciplineIncident.ExternalParticipants, jsonSerializerOptions);
            }
            if (edFiDisciplineIncident.IncidentCostOption.IsSet)
                if (edFiDisciplineIncident.IncidentCostOption.Value != null)
                    writer.WriteNumber("incidentCost", edFiDisciplineIncident.IncidentCostOption.Value!.Value);
                else
                    writer.WriteNull("incidentCost");

            if (edFiDisciplineIncident.IncidentDescriptionOption.IsSet)
                if (edFiDisciplineIncident.IncidentDescriptionOption.Value != null)
                    writer.WriteString("incidentDescription", edFiDisciplineIncident.IncidentDescription);
                else
                    writer.WriteNull("incidentDescription");

            if (edFiDisciplineIncident.IncidentLocationDescriptorOption.IsSet)
                if (edFiDisciplineIncident.IncidentLocationDescriptorOption.Value != null)
                    writer.WriteString("incidentLocationDescriptor", edFiDisciplineIncident.IncidentLocationDescriptor);
                else
                    writer.WriteNull("incidentLocationDescriptor");

            if (edFiDisciplineIncident.IncidentTimeOption.IsSet)
                if (edFiDisciplineIncident.IncidentTimeOption.Value != null)
                    writer.WriteString("incidentTime", edFiDisciplineIncident.IncidentTime);
                else
                    writer.WriteNull("incidentTime");

            if (edFiDisciplineIncident.ReportedToLawEnforcementOption.IsSet)
                if (edFiDisciplineIncident.ReportedToLawEnforcementOption.Value != null)
                    writer.WriteBoolean("reportedToLawEnforcement", edFiDisciplineIncident.ReportedToLawEnforcementOption.Value!.Value);
                else
                    writer.WriteNull("reportedToLawEnforcement");

            if (edFiDisciplineIncident.ReporterDescriptionDescriptorOption.IsSet)
                if (edFiDisciplineIncident.ReporterDescriptionDescriptorOption.Value != null)
                    writer.WriteString("reporterDescriptionDescriptor", edFiDisciplineIncident.ReporterDescriptionDescriptor);
                else
                    writer.WriteNull("reporterDescriptionDescriptor");

            if (edFiDisciplineIncident.ReporterNameOption.IsSet)
                if (edFiDisciplineIncident.ReporterNameOption.Value != null)
                    writer.WriteString("reporterName", edFiDisciplineIncident.ReporterName);
                else
                    writer.WriteNull("reporterName");

            if (edFiDisciplineIncident.WeaponsOption.IsSet)
            {
                writer.WritePropertyName("weapons");
                JsonSerializer.Serialize(writer, edFiDisciplineIncident.Weapons, jsonSerializerOptions);
            }
            if (edFiDisciplineIncident.EtagOption.IsSet)
                writer.WriteString("_etag", edFiDisciplineIncident.Etag);

            if (edFiDisciplineIncident.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiDisciplineIncident.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiDisciplineIncident.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiDisciplineIncident.Ext, jsonSerializerOptions);
            }
        }
    }
}
