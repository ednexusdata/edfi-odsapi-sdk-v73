// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiEducationContent
    /// </summary>
    public partial class EdFiEducationContent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiEducationContent" /> class.
        /// </summary>
        /// <param name="contentIdentifier">A unique identifier for the education content.</param>
        /// <param name="namespace">Namespace for the education content.</param>
        /// <param name="id">id</param>
        /// <param name="learningStandardReference">learningStandardReference</param>
        /// <param name="additionalAuthorsIndicator">Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \&quot;et al\&quot;.</param>
        /// <param name="appropriateGradeLevels">An unordered collection of educationContentAppropriateGradeLevels. Grade levels for which this education content is applicable. If omitted, considered generally applicable.</param>
        /// <param name="appropriateSexes">An unordered collection of educationContentAppropriateSexes. Sexes for which this education content is applicable. If omitted, considered generally applicable.</param>
        /// <param name="authors">An unordered collection of educationContentAuthors. The individual credited with the creation of the resource.</param>
        /// <param name="contentClassDescriptor">The predominate type or kind characterizing the learning resource.</param>
        /// <param name="cost">An amount that has to be paid or spent to buy or obtain the education content.</param>
        /// <param name="costRateDescriptor">The rate by which the cost applies.</param>
        /// <param name="derivativeSourceEducationContents">An unordered collection of educationContentDerivativeSourceEducationContents. Relates the education content source to the education content.</param>
        /// <param name="derivativeSourceLearningResourceMetadataURIs">An unordered collection of educationContentDerivativeSourceLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</param>
        /// <param name="derivativeSourceURIs">An unordered collection of educationContentDerivativeSourceURIs. The URI (typical a URL) pointing to an education content item.</param>
        /// <param name="description">An extended written representation of the education content.</param>
        /// <param name="interactivityStyleDescriptor">The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.</param>
        /// <param name="languages">An unordered collection of educationContentLanguages. An indication of the languages in which the Education Content is designed.</param>
        /// <param name="learningResourceMetadataURI">The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</param>
        /// <param name="publicationDate">The date on which this content was first published.</param>
        /// <param name="publicationYear">The year at which this content was first published.</param>
        /// <param name="publisher">The organization credited with publishing the resource.</param>
        /// <param name="shortDescription">A short description or name of the entity.</param>
        /// <param name="timeRequired">Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes.</param>
        /// <param name="useRightsURL">The URL where the owner specifies permissions for using the resource.</param>
        /// <param name="varVersion">The version identifier for the content.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the EducationContent entity.</param>
        [JsonConstructor]
        public EdFiEducationContent(string contentIdentifier, string @namespace, Option<string?> id = default, Option<EdFiLearningStandardReference?> learningStandardReference = default, Option<bool?> additionalAuthorsIndicator = default, Option<List<EdFiEducationContentAppropriateGradeLevel>?> appropriateGradeLevels = default, Option<List<EdFiEducationContentAppropriateSex>?> appropriateSexes = default, Option<List<EdFiEducationContentAuthor>?> authors = default, Option<string?> contentClassDescriptor = default, Option<double?> cost = default, Option<string?> costRateDescriptor = default, Option<List<EdFiEducationContentDerivativeSourceEducationContent>?> derivativeSourceEducationContents = default, Option<List<EdFiEducationContentDerivativeSourceLearningResourceMetadataURI>?> derivativeSourceLearningResourceMetadataURIs = default, Option<List<EdFiEducationContentDerivativeSourceURI>?> derivativeSourceURIs = default, Option<string?> description = default, Option<string?> interactivityStyleDescriptor = default, Option<List<EdFiEducationContentLanguage>?> languages = default, Option<string?> learningResourceMetadataURI = default, Option<DateOnly?> publicationDate = default, Option<int?> publicationYear = default, Option<string?> publisher = default, Option<string?> shortDescription = default, Option<string?> timeRequired = default, Option<string?> useRightsURL = default, Option<string?> varVersion = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            ContentIdentifier = contentIdentifier;
            Namespace = @namespace;
            IdOption = id;
            LearningStandardReferenceOption = learningStandardReference;
            AdditionalAuthorsIndicatorOption = additionalAuthorsIndicator;
            AppropriateGradeLevelsOption = appropriateGradeLevels;
            AppropriateSexesOption = appropriateSexes;
            AuthorsOption = authors;
            ContentClassDescriptorOption = contentClassDescriptor;
            CostOption = cost;
            CostRateDescriptorOption = costRateDescriptor;
            DerivativeSourceEducationContentsOption = derivativeSourceEducationContents;
            DerivativeSourceLearningResourceMetadataURIsOption = derivativeSourceLearningResourceMetadataURIs;
            DerivativeSourceURIsOption = derivativeSourceURIs;
            DescriptionOption = description;
            InteractivityStyleDescriptorOption = interactivityStyleDescriptor;
            LanguagesOption = languages;
            LearningResourceMetadataURIOption = learningResourceMetadataURI;
            PublicationDateOption = publicationDate;
            PublicationYearOption = publicationYear;
            PublisherOption = publisher;
            ShortDescriptionOption = shortDescription;
            TimeRequiredOption = timeRequired;
            UseRightsURLOption = useRightsURL;
            VarVersionOption = varVersion;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique identifier for the education content.
        /// </summary>
        /// <value>A unique identifier for the education content.</value>
        [JsonPropertyName("contentIdentifier")]
        public string ContentIdentifier { get; set; }

        /// <summary>
        /// Namespace for the education content.
        /// </summary>
        /// <value>Namespace for the education content.</value>
        [JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandardReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiLearningStandardReference?> LearningStandardReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets LearningStandardReference
        /// </summary>
        [JsonPropertyName("learningStandardReference")]
        public EdFiLearningStandardReference? LearningStandardReference { get { return this.LearningStandardReferenceOption; } set { this.LearningStandardReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AdditionalAuthorsIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AdditionalAuthorsIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \&quot;et al\&quot;.
        /// </summary>
        /// <value>Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \&quot;et al\&quot;.</value>
        [JsonPropertyName("additionalAuthorsIndicator")]
        public bool? AdditionalAuthorsIndicator { get { return this.AdditionalAuthorsIndicatorOption; } set { this.AdditionalAuthorsIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of AppropriateGradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationContentAppropriateGradeLevel>?> AppropriateGradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationContentAppropriateGradeLevels. Grade levels for which this education content is applicable. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of educationContentAppropriateGradeLevels. Grade levels for which this education content is applicable. If omitted, considered generally applicable.</value>
        [JsonPropertyName("appropriateGradeLevels")]
        public List<EdFiEducationContentAppropriateGradeLevel>? AppropriateGradeLevels { get { return this.AppropriateGradeLevelsOption; } set { this.AppropriateGradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AppropriateSexes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationContentAppropriateSex>?> AppropriateSexesOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationContentAppropriateSexes. Sexes for which this education content is applicable. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of educationContentAppropriateSexes. Sexes for which this education content is applicable. If omitted, considered generally applicable.</value>
        [JsonPropertyName("appropriateSexes")]
        public List<EdFiEducationContentAppropriateSex>? AppropriateSexes { get { return this.AppropriateSexesOption; } set { this.AppropriateSexesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Authors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationContentAuthor>?> AuthorsOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationContentAuthors. The individual credited with the creation of the resource.
        /// </summary>
        /// <value>An unordered collection of educationContentAuthors. The individual credited with the creation of the resource.</value>
        [JsonPropertyName("authors")]
        public List<EdFiEducationContentAuthor>? Authors { get { return this.AuthorsOption; } set { this.AuthorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContentClassDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentClassDescriptorOption { get; private set; }

        /// <summary>
        /// The predominate type or kind characterizing the learning resource.
        /// </summary>
        /// <value>The predominate type or kind characterizing the learning resource.</value>
        [JsonPropertyName("contentClassDescriptor")]
        public string? ContentClassDescriptor { get { return this.ContentClassDescriptorOption; } set { this.ContentClassDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CostOption { get; private set; }

        /// <summary>
        /// An amount that has to be paid or spent to buy or obtain the education content.
        /// </summary>
        /// <value>An amount that has to be paid or spent to buy or obtain the education content.</value>
        [JsonPropertyName("cost")]
        public double? Cost { get { return this.CostOption; } set { this.CostOption = new(value); } }

        /// <summary>
        /// Used to track the state of CostRateDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CostRateDescriptorOption { get; private set; }

        /// <summary>
        /// The rate by which the cost applies.
        /// </summary>
        /// <value>The rate by which the cost applies.</value>
        [JsonPropertyName("costRateDescriptor")]
        public string? CostRateDescriptor { get { return this.CostRateDescriptorOption; } set { this.CostRateDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DerivativeSourceEducationContents
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationContentDerivativeSourceEducationContent>?> DerivativeSourceEducationContentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationContentDerivativeSourceEducationContents. Relates the education content source to the education content.
        /// </summary>
        /// <value>An unordered collection of educationContentDerivativeSourceEducationContents. Relates the education content source to the education content.</value>
        [JsonPropertyName("derivativeSourceEducationContents")]
        public List<EdFiEducationContentDerivativeSourceEducationContent>? DerivativeSourceEducationContents { get { return this.DerivativeSourceEducationContentsOption; } set { this.DerivativeSourceEducationContentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of DerivativeSourceLearningResourceMetadataURIs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationContentDerivativeSourceLearningResourceMetadataURI>?> DerivativeSourceLearningResourceMetadataURIsOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationContentDerivativeSourceLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        /// <value>An unordered collection of educationContentDerivativeSourceLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</value>
        [JsonPropertyName("derivativeSourceLearningResourceMetadataURIs")]
        public List<EdFiEducationContentDerivativeSourceLearningResourceMetadataURI>? DerivativeSourceLearningResourceMetadataURIs { get { return this.DerivativeSourceLearningResourceMetadataURIsOption; } set { this.DerivativeSourceLearningResourceMetadataURIsOption = new(value); } }

        /// <summary>
        /// Used to track the state of DerivativeSourceURIs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationContentDerivativeSourceURI>?> DerivativeSourceURIsOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationContentDerivativeSourceURIs. The URI (typical a URL) pointing to an education content item.
        /// </summary>
        /// <value>An unordered collection of educationContentDerivativeSourceURIs. The URI (typical a URL) pointing to an education content item.</value>
        [JsonPropertyName("derivativeSourceURIs")]
        public List<EdFiEducationContentDerivativeSourceURI>? DerivativeSourceURIs { get { return this.DerivativeSourceURIsOption; } set { this.DerivativeSourceURIsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// An extended written representation of the education content.
        /// </summary>
        /// <value>An extended written representation of the education content.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of InteractivityStyleDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InteractivityStyleDescriptorOption { get; private set; }

        /// <summary>
        /// The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.
        /// </summary>
        /// <value>The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.</value>
        [JsonPropertyName("interactivityStyleDescriptor")]
        public string? InteractivityStyleDescriptor { get { return this.InteractivityStyleDescriptorOption; } set { this.InteractivityStyleDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Languages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationContentLanguage>?> LanguagesOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationContentLanguages. An indication of the languages in which the Education Content is designed.
        /// </summary>
        /// <value>An unordered collection of educationContentLanguages. An indication of the languages in which the Education Content is designed.</value>
        [JsonPropertyName("languages")]
        public List<EdFiEducationContentLanguage>? Languages { get { return this.LanguagesOption; } set { this.LanguagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningResourceMetadataURI
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LearningResourceMetadataURIOption { get; private set; }

        /// <summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        /// <value>The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</value>
        [JsonPropertyName("learningResourceMetadataURI")]
        public string? LearningResourceMetadataURI { get { return this.LearningResourceMetadataURIOption; } set { this.LearningResourceMetadataURIOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> PublicationDateOption { get; private set; }

        /// <summary>
        /// The date on which this content was first published.
        /// </summary>
        /// <value>The date on which this content was first published.</value>
        [JsonPropertyName("publicationDate")]
        public DateOnly? PublicationDate { get { return this.PublicationDateOption; } set { this.PublicationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicationYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PublicationYearOption { get; private set; }

        /// <summary>
        /// The year at which this content was first published.
        /// </summary>
        /// <value>The year at which this content was first published.</value>
        [JsonPropertyName("publicationYear")]
        public int? PublicationYear { get { return this.PublicationYearOption; } set { this.PublicationYearOption = new(value); } }

        /// <summary>
        /// Used to track the state of Publisher
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PublisherOption { get; private set; }

        /// <summary>
        /// The organization credited with publishing the resource.
        /// </summary>
        /// <value>The organization credited with publishing the resource.</value>
        [JsonPropertyName("publisher")]
        public string? Publisher { get { return this.PublisherOption; } set { this.PublisherOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShortDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShortDescriptionOption { get; private set; }

        /// <summary>
        /// A short description or name of the entity.
        /// </summary>
        /// <value>A short description or name of the entity.</value>
        [JsonPropertyName("shortDescription")]
        public string? ShortDescription { get { return this.ShortDescriptionOption; } set { this.ShortDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeRequired
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TimeRequiredOption { get; private set; }

        /// <summary>
        /// Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes.
        /// </summary>
        /// <value>Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes.</value>
        [JsonPropertyName("timeRequired")]
        public string? TimeRequired { get { return this.TimeRequiredOption; } set { this.TimeRequiredOption = new(value); } }

        /// <summary>
        /// Used to track the state of UseRightsURL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UseRightsURLOption { get; private set; }

        /// <summary>
        /// The URL where the owner specifies permissions for using the resource.
        /// </summary>
        /// <value>The URL where the owner specifies permissions for using the resource.</value>
        [JsonPropertyName("useRightsURL")]
        public string? UseRightsURL { get { return this.UseRightsURLOption; } set { this.UseRightsURLOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// The version identifier for the content.
        /// </summary>
        /// <value>The version identifier for the content.</value>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the EducationContent entity.
        /// </summary>
        /// <value>Extensions to the EducationContent entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiEducationContent {\n");
            sb.Append("  ContentIdentifier: ").Append(ContentIdentifier).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LearningStandardReference: ").Append(LearningStandardReference).Append("\n");
            sb.Append("  AdditionalAuthorsIndicator: ").Append(AdditionalAuthorsIndicator).Append("\n");
            sb.Append("  AppropriateGradeLevels: ").Append(AppropriateGradeLevels).Append("\n");
            sb.Append("  AppropriateSexes: ").Append(AppropriateSexes).Append("\n");
            sb.Append("  Authors: ").Append(Authors).Append("\n");
            sb.Append("  ContentClassDescriptor: ").Append(ContentClassDescriptor).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CostRateDescriptor: ").Append(CostRateDescriptor).Append("\n");
            sb.Append("  DerivativeSourceEducationContents: ").Append(DerivativeSourceEducationContents).Append("\n");
            sb.Append("  DerivativeSourceLearningResourceMetadataURIs: ").Append(DerivativeSourceLearningResourceMetadataURIs).Append("\n");
            sb.Append("  DerivativeSourceURIs: ").Append(DerivativeSourceURIs).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InteractivityStyleDescriptor: ").Append(InteractivityStyleDescriptor).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LearningResourceMetadataURI: ").Append(LearningResourceMetadataURI).Append("\n");
            sb.Append("  PublicationDate: ").Append(PublicationDate).Append("\n");
            sb.Append("  PublicationYear: ").Append(PublicationYear).Append("\n");
            sb.Append("  Publisher: ").Append(Publisher).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  TimeRequired: ").Append(TimeRequired).Append("\n");
            sb.Append("  UseRightsURL: ").Append(UseRightsURL).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContentIdentifier (string) maxLength
            if (this.ContentIdentifier != null && this.ContentIdentifier.Length > 225)
            {
                yield return new ValidationResult("Invalid value for ContentIdentifier, length must be less than 225.", new [] { "ContentIdentifier" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // ContentClassDescriptor (string) maxLength
            if (this.ContentClassDescriptor != null && this.ContentClassDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ContentClassDescriptor, length must be less than 306.", new [] { "ContentClassDescriptor" });
            }

            // Cost (double) maximum
            if (this.CostOption.IsSet && this.CostOption.Value > (double)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for Cost, must be a value less than or equal to 922337203685477.6.", new [] { "Cost" });
            }

            // Cost (double) minimum
            if (this.CostOption.IsSet && this.CostOption.Value < (double)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for Cost, must be a value greater than or equal to -922337203685477.6.", new [] { "Cost" });
            }

            // CostRateDescriptor (string) maxLength
            if (this.CostRateDescriptor != null && this.CostRateDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CostRateDescriptor, length must be less than 306.", new [] { "CostRateDescriptor" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // InteractivityStyleDescriptor (string) maxLength
            if (this.InteractivityStyleDescriptor != null && this.InteractivityStyleDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for InteractivityStyleDescriptor, length must be less than 306.", new [] { "InteractivityStyleDescriptor" });
            }

            // LearningResourceMetadataURI (string) maxLength
            if (this.LearningResourceMetadataURI != null && this.LearningResourceMetadataURI.Length > 255)
            {
                yield return new ValidationResult("Invalid value for LearningResourceMetadataURI, length must be less than 255.", new [] { "LearningResourceMetadataURI" });
            }

            // LearningResourceMetadataURI (string) minLength
            if (this.LearningResourceMetadataURI != null && this.LearningResourceMetadataURI.Length < 5)
            {
                yield return new ValidationResult("Invalid value for LearningResourceMetadataURI, length must be greater than 5.", new [] { "LearningResourceMetadataURI" });
            }

            // Publisher (string) maxLength
            if (this.Publisher != null && this.Publisher.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Publisher, length must be less than 50.", new [] { "Publisher" });
            }

            // ShortDescription (string) maxLength
            if (this.ShortDescription != null && this.ShortDescription.Length > 75)
            {
                yield return new ValidationResult("Invalid value for ShortDescription, length must be less than 75.", new [] { "ShortDescription" });
            }

            // TimeRequired (string) maxLength
            if (this.TimeRequired != null && this.TimeRequired.Length > 30)
            {
                yield return new ValidationResult("Invalid value for TimeRequired, length must be less than 30.", new [] { "TimeRequired" });
            }

            // UseRightsURL (string) maxLength
            if (this.UseRightsURL != null && this.UseRightsURL.Length > 255)
            {
                yield return new ValidationResult("Invalid value for UseRightsURL, length must be less than 255.", new [] { "UseRightsURL" });
            }

            // UseRightsURL (string) minLength
            if (this.UseRightsURL != null && this.UseRightsURL.Length < 5)
            {
                yield return new ValidationResult("Invalid value for UseRightsURL, length must be greater than 5.", new [] { "UseRightsURL" });
            }

            // VarVersion (string) maxLength
            if (this.VarVersion != null && this.VarVersion.Length > 10)
            {
                yield return new ValidationResult("Invalid value for VarVersion, length must be less than 10.", new [] { "VarVersion" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiEducationContent" />
    /// </summary>
    public class EdFiEducationContentJsonConverter : JsonConverter<EdFiEducationContent>
    {
        /// <summary>
        /// The format to use to serialize PublicationDate
        /// </summary>
        public static string PublicationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiEducationContent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiEducationContent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> contentIdentifier = default;
            Option<string?> varNamespace = default;
            Option<string?> id = default;
            Option<EdFiLearningStandardReference?> learningStandardReference = default;
            Option<bool?> additionalAuthorsIndicator = default;
            Option<List<EdFiEducationContentAppropriateGradeLevel>?> appropriateGradeLevels = default;
            Option<List<EdFiEducationContentAppropriateSex>?> appropriateSexes = default;
            Option<List<EdFiEducationContentAuthor>?> authors = default;
            Option<string?> contentClassDescriptor = default;
            Option<double?> cost = default;
            Option<string?> costRateDescriptor = default;
            Option<List<EdFiEducationContentDerivativeSourceEducationContent>?> derivativeSourceEducationContents = default;
            Option<List<EdFiEducationContentDerivativeSourceLearningResourceMetadataURI>?> derivativeSourceLearningResourceMetadataURIs = default;
            Option<List<EdFiEducationContentDerivativeSourceURI>?> derivativeSourceURIs = default;
            Option<string?> description = default;
            Option<string?> interactivityStyleDescriptor = default;
            Option<List<EdFiEducationContentLanguage>?> languages = default;
            Option<string?> learningResourceMetadataURI = default;
            Option<DateOnly?> publicationDate = default;
            Option<int?> publicationYear = default;
            Option<string?> publisher = default;
            Option<string?> shortDescription = default;
            Option<string?> timeRequired = default;
            Option<string?> useRightsURL = default;
            Option<string?> varVersion = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contentIdentifier":
                            contentIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "learningStandardReference":
                            learningStandardReference = new Option<EdFiLearningStandardReference?>(JsonSerializer.Deserialize<EdFiLearningStandardReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "additionalAuthorsIndicator":
                            additionalAuthorsIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "appropriateGradeLevels":
                            appropriateGradeLevels = new Option<List<EdFiEducationContentAppropriateGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiEducationContentAppropriateGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "appropriateSexes":
                            appropriateSexes = new Option<List<EdFiEducationContentAppropriateSex>?>(JsonSerializer.Deserialize<List<EdFiEducationContentAppropriateSex>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "authors":
                            authors = new Option<List<EdFiEducationContentAuthor>?>(JsonSerializer.Deserialize<List<EdFiEducationContentAuthor>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "contentClassDescriptor":
                            contentClassDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "cost":
                            cost = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "costRateDescriptor":
                            costRateDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "derivativeSourceEducationContents":
                            derivativeSourceEducationContents = new Option<List<EdFiEducationContentDerivativeSourceEducationContent>?>(JsonSerializer.Deserialize<List<EdFiEducationContentDerivativeSourceEducationContent>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "derivativeSourceLearningResourceMetadataURIs":
                            derivativeSourceLearningResourceMetadataURIs = new Option<List<EdFiEducationContentDerivativeSourceLearningResourceMetadataURI>?>(JsonSerializer.Deserialize<List<EdFiEducationContentDerivativeSourceLearningResourceMetadataURI>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "derivativeSourceURIs":
                            derivativeSourceURIs = new Option<List<EdFiEducationContentDerivativeSourceURI>?>(JsonSerializer.Deserialize<List<EdFiEducationContentDerivativeSourceURI>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "interactivityStyleDescriptor":
                            interactivityStyleDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "languages":
                            languages = new Option<List<EdFiEducationContentLanguage>?>(JsonSerializer.Deserialize<List<EdFiEducationContentLanguage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "learningResourceMetadataURI":
                            learningResourceMetadataURI = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "publicationDate":
                            publicationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "publicationYear":
                            publicationYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "publisher":
                            publisher = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "shortDescription":
                            shortDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timeRequired":
                            timeRequired = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "useRightsURL":
                            useRightsURL = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!contentIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationContent.", nameof(contentIdentifier));

            if (!varNamespace.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationContent.", nameof(varNamespace));

            if (contentIdentifier.IsSet && contentIdentifier.Value == null)
                throw new ArgumentNullException(nameof(contentIdentifier), "Property is not nullable for class EdFiEducationContent.");

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class EdFiEducationContent.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiEducationContent.");

            if (learningStandardReference.IsSet && learningStandardReference.Value == null)
                throw new ArgumentNullException(nameof(learningStandardReference), "Property is not nullable for class EdFiEducationContent.");

            if (appropriateGradeLevels.IsSet && appropriateGradeLevels.Value == null)
                throw new ArgumentNullException(nameof(appropriateGradeLevels), "Property is not nullable for class EdFiEducationContent.");

            if (appropriateSexes.IsSet && appropriateSexes.Value == null)
                throw new ArgumentNullException(nameof(appropriateSexes), "Property is not nullable for class EdFiEducationContent.");

            if (authors.IsSet && authors.Value == null)
                throw new ArgumentNullException(nameof(authors), "Property is not nullable for class EdFiEducationContent.");

            if (derivativeSourceEducationContents.IsSet && derivativeSourceEducationContents.Value == null)
                throw new ArgumentNullException(nameof(derivativeSourceEducationContents), "Property is not nullable for class EdFiEducationContent.");

            if (derivativeSourceLearningResourceMetadataURIs.IsSet && derivativeSourceLearningResourceMetadataURIs.Value == null)
                throw new ArgumentNullException(nameof(derivativeSourceLearningResourceMetadataURIs), "Property is not nullable for class EdFiEducationContent.");

            if (derivativeSourceURIs.IsSet && derivativeSourceURIs.Value == null)
                throw new ArgumentNullException(nameof(derivativeSourceURIs), "Property is not nullable for class EdFiEducationContent.");

            if (languages.IsSet && languages.Value == null)
                throw new ArgumentNullException(nameof(languages), "Property is not nullable for class EdFiEducationContent.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiEducationContent.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiEducationContent.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiEducationContent.");

            return new EdFiEducationContent(contentIdentifier.Value!, varNamespace.Value!, id, learningStandardReference, additionalAuthorsIndicator, appropriateGradeLevels, appropriateSexes, authors, contentClassDescriptor, cost, costRateDescriptor, derivativeSourceEducationContents, derivativeSourceLearningResourceMetadataURIs, derivativeSourceURIs, description, interactivityStyleDescriptor, languages, learningResourceMetadataURI, publicationDate, publicationYear, publisher, shortDescription, timeRequired, useRightsURL, varVersion, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiEducationContent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiEducationContent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiEducationContent edFiEducationContent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiEducationContent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiEducationContent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiEducationContent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiEducationContent edFiEducationContent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiEducationContent.ContentIdentifier == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.ContentIdentifier), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.Namespace == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.Namespace), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.IdOption.IsSet && edFiEducationContent.Id == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.Id), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.LearningStandardReferenceOption.IsSet && edFiEducationContent.LearningStandardReference == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.LearningStandardReference), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.AppropriateGradeLevelsOption.IsSet && edFiEducationContent.AppropriateGradeLevels == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.AppropriateGradeLevels), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.AppropriateSexesOption.IsSet && edFiEducationContent.AppropriateSexes == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.AppropriateSexes), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.AuthorsOption.IsSet && edFiEducationContent.Authors == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.Authors), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.DerivativeSourceEducationContentsOption.IsSet && edFiEducationContent.DerivativeSourceEducationContents == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.DerivativeSourceEducationContents), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.DerivativeSourceLearningResourceMetadataURIsOption.IsSet && edFiEducationContent.DerivativeSourceLearningResourceMetadataURIs == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.DerivativeSourceLearningResourceMetadataURIs), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.DerivativeSourceURIsOption.IsSet && edFiEducationContent.DerivativeSourceURIs == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.DerivativeSourceURIs), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.LanguagesOption.IsSet && edFiEducationContent.Languages == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.Languages), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.EtagOption.IsSet && edFiEducationContent.Etag == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.Etag), "Property is required for class EdFiEducationContent.");

            if (edFiEducationContent.ExtOption.IsSet && edFiEducationContent.Ext == null)
                throw new ArgumentNullException(nameof(edFiEducationContent.Ext), "Property is required for class EdFiEducationContent.");

            writer.WriteString("contentIdentifier", edFiEducationContent.ContentIdentifier);

            writer.WriteString("namespace", edFiEducationContent.Namespace);

            if (edFiEducationContent.IdOption.IsSet)
                writer.WriteString("id", edFiEducationContent.Id);

            if (edFiEducationContent.LearningStandardReferenceOption.IsSet)
            {
                writer.WritePropertyName("learningStandardReference");
                JsonSerializer.Serialize(writer, edFiEducationContent.LearningStandardReference, jsonSerializerOptions);
            }
            if (edFiEducationContent.AdditionalAuthorsIndicatorOption.IsSet)
                if (edFiEducationContent.AdditionalAuthorsIndicatorOption.Value != null)
                    writer.WriteBoolean("additionalAuthorsIndicator", edFiEducationContent.AdditionalAuthorsIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("additionalAuthorsIndicator");

            if (edFiEducationContent.AppropriateGradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("appropriateGradeLevels");
                JsonSerializer.Serialize(writer, edFiEducationContent.AppropriateGradeLevels, jsonSerializerOptions);
            }
            if (edFiEducationContent.AppropriateSexesOption.IsSet)
            {
                writer.WritePropertyName("appropriateSexes");
                JsonSerializer.Serialize(writer, edFiEducationContent.AppropriateSexes, jsonSerializerOptions);
            }
            if (edFiEducationContent.AuthorsOption.IsSet)
            {
                writer.WritePropertyName("authors");
                JsonSerializer.Serialize(writer, edFiEducationContent.Authors, jsonSerializerOptions);
            }
            if (edFiEducationContent.ContentClassDescriptorOption.IsSet)
                if (edFiEducationContent.ContentClassDescriptorOption.Value != null)
                    writer.WriteString("contentClassDescriptor", edFiEducationContent.ContentClassDescriptor);
                else
                    writer.WriteNull("contentClassDescriptor");

            if (edFiEducationContent.CostOption.IsSet)
                if (edFiEducationContent.CostOption.Value != null)
                    writer.WriteNumber("cost", edFiEducationContent.CostOption.Value!.Value);
                else
                    writer.WriteNull("cost");

            if (edFiEducationContent.CostRateDescriptorOption.IsSet)
                if (edFiEducationContent.CostRateDescriptorOption.Value != null)
                    writer.WriteString("costRateDescriptor", edFiEducationContent.CostRateDescriptor);
                else
                    writer.WriteNull("costRateDescriptor");

            if (edFiEducationContent.DerivativeSourceEducationContentsOption.IsSet)
            {
                writer.WritePropertyName("derivativeSourceEducationContents");
                JsonSerializer.Serialize(writer, edFiEducationContent.DerivativeSourceEducationContents, jsonSerializerOptions);
            }
            if (edFiEducationContent.DerivativeSourceLearningResourceMetadataURIsOption.IsSet)
            {
                writer.WritePropertyName("derivativeSourceLearningResourceMetadataURIs");
                JsonSerializer.Serialize(writer, edFiEducationContent.DerivativeSourceLearningResourceMetadataURIs, jsonSerializerOptions);
            }
            if (edFiEducationContent.DerivativeSourceURIsOption.IsSet)
            {
                writer.WritePropertyName("derivativeSourceURIs");
                JsonSerializer.Serialize(writer, edFiEducationContent.DerivativeSourceURIs, jsonSerializerOptions);
            }
            if (edFiEducationContent.DescriptionOption.IsSet)
                if (edFiEducationContent.DescriptionOption.Value != null)
                    writer.WriteString("description", edFiEducationContent.Description);
                else
                    writer.WriteNull("description");

            if (edFiEducationContent.InteractivityStyleDescriptorOption.IsSet)
                if (edFiEducationContent.InteractivityStyleDescriptorOption.Value != null)
                    writer.WriteString("interactivityStyleDescriptor", edFiEducationContent.InteractivityStyleDescriptor);
                else
                    writer.WriteNull("interactivityStyleDescriptor");

            if (edFiEducationContent.LanguagesOption.IsSet)
            {
                writer.WritePropertyName("languages");
                JsonSerializer.Serialize(writer, edFiEducationContent.Languages, jsonSerializerOptions);
            }
            if (edFiEducationContent.LearningResourceMetadataURIOption.IsSet)
                if (edFiEducationContent.LearningResourceMetadataURIOption.Value != null)
                    writer.WriteString("learningResourceMetadataURI", edFiEducationContent.LearningResourceMetadataURI);
                else
                    writer.WriteNull("learningResourceMetadataURI");

            if (edFiEducationContent.PublicationDateOption.IsSet)
                if (edFiEducationContent.PublicationDateOption.Value != null)
                    writer.WriteString("publicationDate", edFiEducationContent.PublicationDateOption.Value!.Value.ToString(PublicationDateFormat));
                else
                    writer.WriteNull("publicationDate");

            if (edFiEducationContent.PublicationYearOption.IsSet)
                if (edFiEducationContent.PublicationYearOption.Value != null)
                    writer.WriteNumber("publicationYear", edFiEducationContent.PublicationYearOption.Value!.Value);
                else
                    writer.WriteNull("publicationYear");

            if (edFiEducationContent.PublisherOption.IsSet)
                if (edFiEducationContent.PublisherOption.Value != null)
                    writer.WriteString("publisher", edFiEducationContent.Publisher);
                else
                    writer.WriteNull("publisher");

            if (edFiEducationContent.ShortDescriptionOption.IsSet)
                if (edFiEducationContent.ShortDescriptionOption.Value != null)
                    writer.WriteString("shortDescription", edFiEducationContent.ShortDescription);
                else
                    writer.WriteNull("shortDescription");

            if (edFiEducationContent.TimeRequiredOption.IsSet)
                if (edFiEducationContent.TimeRequiredOption.Value != null)
                    writer.WriteString("timeRequired", edFiEducationContent.TimeRequired);
                else
                    writer.WriteNull("timeRequired");

            if (edFiEducationContent.UseRightsURLOption.IsSet)
                if (edFiEducationContent.UseRightsURLOption.Value != null)
                    writer.WriteString("useRightsURL", edFiEducationContent.UseRightsURL);
                else
                    writer.WriteNull("useRightsURL");

            if (edFiEducationContent.VarVersionOption.IsSet)
                if (edFiEducationContent.VarVersionOption.Value != null)
                    writer.WriteString("version", edFiEducationContent.VarVersion);
                else
                    writer.WriteNull("version");

            if (edFiEducationContent.EtagOption.IsSet)
                writer.WriteString("_etag", edFiEducationContent.Etag);

            if (edFiEducationContent.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiEducationContent.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiEducationContent.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiEducationContent.Ext, jsonSerializerOptions);
            }
        }
    }
}
