// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiEducationOrganizationAddress
    /// </summary>
    public partial class EdFiEducationOrganizationAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiEducationOrganizationAddress" /> class.
        /// </summary>
        /// <param name="addressTypeDescriptor">The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)</param>
        /// <param name="stateAbbreviationDescriptor">The abbreviation for the state (within the United States) or outlying area in which an address is located.</param>
        /// <param name="city">The name of the city in which an address is located.</param>
        /// <param name="postalCode">The five or nine digit zip code or overseas postal code portion of an address.</param>
        /// <param name="streetNumberName">The street number and street name or post office box number of an address.</param>
        /// <param name="localeDescriptor">A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).</param>
        /// <param name="apartmentRoomSuiteNumber">The apartment, room, or suite number of an address.</param>
        /// <param name="buildingSiteNumber">The number of the building on the site, if more than one building shares the same address.</param>
        /// <param name="congressionalDistrict">The congressional district in which an address is located.</param>
        /// <param name="countyFIPSCode">The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \&quot;first-order subdivisions\&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.</param>
        /// <param name="doNotPublishIndicator">An indication that the address should not be published.</param>
        /// <param name="latitude">The geographic latitude of the physical address.</param>
        /// <param name="longitude">The geographic longitude of the physical address.</param>
        /// <param name="nameOfCounty">The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.</param>
        /// <param name="periods">An unordered collection of educationOrganizationAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.</param>
        /// <param name="ext">Extensions to the EducationOrganizationAddress entity.</param>
        [JsonConstructor]
        public EdFiEducationOrganizationAddress(string addressTypeDescriptor, string stateAbbreviationDescriptor, string city, string postalCode, string streetNumberName, Option<string?> localeDescriptor = default, Option<string?> apartmentRoomSuiteNumber = default, Option<string?> buildingSiteNumber = default, Option<string?> congressionalDistrict = default, Option<string?> countyFIPSCode = default, Option<bool?> doNotPublishIndicator = default, Option<string?> latitude = default, Option<string?> longitude = default, Option<string?> nameOfCounty = default, Option<List<EdFiEducationOrganizationAddressPeriod>?> periods = default, Option<Object?> ext = default)
        {
            AddressTypeDescriptor = addressTypeDescriptor;
            StateAbbreviationDescriptor = stateAbbreviationDescriptor;
            City = city;
            PostalCode = postalCode;
            StreetNumberName = streetNumberName;
            LocaleDescriptorOption = localeDescriptor;
            ApartmentRoomSuiteNumberOption = apartmentRoomSuiteNumber;
            BuildingSiteNumberOption = buildingSiteNumber;
            CongressionalDistrictOption = congressionalDistrict;
            CountyFIPSCodeOption = countyFIPSCode;
            DoNotPublishIndicatorOption = doNotPublishIndicator;
            LatitudeOption = latitude;
            LongitudeOption = longitude;
            NameOfCountyOption = nameOfCounty;
            PeriodsOption = periods;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        /// <value>The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)</value>
        [JsonPropertyName("addressTypeDescriptor")]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        /// </summary>
        /// <value>The abbreviation for the state (within the United States) or outlying area in which an address is located.</value>
        [JsonPropertyName("stateAbbreviationDescriptor")]
        public string StateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// The name of the city in which an address is located.
        /// </summary>
        /// <value>The name of the city in which an address is located.</value>
        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        /// </summary>
        /// <value>The five or nine digit zip code or overseas postal code portion of an address.</value>
        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The street number and street name or post office box number of an address.
        /// </summary>
        /// <value>The street number and street name or post office box number of an address.</value>
        [JsonPropertyName("streetNumberName")]
        public string StreetNumberName { get; set; }

        /// <summary>
        /// Used to track the state of LocaleDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocaleDescriptorOption { get; private set; }

        /// <summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        /// </summary>
        /// <value>A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).</value>
        [JsonPropertyName("localeDescriptor")]
        public string? LocaleDescriptor { get { return this.LocaleDescriptorOption; } set { this.LocaleDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ApartmentRoomSuiteNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ApartmentRoomSuiteNumberOption { get; private set; }

        /// <summary>
        /// The apartment, room, or suite number of an address.
        /// </summary>
        /// <value>The apartment, room, or suite number of an address.</value>
        [JsonPropertyName("apartmentRoomSuiteNumber")]
        public string? ApartmentRoomSuiteNumber { get { return this.ApartmentRoomSuiteNumberOption; } set { this.ApartmentRoomSuiteNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of BuildingSiteNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuildingSiteNumberOption { get; private set; }

        /// <summary>
        /// The number of the building on the site, if more than one building shares the same address.
        /// </summary>
        /// <value>The number of the building on the site, if more than one building shares the same address.</value>
        [JsonPropertyName("buildingSiteNumber")]
        public string? BuildingSiteNumber { get { return this.BuildingSiteNumberOption; } set { this.BuildingSiteNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of CongressionalDistrict
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CongressionalDistrictOption { get; private set; }

        /// <summary>
        /// The congressional district in which an address is located.
        /// </summary>
        /// <value>The congressional district in which an address is located.</value>
        [JsonPropertyName("congressionalDistrict")]
        public string? CongressionalDistrict { get { return this.CongressionalDistrictOption; } set { this.CongressionalDistrictOption = new(value); } }

        /// <summary>
        /// Used to track the state of CountyFIPSCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountyFIPSCodeOption { get; private set; }

        /// <summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \&quot;first-order subdivisions\&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        /// </summary>
        /// <value>The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \&quot;first-order subdivisions\&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.</value>
        [JsonPropertyName("countyFIPSCode")]
        public string? CountyFIPSCode { get { return this.CountyFIPSCodeOption; } set { this.CountyFIPSCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DoNotPublishIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DoNotPublishIndicatorOption { get; private set; }

        /// <summary>
        /// An indication that the address should not be published.
        /// </summary>
        /// <value>An indication that the address should not be published.</value>
        [JsonPropertyName("doNotPublishIndicator")]
        public bool? DoNotPublishIndicator { get { return this.DoNotPublishIndicatorOption; } set { this.DoNotPublishIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LatitudeOption { get; private set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        /// <value>The geographic latitude of the physical address.</value>
        [JsonPropertyName("latitude")]
        public string? Latitude { get { return this.LatitudeOption; } set { this.LatitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LongitudeOption { get; private set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        /// <value>The geographic longitude of the physical address.</value>
        [JsonPropertyName("longitude")]
        public string? Longitude { get { return this.LongitudeOption; } set { this.LongitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of NameOfCounty
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOfCountyOption { get; private set; }

        /// <summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.
        /// </summary>
        /// <value>The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.</value>
        [JsonPropertyName("nameOfCounty")]
        public string? NameOfCounty { get { return this.NameOfCountyOption; } set { this.NameOfCountyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Periods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationAddressPeriod>?> PeriodsOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.</value>
        [JsonPropertyName("periods")]
        public List<EdFiEducationOrganizationAddressPeriod>? Periods { get { return this.PeriodsOption; } set { this.PeriodsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the EducationOrganizationAddress entity.
        /// </summary>
        /// <value>Extensions to the EducationOrganizationAddress entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiEducationOrganizationAddress {\n");
            sb.Append("  AddressTypeDescriptor: ").Append(AddressTypeDescriptor).Append("\n");
            sb.Append("  StateAbbreviationDescriptor: ").Append(StateAbbreviationDescriptor).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  StreetNumberName: ").Append(StreetNumberName).Append("\n");
            sb.Append("  LocaleDescriptor: ").Append(LocaleDescriptor).Append("\n");
            sb.Append("  ApartmentRoomSuiteNumber: ").Append(ApartmentRoomSuiteNumber).Append("\n");
            sb.Append("  BuildingSiteNumber: ").Append(BuildingSiteNumber).Append("\n");
            sb.Append("  CongressionalDistrict: ").Append(CongressionalDistrict).Append("\n");
            sb.Append("  CountyFIPSCode: ").Append(CountyFIPSCode).Append("\n");
            sb.Append("  DoNotPublishIndicator: ").Append(DoNotPublishIndicator).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  NameOfCounty: ").Append(NameOfCounty).Append("\n");
            sb.Append("  Periods: ").Append(Periods).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AddressTypeDescriptor (string) maxLength
            if (this.AddressTypeDescriptor != null && this.AddressTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AddressTypeDescriptor, length must be less than 306.", new [] { "AddressTypeDescriptor" });
            }

            // StateAbbreviationDescriptor (string) maxLength
            if (this.StateAbbreviationDescriptor != null && this.StateAbbreviationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for StateAbbreviationDescriptor, length must be less than 306.", new [] { "StateAbbreviationDescriptor" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 30)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 30.", new [] { "City" });
            }

            // City (string) minLength
            if (this.City != null && this.City.Length < 2)
            {
                yield return new ValidationResult("Invalid value for City, length must be greater than 2.", new [] { "City" });
            }

            // PostalCode (string) maxLength
            if (this.PostalCode != null && this.PostalCode.Length > 17)
            {
                yield return new ValidationResult("Invalid value for PostalCode, length must be less than 17.", new [] { "PostalCode" });
            }

            // StreetNumberName (string) maxLength
            if (this.StreetNumberName != null && this.StreetNumberName.Length > 150)
            {
                yield return new ValidationResult("Invalid value for StreetNumberName, length must be less than 150.", new [] { "StreetNumberName" });
            }

            // LocaleDescriptor (string) maxLength
            if (this.LocaleDescriptor != null && this.LocaleDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LocaleDescriptor, length must be less than 306.", new [] { "LocaleDescriptor" });
            }

            // ApartmentRoomSuiteNumber (string) maxLength
            if (this.ApartmentRoomSuiteNumber != null && this.ApartmentRoomSuiteNumber.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ApartmentRoomSuiteNumber, length must be less than 50.", new [] { "ApartmentRoomSuiteNumber" });
            }

            // BuildingSiteNumber (string) maxLength
            if (this.BuildingSiteNumber != null && this.BuildingSiteNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for BuildingSiteNumber, length must be less than 20.", new [] { "BuildingSiteNumber" });
            }

            // CongressionalDistrict (string) maxLength
            if (this.CongressionalDistrict != null && this.CongressionalDistrict.Length > 30)
            {
                yield return new ValidationResult("Invalid value for CongressionalDistrict, length must be less than 30.", new [] { "CongressionalDistrict" });
            }

            // CountyFIPSCode (string) maxLength
            if (this.CountyFIPSCode != null && this.CountyFIPSCode.Length > 5)
            {
                yield return new ValidationResult("Invalid value for CountyFIPSCode, length must be less than 5.", new [] { "CountyFIPSCode" });
            }

            // CountyFIPSCode (string) minLength
            if (this.CountyFIPSCode != null && this.CountyFIPSCode.Length < 3)
            {
                yield return new ValidationResult("Invalid value for CountyFIPSCode, length must be greater than 3.", new [] { "CountyFIPSCode" });
            }

            // Latitude (string) maxLength
            if (this.Latitude != null && this.Latitude.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Latitude, length must be less than 20.", new [] { "Latitude" });
            }

            // Longitude (string) maxLength
            if (this.Longitude != null && this.Longitude.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Longitude, length must be less than 20.", new [] { "Longitude" });
            }

            // NameOfCounty (string) maxLength
            if (this.NameOfCounty != null && this.NameOfCounty.Length > 30)
            {
                yield return new ValidationResult("Invalid value for NameOfCounty, length must be less than 30.", new [] { "NameOfCounty" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiEducationOrganizationAddress" />
    /// </summary>
    public class EdFiEducationOrganizationAddressJsonConverter : JsonConverter<EdFiEducationOrganizationAddress>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiEducationOrganizationAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiEducationOrganizationAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> addressTypeDescriptor = default;
            Option<string?> stateAbbreviationDescriptor = default;
            Option<string?> city = default;
            Option<string?> postalCode = default;
            Option<string?> streetNumberName = default;
            Option<string?> localeDescriptor = default;
            Option<string?> apartmentRoomSuiteNumber = default;
            Option<string?> buildingSiteNumber = default;
            Option<string?> congressionalDistrict = default;
            Option<string?> countyFIPSCode = default;
            Option<bool?> doNotPublishIndicator = default;
            Option<string?> latitude = default;
            Option<string?> longitude = default;
            Option<string?> nameOfCounty = default;
            Option<List<EdFiEducationOrganizationAddressPeriod>?> periods = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addressTypeDescriptor":
                            addressTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stateAbbreviationDescriptor":
                            stateAbbreviationDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postalCode":
                            postalCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "streetNumberName":
                            streetNumberName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "localeDescriptor":
                            localeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "apartmentRoomSuiteNumber":
                            apartmentRoomSuiteNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "buildingSiteNumber":
                            buildingSiteNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "congressionalDistrict":
                            congressionalDistrict = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "countyFIPSCode":
                            countyFIPSCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "doNotPublishIndicator":
                            doNotPublishIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "latitude":
                            latitude = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "longitude":
                            longitude = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "nameOfCounty":
                            nameOfCounty = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "periods":
                            periods = new Option<List<EdFiEducationOrganizationAddressPeriod>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationAddressPeriod>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!addressTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationOrganizationAddress.", nameof(addressTypeDescriptor));

            if (!stateAbbreviationDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationOrganizationAddress.", nameof(stateAbbreviationDescriptor));

            if (!city.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationOrganizationAddress.", nameof(city));

            if (!postalCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationOrganizationAddress.", nameof(postalCode));

            if (!streetNumberName.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationOrganizationAddress.", nameof(streetNumberName));

            if (addressTypeDescriptor.IsSet && addressTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(addressTypeDescriptor), "Property is not nullable for class EdFiEducationOrganizationAddress.");

            if (stateAbbreviationDescriptor.IsSet && stateAbbreviationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(stateAbbreviationDescriptor), "Property is not nullable for class EdFiEducationOrganizationAddress.");

            if (city.IsSet && city.Value == null)
                throw new ArgumentNullException(nameof(city), "Property is not nullable for class EdFiEducationOrganizationAddress.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class EdFiEducationOrganizationAddress.");

            if (streetNumberName.IsSet && streetNumberName.Value == null)
                throw new ArgumentNullException(nameof(streetNumberName), "Property is not nullable for class EdFiEducationOrganizationAddress.");

            if (periods.IsSet && periods.Value == null)
                throw new ArgumentNullException(nameof(periods), "Property is not nullable for class EdFiEducationOrganizationAddress.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiEducationOrganizationAddress.");

            return new EdFiEducationOrganizationAddress(addressTypeDescriptor.Value!, stateAbbreviationDescriptor.Value!, city.Value!, postalCode.Value!, streetNumberName.Value!, localeDescriptor, apartmentRoomSuiteNumber, buildingSiteNumber, congressionalDistrict, countyFIPSCode, doNotPublishIndicator, latitude, longitude, nameOfCounty, periods, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiEducationOrganizationAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiEducationOrganizationAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiEducationOrganizationAddress edFiEducationOrganizationAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiEducationOrganizationAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiEducationOrganizationAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiEducationOrganizationAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiEducationOrganizationAddress edFiEducationOrganizationAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiEducationOrganizationAddress.AddressTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationAddress.AddressTypeDescriptor), "Property is required for class EdFiEducationOrganizationAddress.");

            if (edFiEducationOrganizationAddress.StateAbbreviationDescriptor == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationAddress.StateAbbreviationDescriptor), "Property is required for class EdFiEducationOrganizationAddress.");

            if (edFiEducationOrganizationAddress.City == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationAddress.City), "Property is required for class EdFiEducationOrganizationAddress.");

            if (edFiEducationOrganizationAddress.PostalCode == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationAddress.PostalCode), "Property is required for class EdFiEducationOrganizationAddress.");

            if (edFiEducationOrganizationAddress.StreetNumberName == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationAddress.StreetNumberName), "Property is required for class EdFiEducationOrganizationAddress.");

            if (edFiEducationOrganizationAddress.PeriodsOption.IsSet && edFiEducationOrganizationAddress.Periods == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationAddress.Periods), "Property is required for class EdFiEducationOrganizationAddress.");

            if (edFiEducationOrganizationAddress.ExtOption.IsSet && edFiEducationOrganizationAddress.Ext == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationAddress.Ext), "Property is required for class EdFiEducationOrganizationAddress.");

            writer.WriteString("addressTypeDescriptor", edFiEducationOrganizationAddress.AddressTypeDescriptor);

            writer.WriteString("stateAbbreviationDescriptor", edFiEducationOrganizationAddress.StateAbbreviationDescriptor);

            writer.WriteString("city", edFiEducationOrganizationAddress.City);

            writer.WriteString("postalCode", edFiEducationOrganizationAddress.PostalCode);

            writer.WriteString("streetNumberName", edFiEducationOrganizationAddress.StreetNumberName);

            if (edFiEducationOrganizationAddress.LocaleDescriptorOption.IsSet)
                if (edFiEducationOrganizationAddress.LocaleDescriptorOption.Value != null)
                    writer.WriteString("localeDescriptor", edFiEducationOrganizationAddress.LocaleDescriptor);
                else
                    writer.WriteNull("localeDescriptor");

            if (edFiEducationOrganizationAddress.ApartmentRoomSuiteNumberOption.IsSet)
                if (edFiEducationOrganizationAddress.ApartmentRoomSuiteNumberOption.Value != null)
                    writer.WriteString("apartmentRoomSuiteNumber", edFiEducationOrganizationAddress.ApartmentRoomSuiteNumber);
                else
                    writer.WriteNull("apartmentRoomSuiteNumber");

            if (edFiEducationOrganizationAddress.BuildingSiteNumberOption.IsSet)
                if (edFiEducationOrganizationAddress.BuildingSiteNumberOption.Value != null)
                    writer.WriteString("buildingSiteNumber", edFiEducationOrganizationAddress.BuildingSiteNumber);
                else
                    writer.WriteNull("buildingSiteNumber");

            if (edFiEducationOrganizationAddress.CongressionalDistrictOption.IsSet)
                if (edFiEducationOrganizationAddress.CongressionalDistrictOption.Value != null)
                    writer.WriteString("congressionalDistrict", edFiEducationOrganizationAddress.CongressionalDistrict);
                else
                    writer.WriteNull("congressionalDistrict");

            if (edFiEducationOrganizationAddress.CountyFIPSCodeOption.IsSet)
                if (edFiEducationOrganizationAddress.CountyFIPSCodeOption.Value != null)
                    writer.WriteString("countyFIPSCode", edFiEducationOrganizationAddress.CountyFIPSCode);
                else
                    writer.WriteNull("countyFIPSCode");

            if (edFiEducationOrganizationAddress.DoNotPublishIndicatorOption.IsSet)
                if (edFiEducationOrganizationAddress.DoNotPublishIndicatorOption.Value != null)
                    writer.WriteBoolean("doNotPublishIndicator", edFiEducationOrganizationAddress.DoNotPublishIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("doNotPublishIndicator");

            if (edFiEducationOrganizationAddress.LatitudeOption.IsSet)
                if (edFiEducationOrganizationAddress.LatitudeOption.Value != null)
                    writer.WriteString("latitude", edFiEducationOrganizationAddress.Latitude);
                else
                    writer.WriteNull("latitude");

            if (edFiEducationOrganizationAddress.LongitudeOption.IsSet)
                if (edFiEducationOrganizationAddress.LongitudeOption.Value != null)
                    writer.WriteString("longitude", edFiEducationOrganizationAddress.Longitude);
                else
                    writer.WriteNull("longitude");

            if (edFiEducationOrganizationAddress.NameOfCountyOption.IsSet)
                if (edFiEducationOrganizationAddress.NameOfCountyOption.Value != null)
                    writer.WriteString("nameOfCounty", edFiEducationOrganizationAddress.NameOfCounty);
                else
                    writer.WriteNull("nameOfCounty");

            if (edFiEducationOrganizationAddress.PeriodsOption.IsSet)
            {
                writer.WritePropertyName("periods");
                JsonSerializer.Serialize(writer, edFiEducationOrganizationAddress.Periods, jsonSerializerOptions);
            }
            if (edFiEducationOrganizationAddress.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiEducationOrganizationAddress.Ext, jsonSerializerOptions);
            }
        }
    }
}
