// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiEducationOrganizationIndicator
    /// </summary>
    public partial class EdFiEducationOrganizationIndicator : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiEducationOrganizationIndicator" /> class.
        /// </summary>
        /// <param name="indicatorDescriptor">The name or code for the indicator or metric.</param>
        /// <param name="indicatorGroupDescriptor">The name for a group of indicators.</param>
        /// <param name="indicatorLevelDescriptor">The value of the indicator or metric, as a value from a controlled vocabulary. The semantics of an empty value is \&quot;not submitted.\&quot;</param>
        /// <param name="designatedBy">The person, organization, or department that defined the metric.</param>
        /// <param name="indicatorValue">The value of the indicator or metric. The semantics of an empty value is \&quot;not submitted.\&quot;</param>
        /// <param name="periods">An unordered collection of educationOrganizationIndicatorPeriods. The time period or as-of date for the indicator.</param>
        /// <param name="ext">Extensions to the EducationOrganizationIndicator entity.</param>
        [JsonConstructor]
        public EdFiEducationOrganizationIndicator(string indicatorDescriptor, Option<string?> indicatorGroupDescriptor = default, Option<string?> indicatorLevelDescriptor = default, Option<string?> designatedBy = default, Option<string?> indicatorValue = default, Option<List<EdFiEducationOrganizationIndicatorPeriod>?> periods = default, Option<Object?> ext = default)
        {
            IndicatorDescriptor = indicatorDescriptor;
            IndicatorGroupDescriptorOption = indicatorGroupDescriptor;
            IndicatorLevelDescriptorOption = indicatorLevelDescriptor;
            DesignatedByOption = designatedBy;
            IndicatorValueOption = indicatorValue;
            PeriodsOption = periods;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name or code for the indicator or metric.
        /// </summary>
        /// <value>The name or code for the indicator or metric.</value>
        [JsonPropertyName("indicatorDescriptor")]
        public string IndicatorDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of IndicatorGroupDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndicatorGroupDescriptorOption { get; private set; }

        /// <summary>
        /// The name for a group of indicators.
        /// </summary>
        /// <value>The name for a group of indicators.</value>
        [JsonPropertyName("indicatorGroupDescriptor")]
        public string? IndicatorGroupDescriptor { get { return this.IndicatorGroupDescriptorOption; } set { this.IndicatorGroupDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of IndicatorLevelDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndicatorLevelDescriptorOption { get; private set; }

        /// <summary>
        /// The value of the indicator or metric, as a value from a controlled vocabulary. The semantics of an empty value is \&quot;not submitted.\&quot;
        /// </summary>
        /// <value>The value of the indicator or metric, as a value from a controlled vocabulary. The semantics of an empty value is \&quot;not submitted.\&quot;</value>
        [JsonPropertyName("indicatorLevelDescriptor")]
        public string? IndicatorLevelDescriptor { get { return this.IndicatorLevelDescriptorOption; } set { this.IndicatorLevelDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DesignatedBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DesignatedByOption { get; private set; }

        /// <summary>
        /// The person, organization, or department that defined the metric.
        /// </summary>
        /// <value>The person, organization, or department that defined the metric.</value>
        [JsonPropertyName("designatedBy")]
        public string? DesignatedBy { get { return this.DesignatedByOption; } set { this.DesignatedByOption = new(value); } }

        /// <summary>
        /// Used to track the state of IndicatorValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndicatorValueOption { get; private set; }

        /// <summary>
        /// The value of the indicator or metric. The semantics of an empty value is \&quot;not submitted.\&quot;
        /// </summary>
        /// <value>The value of the indicator or metric. The semantics of an empty value is \&quot;not submitted.\&quot;</value>
        [JsonPropertyName("indicatorValue")]
        public string? IndicatorValue { get { return this.IndicatorValueOption; } set { this.IndicatorValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of Periods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationIndicatorPeriod>?> PeriodsOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationIndicatorPeriods. The time period or as-of date for the indicator.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationIndicatorPeriods. The time period or as-of date for the indicator.</value>
        [JsonPropertyName("periods")]
        public List<EdFiEducationOrganizationIndicatorPeriod>? Periods { get { return this.PeriodsOption; } set { this.PeriodsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the EducationOrganizationIndicator entity.
        /// </summary>
        /// <value>Extensions to the EducationOrganizationIndicator entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiEducationOrganizationIndicator {\n");
            sb.Append("  IndicatorDescriptor: ").Append(IndicatorDescriptor).Append("\n");
            sb.Append("  IndicatorGroupDescriptor: ").Append(IndicatorGroupDescriptor).Append("\n");
            sb.Append("  IndicatorLevelDescriptor: ").Append(IndicatorLevelDescriptor).Append("\n");
            sb.Append("  DesignatedBy: ").Append(DesignatedBy).Append("\n");
            sb.Append("  IndicatorValue: ").Append(IndicatorValue).Append("\n");
            sb.Append("  Periods: ").Append(Periods).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IndicatorDescriptor (string) maxLength
            if (this.IndicatorDescriptor != null && this.IndicatorDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for IndicatorDescriptor, length must be less than 306.", new [] { "IndicatorDescriptor" });
            }

            // IndicatorGroupDescriptor (string) maxLength
            if (this.IndicatorGroupDescriptor != null && this.IndicatorGroupDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for IndicatorGroupDescriptor, length must be less than 306.", new [] { "IndicatorGroupDescriptor" });
            }

            // IndicatorLevelDescriptor (string) maxLength
            if (this.IndicatorLevelDescriptor != null && this.IndicatorLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for IndicatorLevelDescriptor, length must be less than 306.", new [] { "IndicatorLevelDescriptor" });
            }

            // DesignatedBy (string) maxLength
            if (this.DesignatedBy != null && this.DesignatedBy.Length > 60)
            {
                yield return new ValidationResult("Invalid value for DesignatedBy, length must be less than 60.", new [] { "DesignatedBy" });
            }

            // IndicatorValue (string) maxLength
            if (this.IndicatorValue != null && this.IndicatorValue.Length > 60)
            {
                yield return new ValidationResult("Invalid value for IndicatorValue, length must be less than 60.", new [] { "IndicatorValue" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiEducationOrganizationIndicator" />
    /// </summary>
    public class EdFiEducationOrganizationIndicatorJsonConverter : JsonConverter<EdFiEducationOrganizationIndicator>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiEducationOrganizationIndicator" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiEducationOrganizationIndicator Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> indicatorDescriptor = default;
            Option<string?> indicatorGroupDescriptor = default;
            Option<string?> indicatorLevelDescriptor = default;
            Option<string?> designatedBy = default;
            Option<string?> indicatorValue = default;
            Option<List<EdFiEducationOrganizationIndicatorPeriod>?> periods = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "indicatorDescriptor":
                            indicatorDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "indicatorGroupDescriptor":
                            indicatorGroupDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "indicatorLevelDescriptor":
                            indicatorLevelDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "designatedBy":
                            designatedBy = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "indicatorValue":
                            indicatorValue = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "periods":
                            periods = new Option<List<EdFiEducationOrganizationIndicatorPeriod>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationIndicatorPeriod>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!indicatorDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationOrganizationIndicator.", nameof(indicatorDescriptor));

            if (indicatorDescriptor.IsSet && indicatorDescriptor.Value == null)
                throw new ArgumentNullException(nameof(indicatorDescriptor), "Property is not nullable for class EdFiEducationOrganizationIndicator.");

            if (periods.IsSet && periods.Value == null)
                throw new ArgumentNullException(nameof(periods), "Property is not nullable for class EdFiEducationOrganizationIndicator.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiEducationOrganizationIndicator.");

            return new EdFiEducationOrganizationIndicator(indicatorDescriptor.Value!, indicatorGroupDescriptor, indicatorLevelDescriptor, designatedBy, indicatorValue, periods, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiEducationOrganizationIndicator" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiEducationOrganizationIndicator"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiEducationOrganizationIndicator edFiEducationOrganizationIndicator, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiEducationOrganizationIndicator, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiEducationOrganizationIndicator" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiEducationOrganizationIndicator"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiEducationOrganizationIndicator edFiEducationOrganizationIndicator, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiEducationOrganizationIndicator.IndicatorDescriptor == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationIndicator.IndicatorDescriptor), "Property is required for class EdFiEducationOrganizationIndicator.");

            if (edFiEducationOrganizationIndicator.PeriodsOption.IsSet && edFiEducationOrganizationIndicator.Periods == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationIndicator.Periods), "Property is required for class EdFiEducationOrganizationIndicator.");

            if (edFiEducationOrganizationIndicator.ExtOption.IsSet && edFiEducationOrganizationIndicator.Ext == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationIndicator.Ext), "Property is required for class EdFiEducationOrganizationIndicator.");

            writer.WriteString("indicatorDescriptor", edFiEducationOrganizationIndicator.IndicatorDescriptor);

            if (edFiEducationOrganizationIndicator.IndicatorGroupDescriptorOption.IsSet)
                if (edFiEducationOrganizationIndicator.IndicatorGroupDescriptorOption.Value != null)
                    writer.WriteString("indicatorGroupDescriptor", edFiEducationOrganizationIndicator.IndicatorGroupDescriptor);
                else
                    writer.WriteNull("indicatorGroupDescriptor");

            if (edFiEducationOrganizationIndicator.IndicatorLevelDescriptorOption.IsSet)
                if (edFiEducationOrganizationIndicator.IndicatorLevelDescriptorOption.Value != null)
                    writer.WriteString("indicatorLevelDescriptor", edFiEducationOrganizationIndicator.IndicatorLevelDescriptor);
                else
                    writer.WriteNull("indicatorLevelDescriptor");

            if (edFiEducationOrganizationIndicator.DesignatedByOption.IsSet)
                if (edFiEducationOrganizationIndicator.DesignatedByOption.Value != null)
                    writer.WriteString("designatedBy", edFiEducationOrganizationIndicator.DesignatedBy);
                else
                    writer.WriteNull("designatedBy");

            if (edFiEducationOrganizationIndicator.IndicatorValueOption.IsSet)
                if (edFiEducationOrganizationIndicator.IndicatorValueOption.Value != null)
                    writer.WriteString("indicatorValue", edFiEducationOrganizationIndicator.IndicatorValue);
                else
                    writer.WriteNull("indicatorValue");

            if (edFiEducationOrganizationIndicator.PeriodsOption.IsSet)
            {
                writer.WritePropertyName("periods");
                JsonSerializer.Serialize(writer, edFiEducationOrganizationIndicator.Periods, jsonSerializerOptions);
            }
            if (edFiEducationOrganizationIndicator.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiEducationOrganizationIndicator.Ext, jsonSerializerOptions);
            }
        }
    }
}
