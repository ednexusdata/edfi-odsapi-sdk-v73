// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiEducationOrganizationInstitutionTelephone
    /// </summary>
    public partial class EdFiEducationOrganizationInstitutionTelephone : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiEducationOrganizationInstitutionTelephone" /> class.
        /// </summary>
        /// <param name="institutionTelephoneNumberTypeDescriptor">The type of communication number listed for an individual or organization.</param>
        /// <param name="telephoneNumber">The telephone number including the area code, and extension, if applicable.</param>
        /// <param name="ext">Extensions to the EducationOrganizationInstitutionTelephone entity.</param>
        [JsonConstructor]
        public EdFiEducationOrganizationInstitutionTelephone(string institutionTelephoneNumberTypeDescriptor, string telephoneNumber, Option<Object?> ext = default)
        {
            InstitutionTelephoneNumberTypeDescriptor = institutionTelephoneNumberTypeDescriptor;
            TelephoneNumber = telephoneNumber;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of communication number listed for an individual or organization.
        /// </summary>
        /// <value>The type of communication number listed for an individual or organization.</value>
        [JsonPropertyName("institutionTelephoneNumberTypeDescriptor")]
        public string InstitutionTelephoneNumberTypeDescriptor { get; set; }

        /// <summary>
        /// The telephone number including the area code, and extension, if applicable.
        /// </summary>
        /// <value>The telephone number including the area code, and extension, if applicable.</value>
        [JsonPropertyName("telephoneNumber")]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the EducationOrganizationInstitutionTelephone entity.
        /// </summary>
        /// <value>Extensions to the EducationOrganizationInstitutionTelephone entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiEducationOrganizationInstitutionTelephone {\n");
            sb.Append("  InstitutionTelephoneNumberTypeDescriptor: ").Append(InstitutionTelephoneNumberTypeDescriptor).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InstitutionTelephoneNumberTypeDescriptor (string) maxLength
            if (this.InstitutionTelephoneNumberTypeDescriptor != null && this.InstitutionTelephoneNumberTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for InstitutionTelephoneNumberTypeDescriptor, length must be less than 306.", new [] { "InstitutionTelephoneNumberTypeDescriptor" });
            }

            // TelephoneNumber (string) maxLength
            if (this.TelephoneNumber != null && this.TelephoneNumber.Length > 24)
            {
                yield return new ValidationResult("Invalid value for TelephoneNumber, length must be less than 24.", new [] { "TelephoneNumber" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiEducationOrganizationInstitutionTelephone" />
    /// </summary>
    public class EdFiEducationOrganizationInstitutionTelephoneJsonConverter : JsonConverter<EdFiEducationOrganizationInstitutionTelephone>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiEducationOrganizationInstitutionTelephone" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiEducationOrganizationInstitutionTelephone Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> institutionTelephoneNumberTypeDescriptor = default;
            Option<string?> telephoneNumber = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "institutionTelephoneNumberTypeDescriptor":
                            institutionTelephoneNumberTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "telephoneNumber":
                            telephoneNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!institutionTelephoneNumberTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationOrganizationInstitutionTelephone.", nameof(institutionTelephoneNumberTypeDescriptor));

            if (!telephoneNumber.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationOrganizationInstitutionTelephone.", nameof(telephoneNumber));

            if (institutionTelephoneNumberTypeDescriptor.IsSet && institutionTelephoneNumberTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(institutionTelephoneNumberTypeDescriptor), "Property is not nullable for class EdFiEducationOrganizationInstitutionTelephone.");

            if (telephoneNumber.IsSet && telephoneNumber.Value == null)
                throw new ArgumentNullException(nameof(telephoneNumber), "Property is not nullable for class EdFiEducationOrganizationInstitutionTelephone.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiEducationOrganizationInstitutionTelephone.");

            return new EdFiEducationOrganizationInstitutionTelephone(institutionTelephoneNumberTypeDescriptor.Value!, telephoneNumber.Value!, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiEducationOrganizationInstitutionTelephone" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiEducationOrganizationInstitutionTelephone"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiEducationOrganizationInstitutionTelephone edFiEducationOrganizationInstitutionTelephone, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiEducationOrganizationInstitutionTelephone, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiEducationOrganizationInstitutionTelephone" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiEducationOrganizationInstitutionTelephone"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiEducationOrganizationInstitutionTelephone edFiEducationOrganizationInstitutionTelephone, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiEducationOrganizationInstitutionTelephone.InstitutionTelephoneNumberTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationInstitutionTelephone.InstitutionTelephoneNumberTypeDescriptor), "Property is required for class EdFiEducationOrganizationInstitutionTelephone.");

            if (edFiEducationOrganizationInstitutionTelephone.TelephoneNumber == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationInstitutionTelephone.TelephoneNumber), "Property is required for class EdFiEducationOrganizationInstitutionTelephone.");

            if (edFiEducationOrganizationInstitutionTelephone.ExtOption.IsSet && edFiEducationOrganizationInstitutionTelephone.Ext == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationInstitutionTelephone.Ext), "Property is required for class EdFiEducationOrganizationInstitutionTelephone.");

            writer.WriteString("institutionTelephoneNumberTypeDescriptor", edFiEducationOrganizationInstitutionTelephone.InstitutionTelephoneNumberTypeDescriptor);

            writer.WriteString("telephoneNumber", edFiEducationOrganizationInstitutionTelephone.TelephoneNumber);

            if (edFiEducationOrganizationInstitutionTelephone.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiEducationOrganizationInstitutionTelephone.Ext, jsonSerializerOptions);
            }
        }
    }
}
