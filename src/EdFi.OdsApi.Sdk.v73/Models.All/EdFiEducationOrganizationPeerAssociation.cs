// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiEducationOrganizationPeerAssociation
    /// </summary>
    public partial class EdFiEducationOrganizationPeerAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiEducationOrganizationPeerAssociation" /> class.
        /// </summary>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="peerEducationOrganizationReference">peerEducationOrganizationReference</param>
        /// <param name="id">id</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the EducationOrganizationPeerAssociation entity.</param>
        [JsonConstructor]
        public EdFiEducationOrganizationPeerAssociation(EdFiEducationOrganizationReference educationOrganizationReference, EdFiEducationOrganizationReference peerEducationOrganizationReference, Option<string?> id = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            EducationOrganizationReference = educationOrganizationReference;
            PeerEducationOrganizationReference = peerEducationOrganizationReference;
            IdOption = id;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets PeerEducationOrganizationReference
        /// </summary>
        [JsonPropertyName("peerEducationOrganizationReference")]
        public EdFiEducationOrganizationReference PeerEducationOrganizationReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the EducationOrganizationPeerAssociation entity.
        /// </summary>
        /// <value>Extensions to the EducationOrganizationPeerAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiEducationOrganizationPeerAssociation {\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  PeerEducationOrganizationReference: ").Append(PeerEducationOrganizationReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiEducationOrganizationPeerAssociation" />
    /// </summary>
    public class EdFiEducationOrganizationPeerAssociationJsonConverter : JsonConverter<EdFiEducationOrganizationPeerAssociation>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiEducationOrganizationPeerAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiEducationOrganizationPeerAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiEducationOrganizationReference?> peerEducationOrganizationReference = default;
            Option<string?> id = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "peerEducationOrganizationReference":
                            peerEducationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationOrganizationPeerAssociation.", nameof(educationOrganizationReference));

            if (!peerEducationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiEducationOrganizationPeerAssociation.", nameof(peerEducationOrganizationReference));

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiEducationOrganizationPeerAssociation.");

            if (peerEducationOrganizationReference.IsSet && peerEducationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(peerEducationOrganizationReference), "Property is not nullable for class EdFiEducationOrganizationPeerAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiEducationOrganizationPeerAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiEducationOrganizationPeerAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiEducationOrganizationPeerAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiEducationOrganizationPeerAssociation.");

            return new EdFiEducationOrganizationPeerAssociation(educationOrganizationReference.Value!, peerEducationOrganizationReference.Value!, id, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiEducationOrganizationPeerAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiEducationOrganizationPeerAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiEducationOrganizationPeerAssociation edFiEducationOrganizationPeerAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiEducationOrganizationPeerAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiEducationOrganizationPeerAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiEducationOrganizationPeerAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiEducationOrganizationPeerAssociation edFiEducationOrganizationPeerAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiEducationOrganizationPeerAssociation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationPeerAssociation.EducationOrganizationReference), "Property is required for class EdFiEducationOrganizationPeerAssociation.");

            if (edFiEducationOrganizationPeerAssociation.PeerEducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationPeerAssociation.PeerEducationOrganizationReference), "Property is required for class EdFiEducationOrganizationPeerAssociation.");

            if (edFiEducationOrganizationPeerAssociation.IdOption.IsSet && edFiEducationOrganizationPeerAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationPeerAssociation.Id), "Property is required for class EdFiEducationOrganizationPeerAssociation.");

            if (edFiEducationOrganizationPeerAssociation.EtagOption.IsSet && edFiEducationOrganizationPeerAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationPeerAssociation.Etag), "Property is required for class EdFiEducationOrganizationPeerAssociation.");

            if (edFiEducationOrganizationPeerAssociation.ExtOption.IsSet && edFiEducationOrganizationPeerAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiEducationOrganizationPeerAssociation.Ext), "Property is required for class EdFiEducationOrganizationPeerAssociation.");

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiEducationOrganizationPeerAssociation.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("peerEducationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiEducationOrganizationPeerAssociation.PeerEducationOrganizationReference, jsonSerializerOptions);
            if (edFiEducationOrganizationPeerAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiEducationOrganizationPeerAssociation.Id);

            if (edFiEducationOrganizationPeerAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiEducationOrganizationPeerAssociation.Etag);

            if (edFiEducationOrganizationPeerAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiEducationOrganizationPeerAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiEducationOrganizationPeerAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiEducationOrganizationPeerAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
