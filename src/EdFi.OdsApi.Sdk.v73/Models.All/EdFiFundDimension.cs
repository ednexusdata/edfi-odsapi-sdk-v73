// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiFundDimension
    /// </summary>
    public partial class EdFiFundDimension : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiFundDimension" /> class.
        /// </summary>
        /// <param name="code">The code representation of the account fund dimension.</param>
        /// <param name="fiscalYear">The fiscal year for which the account fund dimension is valid.</param>
        /// <param name="id">id</param>
        /// <param name="codeName">A description of the account fund dimension.</param>
        /// <param name="reportingTags">An unordered collection of fundDimensionReportingTags. Optional tag for accountability reporting.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the FundDimension entity.</param>
        [JsonConstructor]
        public EdFiFundDimension(string code, int fiscalYear, Option<string?> id = default, Option<string?> codeName = default, Option<List<EdFiFundDimensionReportingTag>?> reportingTags = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            Code = code;
            FiscalYear = fiscalYear;
            IdOption = id;
            CodeNameOption = codeName;
            ReportingTagsOption = reportingTags;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The code representation of the account fund dimension.
        /// </summary>
        /// <value>The code representation of the account fund dimension.</value>
        [JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// The fiscal year for which the account fund dimension is valid.
        /// </summary>
        /// <value>The fiscal year for which the account fund dimension is valid.</value>
        [JsonPropertyName("fiscalYear")]
        public int FiscalYear { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CodeName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeNameOption { get; private set; }

        /// <summary>
        /// A description of the account fund dimension.
        /// </summary>
        /// <value>A description of the account fund dimension.</value>
        [JsonPropertyName("codeName")]
        public string? CodeName { get { return this.CodeNameOption; } set { this.CodeNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReportingTags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiFundDimensionReportingTag>?> ReportingTagsOption { get; private set; }

        /// <summary>
        /// An unordered collection of fundDimensionReportingTags. Optional tag for accountability reporting.
        /// </summary>
        /// <value>An unordered collection of fundDimensionReportingTags. Optional tag for accountability reporting.</value>
        [JsonPropertyName("reportingTags")]
        public List<EdFiFundDimensionReportingTag>? ReportingTags { get { return this.ReportingTagsOption; } set { this.ReportingTagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the FundDimension entity.
        /// </summary>
        /// <value>Extensions to the FundDimension entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiFundDimension {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CodeName: ").Append(CodeName).Append("\n");
            sb.Append("  ReportingTags: ").Append(ReportingTags).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 16)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 16.", new [] { "Code" });
            }

            // FiscalYear (int) maximum
            if (this.FiscalYear > (int)2040)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value less than or equal to 2040.", new [] { "FiscalYear" });
            }

            // FiscalYear (int) minimum
            if (this.FiscalYear < (int)2020)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value greater than or equal to 2020.", new [] { "FiscalYear" });
            }

            // CodeName (string) maxLength
            if (this.CodeName != null && this.CodeName.Length > 100)
            {
                yield return new ValidationResult("Invalid value for CodeName, length must be less than 100.", new [] { "CodeName" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiFundDimension" />
    /// </summary>
    public class EdFiFundDimensionJsonConverter : JsonConverter<EdFiFundDimension>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiFundDimension" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiFundDimension Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<int?> fiscalYear = default;
            Option<string?> id = default;
            Option<string?> codeName = default;
            Option<List<EdFiFundDimensionReportingTag>?> reportingTags = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fiscalYear":
                            fiscalYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "codeName":
                            codeName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "reportingTags":
                            reportingTags = new Option<List<EdFiFundDimensionReportingTag>?>(JsonSerializer.Deserialize<List<EdFiFundDimensionReportingTag>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class EdFiFundDimension.", nameof(code));

            if (!fiscalYear.IsSet)
                throw new ArgumentException("Property is required for class EdFiFundDimension.", nameof(fiscalYear));

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class EdFiFundDimension.");

            if (fiscalYear.IsSet && fiscalYear.Value == null)
                throw new ArgumentNullException(nameof(fiscalYear), "Property is not nullable for class EdFiFundDimension.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiFundDimension.");

            if (reportingTags.IsSet && reportingTags.Value == null)
                throw new ArgumentNullException(nameof(reportingTags), "Property is not nullable for class EdFiFundDimension.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiFundDimension.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiFundDimension.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiFundDimension.");

            return new EdFiFundDimension(code.Value!, fiscalYear.Value!.Value!, id, codeName, reportingTags, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiFundDimension" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiFundDimension"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiFundDimension edFiFundDimension, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiFundDimension, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiFundDimension" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiFundDimension"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiFundDimension edFiFundDimension, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiFundDimension.Code == null)
                throw new ArgumentNullException(nameof(edFiFundDimension.Code), "Property is required for class EdFiFundDimension.");

            if (edFiFundDimension.IdOption.IsSet && edFiFundDimension.Id == null)
                throw new ArgumentNullException(nameof(edFiFundDimension.Id), "Property is required for class EdFiFundDimension.");

            if (edFiFundDimension.ReportingTagsOption.IsSet && edFiFundDimension.ReportingTags == null)
                throw new ArgumentNullException(nameof(edFiFundDimension.ReportingTags), "Property is required for class EdFiFundDimension.");

            if (edFiFundDimension.EtagOption.IsSet && edFiFundDimension.Etag == null)
                throw new ArgumentNullException(nameof(edFiFundDimension.Etag), "Property is required for class EdFiFundDimension.");

            if (edFiFundDimension.ExtOption.IsSet && edFiFundDimension.Ext == null)
                throw new ArgumentNullException(nameof(edFiFundDimension.Ext), "Property is required for class EdFiFundDimension.");

            writer.WriteString("code", edFiFundDimension.Code);

            writer.WriteNumber("fiscalYear", edFiFundDimension.FiscalYear);

            if (edFiFundDimension.IdOption.IsSet)
                writer.WriteString("id", edFiFundDimension.Id);

            if (edFiFundDimension.CodeNameOption.IsSet)
                if (edFiFundDimension.CodeNameOption.Value != null)
                    writer.WriteString("codeName", edFiFundDimension.CodeName);
                else
                    writer.WriteNull("codeName");

            if (edFiFundDimension.ReportingTagsOption.IsSet)
            {
                writer.WritePropertyName("reportingTags");
                JsonSerializer.Serialize(writer, edFiFundDimension.ReportingTags, jsonSerializerOptions);
            }
            if (edFiFundDimension.EtagOption.IsSet)
                writer.WriteString("_etag", edFiFundDimension.Etag);

            if (edFiFundDimension.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiFundDimension.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiFundDimension.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiFundDimension.Ext, jsonSerializerOptions);
            }
        }
    }
}
