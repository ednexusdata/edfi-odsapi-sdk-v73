// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiGrade
    /// </summary>
    public partial class EdFiGrade : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGrade" /> class.
        /// </summary>
        /// <param name="gradeTypeDescriptor">The type of grade reported (e.g., exam, final, grading period).</param>
        /// <param name="gradingPeriodReference">gradingPeriodReference</param>
        /// <param name="studentSectionAssociationReference">studentSectionAssociationReference</param>
        /// <param name="id">id</param>
        /// <param name="currentGradeAsOfDate">As-Of date for a grade posted as the current grade.</param>
        /// <param name="currentGradeIndicator">An indicator that the posted grade is an interim grade for the grading period and not the final grade.</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score.</param>
        /// <param name="gradeEarnedDescription">A description of the grade earned by the learner.</param>
        /// <param name="learningStandardGrades">An unordered collection of gradeLearningStandardGrades. A collection of learning standards associated with the grade.</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</param>
        /// <param name="performanceBaseConversionDescriptor">A conversion of the level to a standard set of performance levels.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Grade entity.</param>
        [JsonConstructor]
        public EdFiGrade(string gradeTypeDescriptor, EdFiGradingPeriodReference gradingPeriodReference, EdFiStudentSectionAssociationReference studentSectionAssociationReference, Option<string?> id = default, Option<DateOnly?> currentGradeAsOfDate = default, Option<bool?> currentGradeIndicator = default, Option<string?> diagnosticStatement = default, Option<string?> gradeEarnedDescription = default, Option<List<EdFiGradeLearningStandardGrade>?> learningStandardGrades = default, Option<string?> letterGradeEarned = default, Option<double?> numericGradeEarned = default, Option<string?> performanceBaseConversionDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            GradeTypeDescriptor = gradeTypeDescriptor;
            GradingPeriodReference = gradingPeriodReference;
            StudentSectionAssociationReference = studentSectionAssociationReference;
            IdOption = id;
            CurrentGradeAsOfDateOption = currentGradeAsOfDate;
            CurrentGradeIndicatorOption = currentGradeIndicator;
            DiagnosticStatementOption = diagnosticStatement;
            GradeEarnedDescriptionOption = gradeEarnedDescription;
            LearningStandardGradesOption = learningStandardGrades;
            LetterGradeEarnedOption = letterGradeEarned;
            NumericGradeEarnedOption = numericGradeEarned;
            PerformanceBaseConversionDescriptorOption = performanceBaseConversionDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of grade reported (e.g., exam, final, grading period).
        /// </summary>
        /// <value>The type of grade reported (e.g., exam, final, grading period).</value>
        [JsonPropertyName("gradeTypeDescriptor")]
        public string GradeTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets GradingPeriodReference
        /// </summary>
        [JsonPropertyName("gradingPeriodReference")]
        public EdFiGradingPeriodReference GradingPeriodReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentSectionAssociationReference
        /// </summary>
        [JsonPropertyName("studentSectionAssociationReference")]
        public EdFiStudentSectionAssociationReference StudentSectionAssociationReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentGradeAsOfDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> CurrentGradeAsOfDateOption { get; private set; }

        /// <summary>
        /// As-Of date for a grade posted as the current grade.
        /// </summary>
        /// <value>As-Of date for a grade posted as the current grade.</value>
        [JsonPropertyName("currentGradeAsOfDate")]
        public DateOnly? CurrentGradeAsOfDate { get { return this.CurrentGradeAsOfDateOption; } set { this.CurrentGradeAsOfDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentGradeIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CurrentGradeIndicatorOption { get; private set; }

        /// <summary>
        /// An indicator that the posted grade is an interim grade for the grading period and not the final grade.
        /// </summary>
        /// <value>An indicator that the posted grade is an interim grade for the grading period and not the final grade.</value>
        [JsonPropertyName("currentGradeIndicator")]
        public bool? CurrentGradeIndicator { get { return this.CurrentGradeIndicatorOption; } set { this.CurrentGradeIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DiagnosticStatement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DiagnosticStatementOption { get; private set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        /// <value>A statement provided by the teacher that provides information in addition to the grade or assessment score.</value>
        [JsonPropertyName("diagnosticStatement")]
        public string? DiagnosticStatement { get { return this.DiagnosticStatementOption; } set { this.DiagnosticStatementOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradeEarnedDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GradeEarnedDescriptionOption { get; private set; }

        /// <summary>
        /// A description of the grade earned by the learner.
        /// </summary>
        /// <value>A description of the grade earned by the learner.</value>
        [JsonPropertyName("gradeEarnedDescription")]
        public string? GradeEarnedDescription { get { return this.GradeEarnedDescriptionOption; } set { this.GradeEarnedDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandardGrades
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiGradeLearningStandardGrade>?> LearningStandardGradesOption { get; private set; }

        /// <summary>
        /// An unordered collection of gradeLearningStandardGrades. A collection of learning standards associated with the grade.
        /// </summary>
        /// <value>An unordered collection of gradeLearningStandardGrades. A collection of learning standards associated with the grade.</value>
        [JsonPropertyName("learningStandardGrades")]
        public List<EdFiGradeLearningStandardGrade>? LearningStandardGrades { get { return this.LearningStandardGradesOption; } set { this.LearningStandardGradesOption = new(value); } }

        /// <summary>
        /// Used to track the state of LetterGradeEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LetterGradeEarnedOption { get; private set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [JsonPropertyName("letterGradeEarned")]
        public string? LetterGradeEarned { get { return this.LetterGradeEarnedOption; } set { this.LetterGradeEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumericGradeEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NumericGradeEarnedOption { get; private set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [JsonPropertyName("numericGradeEarned")]
        public double? NumericGradeEarned { get { return this.NumericGradeEarnedOption; } set { this.NumericGradeEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of PerformanceBaseConversionDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PerformanceBaseConversionDescriptorOption { get; private set; }

        /// <summary>
        /// A conversion of the level to a standard set of performance levels.
        /// </summary>
        /// <value>A conversion of the level to a standard set of performance levels.</value>
        [JsonPropertyName("performanceBaseConversionDescriptor")]
        public string? PerformanceBaseConversionDescriptor { get { return this.PerformanceBaseConversionDescriptorOption; } set { this.PerformanceBaseConversionDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Grade entity.
        /// </summary>
        /// <value>Extensions to the Grade entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGrade {\n");
            sb.Append("  GradeTypeDescriptor: ").Append(GradeTypeDescriptor).Append("\n");
            sb.Append("  GradingPeriodReference: ").Append(GradingPeriodReference).Append("\n");
            sb.Append("  StudentSectionAssociationReference: ").Append(StudentSectionAssociationReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CurrentGradeAsOfDate: ").Append(CurrentGradeAsOfDate).Append("\n");
            sb.Append("  CurrentGradeIndicator: ").Append(CurrentGradeIndicator).Append("\n");
            sb.Append("  DiagnosticStatement: ").Append(DiagnosticStatement).Append("\n");
            sb.Append("  GradeEarnedDescription: ").Append(GradeEarnedDescription).Append("\n");
            sb.Append("  LearningStandardGrades: ").Append(LearningStandardGrades).Append("\n");
            sb.Append("  LetterGradeEarned: ").Append(LetterGradeEarned).Append("\n");
            sb.Append("  NumericGradeEarned: ").Append(NumericGradeEarned).Append("\n");
            sb.Append("  PerformanceBaseConversionDescriptor: ").Append(PerformanceBaseConversionDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradeTypeDescriptor (string) maxLength
            if (this.GradeTypeDescriptor != null && this.GradeTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradeTypeDescriptor, length must be less than 306.", new [] { "GradeTypeDescriptor" });
            }

            // DiagnosticStatement (string) maxLength
            if (this.DiagnosticStatement != null && this.DiagnosticStatement.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for DiagnosticStatement, length must be less than 1024.", new [] { "DiagnosticStatement" });
            }

            // GradeEarnedDescription (string) maxLength
            if (this.GradeEarnedDescription != null && this.GradeEarnedDescription.Length > 64)
            {
                yield return new ValidationResult("Invalid value for GradeEarnedDescription, length must be less than 64.", new [] { "GradeEarnedDescription" });
            }

            // LetterGradeEarned (string) maxLength
            if (this.LetterGradeEarned != null && this.LetterGradeEarned.Length > 20)
            {
                yield return new ValidationResult("Invalid value for LetterGradeEarned, length must be less than 20.", new [] { "LetterGradeEarned" });
            }

            // NumericGradeEarned (double) maximum
            if (this.NumericGradeEarnedOption.IsSet && this.NumericGradeEarnedOption.Value > (double)9999999.99)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, must be a value less than or equal to 9999999.99.", new [] { "NumericGradeEarned" });
            }

            // NumericGradeEarned (double) minimum
            if (this.NumericGradeEarnedOption.IsSet && this.NumericGradeEarnedOption.Value < (double)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, must be a value greater than or equal to -9999999.99.", new [] { "NumericGradeEarned" });
            }

            // PerformanceBaseConversionDescriptor (string) maxLength
            if (this.PerformanceBaseConversionDescriptor != null && this.PerformanceBaseConversionDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PerformanceBaseConversionDescriptor, length must be less than 306.", new [] { "PerformanceBaseConversionDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiGrade" />
    /// </summary>
    public class EdFiGradeJsonConverter : JsonConverter<EdFiGrade>
    {
        /// <summary>
        /// The format to use to serialize CurrentGradeAsOfDate
        /// </summary>
        public static string CurrentGradeAsOfDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiGrade" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiGrade Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> gradeTypeDescriptor = default;
            Option<EdFiGradingPeriodReference?> gradingPeriodReference = default;
            Option<EdFiStudentSectionAssociationReference?> studentSectionAssociationReference = default;
            Option<string?> id = default;
            Option<DateOnly?> currentGradeAsOfDate = default;
            Option<bool?> currentGradeIndicator = default;
            Option<string?> diagnosticStatement = default;
            Option<string?> gradeEarnedDescription = default;
            Option<List<EdFiGradeLearningStandardGrade>?> learningStandardGrades = default;
            Option<string?> letterGradeEarned = default;
            Option<double?> numericGradeEarned = default;
            Option<string?> performanceBaseConversionDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gradeTypeDescriptor":
                            gradeTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradingPeriodReference":
                            gradingPeriodReference = new Option<EdFiGradingPeriodReference?>(JsonSerializer.Deserialize<EdFiGradingPeriodReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentSectionAssociationReference":
                            studentSectionAssociationReference = new Option<EdFiStudentSectionAssociationReference?>(JsonSerializer.Deserialize<EdFiStudentSectionAssociationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currentGradeAsOfDate":
                            currentGradeAsOfDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "currentGradeIndicator":
                            currentGradeIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "diagnosticStatement":
                            diagnosticStatement = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "gradeEarnedDescription":
                            gradeEarnedDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "learningStandardGrades":
                            learningStandardGrades = new Option<List<EdFiGradeLearningStandardGrade>?>(JsonSerializer.Deserialize<List<EdFiGradeLearningStandardGrade>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "letterGradeEarned":
                            letterGradeEarned = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "numericGradeEarned":
                            numericGradeEarned = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "performanceBaseConversionDescriptor":
                            performanceBaseConversionDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!gradeTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiGrade.", nameof(gradeTypeDescriptor));

            if (!gradingPeriodReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiGrade.", nameof(gradingPeriodReference));

            if (!studentSectionAssociationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiGrade.", nameof(studentSectionAssociationReference));

            if (gradeTypeDescriptor.IsSet && gradeTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradeTypeDescriptor), "Property is not nullable for class EdFiGrade.");

            if (gradingPeriodReference.IsSet && gradingPeriodReference.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodReference), "Property is not nullable for class EdFiGrade.");

            if (studentSectionAssociationReference.IsSet && studentSectionAssociationReference.Value == null)
                throw new ArgumentNullException(nameof(studentSectionAssociationReference), "Property is not nullable for class EdFiGrade.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiGrade.");

            if (learningStandardGrades.IsSet && learningStandardGrades.Value == null)
                throw new ArgumentNullException(nameof(learningStandardGrades), "Property is not nullable for class EdFiGrade.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiGrade.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiGrade.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiGrade.");

            return new EdFiGrade(gradeTypeDescriptor.Value!, gradingPeriodReference.Value!, studentSectionAssociationReference.Value!, id, currentGradeAsOfDate, currentGradeIndicator, diagnosticStatement, gradeEarnedDescription, learningStandardGrades, letterGradeEarned, numericGradeEarned, performanceBaseConversionDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiGrade" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGrade"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiGrade edFiGrade, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiGrade, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiGrade" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGrade"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiGrade edFiGrade, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiGrade.GradeTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiGrade.GradeTypeDescriptor), "Property is required for class EdFiGrade.");

            if (edFiGrade.GradingPeriodReference == null)
                throw new ArgumentNullException(nameof(edFiGrade.GradingPeriodReference), "Property is required for class EdFiGrade.");

            if (edFiGrade.StudentSectionAssociationReference == null)
                throw new ArgumentNullException(nameof(edFiGrade.StudentSectionAssociationReference), "Property is required for class EdFiGrade.");

            if (edFiGrade.IdOption.IsSet && edFiGrade.Id == null)
                throw new ArgumentNullException(nameof(edFiGrade.Id), "Property is required for class EdFiGrade.");

            if (edFiGrade.LearningStandardGradesOption.IsSet && edFiGrade.LearningStandardGrades == null)
                throw new ArgumentNullException(nameof(edFiGrade.LearningStandardGrades), "Property is required for class EdFiGrade.");

            if (edFiGrade.EtagOption.IsSet && edFiGrade.Etag == null)
                throw new ArgumentNullException(nameof(edFiGrade.Etag), "Property is required for class EdFiGrade.");

            if (edFiGrade.ExtOption.IsSet && edFiGrade.Ext == null)
                throw new ArgumentNullException(nameof(edFiGrade.Ext), "Property is required for class EdFiGrade.");

            writer.WriteString("gradeTypeDescriptor", edFiGrade.GradeTypeDescriptor);

            writer.WritePropertyName("gradingPeriodReference");
            JsonSerializer.Serialize(writer, edFiGrade.GradingPeriodReference, jsonSerializerOptions);
            writer.WritePropertyName("studentSectionAssociationReference");
            JsonSerializer.Serialize(writer, edFiGrade.StudentSectionAssociationReference, jsonSerializerOptions);
            if (edFiGrade.IdOption.IsSet)
                writer.WriteString("id", edFiGrade.Id);

            if (edFiGrade.CurrentGradeAsOfDateOption.IsSet)
                if (edFiGrade.CurrentGradeAsOfDateOption.Value != null)
                    writer.WriteString("currentGradeAsOfDate", edFiGrade.CurrentGradeAsOfDateOption.Value!.Value.ToString(CurrentGradeAsOfDateFormat));
                else
                    writer.WriteNull("currentGradeAsOfDate");

            if (edFiGrade.CurrentGradeIndicatorOption.IsSet)
                if (edFiGrade.CurrentGradeIndicatorOption.Value != null)
                    writer.WriteBoolean("currentGradeIndicator", edFiGrade.CurrentGradeIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("currentGradeIndicator");

            if (edFiGrade.DiagnosticStatementOption.IsSet)
                if (edFiGrade.DiagnosticStatementOption.Value != null)
                    writer.WriteString("diagnosticStatement", edFiGrade.DiagnosticStatement);
                else
                    writer.WriteNull("diagnosticStatement");

            if (edFiGrade.GradeEarnedDescriptionOption.IsSet)
                if (edFiGrade.GradeEarnedDescriptionOption.Value != null)
                    writer.WriteString("gradeEarnedDescription", edFiGrade.GradeEarnedDescription);
                else
                    writer.WriteNull("gradeEarnedDescription");

            if (edFiGrade.LearningStandardGradesOption.IsSet)
            {
                writer.WritePropertyName("learningStandardGrades");
                JsonSerializer.Serialize(writer, edFiGrade.LearningStandardGrades, jsonSerializerOptions);
            }
            if (edFiGrade.LetterGradeEarnedOption.IsSet)
                if (edFiGrade.LetterGradeEarnedOption.Value != null)
                    writer.WriteString("letterGradeEarned", edFiGrade.LetterGradeEarned);
                else
                    writer.WriteNull("letterGradeEarned");

            if (edFiGrade.NumericGradeEarnedOption.IsSet)
                if (edFiGrade.NumericGradeEarnedOption.Value != null)
                    writer.WriteNumber("numericGradeEarned", edFiGrade.NumericGradeEarnedOption.Value!.Value);
                else
                    writer.WriteNull("numericGradeEarned");

            if (edFiGrade.PerformanceBaseConversionDescriptorOption.IsSet)
                if (edFiGrade.PerformanceBaseConversionDescriptorOption.Value != null)
                    writer.WriteString("performanceBaseConversionDescriptor", edFiGrade.PerformanceBaseConversionDescriptor);
                else
                    writer.WriteNull("performanceBaseConversionDescriptor");

            if (edFiGrade.EtagOption.IsSet)
                writer.WriteString("_etag", edFiGrade.Etag);

            if (edFiGrade.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiGrade.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiGrade.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiGrade.Ext, jsonSerializerOptions);
            }
        }
    }
}
