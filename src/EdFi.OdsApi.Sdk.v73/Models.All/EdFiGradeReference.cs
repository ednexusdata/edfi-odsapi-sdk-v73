// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiGradeReference
    /// </summary>
    public partial class EdFiGradeReference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradeReference" /> class.
        /// </summary>
        /// <param name="beginDate">Month, day, and year of the student&#39;s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="gradeTypeDescriptor">The type of grade reported (e.g., exam, final, grading period).</param>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported.</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period.</param>
        /// <param name="gradingPeriodSchoolYear">The identifier for the grading period school year.</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students.</param>
        /// <param name="schoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</param>
        /// <param name="schoolYear">The identifier for the school year.</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section.</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session.</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student.</param>
        /// <param name="link">link</param>
        [JsonConstructor]
        public EdFiGradeReference(DateOnly beginDate, string gradeTypeDescriptor, string gradingPeriodDescriptor, string gradingPeriodName, int gradingPeriodSchoolYear, string localCourseCode, long schoolId, int schoolYear, string sectionIdentifier, string sessionName, string studentUniqueId, Option<Link?> link = default)
        {
            BeginDate = beginDate;
            GradeTypeDescriptor = gradeTypeDescriptor;
            GradingPeriodDescriptor = gradingPeriodDescriptor;
            GradingPeriodName = gradingPeriodName;
            GradingPeriodSchoolYear = gradingPeriodSchoolYear;
            LocalCourseCode = localCourseCode;
            SchoolId = schoolId;
            SchoolYear = schoolYear;
            SectionIdentifier = sectionIdentifier;
            SessionName = sessionName;
            StudentUniqueId = studentUniqueId;
            LinkOption = link;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Month, day, and year of the student&#39;s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Month, day, and year of the student&#39;s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// The type of grade reported (e.g., exam, final, grading period).
        /// </summary>
        /// <value>The type of grade reported (e.g., exam, final, grading period).</value>
        [JsonPropertyName("gradeTypeDescriptor")]
        public string GradeTypeDescriptor { get; set; }

        /// <summary>
        /// The state&#39;s name of the period for which grades are reported.
        /// </summary>
        /// <value>The state&#39;s name of the period for which grades are reported.</value>
        [JsonPropertyName("gradingPeriodDescriptor")]
        public string GradingPeriodDescriptor { get; set; }

        /// <summary>
        /// The school&#39;s descriptive name of the grading period.
        /// </summary>
        /// <value>The school&#39;s descriptive name of the grading period.</value>
        [JsonPropertyName("gradingPeriodName")]
        public string GradingPeriodName { get; set; }

        /// <summary>
        /// The identifier for the grading period school year.
        /// </summary>
        /// <value>The identifier for the grading period school year.</value>
        [JsonPropertyName("gradingPeriodSchoolYear")]
        public int GradingPeriodSchoolYear { get; set; }

        /// <summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        /// </summary>
        /// <value>The local code assigned by the School that identifies the course offering provided for the instruction of students.</value>
        [JsonPropertyName("localCourseCode")]
        public string LocalCourseCode { get; set; }

        /// <summary>
        /// The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.
        /// </summary>
        /// <value>The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</value>
        [JsonPropertyName("schoolId")]
        public long SchoolId { get; set; }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        /// <value>The identifier for the school year.</value>
        [JsonPropertyName("schoolYear")]
        public int SchoolYear { get; set; }

        /// <summary>
        /// The local identifier assigned to a section.
        /// </summary>
        /// <value>The local identifier assigned to a section.</value>
        [JsonPropertyName("sectionIdentifier")]
        public string SectionIdentifier { get; set; }

        /// <summary>
        /// The identifier for the calendar for the academic session.
        /// </summary>
        /// <value>The identifier for the calendar for the academic session.</value>
        [JsonPropertyName("sessionName")]
        public string SessionName { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [JsonPropertyName("studentUniqueId")]
        public string StudentUniqueId { get; set; }

        /// <summary>
        /// Used to track the state of Link
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Link?> LinkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [JsonPropertyName("link")]
        public Link? Link { get { return this.LinkOption; } set { this.LinkOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGradeReference {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  GradeTypeDescriptor: ").Append(GradeTypeDescriptor).Append("\n");
            sb.Append("  GradingPeriodDescriptor: ").Append(GradingPeriodDescriptor).Append("\n");
            sb.Append("  GradingPeriodName: ").Append(GradingPeriodName).Append("\n");
            sb.Append("  GradingPeriodSchoolYear: ").Append(GradingPeriodSchoolYear).Append("\n");
            sb.Append("  LocalCourseCode: ").Append(LocalCourseCode).Append("\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  SchoolYear: ").Append(SchoolYear).Append("\n");
            sb.Append("  SectionIdentifier: ").Append(SectionIdentifier).Append("\n");
            sb.Append("  SessionName: ").Append(SessionName).Append("\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradeTypeDescriptor (string) maxLength
            if (this.GradeTypeDescriptor != null && this.GradeTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradeTypeDescriptor, length must be less than 306.", new [] { "GradeTypeDescriptor" });
            }

            // GradingPeriodDescriptor (string) maxLength
            if (this.GradingPeriodDescriptor != null && this.GradingPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodDescriptor, length must be less than 306.", new [] { "GradingPeriodDescriptor" });
            }

            // GradingPeriodName (string) maxLength
            if (this.GradingPeriodName != null && this.GradingPeriodName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodName, length must be less than 60.", new [] { "GradingPeriodName" });
            }

            // LocalCourseCode (string) maxLength
            if (this.LocalCourseCode != null && this.LocalCourseCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LocalCourseCode, length must be less than 60.", new [] { "LocalCourseCode" });
            }

            // SectionIdentifier (string) maxLength
            if (this.SectionIdentifier != null && this.SectionIdentifier.Length > 255)
            {
                yield return new ValidationResult("Invalid value for SectionIdentifier, length must be less than 255.", new [] { "SectionIdentifier" });
            }

            // SessionName (string) maxLength
            if (this.SessionName != null && this.SessionName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SessionName, length must be less than 60.", new [] { "SessionName" });
            }

            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiGradeReference" />
    /// </summary>
    public class EdFiGradeReferenceJsonConverter : JsonConverter<EdFiGradeReference>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EdFiGradeReference" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiGradeReference Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> beginDate = default;
            Option<string?> gradeTypeDescriptor = default;
            Option<string?> gradingPeriodDescriptor = default;
            Option<string?> gradingPeriodName = default;
            Option<int?> gradingPeriodSchoolYear = default;
            Option<string?> localCourseCode = default;
            Option<long?> schoolId = default;
            Option<int?> schoolYear = default;
            Option<string?> sectionIdentifier = default;
            Option<string?> sessionName = default;
            Option<string?> studentUniqueId = default;
            Option<Link?> link = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "gradeTypeDescriptor":
                            gradeTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradingPeriodDescriptor":
                            gradingPeriodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradingPeriodName":
                            gradingPeriodName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradingPeriodSchoolYear":
                            gradingPeriodSchoolYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "localCourseCode":
                            localCourseCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schoolId":
                            schoolId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "schoolYear":
                            schoolYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sectionIdentifier":
                            sectionIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sessionName":
                            sessionName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "studentUniqueId":
                            studentUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "link":
                            link = new Option<Link?>(JsonSerializer.Deserialize<Link>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradeReference.", nameof(beginDate));

            if (!gradeTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradeReference.", nameof(gradeTypeDescriptor));

            if (!gradingPeriodDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradeReference.", nameof(gradingPeriodDescriptor));

            if (!gradingPeriodName.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradeReference.", nameof(gradingPeriodName));

            if (!gradingPeriodSchoolYear.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradeReference.", nameof(gradingPeriodSchoolYear));

            if (!localCourseCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradeReference.", nameof(localCourseCode));

            if (!schoolId.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradeReference.", nameof(schoolId));

            if (!schoolYear.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradeReference.", nameof(schoolYear));

            if (!sectionIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradeReference.", nameof(sectionIdentifier));

            if (!sessionName.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradeReference.", nameof(sessionName));

            if (!studentUniqueId.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradeReference.", nameof(studentUniqueId));

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiGradeReference.");

            if (gradeTypeDescriptor.IsSet && gradeTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradeTypeDescriptor), "Property is not nullable for class EdFiGradeReference.");

            if (gradingPeriodDescriptor.IsSet && gradingPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodDescriptor), "Property is not nullable for class EdFiGradeReference.");

            if (gradingPeriodName.IsSet && gradingPeriodName.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodName), "Property is not nullable for class EdFiGradeReference.");

            if (gradingPeriodSchoolYear.IsSet && gradingPeriodSchoolYear.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodSchoolYear), "Property is not nullable for class EdFiGradeReference.");

            if (localCourseCode.IsSet && localCourseCode.Value == null)
                throw new ArgumentNullException(nameof(localCourseCode), "Property is not nullable for class EdFiGradeReference.");

            if (schoolId.IsSet && schoolId.Value == null)
                throw new ArgumentNullException(nameof(schoolId), "Property is not nullable for class EdFiGradeReference.");

            if (schoolYear.IsSet && schoolYear.Value == null)
                throw new ArgumentNullException(nameof(schoolYear), "Property is not nullable for class EdFiGradeReference.");

            if (sectionIdentifier.IsSet && sectionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(sectionIdentifier), "Property is not nullable for class EdFiGradeReference.");

            if (sessionName.IsSet && sessionName.Value == null)
                throw new ArgumentNullException(nameof(sessionName), "Property is not nullable for class EdFiGradeReference.");

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId), "Property is not nullable for class EdFiGradeReference.");

            if (link.IsSet && link.Value == null)
                throw new ArgumentNullException(nameof(link), "Property is not nullable for class EdFiGradeReference.");

            return new EdFiGradeReference(beginDate.Value!.Value!, gradeTypeDescriptor.Value!, gradingPeriodDescriptor.Value!, gradingPeriodName.Value!, gradingPeriodSchoolYear.Value!.Value!, localCourseCode.Value!, schoolId.Value!.Value!, schoolYear.Value!.Value!, sectionIdentifier.Value!, sessionName.Value!, studentUniqueId.Value!, link);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiGradeReference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGradeReference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiGradeReference edFiGradeReference, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiGradeReference, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiGradeReference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGradeReference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiGradeReference edFiGradeReference, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiGradeReference.GradeTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiGradeReference.GradeTypeDescriptor), "Property is required for class EdFiGradeReference.");

            if (edFiGradeReference.GradingPeriodDescriptor == null)
                throw new ArgumentNullException(nameof(edFiGradeReference.GradingPeriodDescriptor), "Property is required for class EdFiGradeReference.");

            if (edFiGradeReference.GradingPeriodName == null)
                throw new ArgumentNullException(nameof(edFiGradeReference.GradingPeriodName), "Property is required for class EdFiGradeReference.");

            if (edFiGradeReference.LocalCourseCode == null)
                throw new ArgumentNullException(nameof(edFiGradeReference.LocalCourseCode), "Property is required for class EdFiGradeReference.");

            if (edFiGradeReference.SectionIdentifier == null)
                throw new ArgumentNullException(nameof(edFiGradeReference.SectionIdentifier), "Property is required for class EdFiGradeReference.");

            if (edFiGradeReference.SessionName == null)
                throw new ArgumentNullException(nameof(edFiGradeReference.SessionName), "Property is required for class EdFiGradeReference.");

            if (edFiGradeReference.StudentUniqueId == null)
                throw new ArgumentNullException(nameof(edFiGradeReference.StudentUniqueId), "Property is required for class EdFiGradeReference.");

            if (edFiGradeReference.LinkOption.IsSet && edFiGradeReference.Link == null)
                throw new ArgumentNullException(nameof(edFiGradeReference.Link), "Property is required for class EdFiGradeReference.");

            writer.WriteString("beginDate", edFiGradeReference.BeginDate.ToString(BeginDateFormat));

            writer.WriteString("gradeTypeDescriptor", edFiGradeReference.GradeTypeDescriptor);

            writer.WriteString("gradingPeriodDescriptor", edFiGradeReference.GradingPeriodDescriptor);

            writer.WriteString("gradingPeriodName", edFiGradeReference.GradingPeriodName);

            writer.WriteNumber("gradingPeriodSchoolYear", edFiGradeReference.GradingPeriodSchoolYear);

            writer.WriteString("localCourseCode", edFiGradeReference.LocalCourseCode);

            writer.WriteNumber("schoolId", edFiGradeReference.SchoolId);

            writer.WriteNumber("schoolYear", edFiGradeReference.SchoolYear);

            writer.WriteString("sectionIdentifier", edFiGradeReference.SectionIdentifier);

            writer.WriteString("sessionName", edFiGradeReference.SessionName);

            writer.WriteString("studentUniqueId", edFiGradeReference.StudentUniqueId);

            if (edFiGradeReference.LinkOption.IsSet)
            {
                writer.WritePropertyName("link");
                JsonSerializer.Serialize(writer, edFiGradeReference.Link, jsonSerializerOptions);
            }
        }
    }
}
