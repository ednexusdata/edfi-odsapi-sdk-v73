// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiGradebookEntry
    /// </summary>
    public partial class EdFiGradebookEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradebookEntry" /> class.
        /// </summary>
        /// <param name="gradebookEntryIdentifier">A unique number or alphanumeric code assigned to a gradebook entry by the source system.</param>
        /// <param name="namespace">Namespace URI for the source of the gradebook entry.</param>
        /// <param name="dateAssigned">The date the assignment, homework, or assessment was assigned or executed.</param>
        /// <param name="sourceSectionIdentifier">The local identifier assigned to a section.</param>
        /// <param name="title">The name or title of the activity to be recorded in the gradebook entry.</param>
        /// <param name="id">id</param>
        /// <param name="gradingPeriodReference">gradingPeriodReference</param>
        /// <param name="sectionReference">sectionReference</param>
        /// <param name="description">A description of the assignment, homework, or classroom assessment.</param>
        /// <param name="dueDate">The date the assignment, homework, or assessment is due.</param>
        /// <param name="dueTime">The time the assignment, homework, or assessment is due.</param>
        /// <param name="gradebookEntryTypeDescriptor">The type of the gradebook entry.</param>
        /// <param name="learningStandards">An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the gradebook entry.</param>
        /// <param name="maxPoints">The maximum number of points  that can be earned for the submission.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the GradebookEntry entity.</param>
        [JsonConstructor]
        public EdFiGradebookEntry(string gradebookEntryIdentifier, string @namespace, DateOnly dateAssigned, string sourceSectionIdentifier, string title, Option<string?> id = default, Option<EdFiGradingPeriodReference?> gradingPeriodReference = default, Option<EdFiSectionReference?> sectionReference = default, Option<string?> description = default, Option<DateOnly?> dueDate = default, Option<string?> dueTime = default, Option<string?> gradebookEntryTypeDescriptor = default, Option<List<EdFiGradebookEntryLearningStandard>?> learningStandards = default, Option<double?> maxPoints = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            GradebookEntryIdentifier = gradebookEntryIdentifier;
            Namespace = @namespace;
            DateAssigned = dateAssigned;
            SourceSectionIdentifier = sourceSectionIdentifier;
            Title = title;
            IdOption = id;
            GradingPeriodReferenceOption = gradingPeriodReference;
            SectionReferenceOption = sectionReference;
            DescriptionOption = description;
            DueDateOption = dueDate;
            DueTimeOption = dueTime;
            GradebookEntryTypeDescriptorOption = gradebookEntryTypeDescriptor;
            LearningStandardsOption = learningStandards;
            MaxPointsOption = maxPoints;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique number or alphanumeric code assigned to a gradebook entry by the source system.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to a gradebook entry by the source system.</value>
        [JsonPropertyName("gradebookEntryIdentifier")]
        public string GradebookEntryIdentifier { get; set; }

        /// <summary>
        /// Namespace URI for the source of the gradebook entry.
        /// </summary>
        /// <value>Namespace URI for the source of the gradebook entry.</value>
        [JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        /// </summary>
        /// <value>The date the assignment, homework, or assessment was assigned or executed.</value>
        [JsonPropertyName("dateAssigned")]
        public DateOnly DateAssigned { get; set; }

        /// <summary>
        /// The local identifier assigned to a section.
        /// </summary>
        /// <value>The local identifier assigned to a section.</value>
        [JsonPropertyName("sourceSectionIdentifier")]
        public string SourceSectionIdentifier { get; set; }

        /// <summary>
        /// The name or title of the activity to be recorded in the gradebook entry.
        /// </summary>
        /// <value>The name or title of the activity to be recorded in the gradebook entry.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradingPeriodReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiGradingPeriodReference?> GradingPeriodReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets GradingPeriodReference
        /// </summary>
        [JsonPropertyName("gradingPeriodReference")]
        public EdFiGradingPeriodReference? GradingPeriodReference { get { return this.GradingPeriodReferenceOption; } set { this.GradingPeriodReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of SectionReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiSectionReference?> SectionReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets SectionReference
        /// </summary>
        [JsonPropertyName("sectionReference")]
        public EdFiSectionReference? SectionReference { get { return this.SectionReferenceOption; } set { this.SectionReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// A description of the assignment, homework, or classroom assessment.
        /// </summary>
        /// <value>A description of the assignment, homework, or classroom assessment.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DueDateOption { get; private set; }

        /// <summary>
        /// The date the assignment, homework, or assessment is due.
        /// </summary>
        /// <value>The date the assignment, homework, or assessment is due.</value>
        [JsonPropertyName("dueDate")]
        public DateOnly? DueDate { get { return this.DueDateOption; } set { this.DueDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DueTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DueTimeOption { get; private set; }

        /// <summary>
        /// The time the assignment, homework, or assessment is due.
        /// </summary>
        /// <value>The time the assignment, homework, or assessment is due.</value>
        [JsonPropertyName("dueTime")]
        public string? DueTime { get { return this.DueTimeOption; } set { this.DueTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradebookEntryTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GradebookEntryTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of the gradebook entry.
        /// </summary>
        /// <value>The type of the gradebook entry.</value>
        [JsonPropertyName("gradebookEntryTypeDescriptor")]
        public string? GradebookEntryTypeDescriptor { get { return this.GradebookEntryTypeDescriptorOption; } set { this.GradebookEntryTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandards
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiGradebookEntryLearningStandard>?> LearningStandardsOption { get; private set; }

        /// <summary>
        /// An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the gradebook entry.
        /// </summary>
        /// <value>An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the gradebook entry.</value>
        [JsonPropertyName("learningStandards")]
        public List<EdFiGradebookEntryLearningStandard>? LearningStandards { get { return this.LearningStandardsOption; } set { this.LearningStandardsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxPoints
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MaxPointsOption { get; private set; }

        /// <summary>
        /// The maximum number of points  that can be earned for the submission.
        /// </summary>
        /// <value>The maximum number of points  that can be earned for the submission.</value>
        [JsonPropertyName("maxPoints")]
        public double? MaxPoints { get { return this.MaxPointsOption; } set { this.MaxPointsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the GradebookEntry entity.
        /// </summary>
        /// <value>Extensions to the GradebookEntry entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGradebookEntry {\n");
            sb.Append("  GradebookEntryIdentifier: ").Append(GradebookEntryIdentifier).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  DateAssigned: ").Append(DateAssigned).Append("\n");
            sb.Append("  SourceSectionIdentifier: ").Append(SourceSectionIdentifier).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GradingPeriodReference: ").Append(GradingPeriodReference).Append("\n");
            sb.Append("  SectionReference: ").Append(SectionReference).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DueTime: ").Append(DueTime).Append("\n");
            sb.Append("  GradebookEntryTypeDescriptor: ").Append(GradebookEntryTypeDescriptor).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  MaxPoints: ").Append(MaxPoints).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradebookEntryIdentifier (string) maxLength
            if (this.GradebookEntryIdentifier != null && this.GradebookEntryIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for GradebookEntryIdentifier, length must be less than 60.", new [] { "GradebookEntryIdentifier" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // SourceSectionIdentifier (string) maxLength
            if (this.SourceSectionIdentifier != null && this.SourceSectionIdentifier.Length > 255)
            {
                yield return new ValidationResult("Invalid value for SourceSectionIdentifier, length must be less than 255.", new [] { "SourceSectionIdentifier" });
            }

            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 100.", new [] { "Title" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // GradebookEntryTypeDescriptor (string) maxLength
            if (this.GradebookEntryTypeDescriptor != null && this.GradebookEntryTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradebookEntryTypeDescriptor, length must be less than 306.", new [] { "GradebookEntryTypeDescriptor" });
            }

            // MaxPoints (double) maximum
            if (this.MaxPointsOption.IsSet && this.MaxPointsOption.Value > (double)9999999.99)
            {
                yield return new ValidationResult("Invalid value for MaxPoints, must be a value less than or equal to 9999999.99.", new [] { "MaxPoints" });
            }

            // MaxPoints (double) minimum
            if (this.MaxPointsOption.IsSet && this.MaxPointsOption.Value < (double)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for MaxPoints, must be a value greater than or equal to -9999999.99.", new [] { "MaxPoints" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiGradebookEntry" />
    /// </summary>
    public class EdFiGradebookEntryJsonConverter : JsonConverter<EdFiGradebookEntry>
    {
        /// <summary>
        /// The format to use to serialize DateAssigned
        /// </summary>
        public static string DateAssignedFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiGradebookEntry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiGradebookEntry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> gradebookEntryIdentifier = default;
            Option<string?> varNamespace = default;
            Option<DateOnly?> dateAssigned = default;
            Option<string?> sourceSectionIdentifier = default;
            Option<string?> title = default;
            Option<string?> id = default;
            Option<EdFiGradingPeriodReference?> gradingPeriodReference = default;
            Option<EdFiSectionReference?> sectionReference = default;
            Option<string?> description = default;
            Option<DateOnly?> dueDate = default;
            Option<string?> dueTime = default;
            Option<string?> gradebookEntryTypeDescriptor = default;
            Option<List<EdFiGradebookEntryLearningStandard>?> learningStandards = default;
            Option<double?> maxPoints = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gradebookEntryIdentifier":
                            gradebookEntryIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateAssigned":
                            dateAssigned = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sourceSectionIdentifier":
                            sourceSectionIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradingPeriodReference":
                            gradingPeriodReference = new Option<EdFiGradingPeriodReference?>(JsonSerializer.Deserialize<EdFiGradingPeriodReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sectionReference":
                            sectionReference = new Option<EdFiSectionReference?>(JsonSerializer.Deserialize<EdFiSectionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dueDate":
                            dueDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dueTime":
                            dueTime = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "gradebookEntryTypeDescriptor":
                            gradebookEntryTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "learningStandards":
                            learningStandards = new Option<List<EdFiGradebookEntryLearningStandard>?>(JsonSerializer.Deserialize<List<EdFiGradebookEntryLearningStandard>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "maxPoints":
                            maxPoints = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!gradebookEntryIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradebookEntry.", nameof(gradebookEntryIdentifier));

            if (!varNamespace.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradebookEntry.", nameof(varNamespace));

            if (!dateAssigned.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradebookEntry.", nameof(dateAssigned));

            if (!sourceSectionIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradebookEntry.", nameof(sourceSectionIdentifier));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradebookEntry.", nameof(title));

            if (gradebookEntryIdentifier.IsSet && gradebookEntryIdentifier.Value == null)
                throw new ArgumentNullException(nameof(gradebookEntryIdentifier), "Property is not nullable for class EdFiGradebookEntry.");

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class EdFiGradebookEntry.");

            if (dateAssigned.IsSet && dateAssigned.Value == null)
                throw new ArgumentNullException(nameof(dateAssigned), "Property is not nullable for class EdFiGradebookEntry.");

            if (sourceSectionIdentifier.IsSet && sourceSectionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(sourceSectionIdentifier), "Property is not nullable for class EdFiGradebookEntry.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class EdFiGradebookEntry.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiGradebookEntry.");

            if (gradingPeriodReference.IsSet && gradingPeriodReference.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodReference), "Property is not nullable for class EdFiGradebookEntry.");

            if (sectionReference.IsSet && sectionReference.Value == null)
                throw new ArgumentNullException(nameof(sectionReference), "Property is not nullable for class EdFiGradebookEntry.");

            if (learningStandards.IsSet && learningStandards.Value == null)
                throw new ArgumentNullException(nameof(learningStandards), "Property is not nullable for class EdFiGradebookEntry.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiGradebookEntry.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiGradebookEntry.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiGradebookEntry.");

            return new EdFiGradebookEntry(gradebookEntryIdentifier.Value!, varNamespace.Value!, dateAssigned.Value!.Value!, sourceSectionIdentifier.Value!, title.Value!, id, gradingPeriodReference, sectionReference, description, dueDate, dueTime, gradebookEntryTypeDescriptor, learningStandards, maxPoints, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiGradebookEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGradebookEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiGradebookEntry edFiGradebookEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiGradebookEntry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiGradebookEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGradebookEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiGradebookEntry edFiGradebookEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiGradebookEntry.GradebookEntryIdentifier == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry.GradebookEntryIdentifier), "Property is required for class EdFiGradebookEntry.");

            if (edFiGradebookEntry.Namespace == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry.Namespace), "Property is required for class EdFiGradebookEntry.");

            if (edFiGradebookEntry.SourceSectionIdentifier == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry.SourceSectionIdentifier), "Property is required for class EdFiGradebookEntry.");

            if (edFiGradebookEntry.Title == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry.Title), "Property is required for class EdFiGradebookEntry.");

            if (edFiGradebookEntry.IdOption.IsSet && edFiGradebookEntry.Id == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry.Id), "Property is required for class EdFiGradebookEntry.");

            if (edFiGradebookEntry.GradingPeriodReferenceOption.IsSet && edFiGradebookEntry.GradingPeriodReference == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry.GradingPeriodReference), "Property is required for class EdFiGradebookEntry.");

            if (edFiGradebookEntry.SectionReferenceOption.IsSet && edFiGradebookEntry.SectionReference == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry.SectionReference), "Property is required for class EdFiGradebookEntry.");

            if (edFiGradebookEntry.LearningStandardsOption.IsSet && edFiGradebookEntry.LearningStandards == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry.LearningStandards), "Property is required for class EdFiGradebookEntry.");

            if (edFiGradebookEntry.EtagOption.IsSet && edFiGradebookEntry.Etag == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry.Etag), "Property is required for class EdFiGradebookEntry.");

            if (edFiGradebookEntry.ExtOption.IsSet && edFiGradebookEntry.Ext == null)
                throw new ArgumentNullException(nameof(edFiGradebookEntry.Ext), "Property is required for class EdFiGradebookEntry.");

            writer.WriteString("gradebookEntryIdentifier", edFiGradebookEntry.GradebookEntryIdentifier);

            writer.WriteString("namespace", edFiGradebookEntry.Namespace);

            writer.WriteString("dateAssigned", edFiGradebookEntry.DateAssigned.ToString(DateAssignedFormat));

            writer.WriteString("sourceSectionIdentifier", edFiGradebookEntry.SourceSectionIdentifier);

            writer.WriteString("title", edFiGradebookEntry.Title);

            if (edFiGradebookEntry.IdOption.IsSet)
                writer.WriteString("id", edFiGradebookEntry.Id);

            if (edFiGradebookEntry.GradingPeriodReferenceOption.IsSet)
            {
                writer.WritePropertyName("gradingPeriodReference");
                JsonSerializer.Serialize(writer, edFiGradebookEntry.GradingPeriodReference, jsonSerializerOptions);
            }
            if (edFiGradebookEntry.SectionReferenceOption.IsSet)
            {
                writer.WritePropertyName("sectionReference");
                JsonSerializer.Serialize(writer, edFiGradebookEntry.SectionReference, jsonSerializerOptions);
            }
            if (edFiGradebookEntry.DescriptionOption.IsSet)
                if (edFiGradebookEntry.DescriptionOption.Value != null)
                    writer.WriteString("description", edFiGradebookEntry.Description);
                else
                    writer.WriteNull("description");

            if (edFiGradebookEntry.DueDateOption.IsSet)
                if (edFiGradebookEntry.DueDateOption.Value != null)
                    writer.WriteString("dueDate", edFiGradebookEntry.DueDateOption.Value!.Value.ToString(DueDateFormat));
                else
                    writer.WriteNull("dueDate");

            if (edFiGradebookEntry.DueTimeOption.IsSet)
                if (edFiGradebookEntry.DueTimeOption.Value != null)
                    writer.WriteString("dueTime", edFiGradebookEntry.DueTime);
                else
                    writer.WriteNull("dueTime");

            if (edFiGradebookEntry.GradebookEntryTypeDescriptorOption.IsSet)
                if (edFiGradebookEntry.GradebookEntryTypeDescriptorOption.Value != null)
                    writer.WriteString("gradebookEntryTypeDescriptor", edFiGradebookEntry.GradebookEntryTypeDescriptor);
                else
                    writer.WriteNull("gradebookEntryTypeDescriptor");

            if (edFiGradebookEntry.LearningStandardsOption.IsSet)
            {
                writer.WritePropertyName("learningStandards");
                JsonSerializer.Serialize(writer, edFiGradebookEntry.LearningStandards, jsonSerializerOptions);
            }
            if (edFiGradebookEntry.MaxPointsOption.IsSet)
                if (edFiGradebookEntry.MaxPointsOption.Value != null)
                    writer.WriteNumber("maxPoints", edFiGradebookEntry.MaxPointsOption.Value!.Value);
                else
                    writer.WriteNull("maxPoints");

            if (edFiGradebookEntry.EtagOption.IsSet)
                writer.WriteString("_etag", edFiGradebookEntry.Etag);

            if (edFiGradebookEntry.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiGradebookEntry.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiGradebookEntry.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiGradebookEntry.Ext, jsonSerializerOptions);
            }
        }
    }
}
