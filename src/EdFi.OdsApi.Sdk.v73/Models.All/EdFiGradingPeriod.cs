// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiGradingPeriod
    /// </summary>
    public partial class EdFiGradingPeriod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradingPeriod" /> class.
        /// </summary>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported.</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period.</param>
        /// <param name="schoolReference">schoolReference</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference</param>
        /// <param name="beginDate">Month, day, and year of the first day of the grading period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="endDate">Month, day, and year of the last day of the grading period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="totalInstructionalDays">Total days available for educational instruction during the grading period.</param>
        /// <param name="id">id</param>
        /// <param name="periodSequence">The sequential order of this period relative to other periods.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the GradingPeriod entity.</param>
        [JsonConstructor]
        public EdFiGradingPeriod(string gradingPeriodDescriptor, string gradingPeriodName, EdFiSchoolReference schoolReference, EdFiSchoolYearTypeReference schoolYearTypeReference, DateOnly beginDate, DateOnly endDate, int totalInstructionalDays, Option<string?> id = default, Option<int?> periodSequence = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            GradingPeriodDescriptor = gradingPeriodDescriptor;
            GradingPeriodName = gradingPeriodName;
            SchoolReference = schoolReference;
            SchoolYearTypeReference = schoolYearTypeReference;
            BeginDate = beginDate;
            EndDate = endDate;
            TotalInstructionalDays = totalInstructionalDays;
            IdOption = id;
            PeriodSequenceOption = periodSequence;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The state&#39;s name of the period for which grades are reported.
        /// </summary>
        /// <value>The state&#39;s name of the period for which grades are reported.</value>
        [JsonPropertyName("gradingPeriodDescriptor")]
        public string GradingPeriodDescriptor { get; set; }

        /// <summary>
        /// The school&#39;s descriptive name of the grading period.
        /// </summary>
        /// <value>The school&#39;s descriptive name of the grading period.</value>
        [JsonPropertyName("gradingPeriodName")]
        public string GradingPeriodName { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [JsonPropertyName("schoolReference")]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [JsonPropertyName("schoolYearTypeReference")]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Month, day, and year of the first day of the grading period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Month, day, and year of the first day of the grading period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// Month, day, and year of the last day of the grading period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Month, day, and year of the last day of the grading period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly EndDate { get; set; }

        /// <summary>
        /// Total days available for educational instruction during the grading period.
        /// </summary>
        /// <value>Total days available for educational instruction during the grading period.</value>
        [JsonPropertyName("totalInstructionalDays")]
        public int TotalInstructionalDays { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PeriodSequence
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PeriodSequenceOption { get; private set; }

        /// <summary>
        /// The sequential order of this period relative to other periods.
        /// </summary>
        /// <value>The sequential order of this period relative to other periods.</value>
        [JsonPropertyName("periodSequence")]
        public int? PeriodSequence { get { return this.PeriodSequenceOption; } set { this.PeriodSequenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the GradingPeriod entity.
        /// </summary>
        /// <value>Extensions to the GradingPeriod entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGradingPeriod {\n");
            sb.Append("  GradingPeriodDescriptor: ").Append(GradingPeriodDescriptor).Append("\n");
            sb.Append("  GradingPeriodName: ").Append(GradingPeriodName).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  TotalInstructionalDays: ").Append(TotalInstructionalDays).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PeriodSequence: ").Append(PeriodSequence).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradingPeriodDescriptor (string) maxLength
            if (this.GradingPeriodDescriptor != null && this.GradingPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodDescriptor, length must be less than 306.", new [] { "GradingPeriodDescriptor" });
            }

            // GradingPeriodName (string) maxLength
            if (this.GradingPeriodName != null && this.GradingPeriodName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodName, length must be less than 60.", new [] { "GradingPeriodName" });
            }

            // TotalInstructionalDays (int) minimum
            if (this.TotalInstructionalDays < (int)0)
            {
                yield return new ValidationResult("Invalid value for TotalInstructionalDays, must be a value greater than or equal to 0.", new [] { "TotalInstructionalDays" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiGradingPeriod" />
    /// </summary>
    public class EdFiGradingPeriodJsonConverter : JsonConverter<EdFiGradingPeriod>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiGradingPeriod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiGradingPeriod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> gradingPeriodDescriptor = default;
            Option<string?> gradingPeriodName = default;
            Option<EdFiSchoolReference?> schoolReference = default;
            Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default;
            Option<DateOnly?> beginDate = default;
            Option<DateOnly?> endDate = default;
            Option<int?> totalInstructionalDays = default;
            Option<string?> id = default;
            Option<int?> periodSequence = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gradingPeriodDescriptor":
                            gradingPeriodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradingPeriodName":
                            gradingPeriodName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schoolReference":
                            schoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "schoolYearTypeReference":
                            schoolYearTypeReference = new Option<EdFiSchoolYearTypeReference?>(JsonSerializer.Deserialize<EdFiSchoolYearTypeReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "totalInstructionalDays":
                            totalInstructionalDays = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "periodSequence":
                            periodSequence = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!gradingPeriodDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradingPeriod.", nameof(gradingPeriodDescriptor));

            if (!gradingPeriodName.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradingPeriod.", nameof(gradingPeriodName));

            if (!schoolReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradingPeriod.", nameof(schoolReference));

            if (!schoolYearTypeReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradingPeriod.", nameof(schoolYearTypeReference));

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradingPeriod.", nameof(beginDate));

            if (!endDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradingPeriod.", nameof(endDate));

            if (!totalInstructionalDays.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradingPeriod.", nameof(totalInstructionalDays));

            if (gradingPeriodDescriptor.IsSet && gradingPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodDescriptor), "Property is not nullable for class EdFiGradingPeriod.");

            if (gradingPeriodName.IsSet && gradingPeriodName.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodName), "Property is not nullable for class EdFiGradingPeriod.");

            if (schoolReference.IsSet && schoolReference.Value == null)
                throw new ArgumentNullException(nameof(schoolReference), "Property is not nullable for class EdFiGradingPeriod.");

            if (schoolYearTypeReference.IsSet && schoolYearTypeReference.Value == null)
                throw new ArgumentNullException(nameof(schoolYearTypeReference), "Property is not nullable for class EdFiGradingPeriod.");

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiGradingPeriod.");

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate), "Property is not nullable for class EdFiGradingPeriod.");

            if (totalInstructionalDays.IsSet && totalInstructionalDays.Value == null)
                throw new ArgumentNullException(nameof(totalInstructionalDays), "Property is not nullable for class EdFiGradingPeriod.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiGradingPeriod.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiGradingPeriod.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiGradingPeriod.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiGradingPeriod.");

            return new EdFiGradingPeriod(gradingPeriodDescriptor.Value!, gradingPeriodName.Value!, schoolReference.Value!, schoolYearTypeReference.Value!, beginDate.Value!.Value!, endDate.Value!.Value!, totalInstructionalDays.Value!.Value!, id, periodSequence, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiGradingPeriod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGradingPeriod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiGradingPeriod edFiGradingPeriod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiGradingPeriod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiGradingPeriod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGradingPeriod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiGradingPeriod edFiGradingPeriod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiGradingPeriod.GradingPeriodDescriptor == null)
                throw new ArgumentNullException(nameof(edFiGradingPeriod.GradingPeriodDescriptor), "Property is required for class EdFiGradingPeriod.");

            if (edFiGradingPeriod.GradingPeriodName == null)
                throw new ArgumentNullException(nameof(edFiGradingPeriod.GradingPeriodName), "Property is required for class EdFiGradingPeriod.");

            if (edFiGradingPeriod.SchoolReference == null)
                throw new ArgumentNullException(nameof(edFiGradingPeriod.SchoolReference), "Property is required for class EdFiGradingPeriod.");

            if (edFiGradingPeriod.SchoolYearTypeReference == null)
                throw new ArgumentNullException(nameof(edFiGradingPeriod.SchoolYearTypeReference), "Property is required for class EdFiGradingPeriod.");

            if (edFiGradingPeriod.IdOption.IsSet && edFiGradingPeriod.Id == null)
                throw new ArgumentNullException(nameof(edFiGradingPeriod.Id), "Property is required for class EdFiGradingPeriod.");

            if (edFiGradingPeriod.EtagOption.IsSet && edFiGradingPeriod.Etag == null)
                throw new ArgumentNullException(nameof(edFiGradingPeriod.Etag), "Property is required for class EdFiGradingPeriod.");

            if (edFiGradingPeriod.ExtOption.IsSet && edFiGradingPeriod.Ext == null)
                throw new ArgumentNullException(nameof(edFiGradingPeriod.Ext), "Property is required for class EdFiGradingPeriod.");

            writer.WriteString("gradingPeriodDescriptor", edFiGradingPeriod.GradingPeriodDescriptor);

            writer.WriteString("gradingPeriodName", edFiGradingPeriod.GradingPeriodName);

            writer.WritePropertyName("schoolReference");
            JsonSerializer.Serialize(writer, edFiGradingPeriod.SchoolReference, jsonSerializerOptions);
            writer.WritePropertyName("schoolYearTypeReference");
            JsonSerializer.Serialize(writer, edFiGradingPeriod.SchoolYearTypeReference, jsonSerializerOptions);
            writer.WriteString("beginDate", edFiGradingPeriod.BeginDate.ToString(BeginDateFormat));

            writer.WriteString("endDate", edFiGradingPeriod.EndDate.ToString(EndDateFormat));

            writer.WriteNumber("totalInstructionalDays", edFiGradingPeriod.TotalInstructionalDays);

            if (edFiGradingPeriod.IdOption.IsSet)
                writer.WriteString("id", edFiGradingPeriod.Id);

            if (edFiGradingPeriod.PeriodSequenceOption.IsSet)
                if (edFiGradingPeriod.PeriodSequenceOption.Value != null)
                    writer.WriteNumber("periodSequence", edFiGradingPeriod.PeriodSequenceOption.Value!.Value);
                else
                    writer.WriteNull("periodSequence");

            if (edFiGradingPeriod.EtagOption.IsSet)
                writer.WriteString("_etag", edFiGradingPeriod.Etag);

            if (edFiGradingPeriod.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiGradingPeriod.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiGradingPeriod.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiGradingPeriod.Ext, jsonSerializerOptions);
            }
        }
    }
}
