// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiGraduationPlan
    /// </summary>
    public partial class EdFiGraduationPlan : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGraduationPlan" /> class.
        /// </summary>
        /// <param name="graduationPlanTypeDescriptor">The type of academic plan the student is following for graduation.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="graduationSchoolYearTypeReference">graduationSchoolYearTypeReference</param>
        /// <param name="totalRequiredCredits">The value of credits or units of value awarded for the completion of a course.</param>
        /// <param name="id">id</param>
        /// <param name="creditsByCourses">An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.</param>
        /// <param name="creditsByCreditCategories">An unordered collection of graduationPlanCreditsByCreditCategories. The total credits required for graduation based on the credit category.</param>
        /// <param name="creditsBySubjects">An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.</param>
        /// <param name="individualPlan">An indicator of whether the graduation plan is tailored for an individual.</param>
        /// <param name="requiredAssessments">An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements.</param>
        /// <param name="totalRequiredCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</param>
        /// <param name="totalRequiredCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the GraduationPlan entity.</param>
        [JsonConstructor]
        public EdFiGraduationPlan(string graduationPlanTypeDescriptor, EdFiEducationOrganizationReference educationOrganizationReference, EdFiSchoolYearTypeReference graduationSchoolYearTypeReference, double totalRequiredCredits, Option<string?> id = default, Option<List<EdFiGraduationPlanCreditsByCourse>?> creditsByCourses = default, Option<List<EdFiGraduationPlanCreditsByCreditCategory>?> creditsByCreditCategories = default, Option<List<EdFiGraduationPlanCreditsBySubject>?> creditsBySubjects = default, Option<bool?> individualPlan = default, Option<List<EdFiGraduationPlanRequiredAssessment>?> requiredAssessments = default, Option<double?> totalRequiredCreditConversion = default, Option<string?> totalRequiredCreditTypeDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            GraduationPlanTypeDescriptor = graduationPlanTypeDescriptor;
            EducationOrganizationReference = educationOrganizationReference;
            GraduationSchoolYearTypeReference = graduationSchoolYearTypeReference;
            TotalRequiredCredits = totalRequiredCredits;
            IdOption = id;
            CreditsByCoursesOption = creditsByCourses;
            CreditsByCreditCategoriesOption = creditsByCreditCategories;
            CreditsBySubjectsOption = creditsBySubjects;
            IndividualPlanOption = individualPlan;
            RequiredAssessmentsOption = requiredAssessments;
            TotalRequiredCreditConversionOption = totalRequiredCreditConversion;
            TotalRequiredCreditTypeDescriptorOption = totalRequiredCreditTypeDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of academic plan the student is following for graduation.
        /// </summary>
        /// <value>The type of academic plan the student is following for graduation.</value>
        [JsonPropertyName("graduationPlanTypeDescriptor")]
        public string GraduationPlanTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets GraduationSchoolYearTypeReference
        /// </summary>
        [JsonPropertyName("graduationSchoolYearTypeReference")]
        public EdFiSchoolYearTypeReference GraduationSchoolYearTypeReference { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("totalRequiredCredits")]
        public double TotalRequiredCredits { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditsByCourses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiGraduationPlanCreditsByCourse>?> CreditsByCoursesOption { get; private set; }

        /// <summary>
        /// An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.
        /// </summary>
        /// <value>An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.</value>
        [JsonPropertyName("creditsByCourses")]
        public List<EdFiGraduationPlanCreditsByCourse>? CreditsByCourses { get { return this.CreditsByCoursesOption; } set { this.CreditsByCoursesOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditsByCreditCategories
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiGraduationPlanCreditsByCreditCategory>?> CreditsByCreditCategoriesOption { get; private set; }

        /// <summary>
        /// An unordered collection of graduationPlanCreditsByCreditCategories. The total credits required for graduation based on the credit category.
        /// </summary>
        /// <value>An unordered collection of graduationPlanCreditsByCreditCategories. The total credits required for graduation based on the credit category.</value>
        [JsonPropertyName("creditsByCreditCategories")]
        public List<EdFiGraduationPlanCreditsByCreditCategory>? CreditsByCreditCategories { get { return this.CreditsByCreditCategoriesOption; } set { this.CreditsByCreditCategoriesOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditsBySubjects
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiGraduationPlanCreditsBySubject>?> CreditsBySubjectsOption { get; private set; }

        /// <summary>
        /// An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.
        /// </summary>
        /// <value>An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.</value>
        [JsonPropertyName("creditsBySubjects")]
        public List<EdFiGraduationPlanCreditsBySubject>? CreditsBySubjects { get { return this.CreditsBySubjectsOption; } set { this.CreditsBySubjectsOption = new(value); } }

        /// <summary>
        /// Used to track the state of IndividualPlan
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IndividualPlanOption { get; private set; }

        /// <summary>
        /// An indicator of whether the graduation plan is tailored for an individual.
        /// </summary>
        /// <value>An indicator of whether the graduation plan is tailored for an individual.</value>
        [JsonPropertyName("individualPlan")]
        public bool? IndividualPlan { get { return this.IndividualPlanOption; } set { this.IndividualPlanOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequiredAssessments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiGraduationPlanRequiredAssessment>?> RequiredAssessmentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements.
        /// </summary>
        /// <value>An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements.</value>
        [JsonPropertyName("requiredAssessments")]
        public List<EdFiGraduationPlanRequiredAssessment>? RequiredAssessments { get { return this.RequiredAssessmentsOption; } set { this.RequiredAssessmentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalRequiredCreditConversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TotalRequiredCreditConversionOption { get; private set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [JsonPropertyName("totalRequiredCreditConversion")]
        public double? TotalRequiredCreditConversion { get { return this.TotalRequiredCreditConversionOption; } set { this.TotalRequiredCreditConversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalRequiredCreditTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TotalRequiredCreditTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("totalRequiredCreditTypeDescriptor")]
        public string? TotalRequiredCreditTypeDescriptor { get { return this.TotalRequiredCreditTypeDescriptorOption; } set { this.TotalRequiredCreditTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the GraduationPlan entity.
        /// </summary>
        /// <value>Extensions to the GraduationPlan entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGraduationPlan {\n");
            sb.Append("  GraduationPlanTypeDescriptor: ").Append(GraduationPlanTypeDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  GraduationSchoolYearTypeReference: ").Append(GraduationSchoolYearTypeReference).Append("\n");
            sb.Append("  TotalRequiredCredits: ").Append(TotalRequiredCredits).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreditsByCourses: ").Append(CreditsByCourses).Append("\n");
            sb.Append("  CreditsByCreditCategories: ").Append(CreditsByCreditCategories).Append("\n");
            sb.Append("  CreditsBySubjects: ").Append(CreditsBySubjects).Append("\n");
            sb.Append("  IndividualPlan: ").Append(IndividualPlan).Append("\n");
            sb.Append("  RequiredAssessments: ").Append(RequiredAssessments).Append("\n");
            sb.Append("  TotalRequiredCreditConversion: ").Append(TotalRequiredCreditConversion).Append("\n");
            sb.Append("  TotalRequiredCreditTypeDescriptor: ").Append(TotalRequiredCreditTypeDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GraduationPlanTypeDescriptor (string) maxLength
            if (this.GraduationPlanTypeDescriptor != null && this.GraduationPlanTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GraduationPlanTypeDescriptor, length must be less than 306.", new [] { "GraduationPlanTypeDescriptor" });
            }

            // TotalRequiredCredits (double) maximum
            if (this.TotalRequiredCredits > (double)999999.999)
            {
                yield return new ValidationResult("Invalid value for TotalRequiredCredits, must be a value less than or equal to 999999.999.", new [] { "TotalRequiredCredits" });
            }

            // TotalRequiredCredits (double) minimum
            if (this.TotalRequiredCredits < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for TotalRequiredCredits, must be a value greater than or equal to 0.0.", new [] { "TotalRequiredCredits" });
            }

            // TotalRequiredCreditConversion (double) maximum
            if (this.TotalRequiredCreditConversionOption.IsSet && this.TotalRequiredCreditConversionOption.Value > (double)9999999.99)
            {
                yield return new ValidationResult("Invalid value for TotalRequiredCreditConversion, must be a value less than or equal to 9999999.99.", new [] { "TotalRequiredCreditConversion" });
            }

            // TotalRequiredCreditConversion (double) minimum
            if (this.TotalRequiredCreditConversionOption.IsSet && this.TotalRequiredCreditConversionOption.Value < (double)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for TotalRequiredCreditConversion, must be a value greater than or equal to -9999999.99.", new [] { "TotalRequiredCreditConversion" });
            }

            // TotalRequiredCreditTypeDescriptor (string) maxLength
            if (this.TotalRequiredCreditTypeDescriptor != null && this.TotalRequiredCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for TotalRequiredCreditTypeDescriptor, length must be less than 306.", new [] { "TotalRequiredCreditTypeDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiGraduationPlan" />
    /// </summary>
    public class EdFiGraduationPlanJsonConverter : JsonConverter<EdFiGraduationPlan>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiGraduationPlan" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiGraduationPlan Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> graduationPlanTypeDescriptor = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiSchoolYearTypeReference?> graduationSchoolYearTypeReference = default;
            Option<double?> totalRequiredCredits = default;
            Option<string?> id = default;
            Option<List<EdFiGraduationPlanCreditsByCourse>?> creditsByCourses = default;
            Option<List<EdFiGraduationPlanCreditsByCreditCategory>?> creditsByCreditCategories = default;
            Option<List<EdFiGraduationPlanCreditsBySubject>?> creditsBySubjects = default;
            Option<bool?> individualPlan = default;
            Option<List<EdFiGraduationPlanRequiredAssessment>?> requiredAssessments = default;
            Option<double?> totalRequiredCreditConversion = default;
            Option<string?> totalRequiredCreditTypeDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "graduationPlanTypeDescriptor":
                            graduationPlanTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "graduationSchoolYearTypeReference":
                            graduationSchoolYearTypeReference = new Option<EdFiSchoolYearTypeReference?>(JsonSerializer.Deserialize<EdFiSchoolYearTypeReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "totalRequiredCredits":
                            totalRequiredCredits = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creditsByCourses":
                            creditsByCourses = new Option<List<EdFiGraduationPlanCreditsByCourse>?>(JsonSerializer.Deserialize<List<EdFiGraduationPlanCreditsByCourse>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "creditsByCreditCategories":
                            creditsByCreditCategories = new Option<List<EdFiGraduationPlanCreditsByCreditCategory>?>(JsonSerializer.Deserialize<List<EdFiGraduationPlanCreditsByCreditCategory>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "creditsBySubjects":
                            creditsBySubjects = new Option<List<EdFiGraduationPlanCreditsBySubject>?>(JsonSerializer.Deserialize<List<EdFiGraduationPlanCreditsBySubject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "individualPlan":
                            individualPlan = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "requiredAssessments":
                            requiredAssessments = new Option<List<EdFiGraduationPlanRequiredAssessment>?>(JsonSerializer.Deserialize<List<EdFiGraduationPlanRequiredAssessment>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "totalRequiredCreditConversion":
                            totalRequiredCreditConversion = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "totalRequiredCreditTypeDescriptor":
                            totalRequiredCreditTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!graduationPlanTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiGraduationPlan.", nameof(graduationPlanTypeDescriptor));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiGraduationPlan.", nameof(educationOrganizationReference));

            if (!graduationSchoolYearTypeReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiGraduationPlan.", nameof(graduationSchoolYearTypeReference));

            if (!totalRequiredCredits.IsSet)
                throw new ArgumentException("Property is required for class EdFiGraduationPlan.", nameof(totalRequiredCredits));

            if (graduationPlanTypeDescriptor.IsSet && graduationPlanTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(graduationPlanTypeDescriptor), "Property is not nullable for class EdFiGraduationPlan.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiGraduationPlan.");

            if (graduationSchoolYearTypeReference.IsSet && graduationSchoolYearTypeReference.Value == null)
                throw new ArgumentNullException(nameof(graduationSchoolYearTypeReference), "Property is not nullable for class EdFiGraduationPlan.");

            if (totalRequiredCredits.IsSet && totalRequiredCredits.Value == null)
                throw new ArgumentNullException(nameof(totalRequiredCredits), "Property is not nullable for class EdFiGraduationPlan.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiGraduationPlan.");

            if (creditsByCourses.IsSet && creditsByCourses.Value == null)
                throw new ArgumentNullException(nameof(creditsByCourses), "Property is not nullable for class EdFiGraduationPlan.");

            if (creditsByCreditCategories.IsSet && creditsByCreditCategories.Value == null)
                throw new ArgumentNullException(nameof(creditsByCreditCategories), "Property is not nullable for class EdFiGraduationPlan.");

            if (creditsBySubjects.IsSet && creditsBySubjects.Value == null)
                throw new ArgumentNullException(nameof(creditsBySubjects), "Property is not nullable for class EdFiGraduationPlan.");

            if (requiredAssessments.IsSet && requiredAssessments.Value == null)
                throw new ArgumentNullException(nameof(requiredAssessments), "Property is not nullable for class EdFiGraduationPlan.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiGraduationPlan.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiGraduationPlan.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiGraduationPlan.");

            return new EdFiGraduationPlan(graduationPlanTypeDescriptor.Value!, educationOrganizationReference.Value!, graduationSchoolYearTypeReference.Value!, totalRequiredCredits.Value!.Value!, id, creditsByCourses, creditsByCreditCategories, creditsBySubjects, individualPlan, requiredAssessments, totalRequiredCreditConversion, totalRequiredCreditTypeDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiGraduationPlan" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGraduationPlan"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiGraduationPlan edFiGraduationPlan, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiGraduationPlan, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiGraduationPlan" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGraduationPlan"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiGraduationPlan edFiGraduationPlan, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiGraduationPlan.GraduationPlanTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlan.GraduationPlanTypeDescriptor), "Property is required for class EdFiGraduationPlan.");

            if (edFiGraduationPlan.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlan.EducationOrganizationReference), "Property is required for class EdFiGraduationPlan.");

            if (edFiGraduationPlan.GraduationSchoolYearTypeReference == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlan.GraduationSchoolYearTypeReference), "Property is required for class EdFiGraduationPlan.");

            if (edFiGraduationPlan.IdOption.IsSet && edFiGraduationPlan.Id == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlan.Id), "Property is required for class EdFiGraduationPlan.");

            if (edFiGraduationPlan.CreditsByCoursesOption.IsSet && edFiGraduationPlan.CreditsByCourses == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlan.CreditsByCourses), "Property is required for class EdFiGraduationPlan.");

            if (edFiGraduationPlan.CreditsByCreditCategoriesOption.IsSet && edFiGraduationPlan.CreditsByCreditCategories == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlan.CreditsByCreditCategories), "Property is required for class EdFiGraduationPlan.");

            if (edFiGraduationPlan.CreditsBySubjectsOption.IsSet && edFiGraduationPlan.CreditsBySubjects == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlan.CreditsBySubjects), "Property is required for class EdFiGraduationPlan.");

            if (edFiGraduationPlan.RequiredAssessmentsOption.IsSet && edFiGraduationPlan.RequiredAssessments == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlan.RequiredAssessments), "Property is required for class EdFiGraduationPlan.");

            if (edFiGraduationPlan.EtagOption.IsSet && edFiGraduationPlan.Etag == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlan.Etag), "Property is required for class EdFiGraduationPlan.");

            if (edFiGraduationPlan.ExtOption.IsSet && edFiGraduationPlan.Ext == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlan.Ext), "Property is required for class EdFiGraduationPlan.");

            writer.WriteString("graduationPlanTypeDescriptor", edFiGraduationPlan.GraduationPlanTypeDescriptor);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiGraduationPlan.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("graduationSchoolYearTypeReference");
            JsonSerializer.Serialize(writer, edFiGraduationPlan.GraduationSchoolYearTypeReference, jsonSerializerOptions);
            writer.WriteNumber("totalRequiredCredits", edFiGraduationPlan.TotalRequiredCredits);

            if (edFiGraduationPlan.IdOption.IsSet)
                writer.WriteString("id", edFiGraduationPlan.Id);

            if (edFiGraduationPlan.CreditsByCoursesOption.IsSet)
            {
                writer.WritePropertyName("creditsByCourses");
                JsonSerializer.Serialize(writer, edFiGraduationPlan.CreditsByCourses, jsonSerializerOptions);
            }
            if (edFiGraduationPlan.CreditsByCreditCategoriesOption.IsSet)
            {
                writer.WritePropertyName("creditsByCreditCategories");
                JsonSerializer.Serialize(writer, edFiGraduationPlan.CreditsByCreditCategories, jsonSerializerOptions);
            }
            if (edFiGraduationPlan.CreditsBySubjectsOption.IsSet)
            {
                writer.WritePropertyName("creditsBySubjects");
                JsonSerializer.Serialize(writer, edFiGraduationPlan.CreditsBySubjects, jsonSerializerOptions);
            }
            if (edFiGraduationPlan.IndividualPlanOption.IsSet)
                if (edFiGraduationPlan.IndividualPlanOption.Value != null)
                    writer.WriteBoolean("individualPlan", edFiGraduationPlan.IndividualPlanOption.Value!.Value);
                else
                    writer.WriteNull("individualPlan");

            if (edFiGraduationPlan.RequiredAssessmentsOption.IsSet)
            {
                writer.WritePropertyName("requiredAssessments");
                JsonSerializer.Serialize(writer, edFiGraduationPlan.RequiredAssessments, jsonSerializerOptions);
            }
            if (edFiGraduationPlan.TotalRequiredCreditConversionOption.IsSet)
                if (edFiGraduationPlan.TotalRequiredCreditConversionOption.Value != null)
                    writer.WriteNumber("totalRequiredCreditConversion", edFiGraduationPlan.TotalRequiredCreditConversionOption.Value!.Value);
                else
                    writer.WriteNull("totalRequiredCreditConversion");

            if (edFiGraduationPlan.TotalRequiredCreditTypeDescriptorOption.IsSet)
                if (edFiGraduationPlan.TotalRequiredCreditTypeDescriptorOption.Value != null)
                    writer.WriteString("totalRequiredCreditTypeDescriptor", edFiGraduationPlan.TotalRequiredCreditTypeDescriptor);
                else
                    writer.WriteNull("totalRequiredCreditTypeDescriptor");

            if (edFiGraduationPlan.EtagOption.IsSet)
                writer.WriteString("_etag", edFiGraduationPlan.Etag);

            if (edFiGraduationPlan.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiGraduationPlan.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiGraduationPlan.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiGraduationPlan.Ext, jsonSerializerOptions);
            }
        }
    }
}
