// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiGraduationPlanCreditsByCourse
    /// </summary>
    public partial class EdFiGraduationPlanCreditsByCourse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGraduationPlanCreditsByCourse" /> class.
        /// </summary>
        /// <param name="courseSetName">Identifying name given to a collection of courses.</param>
        /// <param name="credits">The value of credits or units of value awarded for the completion of a course.</param>
        /// <param name="courses">An unordered collection of graduationPlanCreditsByCourseCourses. The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.</param>
        /// <param name="creditTypeDescriptor">The type of credits or units of value awarded for the completion of a course.</param>
        /// <param name="whenTakenGradeLevelDescriptor">The grade level when the student is planned to take the course.</param>
        /// <param name="creditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</param>
        /// <param name="ext">Extensions to the GraduationPlanCreditsByCourse entity.</param>
        [JsonConstructor]
        public EdFiGraduationPlanCreditsByCourse(string courseSetName, double credits, List<EdFiGraduationPlanCreditsByCourseCourse> courses, Option<string?> creditTypeDescriptor = default, Option<string?> whenTakenGradeLevelDescriptor = default, Option<double?> creditConversion = default, Option<Object?> ext = default)
        {
            CourseSetName = courseSetName;
            Credits = credits;
            Courses = courses;
            CreditTypeDescriptorOption = creditTypeDescriptor;
            WhenTakenGradeLevelDescriptorOption = whenTakenGradeLevelDescriptor;
            CreditConversionOption = creditConversion;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Identifying name given to a collection of courses.
        /// </summary>
        /// <value>Identifying name given to a collection of courses.</value>
        [JsonPropertyName("courseSetName")]
        public string CourseSetName { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("credits")]
        public double Credits { get; set; }

        /// <summary>
        /// An unordered collection of graduationPlanCreditsByCourseCourses. The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
        /// </summary>
        /// <value>An unordered collection of graduationPlanCreditsByCourseCourses. The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.</value>
        [JsonPropertyName("courses")]
        public List<EdFiGraduationPlanCreditsByCourseCourse> Courses { get; set; }

        /// <summary>
        /// Used to track the state of CreditTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreditTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("creditTypeDescriptor")]
        public string? CreditTypeDescriptor { get { return this.CreditTypeDescriptorOption; } set { this.CreditTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of WhenTakenGradeLevelDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WhenTakenGradeLevelDescriptorOption { get; private set; }

        /// <summary>
        /// The grade level when the student is planned to take the course.
        /// </summary>
        /// <value>The grade level when the student is planned to take the course.</value>
        [JsonPropertyName("whenTakenGradeLevelDescriptor")]
        public string? WhenTakenGradeLevelDescriptor { get { return this.WhenTakenGradeLevelDescriptorOption; } set { this.WhenTakenGradeLevelDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditConversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CreditConversionOption { get; private set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [JsonPropertyName("creditConversion")]
        public double? CreditConversion { get { return this.CreditConversionOption; } set { this.CreditConversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the GraduationPlanCreditsByCourse entity.
        /// </summary>
        /// <value>Extensions to the GraduationPlanCreditsByCourse entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGraduationPlanCreditsByCourse {\n");
            sb.Append("  CourseSetName: ").Append(CourseSetName).Append("\n");
            sb.Append("  Credits: ").Append(Credits).Append("\n");
            sb.Append("  Courses: ").Append(Courses).Append("\n");
            sb.Append("  CreditTypeDescriptor: ").Append(CreditTypeDescriptor).Append("\n");
            sb.Append("  WhenTakenGradeLevelDescriptor: ").Append(WhenTakenGradeLevelDescriptor).Append("\n");
            sb.Append("  CreditConversion: ").Append(CreditConversion).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CourseSetName (string) maxLength
            if (this.CourseSetName != null && this.CourseSetName.Length > 120)
            {
                yield return new ValidationResult("Invalid value for CourseSetName, length must be less than 120.", new [] { "CourseSetName" });
            }

            // Credits (double) maximum
            if (this.Credits > (double)999999.999)
            {
                yield return new ValidationResult("Invalid value for Credits, must be a value less than or equal to 999999.999.", new [] { "Credits" });
            }

            // Credits (double) minimum
            if (this.Credits < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for Credits, must be a value greater than or equal to 0.0.", new [] { "Credits" });
            }

            // CreditTypeDescriptor (string) maxLength
            if (this.CreditTypeDescriptor != null && this.CreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CreditTypeDescriptor, length must be less than 306.", new [] { "CreditTypeDescriptor" });
            }

            // WhenTakenGradeLevelDescriptor (string) maxLength
            if (this.WhenTakenGradeLevelDescriptor != null && this.WhenTakenGradeLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for WhenTakenGradeLevelDescriptor, length must be less than 306.", new [] { "WhenTakenGradeLevelDescriptor" });
            }

            // CreditConversion (double) maximum
            if (this.CreditConversionOption.IsSet && this.CreditConversionOption.Value > (double)9999999.99)
            {
                yield return new ValidationResult("Invalid value for CreditConversion, must be a value less than or equal to 9999999.99.", new [] { "CreditConversion" });
            }

            // CreditConversion (double) minimum
            if (this.CreditConversionOption.IsSet && this.CreditConversionOption.Value < (double)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for CreditConversion, must be a value greater than or equal to -9999999.99.", new [] { "CreditConversion" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiGraduationPlanCreditsByCourse" />
    /// </summary>
    public class EdFiGraduationPlanCreditsByCourseJsonConverter : JsonConverter<EdFiGraduationPlanCreditsByCourse>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiGraduationPlanCreditsByCourse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiGraduationPlanCreditsByCourse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> courseSetName = default;
            Option<double?> credits = default;
            Option<List<EdFiGraduationPlanCreditsByCourseCourse>?> courses = default;
            Option<string?> creditTypeDescriptor = default;
            Option<string?> whenTakenGradeLevelDescriptor = default;
            Option<double?> creditConversion = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "courseSetName":
                            courseSetName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "credits":
                            credits = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "courses":
                            courses = new Option<List<EdFiGraduationPlanCreditsByCourseCourse>?>(JsonSerializer.Deserialize<List<EdFiGraduationPlanCreditsByCourseCourse>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "creditTypeDescriptor":
                            creditTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "whenTakenGradeLevelDescriptor":
                            whenTakenGradeLevelDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "creditConversion":
                            creditConversion = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!courseSetName.IsSet)
                throw new ArgumentException("Property is required for class EdFiGraduationPlanCreditsByCourse.", nameof(courseSetName));

            if (!credits.IsSet)
                throw new ArgumentException("Property is required for class EdFiGraduationPlanCreditsByCourse.", nameof(credits));

            if (!courses.IsSet)
                throw new ArgumentException("Property is required for class EdFiGraduationPlanCreditsByCourse.", nameof(courses));

            if (courseSetName.IsSet && courseSetName.Value == null)
                throw new ArgumentNullException(nameof(courseSetName), "Property is not nullable for class EdFiGraduationPlanCreditsByCourse.");

            if (credits.IsSet && credits.Value == null)
                throw new ArgumentNullException(nameof(credits), "Property is not nullable for class EdFiGraduationPlanCreditsByCourse.");

            if (courses.IsSet && courses.Value == null)
                throw new ArgumentNullException(nameof(courses), "Property is not nullable for class EdFiGraduationPlanCreditsByCourse.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiGraduationPlanCreditsByCourse.");

            return new EdFiGraduationPlanCreditsByCourse(courseSetName.Value!, credits.Value!.Value!, courses.Value!, creditTypeDescriptor, whenTakenGradeLevelDescriptor, creditConversion, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiGraduationPlanCreditsByCourse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGraduationPlanCreditsByCourse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiGraduationPlanCreditsByCourse edFiGraduationPlanCreditsByCourse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiGraduationPlanCreditsByCourse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiGraduationPlanCreditsByCourse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGraduationPlanCreditsByCourse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiGraduationPlanCreditsByCourse edFiGraduationPlanCreditsByCourse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiGraduationPlanCreditsByCourse.CourseSetName == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlanCreditsByCourse.CourseSetName), "Property is required for class EdFiGraduationPlanCreditsByCourse.");

            if (edFiGraduationPlanCreditsByCourse.Courses == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlanCreditsByCourse.Courses), "Property is required for class EdFiGraduationPlanCreditsByCourse.");

            if (edFiGraduationPlanCreditsByCourse.ExtOption.IsSet && edFiGraduationPlanCreditsByCourse.Ext == null)
                throw new ArgumentNullException(nameof(edFiGraduationPlanCreditsByCourse.Ext), "Property is required for class EdFiGraduationPlanCreditsByCourse.");

            writer.WriteString("courseSetName", edFiGraduationPlanCreditsByCourse.CourseSetName);

            writer.WriteNumber("credits", edFiGraduationPlanCreditsByCourse.Credits);

            writer.WritePropertyName("courses");
            JsonSerializer.Serialize(writer, edFiGraduationPlanCreditsByCourse.Courses, jsonSerializerOptions);
            if (edFiGraduationPlanCreditsByCourse.CreditTypeDescriptorOption.IsSet)
                if (edFiGraduationPlanCreditsByCourse.CreditTypeDescriptorOption.Value != null)
                    writer.WriteString("creditTypeDescriptor", edFiGraduationPlanCreditsByCourse.CreditTypeDescriptor);
                else
                    writer.WriteNull("creditTypeDescriptor");

            if (edFiGraduationPlanCreditsByCourse.WhenTakenGradeLevelDescriptorOption.IsSet)
                if (edFiGraduationPlanCreditsByCourse.WhenTakenGradeLevelDescriptorOption.Value != null)
                    writer.WriteString("whenTakenGradeLevelDescriptor", edFiGraduationPlanCreditsByCourse.WhenTakenGradeLevelDescriptor);
                else
                    writer.WriteNull("whenTakenGradeLevelDescriptor");

            if (edFiGraduationPlanCreditsByCourse.CreditConversionOption.IsSet)
                if (edFiGraduationPlanCreditsByCourse.CreditConversionOption.Value != null)
                    writer.WriteNumber("creditConversion", edFiGraduationPlanCreditsByCourse.CreditConversionOption.Value!.Value);
                else
                    writer.WriteNull("creditConversion");

            if (edFiGraduationPlanCreditsByCourse.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiGraduationPlanCreditsByCourse.Ext, jsonSerializerOptions);
            }
        }
    }
}
