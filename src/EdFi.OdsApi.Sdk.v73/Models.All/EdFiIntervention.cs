// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiIntervention
    /// </summary>
    public partial class EdFiIntervention : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiIntervention" /> class.
        /// </summary>
        /// <param name="interventionIdentificationCode">A unique number or alphanumeric code assigned to an intervention.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="beginDate">The start date for the intervention implementation.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="deliveryMethodDescriptor">The way in which an intervention was implemented.</param>
        /// <param name="interventionClassDescriptor">The way in which an intervention is used: curriculum, supplement, or practice.</param>
        /// <param name="id">id</param>
        /// <param name="appropriateGradeLevels">An unordered collection of interventionAppropriateGradeLevels. Grade levels for the intervention. If omitted, considered generally applicable.</param>
        /// <param name="appropriateSexes">An unordered collection of interventionAppropriateSexes. Sexes for the intervention. If omitted, considered generally applicable.</param>
        /// <param name="diagnoses">An unordered collection of interventionDiagnoses. Targeted purpose of the intervention.</param>
        /// <param name="educationContents">An unordered collection of interventionEducationContents. Relates the education content source to the education content.</param>
        /// <param name="endDate">The end date for the intervention implementation.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="interventionPrescriptions">An unordered collection of interventionInterventionPrescriptions. The reference to the intervention prescription being followed in this intervention implementation.</param>
        /// <param name="learningResourceMetadataURIs">An unordered collection of interventionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</param>
        /// <param name="maxDosage">The maximum duration of time in minutes that may be assigned for the intervention.</param>
        /// <param name="meetingTimes">An unordered collection of interventionMeetingTimes. The times at which this intervention is scheduled to meet.</param>
        /// <param name="minDosage">The minimum duration of time in minutes that may be assigned for the intervention.</param>
        /// <param name="namespace">Namespace for the intervention.</param>
        /// <param name="populationServeds">An unordered collection of interventionPopulationServeds. A subset of students that are the focus of the intervention.</param>
        /// <param name="staffs">An unordered collection of interventionStaffs. Relates the staff member associated with the Intervention.</param>
        /// <param name="uris">An unordered collection of interventionURIs. The URI (typical a URL) pointing to an education content item.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Intervention entity.</param>
        [JsonConstructor]
        public EdFiIntervention(string interventionIdentificationCode, EdFiEducationOrganizationReference educationOrganizationReference, DateOnly beginDate, string deliveryMethodDescriptor, string interventionClassDescriptor, Option<string?> id = default, Option<List<EdFiInterventionAppropriateGradeLevel>?> appropriateGradeLevels = default, Option<List<EdFiInterventionAppropriateSex>?> appropriateSexes = default, Option<List<EdFiInterventionDiagnosis>?> diagnoses = default, Option<List<EdFiInterventionEducationContent>?> educationContents = default, Option<DateOnly?> endDate = default, Option<List<EdFiInterventionInterventionPrescription>?> interventionPrescriptions = default, Option<List<EdFiInterventionLearningResourceMetadataURI>?> learningResourceMetadataURIs = default, Option<int?> maxDosage = default, Option<List<EdFiInterventionMeetingTime>?> meetingTimes = default, Option<int?> minDosage = default, Option<string?> @namespace = default, Option<List<EdFiInterventionPopulationServed>?> populationServeds = default, Option<List<EdFiInterventionStaff>?> staffs = default, Option<List<EdFiInterventionURI>?> uris = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            InterventionIdentificationCode = interventionIdentificationCode;
            EducationOrganizationReference = educationOrganizationReference;
            BeginDate = beginDate;
            DeliveryMethodDescriptor = deliveryMethodDescriptor;
            InterventionClassDescriptor = interventionClassDescriptor;
            IdOption = id;
            AppropriateGradeLevelsOption = appropriateGradeLevels;
            AppropriateSexesOption = appropriateSexes;
            DiagnosesOption = diagnoses;
            EducationContentsOption = educationContents;
            EndDateOption = endDate;
            InterventionPrescriptionsOption = interventionPrescriptions;
            LearningResourceMetadataURIsOption = learningResourceMetadataURIs;
            MaxDosageOption = maxDosage;
            MeetingTimesOption = meetingTimes;
            MinDosageOption = minDosage;
            NamespaceOption = @namespace;
            PopulationServedsOption = populationServeds;
            StaffsOption = staffs;
            UrisOption = uris;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an intervention.</value>
        [JsonPropertyName("interventionIdentificationCode")]
        public string InterventionIdentificationCode { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// The start date for the intervention implementation.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The start date for the intervention implementation.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// The way in which an intervention was implemented.
        /// </summary>
        /// <value>The way in which an intervention was implemented.</value>
        [JsonPropertyName("deliveryMethodDescriptor")]
        public string DeliveryMethodDescriptor { get; set; }

        /// <summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        /// </summary>
        /// <value>The way in which an intervention is used: curriculum, supplement, or practice.</value>
        [JsonPropertyName("interventionClassDescriptor")]
        public string InterventionClassDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AppropriateGradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionAppropriateGradeLevel>?> AppropriateGradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionAppropriateGradeLevels. Grade levels for the intervention. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of interventionAppropriateGradeLevels. Grade levels for the intervention. If omitted, considered generally applicable.</value>
        [JsonPropertyName("appropriateGradeLevels")]
        public List<EdFiInterventionAppropriateGradeLevel>? AppropriateGradeLevels { get { return this.AppropriateGradeLevelsOption; } set { this.AppropriateGradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AppropriateSexes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionAppropriateSex>?> AppropriateSexesOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionAppropriateSexes. Sexes for the intervention. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of interventionAppropriateSexes. Sexes for the intervention. If omitted, considered generally applicable.</value>
        [JsonPropertyName("appropriateSexes")]
        public List<EdFiInterventionAppropriateSex>? AppropriateSexes { get { return this.AppropriateSexesOption; } set { this.AppropriateSexesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Diagnoses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionDiagnosis>?> DiagnosesOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionDiagnoses. Targeted purpose of the intervention.
        /// </summary>
        /// <value>An unordered collection of interventionDiagnoses. Targeted purpose of the intervention.</value>
        [JsonPropertyName("diagnoses")]
        public List<EdFiInterventionDiagnosis>? Diagnoses { get { return this.DiagnosesOption; } set { this.DiagnosesOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationContents
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionEducationContent>?> EducationContentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionEducationContents. Relates the education content source to the education content.
        /// </summary>
        /// <value>An unordered collection of interventionEducationContents. Relates the education content source to the education content.</value>
        [JsonPropertyName("educationContents")]
        public List<EdFiInterventionEducationContent>? EducationContents { get { return this.EducationContentsOption; } set { this.EducationContentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The end date for the intervention implementation.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The end date for the intervention implementation.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of InterventionPrescriptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionInterventionPrescription>?> InterventionPrescriptionsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionInterventionPrescriptions. The reference to the intervention prescription being followed in this intervention implementation.
        /// </summary>
        /// <value>An unordered collection of interventionInterventionPrescriptions. The reference to the intervention prescription being followed in this intervention implementation.</value>
        [JsonPropertyName("interventionPrescriptions")]
        public List<EdFiInterventionInterventionPrescription>? InterventionPrescriptions { get { return this.InterventionPrescriptionsOption; } set { this.InterventionPrescriptionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningResourceMetadataURIs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionLearningResourceMetadataURI>?> LearningResourceMetadataURIsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        /// <value>An unordered collection of interventionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</value>
        [JsonPropertyName("learningResourceMetadataURIs")]
        public List<EdFiInterventionLearningResourceMetadataURI>? LearningResourceMetadataURIs { get { return this.LearningResourceMetadataURIsOption; } set { this.LearningResourceMetadataURIsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxDosage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxDosageOption { get; private set; }

        /// <summary>
        /// The maximum duration of time in minutes that may be assigned for the intervention.
        /// </summary>
        /// <value>The maximum duration of time in minutes that may be assigned for the intervention.</value>
        [JsonPropertyName("maxDosage")]
        public int? MaxDosage { get { return this.MaxDosageOption; } set { this.MaxDosageOption = new(value); } }

        /// <summary>
        /// Used to track the state of MeetingTimes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionMeetingTime>?> MeetingTimesOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionMeetingTimes. The times at which this intervention is scheduled to meet.
        /// </summary>
        /// <value>An unordered collection of interventionMeetingTimes. The times at which this intervention is scheduled to meet.</value>
        [JsonPropertyName("meetingTimes")]
        public List<EdFiInterventionMeetingTime>? MeetingTimes { get { return this.MeetingTimesOption; } set { this.MeetingTimesOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinDosage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MinDosageOption { get; private set; }

        /// <summary>
        /// The minimum duration of time in minutes that may be assigned for the intervention.
        /// </summary>
        /// <value>The minimum duration of time in minutes that may be assigned for the intervention.</value>
        [JsonPropertyName("minDosage")]
        public int? MinDosage { get { return this.MinDosageOption; } set { this.MinDosageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Namespace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NamespaceOption { get; private set; }

        /// <summary>
        /// Namespace for the intervention.
        /// </summary>
        /// <value>Namespace for the intervention.</value>
        [JsonPropertyName("namespace")]
        public string? Namespace { get { return this.NamespaceOption; } set { this.NamespaceOption = new(value); } }

        /// <summary>
        /// Used to track the state of PopulationServeds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionPopulationServed>?> PopulationServedsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionPopulationServeds. A subset of students that are the focus of the intervention.
        /// </summary>
        /// <value>An unordered collection of interventionPopulationServeds. A subset of students that are the focus of the intervention.</value>
        [JsonPropertyName("populationServeds")]
        public List<EdFiInterventionPopulationServed>? PopulationServeds { get { return this.PopulationServedsOption; } set { this.PopulationServedsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Staffs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionStaff>?> StaffsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionStaffs. Relates the staff member associated with the Intervention.
        /// </summary>
        /// <value>An unordered collection of interventionStaffs. Relates the staff member associated with the Intervention.</value>
        [JsonPropertyName("staffs")]
        public List<EdFiInterventionStaff>? Staffs { get { return this.StaffsOption; } set { this.StaffsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Uris
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionURI>?> UrisOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionURIs. The URI (typical a URL) pointing to an education content item.
        /// </summary>
        /// <value>An unordered collection of interventionURIs. The URI (typical a URL) pointing to an education content item.</value>
        [JsonPropertyName("uris")]
        public List<EdFiInterventionURI>? Uris { get { return this.UrisOption; } set { this.UrisOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Intervention entity.
        /// </summary>
        /// <value>Extensions to the Intervention entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiIntervention {\n");
            sb.Append("  InterventionIdentificationCode: ").Append(InterventionIdentificationCode).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  DeliveryMethodDescriptor: ").Append(DeliveryMethodDescriptor).Append("\n");
            sb.Append("  InterventionClassDescriptor: ").Append(InterventionClassDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppropriateGradeLevels: ").Append(AppropriateGradeLevels).Append("\n");
            sb.Append("  AppropriateSexes: ").Append(AppropriateSexes).Append("\n");
            sb.Append("  Diagnoses: ").Append(Diagnoses).Append("\n");
            sb.Append("  EducationContents: ").Append(EducationContents).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  InterventionPrescriptions: ").Append(InterventionPrescriptions).Append("\n");
            sb.Append("  LearningResourceMetadataURIs: ").Append(LearningResourceMetadataURIs).Append("\n");
            sb.Append("  MaxDosage: ").Append(MaxDosage).Append("\n");
            sb.Append("  MeetingTimes: ").Append(MeetingTimes).Append("\n");
            sb.Append("  MinDosage: ").Append(MinDosage).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  PopulationServeds: ").Append(PopulationServeds).Append("\n");
            sb.Append("  Staffs: ").Append(Staffs).Append("\n");
            sb.Append("  Uris: ").Append(Uris).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InterventionIdentificationCode (string) maxLength
            if (this.InterventionIdentificationCode != null && this.InterventionIdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for InterventionIdentificationCode, length must be less than 60.", new [] { "InterventionIdentificationCode" });
            }

            // DeliveryMethodDescriptor (string) maxLength
            if (this.DeliveryMethodDescriptor != null && this.DeliveryMethodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DeliveryMethodDescriptor, length must be less than 306.", new [] { "DeliveryMethodDescriptor" });
            }

            // InterventionClassDescriptor (string) maxLength
            if (this.InterventionClassDescriptor != null && this.InterventionClassDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for InterventionClassDescriptor, length must be less than 306.", new [] { "InterventionClassDescriptor" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiIntervention" />
    /// </summary>
    public class EdFiInterventionJsonConverter : JsonConverter<EdFiIntervention>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiIntervention" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiIntervention Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> interventionIdentificationCode = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<DateOnly?> beginDate = default;
            Option<string?> deliveryMethodDescriptor = default;
            Option<string?> interventionClassDescriptor = default;
            Option<string?> id = default;
            Option<List<EdFiInterventionAppropriateGradeLevel>?> appropriateGradeLevels = default;
            Option<List<EdFiInterventionAppropriateSex>?> appropriateSexes = default;
            Option<List<EdFiInterventionDiagnosis>?> diagnoses = default;
            Option<List<EdFiInterventionEducationContent>?> educationContents = default;
            Option<DateOnly?> endDate = default;
            Option<List<EdFiInterventionInterventionPrescription>?> interventionPrescriptions = default;
            Option<List<EdFiInterventionLearningResourceMetadataURI>?> learningResourceMetadataURIs = default;
            Option<int?> maxDosage = default;
            Option<List<EdFiInterventionMeetingTime>?> meetingTimes = default;
            Option<int?> minDosage = default;
            Option<string?> varNamespace = default;
            Option<List<EdFiInterventionPopulationServed>?> populationServeds = default;
            Option<List<EdFiInterventionStaff>?> staffs = default;
            Option<List<EdFiInterventionURI>?> uris = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "interventionIdentificationCode":
                            interventionIdentificationCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryMethodDescriptor":
                            deliveryMethodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "interventionClassDescriptor":
                            interventionClassDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "appropriateGradeLevels":
                            appropriateGradeLevels = new Option<List<EdFiInterventionAppropriateGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiInterventionAppropriateGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "appropriateSexes":
                            appropriateSexes = new Option<List<EdFiInterventionAppropriateSex>?>(JsonSerializer.Deserialize<List<EdFiInterventionAppropriateSex>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "diagnoses":
                            diagnoses = new Option<List<EdFiInterventionDiagnosis>?>(JsonSerializer.Deserialize<List<EdFiInterventionDiagnosis>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "educationContents":
                            educationContents = new Option<List<EdFiInterventionEducationContent>?>(JsonSerializer.Deserialize<List<EdFiInterventionEducationContent>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "interventionPrescriptions":
                            interventionPrescriptions = new Option<List<EdFiInterventionInterventionPrescription>?>(JsonSerializer.Deserialize<List<EdFiInterventionInterventionPrescription>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "learningResourceMetadataURIs":
                            learningResourceMetadataURIs = new Option<List<EdFiInterventionLearningResourceMetadataURI>?>(JsonSerializer.Deserialize<List<EdFiInterventionLearningResourceMetadataURI>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "maxDosage":
                            maxDosage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "meetingTimes":
                            meetingTimes = new Option<List<EdFiInterventionMeetingTime>?>(JsonSerializer.Deserialize<List<EdFiInterventionMeetingTime>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "minDosage":
                            minDosage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "populationServeds":
                            populationServeds = new Option<List<EdFiInterventionPopulationServed>?>(JsonSerializer.Deserialize<List<EdFiInterventionPopulationServed>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "staffs":
                            staffs = new Option<List<EdFiInterventionStaff>?>(JsonSerializer.Deserialize<List<EdFiInterventionStaff>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "uris":
                            uris = new Option<List<EdFiInterventionURI>?>(JsonSerializer.Deserialize<List<EdFiInterventionURI>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!interventionIdentificationCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiIntervention.", nameof(interventionIdentificationCode));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiIntervention.", nameof(educationOrganizationReference));

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiIntervention.", nameof(beginDate));

            if (!deliveryMethodDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiIntervention.", nameof(deliveryMethodDescriptor));

            if (!interventionClassDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiIntervention.", nameof(interventionClassDescriptor));

            if (interventionIdentificationCode.IsSet && interventionIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(interventionIdentificationCode), "Property is not nullable for class EdFiIntervention.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiIntervention.");

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiIntervention.");

            if (deliveryMethodDescriptor.IsSet && deliveryMethodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(deliveryMethodDescriptor), "Property is not nullable for class EdFiIntervention.");

            if (interventionClassDescriptor.IsSet && interventionClassDescriptor.Value == null)
                throw new ArgumentNullException(nameof(interventionClassDescriptor), "Property is not nullable for class EdFiIntervention.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiIntervention.");

            if (appropriateGradeLevels.IsSet && appropriateGradeLevels.Value == null)
                throw new ArgumentNullException(nameof(appropriateGradeLevels), "Property is not nullable for class EdFiIntervention.");

            if (appropriateSexes.IsSet && appropriateSexes.Value == null)
                throw new ArgumentNullException(nameof(appropriateSexes), "Property is not nullable for class EdFiIntervention.");

            if (diagnoses.IsSet && diagnoses.Value == null)
                throw new ArgumentNullException(nameof(diagnoses), "Property is not nullable for class EdFiIntervention.");

            if (educationContents.IsSet && educationContents.Value == null)
                throw new ArgumentNullException(nameof(educationContents), "Property is not nullable for class EdFiIntervention.");

            if (interventionPrescriptions.IsSet && interventionPrescriptions.Value == null)
                throw new ArgumentNullException(nameof(interventionPrescriptions), "Property is not nullable for class EdFiIntervention.");

            if (learningResourceMetadataURIs.IsSet && learningResourceMetadataURIs.Value == null)
                throw new ArgumentNullException(nameof(learningResourceMetadataURIs), "Property is not nullable for class EdFiIntervention.");

            if (meetingTimes.IsSet && meetingTimes.Value == null)
                throw new ArgumentNullException(nameof(meetingTimes), "Property is not nullable for class EdFiIntervention.");

            if (populationServeds.IsSet && populationServeds.Value == null)
                throw new ArgumentNullException(nameof(populationServeds), "Property is not nullable for class EdFiIntervention.");

            if (staffs.IsSet && staffs.Value == null)
                throw new ArgumentNullException(nameof(staffs), "Property is not nullable for class EdFiIntervention.");

            if (uris.IsSet && uris.Value == null)
                throw new ArgumentNullException(nameof(uris), "Property is not nullable for class EdFiIntervention.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiIntervention.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiIntervention.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiIntervention.");

            return new EdFiIntervention(interventionIdentificationCode.Value!, educationOrganizationReference.Value!, beginDate.Value!.Value!, deliveryMethodDescriptor.Value!, interventionClassDescriptor.Value!, id, appropriateGradeLevels, appropriateSexes, diagnoses, educationContents, endDate, interventionPrescriptions, learningResourceMetadataURIs, maxDosage, meetingTimes, minDosage, varNamespace, populationServeds, staffs, uris, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiIntervention" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiIntervention"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiIntervention edFiIntervention, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiIntervention, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiIntervention" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiIntervention"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiIntervention edFiIntervention, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiIntervention.InterventionIdentificationCode == null)
                throw new ArgumentNullException(nameof(edFiIntervention.InterventionIdentificationCode), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiIntervention.EducationOrganizationReference), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.DeliveryMethodDescriptor == null)
                throw new ArgumentNullException(nameof(edFiIntervention.DeliveryMethodDescriptor), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.InterventionClassDescriptor == null)
                throw new ArgumentNullException(nameof(edFiIntervention.InterventionClassDescriptor), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.IdOption.IsSet && edFiIntervention.Id == null)
                throw new ArgumentNullException(nameof(edFiIntervention.Id), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.AppropriateGradeLevelsOption.IsSet && edFiIntervention.AppropriateGradeLevels == null)
                throw new ArgumentNullException(nameof(edFiIntervention.AppropriateGradeLevels), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.AppropriateSexesOption.IsSet && edFiIntervention.AppropriateSexes == null)
                throw new ArgumentNullException(nameof(edFiIntervention.AppropriateSexes), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.DiagnosesOption.IsSet && edFiIntervention.Diagnoses == null)
                throw new ArgumentNullException(nameof(edFiIntervention.Diagnoses), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.EducationContentsOption.IsSet && edFiIntervention.EducationContents == null)
                throw new ArgumentNullException(nameof(edFiIntervention.EducationContents), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.InterventionPrescriptionsOption.IsSet && edFiIntervention.InterventionPrescriptions == null)
                throw new ArgumentNullException(nameof(edFiIntervention.InterventionPrescriptions), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.LearningResourceMetadataURIsOption.IsSet && edFiIntervention.LearningResourceMetadataURIs == null)
                throw new ArgumentNullException(nameof(edFiIntervention.LearningResourceMetadataURIs), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.MeetingTimesOption.IsSet && edFiIntervention.MeetingTimes == null)
                throw new ArgumentNullException(nameof(edFiIntervention.MeetingTimes), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.PopulationServedsOption.IsSet && edFiIntervention.PopulationServeds == null)
                throw new ArgumentNullException(nameof(edFiIntervention.PopulationServeds), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.StaffsOption.IsSet && edFiIntervention.Staffs == null)
                throw new ArgumentNullException(nameof(edFiIntervention.Staffs), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.UrisOption.IsSet && edFiIntervention.Uris == null)
                throw new ArgumentNullException(nameof(edFiIntervention.Uris), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.EtagOption.IsSet && edFiIntervention.Etag == null)
                throw new ArgumentNullException(nameof(edFiIntervention.Etag), "Property is required for class EdFiIntervention.");

            if (edFiIntervention.ExtOption.IsSet && edFiIntervention.Ext == null)
                throw new ArgumentNullException(nameof(edFiIntervention.Ext), "Property is required for class EdFiIntervention.");

            writer.WriteString("interventionIdentificationCode", edFiIntervention.InterventionIdentificationCode);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiIntervention.EducationOrganizationReference, jsonSerializerOptions);
            writer.WriteString("beginDate", edFiIntervention.BeginDate.ToString(BeginDateFormat));

            writer.WriteString("deliveryMethodDescriptor", edFiIntervention.DeliveryMethodDescriptor);

            writer.WriteString("interventionClassDescriptor", edFiIntervention.InterventionClassDescriptor);

            if (edFiIntervention.IdOption.IsSet)
                writer.WriteString("id", edFiIntervention.Id);

            if (edFiIntervention.AppropriateGradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("appropriateGradeLevels");
                JsonSerializer.Serialize(writer, edFiIntervention.AppropriateGradeLevels, jsonSerializerOptions);
            }
            if (edFiIntervention.AppropriateSexesOption.IsSet)
            {
                writer.WritePropertyName("appropriateSexes");
                JsonSerializer.Serialize(writer, edFiIntervention.AppropriateSexes, jsonSerializerOptions);
            }
            if (edFiIntervention.DiagnosesOption.IsSet)
            {
                writer.WritePropertyName("diagnoses");
                JsonSerializer.Serialize(writer, edFiIntervention.Diagnoses, jsonSerializerOptions);
            }
            if (edFiIntervention.EducationContentsOption.IsSet)
            {
                writer.WritePropertyName("educationContents");
                JsonSerializer.Serialize(writer, edFiIntervention.EducationContents, jsonSerializerOptions);
            }
            if (edFiIntervention.EndDateOption.IsSet)
                if (edFiIntervention.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiIntervention.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiIntervention.InterventionPrescriptionsOption.IsSet)
            {
                writer.WritePropertyName("interventionPrescriptions");
                JsonSerializer.Serialize(writer, edFiIntervention.InterventionPrescriptions, jsonSerializerOptions);
            }
            if (edFiIntervention.LearningResourceMetadataURIsOption.IsSet)
            {
                writer.WritePropertyName("learningResourceMetadataURIs");
                JsonSerializer.Serialize(writer, edFiIntervention.LearningResourceMetadataURIs, jsonSerializerOptions);
            }
            if (edFiIntervention.MaxDosageOption.IsSet)
                if (edFiIntervention.MaxDosageOption.Value != null)
                    writer.WriteNumber("maxDosage", edFiIntervention.MaxDosageOption.Value!.Value);
                else
                    writer.WriteNull("maxDosage");

            if (edFiIntervention.MeetingTimesOption.IsSet)
            {
                writer.WritePropertyName("meetingTimes");
                JsonSerializer.Serialize(writer, edFiIntervention.MeetingTimes, jsonSerializerOptions);
            }
            if (edFiIntervention.MinDosageOption.IsSet)
                if (edFiIntervention.MinDosageOption.Value != null)
                    writer.WriteNumber("minDosage", edFiIntervention.MinDosageOption.Value!.Value);
                else
                    writer.WriteNull("minDosage");

            if (edFiIntervention.NamespaceOption.IsSet)
                if (edFiIntervention.NamespaceOption.Value != null)
                    writer.WriteString("namespace", edFiIntervention.Namespace);
                else
                    writer.WriteNull("namespace");

            if (edFiIntervention.PopulationServedsOption.IsSet)
            {
                writer.WritePropertyName("populationServeds");
                JsonSerializer.Serialize(writer, edFiIntervention.PopulationServeds, jsonSerializerOptions);
            }
            if (edFiIntervention.StaffsOption.IsSet)
            {
                writer.WritePropertyName("staffs");
                JsonSerializer.Serialize(writer, edFiIntervention.Staffs, jsonSerializerOptions);
            }
            if (edFiIntervention.UrisOption.IsSet)
            {
                writer.WritePropertyName("uris");
                JsonSerializer.Serialize(writer, edFiIntervention.Uris, jsonSerializerOptions);
            }
            if (edFiIntervention.EtagOption.IsSet)
                writer.WriteString("_etag", edFiIntervention.Etag);

            if (edFiIntervention.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiIntervention.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiIntervention.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiIntervention.Ext, jsonSerializerOptions);
            }
        }
    }
}
