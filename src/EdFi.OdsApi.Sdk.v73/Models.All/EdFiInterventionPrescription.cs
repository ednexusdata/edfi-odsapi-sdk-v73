// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiInterventionPrescription
    /// </summary>
    public partial class EdFiInterventionPrescription : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiInterventionPrescription" /> class.
        /// </summary>
        /// <param name="interventionPrescriptionIdentificationCode">A unique number or alphanumeric code assigned to an intervention prescription.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="deliveryMethodDescriptor">The way in which an intervention was implemented: individual, small group, whole class, or whole school.</param>
        /// <param name="interventionClassDescriptor">The way in which an intervention is used: curriculum, supplement, or practice.</param>
        /// <param name="id">id</param>
        /// <param name="appropriateGradeLevels">An unordered collection of interventionPrescriptionAppropriateGradeLevels. Grade levels for the prescribed intervention. If omitted, considered generally applicable.</param>
        /// <param name="appropriateSexes">An unordered collection of interventionPrescriptionAppropriateSexes. Sexes for the intervention prescription. If omitted, considered generally applicable.</param>
        /// <param name="diagnoses">An unordered collection of interventionPrescriptionDiagnoses. Targeted purpose of the intervention prescription.</param>
        /// <param name="educationContents">An unordered collection of interventionPrescriptionEducationContents. Relates the education content source to the education content.</param>
        /// <param name="learningResourceMetadataURIs">An unordered collection of interventionPrescriptionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</param>
        /// <param name="maxDosage">The maximum duration of time in minutes that is recommended for the intervention.</param>
        /// <param name="minDosage">The minimum duration of time in minutes that is recommended for the intervention.</param>
        /// <param name="namespace">Namespace for the intervention.</param>
        /// <param name="populationServeds">An unordered collection of interventionPrescriptionPopulationServeds. A subset of students that are the focus of the intervention prescription.</param>
        /// <param name="uris">An unordered collection of interventionPrescriptionURIs. The URI (typical a URL) pointing to an education content item.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the InterventionPrescription entity.</param>
        [JsonConstructor]
        public EdFiInterventionPrescription(string interventionPrescriptionIdentificationCode, EdFiEducationOrganizationReference educationOrganizationReference, string deliveryMethodDescriptor, string interventionClassDescriptor, Option<string?> id = default, Option<List<EdFiInterventionPrescriptionAppropriateGradeLevel>?> appropriateGradeLevels = default, Option<List<EdFiInterventionPrescriptionAppropriateSex>?> appropriateSexes = default, Option<List<EdFiInterventionPrescriptionDiagnosis>?> diagnoses = default, Option<List<EdFiInterventionPrescriptionEducationContent>?> educationContents = default, Option<List<EdFiInterventionPrescriptionLearningResourceMetadataURI>?> learningResourceMetadataURIs = default, Option<int?> maxDosage = default, Option<int?> minDosage = default, Option<string?> @namespace = default, Option<List<EdFiInterventionPrescriptionPopulationServed>?> populationServeds = default, Option<List<EdFiInterventionPrescriptionURI>?> uris = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            InterventionPrescriptionIdentificationCode = interventionPrescriptionIdentificationCode;
            EducationOrganizationReference = educationOrganizationReference;
            DeliveryMethodDescriptor = deliveryMethodDescriptor;
            InterventionClassDescriptor = interventionClassDescriptor;
            IdOption = id;
            AppropriateGradeLevelsOption = appropriateGradeLevels;
            AppropriateSexesOption = appropriateSexes;
            DiagnosesOption = diagnoses;
            EducationContentsOption = educationContents;
            LearningResourceMetadataURIsOption = learningResourceMetadataURIs;
            MaxDosageOption = maxDosage;
            MinDosageOption = minDosage;
            NamespaceOption = @namespace;
            PopulationServedsOption = populationServeds;
            UrisOption = uris;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an intervention prescription.</value>
        [JsonPropertyName("interventionPrescriptionIdentificationCode")]
        public string InterventionPrescriptionIdentificationCode { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        /// </summary>
        /// <value>The way in which an intervention was implemented: individual, small group, whole class, or whole school.</value>
        [JsonPropertyName("deliveryMethodDescriptor")]
        public string DeliveryMethodDescriptor { get; set; }

        /// <summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        /// </summary>
        /// <value>The way in which an intervention is used: curriculum, supplement, or practice.</value>
        [JsonPropertyName("interventionClassDescriptor")]
        public string InterventionClassDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AppropriateGradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionPrescriptionAppropriateGradeLevel>?> AppropriateGradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionAppropriateGradeLevels. Grade levels for the prescribed intervention. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionAppropriateGradeLevels. Grade levels for the prescribed intervention. If omitted, considered generally applicable.</value>
        [JsonPropertyName("appropriateGradeLevels")]
        public List<EdFiInterventionPrescriptionAppropriateGradeLevel>? AppropriateGradeLevels { get { return this.AppropriateGradeLevelsOption; } set { this.AppropriateGradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AppropriateSexes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionPrescriptionAppropriateSex>?> AppropriateSexesOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionAppropriateSexes. Sexes for the intervention prescription. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionAppropriateSexes. Sexes for the intervention prescription. If omitted, considered generally applicable.</value>
        [JsonPropertyName("appropriateSexes")]
        public List<EdFiInterventionPrescriptionAppropriateSex>? AppropriateSexes { get { return this.AppropriateSexesOption; } set { this.AppropriateSexesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Diagnoses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionPrescriptionDiagnosis>?> DiagnosesOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionDiagnoses. Targeted purpose of the intervention prescription.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionDiagnoses. Targeted purpose of the intervention prescription.</value>
        [JsonPropertyName("diagnoses")]
        public List<EdFiInterventionPrescriptionDiagnosis>? Diagnoses { get { return this.DiagnosesOption; } set { this.DiagnosesOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationContents
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionPrescriptionEducationContent>?> EducationContentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionEducationContents. Relates the education content source to the education content.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionEducationContents. Relates the education content source to the education content.</value>
        [JsonPropertyName("educationContents")]
        public List<EdFiInterventionPrescriptionEducationContent>? EducationContents { get { return this.EducationContentsOption; } set { this.EducationContentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningResourceMetadataURIs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionPrescriptionLearningResourceMetadataURI>?> LearningResourceMetadataURIsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</value>
        [JsonPropertyName("learningResourceMetadataURIs")]
        public List<EdFiInterventionPrescriptionLearningResourceMetadataURI>? LearningResourceMetadataURIs { get { return this.LearningResourceMetadataURIsOption; } set { this.LearningResourceMetadataURIsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxDosage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxDosageOption { get; private set; }

        /// <summary>
        /// The maximum duration of time in minutes that is recommended for the intervention.
        /// </summary>
        /// <value>The maximum duration of time in minutes that is recommended for the intervention.</value>
        [JsonPropertyName("maxDosage")]
        public int? MaxDosage { get { return this.MaxDosageOption; } set { this.MaxDosageOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinDosage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MinDosageOption { get; private set; }

        /// <summary>
        /// The minimum duration of time in minutes that is recommended for the intervention.
        /// </summary>
        /// <value>The minimum duration of time in minutes that is recommended for the intervention.</value>
        [JsonPropertyName("minDosage")]
        public int? MinDosage { get { return this.MinDosageOption; } set { this.MinDosageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Namespace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NamespaceOption { get; private set; }

        /// <summary>
        /// Namespace for the intervention.
        /// </summary>
        /// <value>Namespace for the intervention.</value>
        [JsonPropertyName("namespace")]
        public string? Namespace { get { return this.NamespaceOption; } set { this.NamespaceOption = new(value); } }

        /// <summary>
        /// Used to track the state of PopulationServeds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionPrescriptionPopulationServed>?> PopulationServedsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionPopulationServeds. A subset of students that are the focus of the intervention prescription.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionPopulationServeds. A subset of students that are the focus of the intervention prescription.</value>
        [JsonPropertyName("populationServeds")]
        public List<EdFiInterventionPrescriptionPopulationServed>? PopulationServeds { get { return this.PopulationServedsOption; } set { this.PopulationServedsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Uris
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionPrescriptionURI>?> UrisOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionPrescriptionURIs. The URI (typical a URL) pointing to an education content item.
        /// </summary>
        /// <value>An unordered collection of interventionPrescriptionURIs. The URI (typical a URL) pointing to an education content item.</value>
        [JsonPropertyName("uris")]
        public List<EdFiInterventionPrescriptionURI>? Uris { get { return this.UrisOption; } set { this.UrisOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the InterventionPrescription entity.
        /// </summary>
        /// <value>Extensions to the InterventionPrescription entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiInterventionPrescription {\n");
            sb.Append("  InterventionPrescriptionIdentificationCode: ").Append(InterventionPrescriptionIdentificationCode).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  DeliveryMethodDescriptor: ").Append(DeliveryMethodDescriptor).Append("\n");
            sb.Append("  InterventionClassDescriptor: ").Append(InterventionClassDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppropriateGradeLevels: ").Append(AppropriateGradeLevels).Append("\n");
            sb.Append("  AppropriateSexes: ").Append(AppropriateSexes).Append("\n");
            sb.Append("  Diagnoses: ").Append(Diagnoses).Append("\n");
            sb.Append("  EducationContents: ").Append(EducationContents).Append("\n");
            sb.Append("  LearningResourceMetadataURIs: ").Append(LearningResourceMetadataURIs).Append("\n");
            sb.Append("  MaxDosage: ").Append(MaxDosage).Append("\n");
            sb.Append("  MinDosage: ").Append(MinDosage).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  PopulationServeds: ").Append(PopulationServeds).Append("\n");
            sb.Append("  Uris: ").Append(Uris).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InterventionPrescriptionIdentificationCode (string) maxLength
            if (this.InterventionPrescriptionIdentificationCode != null && this.InterventionPrescriptionIdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for InterventionPrescriptionIdentificationCode, length must be less than 60.", new [] { "InterventionPrescriptionIdentificationCode" });
            }

            // DeliveryMethodDescriptor (string) maxLength
            if (this.DeliveryMethodDescriptor != null && this.DeliveryMethodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DeliveryMethodDescriptor, length must be less than 306.", new [] { "DeliveryMethodDescriptor" });
            }

            // InterventionClassDescriptor (string) maxLength
            if (this.InterventionClassDescriptor != null && this.InterventionClassDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for InterventionClassDescriptor, length must be less than 306.", new [] { "InterventionClassDescriptor" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiInterventionPrescription" />
    /// </summary>
    public class EdFiInterventionPrescriptionJsonConverter : JsonConverter<EdFiInterventionPrescription>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiInterventionPrescription" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiInterventionPrescription Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> interventionPrescriptionIdentificationCode = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<string?> deliveryMethodDescriptor = default;
            Option<string?> interventionClassDescriptor = default;
            Option<string?> id = default;
            Option<List<EdFiInterventionPrescriptionAppropriateGradeLevel>?> appropriateGradeLevels = default;
            Option<List<EdFiInterventionPrescriptionAppropriateSex>?> appropriateSexes = default;
            Option<List<EdFiInterventionPrescriptionDiagnosis>?> diagnoses = default;
            Option<List<EdFiInterventionPrescriptionEducationContent>?> educationContents = default;
            Option<List<EdFiInterventionPrescriptionLearningResourceMetadataURI>?> learningResourceMetadataURIs = default;
            Option<int?> maxDosage = default;
            Option<int?> minDosage = default;
            Option<string?> varNamespace = default;
            Option<List<EdFiInterventionPrescriptionPopulationServed>?> populationServeds = default;
            Option<List<EdFiInterventionPrescriptionURI>?> uris = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "interventionPrescriptionIdentificationCode":
                            interventionPrescriptionIdentificationCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "deliveryMethodDescriptor":
                            deliveryMethodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "interventionClassDescriptor":
                            interventionClassDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "appropriateGradeLevels":
                            appropriateGradeLevels = new Option<List<EdFiInterventionPrescriptionAppropriateGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiInterventionPrescriptionAppropriateGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "appropriateSexes":
                            appropriateSexes = new Option<List<EdFiInterventionPrescriptionAppropriateSex>?>(JsonSerializer.Deserialize<List<EdFiInterventionPrescriptionAppropriateSex>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "diagnoses":
                            diagnoses = new Option<List<EdFiInterventionPrescriptionDiagnosis>?>(JsonSerializer.Deserialize<List<EdFiInterventionPrescriptionDiagnosis>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "educationContents":
                            educationContents = new Option<List<EdFiInterventionPrescriptionEducationContent>?>(JsonSerializer.Deserialize<List<EdFiInterventionPrescriptionEducationContent>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "learningResourceMetadataURIs":
                            learningResourceMetadataURIs = new Option<List<EdFiInterventionPrescriptionLearningResourceMetadataURI>?>(JsonSerializer.Deserialize<List<EdFiInterventionPrescriptionLearningResourceMetadataURI>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "maxDosage":
                            maxDosage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "minDosage":
                            minDosage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "populationServeds":
                            populationServeds = new Option<List<EdFiInterventionPrescriptionPopulationServed>?>(JsonSerializer.Deserialize<List<EdFiInterventionPrescriptionPopulationServed>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "uris":
                            uris = new Option<List<EdFiInterventionPrescriptionURI>?>(JsonSerializer.Deserialize<List<EdFiInterventionPrescriptionURI>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!interventionPrescriptionIdentificationCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiInterventionPrescription.", nameof(interventionPrescriptionIdentificationCode));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiInterventionPrescription.", nameof(educationOrganizationReference));

            if (!deliveryMethodDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiInterventionPrescription.", nameof(deliveryMethodDescriptor));

            if (!interventionClassDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiInterventionPrescription.", nameof(interventionClassDescriptor));

            if (interventionPrescriptionIdentificationCode.IsSet && interventionPrescriptionIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(interventionPrescriptionIdentificationCode), "Property is not nullable for class EdFiInterventionPrescription.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiInterventionPrescription.");

            if (deliveryMethodDescriptor.IsSet && deliveryMethodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(deliveryMethodDescriptor), "Property is not nullable for class EdFiInterventionPrescription.");

            if (interventionClassDescriptor.IsSet && interventionClassDescriptor.Value == null)
                throw new ArgumentNullException(nameof(interventionClassDescriptor), "Property is not nullable for class EdFiInterventionPrescription.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiInterventionPrescription.");

            if (appropriateGradeLevels.IsSet && appropriateGradeLevels.Value == null)
                throw new ArgumentNullException(nameof(appropriateGradeLevels), "Property is not nullable for class EdFiInterventionPrescription.");

            if (appropriateSexes.IsSet && appropriateSexes.Value == null)
                throw new ArgumentNullException(nameof(appropriateSexes), "Property is not nullable for class EdFiInterventionPrescription.");

            if (diagnoses.IsSet && diagnoses.Value == null)
                throw new ArgumentNullException(nameof(diagnoses), "Property is not nullable for class EdFiInterventionPrescription.");

            if (educationContents.IsSet && educationContents.Value == null)
                throw new ArgumentNullException(nameof(educationContents), "Property is not nullable for class EdFiInterventionPrescription.");

            if (learningResourceMetadataURIs.IsSet && learningResourceMetadataURIs.Value == null)
                throw new ArgumentNullException(nameof(learningResourceMetadataURIs), "Property is not nullable for class EdFiInterventionPrescription.");

            if (populationServeds.IsSet && populationServeds.Value == null)
                throw new ArgumentNullException(nameof(populationServeds), "Property is not nullable for class EdFiInterventionPrescription.");

            if (uris.IsSet && uris.Value == null)
                throw new ArgumentNullException(nameof(uris), "Property is not nullable for class EdFiInterventionPrescription.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiInterventionPrescription.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiInterventionPrescription.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiInterventionPrescription.");

            return new EdFiInterventionPrescription(interventionPrescriptionIdentificationCode.Value!, educationOrganizationReference.Value!, deliveryMethodDescriptor.Value!, interventionClassDescriptor.Value!, id, appropriateGradeLevels, appropriateSexes, diagnoses, educationContents, learningResourceMetadataURIs, maxDosage, minDosage, varNamespace, populationServeds, uris, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiInterventionPrescription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiInterventionPrescription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiInterventionPrescription edFiInterventionPrescription, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiInterventionPrescription, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiInterventionPrescription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiInterventionPrescription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiInterventionPrescription edFiInterventionPrescription, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiInterventionPrescription.InterventionPrescriptionIdentificationCode == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.InterventionPrescriptionIdentificationCode), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.EducationOrganizationReference), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.DeliveryMethodDescriptor == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.DeliveryMethodDescriptor), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.InterventionClassDescriptor == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.InterventionClassDescriptor), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.IdOption.IsSet && edFiInterventionPrescription.Id == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.Id), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.AppropriateGradeLevelsOption.IsSet && edFiInterventionPrescription.AppropriateGradeLevels == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.AppropriateGradeLevels), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.AppropriateSexesOption.IsSet && edFiInterventionPrescription.AppropriateSexes == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.AppropriateSexes), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.DiagnosesOption.IsSet && edFiInterventionPrescription.Diagnoses == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.Diagnoses), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.EducationContentsOption.IsSet && edFiInterventionPrescription.EducationContents == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.EducationContents), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.LearningResourceMetadataURIsOption.IsSet && edFiInterventionPrescription.LearningResourceMetadataURIs == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.LearningResourceMetadataURIs), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.PopulationServedsOption.IsSet && edFiInterventionPrescription.PopulationServeds == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.PopulationServeds), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.UrisOption.IsSet && edFiInterventionPrescription.Uris == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.Uris), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.EtagOption.IsSet && edFiInterventionPrescription.Etag == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.Etag), "Property is required for class EdFiInterventionPrescription.");

            if (edFiInterventionPrescription.ExtOption.IsSet && edFiInterventionPrescription.Ext == null)
                throw new ArgumentNullException(nameof(edFiInterventionPrescription.Ext), "Property is required for class EdFiInterventionPrescription.");

            writer.WriteString("interventionPrescriptionIdentificationCode", edFiInterventionPrescription.InterventionPrescriptionIdentificationCode);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiInterventionPrescription.EducationOrganizationReference, jsonSerializerOptions);
            writer.WriteString("deliveryMethodDescriptor", edFiInterventionPrescription.DeliveryMethodDescriptor);

            writer.WriteString("interventionClassDescriptor", edFiInterventionPrescription.InterventionClassDescriptor);

            if (edFiInterventionPrescription.IdOption.IsSet)
                writer.WriteString("id", edFiInterventionPrescription.Id);

            if (edFiInterventionPrescription.AppropriateGradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("appropriateGradeLevels");
                JsonSerializer.Serialize(writer, edFiInterventionPrescription.AppropriateGradeLevels, jsonSerializerOptions);
            }
            if (edFiInterventionPrescription.AppropriateSexesOption.IsSet)
            {
                writer.WritePropertyName("appropriateSexes");
                JsonSerializer.Serialize(writer, edFiInterventionPrescription.AppropriateSexes, jsonSerializerOptions);
            }
            if (edFiInterventionPrescription.DiagnosesOption.IsSet)
            {
                writer.WritePropertyName("diagnoses");
                JsonSerializer.Serialize(writer, edFiInterventionPrescription.Diagnoses, jsonSerializerOptions);
            }
            if (edFiInterventionPrescription.EducationContentsOption.IsSet)
            {
                writer.WritePropertyName("educationContents");
                JsonSerializer.Serialize(writer, edFiInterventionPrescription.EducationContents, jsonSerializerOptions);
            }
            if (edFiInterventionPrescription.LearningResourceMetadataURIsOption.IsSet)
            {
                writer.WritePropertyName("learningResourceMetadataURIs");
                JsonSerializer.Serialize(writer, edFiInterventionPrescription.LearningResourceMetadataURIs, jsonSerializerOptions);
            }
            if (edFiInterventionPrescription.MaxDosageOption.IsSet)
                if (edFiInterventionPrescription.MaxDosageOption.Value != null)
                    writer.WriteNumber("maxDosage", edFiInterventionPrescription.MaxDosageOption.Value!.Value);
                else
                    writer.WriteNull("maxDosage");

            if (edFiInterventionPrescription.MinDosageOption.IsSet)
                if (edFiInterventionPrescription.MinDosageOption.Value != null)
                    writer.WriteNumber("minDosage", edFiInterventionPrescription.MinDosageOption.Value!.Value);
                else
                    writer.WriteNull("minDosage");

            if (edFiInterventionPrescription.NamespaceOption.IsSet)
                if (edFiInterventionPrescription.NamespaceOption.Value != null)
                    writer.WriteString("namespace", edFiInterventionPrescription.Namespace);
                else
                    writer.WriteNull("namespace");

            if (edFiInterventionPrescription.PopulationServedsOption.IsSet)
            {
                writer.WritePropertyName("populationServeds");
                JsonSerializer.Serialize(writer, edFiInterventionPrescription.PopulationServeds, jsonSerializerOptions);
            }
            if (edFiInterventionPrescription.UrisOption.IsSet)
            {
                writer.WritePropertyName("uris");
                JsonSerializer.Serialize(writer, edFiInterventionPrescription.Uris, jsonSerializerOptions);
            }
            if (edFiInterventionPrescription.EtagOption.IsSet)
                writer.WriteString("_etag", edFiInterventionPrescription.Etag);

            if (edFiInterventionPrescription.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiInterventionPrescription.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiInterventionPrescription.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiInterventionPrescription.Ext, jsonSerializerOptions);
            }
        }
    }
}
