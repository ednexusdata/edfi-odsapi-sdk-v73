// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiInterventionStudy
    /// </summary>
    public partial class EdFiInterventionStudy : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiInterventionStudy" /> class.
        /// </summary>
        /// <param name="interventionStudyIdentificationCode">A unique number or alphanumeric code assigned to an intervention study.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="interventionPrescriptionReference">interventionPrescriptionReference</param>
        /// <param name="deliveryMethodDescriptor">The way in which an intervention was implemented: individual, small group, whole class, or whole school.</param>
        /// <param name="interventionClassDescriptor">The way in which an intervention is used: curriculum, supplement, or practice.</param>
        /// <param name="participants">The number of participants observed in the study.</param>
        /// <param name="id">id</param>
        /// <param name="appropriateGradeLevels">An unordered collection of interventionStudyAppropriateGradeLevels. Grade levels participating in this study.</param>
        /// <param name="appropriateSexes">An unordered collection of interventionStudyAppropriateSexes. Sexes participating in this study. If omitted, considered generally applicable.</param>
        /// <param name="educationContents">An unordered collection of interventionStudyEducationContents. Relates the education content source to the education content.</param>
        /// <param name="interventionEffectivenesses">An unordered collection of interventionStudyInterventionEffectivenesses. Measurement of the effectiveness of the intervention study per diagnosis.</param>
        /// <param name="learningResourceMetadataURIs">An unordered collection of interventionStudyLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</param>
        /// <param name="populationServeds">An unordered collection of interventionStudyPopulationServeds. A subset of students that are the focus of the intervention study.</param>
        /// <param name="stateAbbreviations">An unordered collection of interventionStudyStateAbbreviations. The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.</param>
        /// <param name="uris">An unordered collection of interventionStudyURIs. The URI (typical a URL) pointing to an education content item.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the InterventionStudy entity.</param>
        [JsonConstructor]
        public EdFiInterventionStudy(string interventionStudyIdentificationCode, EdFiEducationOrganizationReference educationOrganizationReference, EdFiInterventionPrescriptionReference interventionPrescriptionReference, string deliveryMethodDescriptor, string interventionClassDescriptor, int participants, Option<string?> id = default, Option<List<EdFiInterventionStudyAppropriateGradeLevel>?> appropriateGradeLevels = default, Option<List<EdFiInterventionStudyAppropriateSex>?> appropriateSexes = default, Option<List<EdFiInterventionStudyEducationContent>?> educationContents = default, Option<List<EdFiInterventionStudyInterventionEffectiveness>?> interventionEffectivenesses = default, Option<List<EdFiInterventionStudyLearningResourceMetadataURI>?> learningResourceMetadataURIs = default, Option<List<EdFiInterventionStudyPopulationServed>?> populationServeds = default, Option<List<EdFiInterventionStudyStateAbbreviation>?> stateAbbreviations = default, Option<List<EdFiInterventionStudyURI>?> uris = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            InterventionStudyIdentificationCode = interventionStudyIdentificationCode;
            EducationOrganizationReference = educationOrganizationReference;
            InterventionPrescriptionReference = interventionPrescriptionReference;
            DeliveryMethodDescriptor = deliveryMethodDescriptor;
            InterventionClassDescriptor = interventionClassDescriptor;
            Participants = participants;
            IdOption = id;
            AppropriateGradeLevelsOption = appropriateGradeLevels;
            AppropriateSexesOption = appropriateSexes;
            EducationContentsOption = educationContents;
            InterventionEffectivenessesOption = interventionEffectivenesses;
            LearningResourceMetadataURIsOption = learningResourceMetadataURIs;
            PopulationServedsOption = populationServeds;
            StateAbbreviationsOption = stateAbbreviations;
            UrisOption = uris;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an intervention study.</value>
        [JsonPropertyName("interventionStudyIdentificationCode")]
        public string InterventionStudyIdentificationCode { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets InterventionPrescriptionReference
        /// </summary>
        [JsonPropertyName("interventionPrescriptionReference")]
        public EdFiInterventionPrescriptionReference InterventionPrescriptionReference { get; set; }

        /// <summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        /// </summary>
        /// <value>The way in which an intervention was implemented: individual, small group, whole class, or whole school.</value>
        [JsonPropertyName("deliveryMethodDescriptor")]
        public string DeliveryMethodDescriptor { get; set; }

        /// <summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        /// </summary>
        /// <value>The way in which an intervention is used: curriculum, supplement, or practice.</value>
        [JsonPropertyName("interventionClassDescriptor")]
        public string InterventionClassDescriptor { get; set; }

        /// <summary>
        /// The number of participants observed in the study.
        /// </summary>
        /// <value>The number of participants observed in the study.</value>
        [JsonPropertyName("participants")]
        public int Participants { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AppropriateGradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionStudyAppropriateGradeLevel>?> AppropriateGradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionStudyAppropriateGradeLevels. Grade levels participating in this study.
        /// </summary>
        /// <value>An unordered collection of interventionStudyAppropriateGradeLevels. Grade levels participating in this study.</value>
        [JsonPropertyName("appropriateGradeLevels")]
        public List<EdFiInterventionStudyAppropriateGradeLevel>? AppropriateGradeLevels { get { return this.AppropriateGradeLevelsOption; } set { this.AppropriateGradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AppropriateSexes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionStudyAppropriateSex>?> AppropriateSexesOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionStudyAppropriateSexes. Sexes participating in this study. If omitted, considered generally applicable.
        /// </summary>
        /// <value>An unordered collection of interventionStudyAppropriateSexes. Sexes participating in this study. If omitted, considered generally applicable.</value>
        [JsonPropertyName("appropriateSexes")]
        public List<EdFiInterventionStudyAppropriateSex>? AppropriateSexes { get { return this.AppropriateSexesOption; } set { this.AppropriateSexesOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationContents
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionStudyEducationContent>?> EducationContentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionStudyEducationContents. Relates the education content source to the education content.
        /// </summary>
        /// <value>An unordered collection of interventionStudyEducationContents. Relates the education content source to the education content.</value>
        [JsonPropertyName("educationContents")]
        public List<EdFiInterventionStudyEducationContent>? EducationContents { get { return this.EducationContentsOption; } set { this.EducationContentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of InterventionEffectivenesses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionStudyInterventionEffectiveness>?> InterventionEffectivenessesOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionStudyInterventionEffectivenesses. Measurement of the effectiveness of the intervention study per diagnosis.
        /// </summary>
        /// <value>An unordered collection of interventionStudyInterventionEffectivenesses. Measurement of the effectiveness of the intervention study per diagnosis.</value>
        [JsonPropertyName("interventionEffectivenesses")]
        public List<EdFiInterventionStudyInterventionEffectiveness>? InterventionEffectivenesses { get { return this.InterventionEffectivenessesOption; } set { this.InterventionEffectivenessesOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningResourceMetadataURIs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionStudyLearningResourceMetadataURI>?> LearningResourceMetadataURIsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionStudyLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        /// </summary>
        /// <value>An unordered collection of interventionStudyLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.</value>
        [JsonPropertyName("learningResourceMetadataURIs")]
        public List<EdFiInterventionStudyLearningResourceMetadataURI>? LearningResourceMetadataURIs { get { return this.LearningResourceMetadataURIsOption; } set { this.LearningResourceMetadataURIsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PopulationServeds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionStudyPopulationServed>?> PopulationServedsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionStudyPopulationServeds. A subset of students that are the focus of the intervention study.
        /// </summary>
        /// <value>An unordered collection of interventionStudyPopulationServeds. A subset of students that are the focus of the intervention study.</value>
        [JsonPropertyName("populationServeds")]
        public List<EdFiInterventionStudyPopulationServed>? PopulationServeds { get { return this.PopulationServedsOption; } set { this.PopulationServedsOption = new(value); } }

        /// <summary>
        /// Used to track the state of StateAbbreviations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionStudyStateAbbreviation>?> StateAbbreviationsOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionStudyStateAbbreviations. The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.
        /// </summary>
        /// <value>An unordered collection of interventionStudyStateAbbreviations. The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.</value>
        [JsonPropertyName("stateAbbreviations")]
        public List<EdFiInterventionStudyStateAbbreviation>? StateAbbreviations { get { return this.StateAbbreviationsOption; } set { this.StateAbbreviationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Uris
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiInterventionStudyURI>?> UrisOption { get; private set; }

        /// <summary>
        /// An unordered collection of interventionStudyURIs. The URI (typical a URL) pointing to an education content item.
        /// </summary>
        /// <value>An unordered collection of interventionStudyURIs. The URI (typical a URL) pointing to an education content item.</value>
        [JsonPropertyName("uris")]
        public List<EdFiInterventionStudyURI>? Uris { get { return this.UrisOption; } set { this.UrisOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the InterventionStudy entity.
        /// </summary>
        /// <value>Extensions to the InterventionStudy entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiInterventionStudy {\n");
            sb.Append("  InterventionStudyIdentificationCode: ").Append(InterventionStudyIdentificationCode).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  InterventionPrescriptionReference: ").Append(InterventionPrescriptionReference).Append("\n");
            sb.Append("  DeliveryMethodDescriptor: ").Append(DeliveryMethodDescriptor).Append("\n");
            sb.Append("  InterventionClassDescriptor: ").Append(InterventionClassDescriptor).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppropriateGradeLevels: ").Append(AppropriateGradeLevels).Append("\n");
            sb.Append("  AppropriateSexes: ").Append(AppropriateSexes).Append("\n");
            sb.Append("  EducationContents: ").Append(EducationContents).Append("\n");
            sb.Append("  InterventionEffectivenesses: ").Append(InterventionEffectivenesses).Append("\n");
            sb.Append("  LearningResourceMetadataURIs: ").Append(LearningResourceMetadataURIs).Append("\n");
            sb.Append("  PopulationServeds: ").Append(PopulationServeds).Append("\n");
            sb.Append("  StateAbbreviations: ").Append(StateAbbreviations).Append("\n");
            sb.Append("  Uris: ").Append(Uris).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InterventionStudyIdentificationCode (string) maxLength
            if (this.InterventionStudyIdentificationCode != null && this.InterventionStudyIdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for InterventionStudyIdentificationCode, length must be less than 60.", new [] { "InterventionStudyIdentificationCode" });
            }

            // DeliveryMethodDescriptor (string) maxLength
            if (this.DeliveryMethodDescriptor != null && this.DeliveryMethodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DeliveryMethodDescriptor, length must be less than 306.", new [] { "DeliveryMethodDescriptor" });
            }

            // InterventionClassDescriptor (string) maxLength
            if (this.InterventionClassDescriptor != null && this.InterventionClassDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for InterventionClassDescriptor, length must be less than 306.", new [] { "InterventionClassDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiInterventionStudy" />
    /// </summary>
    public class EdFiInterventionStudyJsonConverter : JsonConverter<EdFiInterventionStudy>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiInterventionStudy" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiInterventionStudy Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> interventionStudyIdentificationCode = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiInterventionPrescriptionReference?> interventionPrescriptionReference = default;
            Option<string?> deliveryMethodDescriptor = default;
            Option<string?> interventionClassDescriptor = default;
            Option<int?> participants = default;
            Option<string?> id = default;
            Option<List<EdFiInterventionStudyAppropriateGradeLevel>?> appropriateGradeLevels = default;
            Option<List<EdFiInterventionStudyAppropriateSex>?> appropriateSexes = default;
            Option<List<EdFiInterventionStudyEducationContent>?> educationContents = default;
            Option<List<EdFiInterventionStudyInterventionEffectiveness>?> interventionEffectivenesses = default;
            Option<List<EdFiInterventionStudyLearningResourceMetadataURI>?> learningResourceMetadataURIs = default;
            Option<List<EdFiInterventionStudyPopulationServed>?> populationServeds = default;
            Option<List<EdFiInterventionStudyStateAbbreviation>?> stateAbbreviations = default;
            Option<List<EdFiInterventionStudyURI>?> uris = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "interventionStudyIdentificationCode":
                            interventionStudyIdentificationCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "interventionPrescriptionReference":
                            interventionPrescriptionReference = new Option<EdFiInterventionPrescriptionReference?>(JsonSerializer.Deserialize<EdFiInterventionPrescriptionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "deliveryMethodDescriptor":
                            deliveryMethodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "interventionClassDescriptor":
                            interventionClassDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "participants":
                            participants = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "appropriateGradeLevels":
                            appropriateGradeLevels = new Option<List<EdFiInterventionStudyAppropriateGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiInterventionStudyAppropriateGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "appropriateSexes":
                            appropriateSexes = new Option<List<EdFiInterventionStudyAppropriateSex>?>(JsonSerializer.Deserialize<List<EdFiInterventionStudyAppropriateSex>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "educationContents":
                            educationContents = new Option<List<EdFiInterventionStudyEducationContent>?>(JsonSerializer.Deserialize<List<EdFiInterventionStudyEducationContent>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "interventionEffectivenesses":
                            interventionEffectivenesses = new Option<List<EdFiInterventionStudyInterventionEffectiveness>?>(JsonSerializer.Deserialize<List<EdFiInterventionStudyInterventionEffectiveness>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "learningResourceMetadataURIs":
                            learningResourceMetadataURIs = new Option<List<EdFiInterventionStudyLearningResourceMetadataURI>?>(JsonSerializer.Deserialize<List<EdFiInterventionStudyLearningResourceMetadataURI>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "populationServeds":
                            populationServeds = new Option<List<EdFiInterventionStudyPopulationServed>?>(JsonSerializer.Deserialize<List<EdFiInterventionStudyPopulationServed>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "stateAbbreviations":
                            stateAbbreviations = new Option<List<EdFiInterventionStudyStateAbbreviation>?>(JsonSerializer.Deserialize<List<EdFiInterventionStudyStateAbbreviation>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "uris":
                            uris = new Option<List<EdFiInterventionStudyURI>?>(JsonSerializer.Deserialize<List<EdFiInterventionStudyURI>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!interventionStudyIdentificationCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiInterventionStudy.", nameof(interventionStudyIdentificationCode));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiInterventionStudy.", nameof(educationOrganizationReference));

            if (!interventionPrescriptionReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiInterventionStudy.", nameof(interventionPrescriptionReference));

            if (!deliveryMethodDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiInterventionStudy.", nameof(deliveryMethodDescriptor));

            if (!interventionClassDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiInterventionStudy.", nameof(interventionClassDescriptor));

            if (!participants.IsSet)
                throw new ArgumentException("Property is required for class EdFiInterventionStudy.", nameof(participants));

            if (interventionStudyIdentificationCode.IsSet && interventionStudyIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(interventionStudyIdentificationCode), "Property is not nullable for class EdFiInterventionStudy.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiInterventionStudy.");

            if (interventionPrescriptionReference.IsSet && interventionPrescriptionReference.Value == null)
                throw new ArgumentNullException(nameof(interventionPrescriptionReference), "Property is not nullable for class EdFiInterventionStudy.");

            if (deliveryMethodDescriptor.IsSet && deliveryMethodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(deliveryMethodDescriptor), "Property is not nullable for class EdFiInterventionStudy.");

            if (interventionClassDescriptor.IsSet && interventionClassDescriptor.Value == null)
                throw new ArgumentNullException(nameof(interventionClassDescriptor), "Property is not nullable for class EdFiInterventionStudy.");

            if (participants.IsSet && participants.Value == null)
                throw new ArgumentNullException(nameof(participants), "Property is not nullable for class EdFiInterventionStudy.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiInterventionStudy.");

            if (appropriateGradeLevels.IsSet && appropriateGradeLevels.Value == null)
                throw new ArgumentNullException(nameof(appropriateGradeLevels), "Property is not nullable for class EdFiInterventionStudy.");

            if (appropriateSexes.IsSet && appropriateSexes.Value == null)
                throw new ArgumentNullException(nameof(appropriateSexes), "Property is not nullable for class EdFiInterventionStudy.");

            if (educationContents.IsSet && educationContents.Value == null)
                throw new ArgumentNullException(nameof(educationContents), "Property is not nullable for class EdFiInterventionStudy.");

            if (interventionEffectivenesses.IsSet && interventionEffectivenesses.Value == null)
                throw new ArgumentNullException(nameof(interventionEffectivenesses), "Property is not nullable for class EdFiInterventionStudy.");

            if (learningResourceMetadataURIs.IsSet && learningResourceMetadataURIs.Value == null)
                throw new ArgumentNullException(nameof(learningResourceMetadataURIs), "Property is not nullable for class EdFiInterventionStudy.");

            if (populationServeds.IsSet && populationServeds.Value == null)
                throw new ArgumentNullException(nameof(populationServeds), "Property is not nullable for class EdFiInterventionStudy.");

            if (stateAbbreviations.IsSet && stateAbbreviations.Value == null)
                throw new ArgumentNullException(nameof(stateAbbreviations), "Property is not nullable for class EdFiInterventionStudy.");

            if (uris.IsSet && uris.Value == null)
                throw new ArgumentNullException(nameof(uris), "Property is not nullable for class EdFiInterventionStudy.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiInterventionStudy.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiInterventionStudy.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiInterventionStudy.");

            return new EdFiInterventionStudy(interventionStudyIdentificationCode.Value!, educationOrganizationReference.Value!, interventionPrescriptionReference.Value!, deliveryMethodDescriptor.Value!, interventionClassDescriptor.Value!, participants.Value!.Value!, id, appropriateGradeLevels, appropriateSexes, educationContents, interventionEffectivenesses, learningResourceMetadataURIs, populationServeds, stateAbbreviations, uris, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiInterventionStudy" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiInterventionStudy"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiInterventionStudy edFiInterventionStudy, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiInterventionStudy, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiInterventionStudy" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiInterventionStudy"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiInterventionStudy edFiInterventionStudy, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiInterventionStudy.InterventionStudyIdentificationCode == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.InterventionStudyIdentificationCode), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.EducationOrganizationReference), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.InterventionPrescriptionReference == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.InterventionPrescriptionReference), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.DeliveryMethodDescriptor == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.DeliveryMethodDescriptor), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.InterventionClassDescriptor == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.InterventionClassDescriptor), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.IdOption.IsSet && edFiInterventionStudy.Id == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.Id), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.AppropriateGradeLevelsOption.IsSet && edFiInterventionStudy.AppropriateGradeLevels == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.AppropriateGradeLevels), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.AppropriateSexesOption.IsSet && edFiInterventionStudy.AppropriateSexes == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.AppropriateSexes), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.EducationContentsOption.IsSet && edFiInterventionStudy.EducationContents == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.EducationContents), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.InterventionEffectivenessesOption.IsSet && edFiInterventionStudy.InterventionEffectivenesses == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.InterventionEffectivenesses), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.LearningResourceMetadataURIsOption.IsSet && edFiInterventionStudy.LearningResourceMetadataURIs == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.LearningResourceMetadataURIs), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.PopulationServedsOption.IsSet && edFiInterventionStudy.PopulationServeds == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.PopulationServeds), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.StateAbbreviationsOption.IsSet && edFiInterventionStudy.StateAbbreviations == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.StateAbbreviations), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.UrisOption.IsSet && edFiInterventionStudy.Uris == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.Uris), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.EtagOption.IsSet && edFiInterventionStudy.Etag == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.Etag), "Property is required for class EdFiInterventionStudy.");

            if (edFiInterventionStudy.ExtOption.IsSet && edFiInterventionStudy.Ext == null)
                throw new ArgumentNullException(nameof(edFiInterventionStudy.Ext), "Property is required for class EdFiInterventionStudy.");

            writer.WriteString("interventionStudyIdentificationCode", edFiInterventionStudy.InterventionStudyIdentificationCode);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiInterventionStudy.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("interventionPrescriptionReference");
            JsonSerializer.Serialize(writer, edFiInterventionStudy.InterventionPrescriptionReference, jsonSerializerOptions);
            writer.WriteString("deliveryMethodDescriptor", edFiInterventionStudy.DeliveryMethodDescriptor);

            writer.WriteString("interventionClassDescriptor", edFiInterventionStudy.InterventionClassDescriptor);

            writer.WriteNumber("participants", edFiInterventionStudy.Participants);

            if (edFiInterventionStudy.IdOption.IsSet)
                writer.WriteString("id", edFiInterventionStudy.Id);

            if (edFiInterventionStudy.AppropriateGradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("appropriateGradeLevels");
                JsonSerializer.Serialize(writer, edFiInterventionStudy.AppropriateGradeLevels, jsonSerializerOptions);
            }
            if (edFiInterventionStudy.AppropriateSexesOption.IsSet)
            {
                writer.WritePropertyName("appropriateSexes");
                JsonSerializer.Serialize(writer, edFiInterventionStudy.AppropriateSexes, jsonSerializerOptions);
            }
            if (edFiInterventionStudy.EducationContentsOption.IsSet)
            {
                writer.WritePropertyName("educationContents");
                JsonSerializer.Serialize(writer, edFiInterventionStudy.EducationContents, jsonSerializerOptions);
            }
            if (edFiInterventionStudy.InterventionEffectivenessesOption.IsSet)
            {
                writer.WritePropertyName("interventionEffectivenesses");
                JsonSerializer.Serialize(writer, edFiInterventionStudy.InterventionEffectivenesses, jsonSerializerOptions);
            }
            if (edFiInterventionStudy.LearningResourceMetadataURIsOption.IsSet)
            {
                writer.WritePropertyName("learningResourceMetadataURIs");
                JsonSerializer.Serialize(writer, edFiInterventionStudy.LearningResourceMetadataURIs, jsonSerializerOptions);
            }
            if (edFiInterventionStudy.PopulationServedsOption.IsSet)
            {
                writer.WritePropertyName("populationServeds");
                JsonSerializer.Serialize(writer, edFiInterventionStudy.PopulationServeds, jsonSerializerOptions);
            }
            if (edFiInterventionStudy.StateAbbreviationsOption.IsSet)
            {
                writer.WritePropertyName("stateAbbreviations");
                JsonSerializer.Serialize(writer, edFiInterventionStudy.StateAbbreviations, jsonSerializerOptions);
            }
            if (edFiInterventionStudy.UrisOption.IsSet)
            {
                writer.WritePropertyName("uris");
                JsonSerializer.Serialize(writer, edFiInterventionStudy.Uris, jsonSerializerOptions);
            }
            if (edFiInterventionStudy.EtagOption.IsSet)
                writer.WriteString("_etag", edFiInterventionStudy.Etag);

            if (edFiInterventionStudy.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiInterventionStudy.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiInterventionStudy.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiInterventionStudy.Ext, jsonSerializerOptions);
            }
        }
    }
}
