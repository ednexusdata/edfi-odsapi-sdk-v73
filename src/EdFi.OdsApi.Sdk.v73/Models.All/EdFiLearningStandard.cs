// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiLearningStandard
    /// </summary>
    public partial class EdFiLearningStandard : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningStandard" /> class.
        /// </summary>
        /// <param name="academicSubjects">An unordered collection of learningStandardAcademicSubjects. Subject area for the learning standard.</param>
        /// <param name="gradeLevels">An unordered collection of learningStandardGradeLevels. The grade levels for the specific learning standard.</param>
        /// <param name="learningStandardId">The identifier for the specific learning standard (e.g., 111.15.3.1.A).</param>
        /// <param name="contentStandard">contentStandard</param>
        /// <param name="description">The text of the statement. The textual content that either describes a specific competency such as \&quot;Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\&quot; or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \&quot;Understand and apply the Pythagorean Theorem,\&quot; or \&quot;Geometry\&quot;.</param>
        /// <param name="namespace">The namespace of the organization or entity who governs the standard. It is recommended the namespaces observe a URI format and begin with a domain name under the governing organization or entity control.</param>
        /// <param name="id">id</param>
        /// <param name="parentLearningStandardReference">parentLearningStandardReference</param>
        /// <param name="courseTitle">The official course title with which this learning standard is associated.</param>
        /// <param name="identificationCodes">An unordered collection of learningStandardIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.</param>
        /// <param name="learningStandardCategoryDescriptor">An additional classification of the type of a specific learning standard.</param>
        /// <param name="learningStandardItemCode">A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).</param>
        /// <param name="learningStandardScopeDescriptor">Signals the scope of usage the standard. Does not necessarily relate the standard to the governing body.</param>
        /// <param name="successCriteria">One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning standard.</param>
        /// <param name="uri">An unambiguous reference to the statement using a network-resolvable URI.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the LearningStandard entity.</param>
        [JsonConstructor]
        public EdFiLearningStandard(List<EdFiLearningStandardAcademicSubject> academicSubjects, List<EdFiLearningStandardGradeLevel> gradeLevels, string learningStandardId, EdFiLearningStandardContentStandard contentStandard, string description, string @namespace, Option<string?> id = default, Option<EdFiLearningStandardReference?> parentLearningStandardReference = default, Option<string?> courseTitle = default, Option<List<EdFiLearningStandardIdentificationCode>?> identificationCodes = default, Option<string?> learningStandardCategoryDescriptor = default, Option<string?> learningStandardItemCode = default, Option<string?> learningStandardScopeDescriptor = default, Option<string?> successCriteria = default, Option<string?> uri = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            AcademicSubjects = academicSubjects;
            GradeLevels = gradeLevels;
            LearningStandardId = learningStandardId;
            ContentStandard = contentStandard;
            Description = description;
            Namespace = @namespace;
            IdOption = id;
            ParentLearningStandardReferenceOption = parentLearningStandardReference;
            CourseTitleOption = courseTitle;
            IdentificationCodesOption = identificationCodes;
            LearningStandardCategoryDescriptorOption = learningStandardCategoryDescriptor;
            LearningStandardItemCodeOption = learningStandardItemCode;
            LearningStandardScopeDescriptorOption = learningStandardScopeDescriptor;
            SuccessCriteriaOption = successCriteria;
            UriOption = uri;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An unordered collection of learningStandardAcademicSubjects. Subject area for the learning standard.
        /// </summary>
        /// <value>An unordered collection of learningStandardAcademicSubjects. Subject area for the learning standard.</value>
        [JsonPropertyName("academicSubjects")]
        public List<EdFiLearningStandardAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// An unordered collection of learningStandardGradeLevels. The grade levels for the specific learning standard.
        /// </summary>
        /// <value>An unordered collection of learningStandardGradeLevels. The grade levels for the specific learning standard.</value>
        [JsonPropertyName("gradeLevels")]
        public List<EdFiLearningStandardGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        /// </summary>
        /// <value>The identifier for the specific learning standard (e.g., 111.15.3.1.A).</value>
        [JsonPropertyName("learningStandardId")]
        public string LearningStandardId { get; set; }

        /// <summary>
        /// Gets or Sets ContentStandard
        /// </summary>
        [JsonPropertyName("contentStandard")]
        public EdFiLearningStandardContentStandard ContentStandard { get; set; }

        /// <summary>
        /// The text of the statement. The textual content that either describes a specific competency such as \&quot;Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\&quot; or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \&quot;Understand and apply the Pythagorean Theorem,\&quot; or \&quot;Geometry\&quot;.
        /// </summary>
        /// <value>The text of the statement. The textual content that either describes a specific competency such as \&quot;Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\&quot; or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \&quot;Understand and apply the Pythagorean Theorem,\&quot; or \&quot;Geometry\&quot;.</value>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The namespace of the organization or entity who governs the standard. It is recommended the namespaces observe a URI format and begin with a domain name under the governing organization or entity control.
        /// </summary>
        /// <value>The namespace of the organization or entity who governs the standard. It is recommended the namespaces observe a URI format and begin with a domain name under the governing organization or entity control.</value>
        [JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentLearningStandardReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiLearningStandardReference?> ParentLearningStandardReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentLearningStandardReference
        /// </summary>
        [JsonPropertyName("parentLearningStandardReference")]
        public EdFiLearningStandardReference? ParentLearningStandardReference { get { return this.ParentLearningStandardReferenceOption; } set { this.ParentLearningStandardReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of CourseTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CourseTitleOption { get; private set; }

        /// <summary>
        /// The official course title with which this learning standard is associated.
        /// </summary>
        /// <value>The official course title with which this learning standard is associated.</value>
        [JsonPropertyName("courseTitle")]
        public string? CourseTitle { get { return this.CourseTitleOption; } set { this.CourseTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdentificationCodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiLearningStandardIdentificationCode>?> IdentificationCodesOption { get; private set; }

        /// <summary>
        /// An unordered collection of learningStandardIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.
        /// </summary>
        /// <value>An unordered collection of learningStandardIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.</value>
        [JsonPropertyName("identificationCodes")]
        public List<EdFiLearningStandardIdentificationCode>? IdentificationCodes { get { return this.IdentificationCodesOption; } set { this.IdentificationCodesOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandardCategoryDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LearningStandardCategoryDescriptorOption { get; private set; }

        /// <summary>
        /// An additional classification of the type of a specific learning standard.
        /// </summary>
        /// <value>An additional classification of the type of a specific learning standard.</value>
        [JsonPropertyName("learningStandardCategoryDescriptor")]
        public string? LearningStandardCategoryDescriptor { get { return this.LearningStandardCategoryDescriptorOption; } set { this.LearningStandardCategoryDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandardItemCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LearningStandardItemCodeOption { get; private set; }

        /// <summary>
        /// A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).
        /// </summary>
        /// <value>A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).</value>
        [JsonPropertyName("learningStandardItemCode")]
        public string? LearningStandardItemCode { get { return this.LearningStandardItemCodeOption; } set { this.LearningStandardItemCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandardScopeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LearningStandardScopeDescriptorOption { get; private set; }

        /// <summary>
        /// Signals the scope of usage the standard. Does not necessarily relate the standard to the governing body.
        /// </summary>
        /// <value>Signals the scope of usage the standard. Does not necessarily relate the standard to the governing body.</value>
        [JsonPropertyName("learningStandardScopeDescriptor")]
        public string? LearningStandardScopeDescriptor { get { return this.LearningStandardScopeDescriptorOption; } set { this.LearningStandardScopeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of SuccessCriteria
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SuccessCriteriaOption { get; private set; }

        /// <summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning standard.
        /// </summary>
        /// <value>One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning standard.</value>
        [JsonPropertyName("successCriteria")]
        public string? SuccessCriteria { get { return this.SuccessCriteriaOption; } set { this.SuccessCriteriaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Uri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UriOption { get; private set; }

        /// <summary>
        /// An unambiguous reference to the statement using a network-resolvable URI.
        /// </summary>
        /// <value>An unambiguous reference to the statement using a network-resolvable URI.</value>
        [JsonPropertyName("uri")]
        public string? Uri { get { return this.UriOption; } set { this.UriOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the LearningStandard entity.
        /// </summary>
        /// <value>Extensions to the LearningStandard entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLearningStandard {\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  LearningStandardId: ").Append(LearningStandardId).Append("\n");
            sb.Append("  ContentStandard: ").Append(ContentStandard).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentLearningStandardReference: ").Append(ParentLearningStandardReference).Append("\n");
            sb.Append("  CourseTitle: ").Append(CourseTitle).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  LearningStandardCategoryDescriptor: ").Append(LearningStandardCategoryDescriptor).Append("\n");
            sb.Append("  LearningStandardItemCode: ").Append(LearningStandardItemCode).Append("\n");
            sb.Append("  LearningStandardScopeDescriptor: ").Append(LearningStandardScopeDescriptor).Append("\n");
            sb.Append("  SuccessCriteria: ").Append(SuccessCriteria).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LearningStandardId (string) maxLength
            if (this.LearningStandardId != null && this.LearningStandardId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LearningStandardId, length must be less than 60.", new [] { "LearningStandardId" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // CourseTitle (string) maxLength
            if (this.CourseTitle != null && this.CourseTitle.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CourseTitle, length must be less than 60.", new [] { "CourseTitle" });
            }

            // LearningStandardCategoryDescriptor (string) maxLength
            if (this.LearningStandardCategoryDescriptor != null && this.LearningStandardCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LearningStandardCategoryDescriptor, length must be less than 306.", new [] { "LearningStandardCategoryDescriptor" });
            }

            // LearningStandardItemCode (string) maxLength
            if (this.LearningStandardItemCode != null && this.LearningStandardItemCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LearningStandardItemCode, length must be less than 60.", new [] { "LearningStandardItemCode" });
            }

            // LearningStandardScopeDescriptor (string) maxLength
            if (this.LearningStandardScopeDescriptor != null && this.LearningStandardScopeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LearningStandardScopeDescriptor, length must be less than 306.", new [] { "LearningStandardScopeDescriptor" });
            }

            // SuccessCriteria (string) maxLength
            if (this.SuccessCriteria != null && this.SuccessCriteria.Length > 150)
            {
                yield return new ValidationResult("Invalid value for SuccessCriteria, length must be less than 150.", new [] { "SuccessCriteria" });
            }

            // Uri (string) maxLength
            if (this.Uri != null && this.Uri.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Uri, length must be less than 255.", new [] { "Uri" });
            }

            // Uri (string) minLength
            if (this.Uri != null && this.Uri.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Uri, length must be greater than 5.", new [] { "Uri" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiLearningStandard" />
    /// </summary>
    public class EdFiLearningStandardJsonConverter : JsonConverter<EdFiLearningStandard>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiLearningStandard" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiLearningStandard Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EdFiLearningStandardAcademicSubject>?> academicSubjects = default;
            Option<List<EdFiLearningStandardGradeLevel>?> gradeLevels = default;
            Option<string?> learningStandardId = default;
            Option<EdFiLearningStandardContentStandard?> contentStandard = default;
            Option<string?> description = default;
            Option<string?> varNamespace = default;
            Option<string?> id = default;
            Option<EdFiLearningStandardReference?> parentLearningStandardReference = default;
            Option<string?> courseTitle = default;
            Option<List<EdFiLearningStandardIdentificationCode>?> identificationCodes = default;
            Option<string?> learningStandardCategoryDescriptor = default;
            Option<string?> learningStandardItemCode = default;
            Option<string?> learningStandardScopeDescriptor = default;
            Option<string?> successCriteria = default;
            Option<string?> uri = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "academicSubjects":
                            academicSubjects = new Option<List<EdFiLearningStandardAcademicSubject>?>(JsonSerializer.Deserialize<List<EdFiLearningStandardAcademicSubject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "gradeLevels":
                            gradeLevels = new Option<List<EdFiLearningStandardGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiLearningStandardGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "learningStandardId":
                            learningStandardId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contentStandard":
                            contentStandard = new Option<EdFiLearningStandardContentStandard?>(JsonSerializer.Deserialize<EdFiLearningStandardContentStandard>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parentLearningStandardReference":
                            parentLearningStandardReference = new Option<EdFiLearningStandardReference?>(JsonSerializer.Deserialize<EdFiLearningStandardReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "courseTitle":
                            courseTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "identificationCodes":
                            identificationCodes = new Option<List<EdFiLearningStandardIdentificationCode>?>(JsonSerializer.Deserialize<List<EdFiLearningStandardIdentificationCode>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "learningStandardCategoryDescriptor":
                            learningStandardCategoryDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "learningStandardItemCode":
                            learningStandardItemCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "learningStandardScopeDescriptor":
                            learningStandardScopeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "successCriteria":
                            successCriteria = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "uri":
                            uri = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!academicSubjects.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningStandard.", nameof(academicSubjects));

            if (!gradeLevels.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningStandard.", nameof(gradeLevels));

            if (!learningStandardId.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningStandard.", nameof(learningStandardId));

            if (!contentStandard.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningStandard.", nameof(contentStandard));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningStandard.", nameof(description));

            if (!varNamespace.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningStandard.", nameof(varNamespace));

            if (academicSubjects.IsSet && academicSubjects.Value == null)
                throw new ArgumentNullException(nameof(academicSubjects), "Property is not nullable for class EdFiLearningStandard.");

            if (gradeLevels.IsSet && gradeLevels.Value == null)
                throw new ArgumentNullException(nameof(gradeLevels), "Property is not nullable for class EdFiLearningStandard.");

            if (learningStandardId.IsSet && learningStandardId.Value == null)
                throw new ArgumentNullException(nameof(learningStandardId), "Property is not nullable for class EdFiLearningStandard.");

            if (contentStandard.IsSet && contentStandard.Value == null)
                throw new ArgumentNullException(nameof(contentStandard), "Property is not nullable for class EdFiLearningStandard.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class EdFiLearningStandard.");

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class EdFiLearningStandard.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiLearningStandard.");

            if (parentLearningStandardReference.IsSet && parentLearningStandardReference.Value == null)
                throw new ArgumentNullException(nameof(parentLearningStandardReference), "Property is not nullable for class EdFiLearningStandard.");

            if (identificationCodes.IsSet && identificationCodes.Value == null)
                throw new ArgumentNullException(nameof(identificationCodes), "Property is not nullable for class EdFiLearningStandard.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiLearningStandard.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiLearningStandard.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiLearningStandard.");

            return new EdFiLearningStandard(academicSubjects.Value!, gradeLevels.Value!, learningStandardId.Value!, contentStandard.Value!, description.Value!, varNamespace.Value!, id, parentLearningStandardReference, courseTitle, identificationCodes, learningStandardCategoryDescriptor, learningStandardItemCode, learningStandardScopeDescriptor, successCriteria, uri, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiLearningStandard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLearningStandard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiLearningStandard edFiLearningStandard, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiLearningStandard, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiLearningStandard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLearningStandard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiLearningStandard edFiLearningStandard, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiLearningStandard.AcademicSubjects == null)
                throw new ArgumentNullException(nameof(edFiLearningStandard.AcademicSubjects), "Property is required for class EdFiLearningStandard.");

            if (edFiLearningStandard.GradeLevels == null)
                throw new ArgumentNullException(nameof(edFiLearningStandard.GradeLevels), "Property is required for class EdFiLearningStandard.");

            if (edFiLearningStandard.LearningStandardId == null)
                throw new ArgumentNullException(nameof(edFiLearningStandard.LearningStandardId), "Property is required for class EdFiLearningStandard.");

            if (edFiLearningStandard.ContentStandard == null)
                throw new ArgumentNullException(nameof(edFiLearningStandard.ContentStandard), "Property is required for class EdFiLearningStandard.");

            if (edFiLearningStandard.Description == null)
                throw new ArgumentNullException(nameof(edFiLearningStandard.Description), "Property is required for class EdFiLearningStandard.");

            if (edFiLearningStandard.Namespace == null)
                throw new ArgumentNullException(nameof(edFiLearningStandard.Namespace), "Property is required for class EdFiLearningStandard.");

            if (edFiLearningStandard.IdOption.IsSet && edFiLearningStandard.Id == null)
                throw new ArgumentNullException(nameof(edFiLearningStandard.Id), "Property is required for class EdFiLearningStandard.");

            if (edFiLearningStandard.ParentLearningStandardReferenceOption.IsSet && edFiLearningStandard.ParentLearningStandardReference == null)
                throw new ArgumentNullException(nameof(edFiLearningStandard.ParentLearningStandardReference), "Property is required for class EdFiLearningStandard.");

            if (edFiLearningStandard.IdentificationCodesOption.IsSet && edFiLearningStandard.IdentificationCodes == null)
                throw new ArgumentNullException(nameof(edFiLearningStandard.IdentificationCodes), "Property is required for class EdFiLearningStandard.");

            if (edFiLearningStandard.EtagOption.IsSet && edFiLearningStandard.Etag == null)
                throw new ArgumentNullException(nameof(edFiLearningStandard.Etag), "Property is required for class EdFiLearningStandard.");

            if (edFiLearningStandard.ExtOption.IsSet && edFiLearningStandard.Ext == null)
                throw new ArgumentNullException(nameof(edFiLearningStandard.Ext), "Property is required for class EdFiLearningStandard.");

            writer.WritePropertyName("academicSubjects");
            JsonSerializer.Serialize(writer, edFiLearningStandard.AcademicSubjects, jsonSerializerOptions);
            writer.WritePropertyName("gradeLevels");
            JsonSerializer.Serialize(writer, edFiLearningStandard.GradeLevels, jsonSerializerOptions);
            writer.WriteString("learningStandardId", edFiLearningStandard.LearningStandardId);

            writer.WritePropertyName("contentStandard");
            JsonSerializer.Serialize(writer, edFiLearningStandard.ContentStandard, jsonSerializerOptions);
            writer.WriteString("description", edFiLearningStandard.Description);

            writer.WriteString("namespace", edFiLearningStandard.Namespace);

            if (edFiLearningStandard.IdOption.IsSet)
                writer.WriteString("id", edFiLearningStandard.Id);

            if (edFiLearningStandard.ParentLearningStandardReferenceOption.IsSet)
            {
                writer.WritePropertyName("parentLearningStandardReference");
                JsonSerializer.Serialize(writer, edFiLearningStandard.ParentLearningStandardReference, jsonSerializerOptions);
            }
            if (edFiLearningStandard.CourseTitleOption.IsSet)
                if (edFiLearningStandard.CourseTitleOption.Value != null)
                    writer.WriteString("courseTitle", edFiLearningStandard.CourseTitle);
                else
                    writer.WriteNull("courseTitle");

            if (edFiLearningStandard.IdentificationCodesOption.IsSet)
            {
                writer.WritePropertyName("identificationCodes");
                JsonSerializer.Serialize(writer, edFiLearningStandard.IdentificationCodes, jsonSerializerOptions);
            }
            if (edFiLearningStandard.LearningStandardCategoryDescriptorOption.IsSet)
                if (edFiLearningStandard.LearningStandardCategoryDescriptorOption.Value != null)
                    writer.WriteString("learningStandardCategoryDescriptor", edFiLearningStandard.LearningStandardCategoryDescriptor);
                else
                    writer.WriteNull("learningStandardCategoryDescriptor");

            if (edFiLearningStandard.LearningStandardItemCodeOption.IsSet)
                if (edFiLearningStandard.LearningStandardItemCodeOption.Value != null)
                    writer.WriteString("learningStandardItemCode", edFiLearningStandard.LearningStandardItemCode);
                else
                    writer.WriteNull("learningStandardItemCode");

            if (edFiLearningStandard.LearningStandardScopeDescriptorOption.IsSet)
                if (edFiLearningStandard.LearningStandardScopeDescriptorOption.Value != null)
                    writer.WriteString("learningStandardScopeDescriptor", edFiLearningStandard.LearningStandardScopeDescriptor);
                else
                    writer.WriteNull("learningStandardScopeDescriptor");

            if (edFiLearningStandard.SuccessCriteriaOption.IsSet)
                if (edFiLearningStandard.SuccessCriteriaOption.Value != null)
                    writer.WriteString("successCriteria", edFiLearningStandard.SuccessCriteria);
                else
                    writer.WriteNull("successCriteria");

            if (edFiLearningStandard.UriOption.IsSet)
                if (edFiLearningStandard.UriOption.Value != null)
                    writer.WriteString("uri", edFiLearningStandard.Uri);
                else
                    writer.WriteNull("uri");

            if (edFiLearningStandard.EtagOption.IsSet)
                writer.WriteString("_etag", edFiLearningStandard.Etag);

            if (edFiLearningStandard.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiLearningStandard.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiLearningStandard.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiLearningStandard.Ext, jsonSerializerOptions);
            }
        }
    }
}
