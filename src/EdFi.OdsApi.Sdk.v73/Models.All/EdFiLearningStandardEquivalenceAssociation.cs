// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiLearningStandardEquivalenceAssociation
    /// </summary>
    public partial class EdFiLearningStandardEquivalenceAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningStandardEquivalenceAssociation" /> class.
        /// </summary>
        /// <param name="namespace">The namespace of the organization that has created and owns the association.</param>
        /// <param name="sourceLearningStandardReference">sourceLearningStandardReference</param>
        /// <param name="targetLearningStandardReference">targetLearningStandardReference</param>
        /// <param name="id">id</param>
        /// <param name="effectiveDate">The date that the association is considered to be applicable or effective.</param>
        /// <param name="learningStandardEquivalenceStrengthDescription">Captures supplemental information on the relationship. Recommended for use only when the match is partial.</param>
        /// <param name="learningStandardEquivalenceStrengthDescriptor">A measure that indicates the strength or quality of the equivalence relationship.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the LearningStandardEquivalenceAssociation entity.</param>
        [JsonConstructor]
        public EdFiLearningStandardEquivalenceAssociation(string @namespace, EdFiLearningStandardReference sourceLearningStandardReference, EdFiLearningStandardReference targetLearningStandardReference, Option<string?> id = default, Option<DateOnly?> effectiveDate = default, Option<string?> learningStandardEquivalenceStrengthDescription = default, Option<string?> learningStandardEquivalenceStrengthDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            Namespace = @namespace;
            SourceLearningStandardReference = sourceLearningStandardReference;
            TargetLearningStandardReference = targetLearningStandardReference;
            IdOption = id;
            EffectiveDateOption = effectiveDate;
            LearningStandardEquivalenceStrengthDescriptionOption = learningStandardEquivalenceStrengthDescription;
            LearningStandardEquivalenceStrengthDescriptorOption = learningStandardEquivalenceStrengthDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The namespace of the organization that has created and owns the association.
        /// </summary>
        /// <value>The namespace of the organization that has created and owns the association.</value>
        [JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// Gets or Sets SourceLearningStandardReference
        /// </summary>
        [JsonPropertyName("sourceLearningStandardReference")]
        public EdFiLearningStandardReference SourceLearningStandardReference { get; set; }

        /// <summary>
        /// Gets or Sets TargetLearningStandardReference
        /// </summary>
        [JsonPropertyName("targetLearningStandardReference")]
        public EdFiLearningStandardReference TargetLearningStandardReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EffectiveDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EffectiveDateOption { get; private set; }

        /// <summary>
        /// The date that the association is considered to be applicable or effective.
        /// </summary>
        /// <value>The date that the association is considered to be applicable or effective.</value>
        [JsonPropertyName("effectiveDate")]
        public DateOnly? EffectiveDate { get { return this.EffectiveDateOption; } set { this.EffectiveDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandardEquivalenceStrengthDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LearningStandardEquivalenceStrengthDescriptionOption { get; private set; }

        /// <summary>
        /// Captures supplemental information on the relationship. Recommended for use only when the match is partial.
        /// </summary>
        /// <value>Captures supplemental information on the relationship. Recommended for use only when the match is partial.</value>
        [JsonPropertyName("learningStandardEquivalenceStrengthDescription")]
        public string? LearningStandardEquivalenceStrengthDescription { get { return this.LearningStandardEquivalenceStrengthDescriptionOption; } set { this.LearningStandardEquivalenceStrengthDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandardEquivalenceStrengthDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LearningStandardEquivalenceStrengthDescriptorOption { get; private set; }

        /// <summary>
        /// A measure that indicates the strength or quality of the equivalence relationship.
        /// </summary>
        /// <value>A measure that indicates the strength or quality of the equivalence relationship.</value>
        [JsonPropertyName("learningStandardEquivalenceStrengthDescriptor")]
        public string? LearningStandardEquivalenceStrengthDescriptor { get { return this.LearningStandardEquivalenceStrengthDescriptorOption; } set { this.LearningStandardEquivalenceStrengthDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the LearningStandardEquivalenceAssociation entity.
        /// </summary>
        /// <value>Extensions to the LearningStandardEquivalenceAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLearningStandardEquivalenceAssociation {\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  SourceLearningStandardReference: ").Append(SourceLearningStandardReference).Append("\n");
            sb.Append("  TargetLearningStandardReference: ").Append(TargetLearningStandardReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  LearningStandardEquivalenceStrengthDescription: ").Append(LearningStandardEquivalenceStrengthDescription).Append("\n");
            sb.Append("  LearningStandardEquivalenceStrengthDescriptor: ").Append(LearningStandardEquivalenceStrengthDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // LearningStandardEquivalenceStrengthDescription (string) maxLength
            if (this.LearningStandardEquivalenceStrengthDescription != null && this.LearningStandardEquivalenceStrengthDescription.Length > 255)
            {
                yield return new ValidationResult("Invalid value for LearningStandardEquivalenceStrengthDescription, length must be less than 255.", new [] { "LearningStandardEquivalenceStrengthDescription" });
            }

            // LearningStandardEquivalenceStrengthDescriptor (string) maxLength
            if (this.LearningStandardEquivalenceStrengthDescriptor != null && this.LearningStandardEquivalenceStrengthDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LearningStandardEquivalenceStrengthDescriptor, length must be less than 306.", new [] { "LearningStandardEquivalenceStrengthDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiLearningStandardEquivalenceAssociation" />
    /// </summary>
    public class EdFiLearningStandardEquivalenceAssociationJsonConverter : JsonConverter<EdFiLearningStandardEquivalenceAssociation>
    {
        /// <summary>
        /// The format to use to serialize EffectiveDate
        /// </summary>
        public static string EffectiveDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiLearningStandardEquivalenceAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiLearningStandardEquivalenceAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varNamespace = default;
            Option<EdFiLearningStandardReference?> sourceLearningStandardReference = default;
            Option<EdFiLearningStandardReference?> targetLearningStandardReference = default;
            Option<string?> id = default;
            Option<DateOnly?> effectiveDate = default;
            Option<string?> learningStandardEquivalenceStrengthDescription = default;
            Option<string?> learningStandardEquivalenceStrengthDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sourceLearningStandardReference":
                            sourceLearningStandardReference = new Option<EdFiLearningStandardReference?>(JsonSerializer.Deserialize<EdFiLearningStandardReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "targetLearningStandardReference":
                            targetLearningStandardReference = new Option<EdFiLearningStandardReference?>(JsonSerializer.Deserialize<EdFiLearningStandardReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "effectiveDate":
                            effectiveDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "learningStandardEquivalenceStrengthDescription":
                            learningStandardEquivalenceStrengthDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "learningStandardEquivalenceStrengthDescriptor":
                            learningStandardEquivalenceStrengthDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!varNamespace.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningStandardEquivalenceAssociation.", nameof(varNamespace));

            if (!sourceLearningStandardReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningStandardEquivalenceAssociation.", nameof(sourceLearningStandardReference));

            if (!targetLearningStandardReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningStandardEquivalenceAssociation.", nameof(targetLearningStandardReference));

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class EdFiLearningStandardEquivalenceAssociation.");

            if (sourceLearningStandardReference.IsSet && sourceLearningStandardReference.Value == null)
                throw new ArgumentNullException(nameof(sourceLearningStandardReference), "Property is not nullable for class EdFiLearningStandardEquivalenceAssociation.");

            if (targetLearningStandardReference.IsSet && targetLearningStandardReference.Value == null)
                throw new ArgumentNullException(nameof(targetLearningStandardReference), "Property is not nullable for class EdFiLearningStandardEquivalenceAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiLearningStandardEquivalenceAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiLearningStandardEquivalenceAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiLearningStandardEquivalenceAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiLearningStandardEquivalenceAssociation.");

            return new EdFiLearningStandardEquivalenceAssociation(varNamespace.Value!, sourceLearningStandardReference.Value!, targetLearningStandardReference.Value!, id, effectiveDate, learningStandardEquivalenceStrengthDescription, learningStandardEquivalenceStrengthDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiLearningStandardEquivalenceAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLearningStandardEquivalenceAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiLearningStandardEquivalenceAssociation edFiLearningStandardEquivalenceAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiLearningStandardEquivalenceAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiLearningStandardEquivalenceAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLearningStandardEquivalenceAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiLearningStandardEquivalenceAssociation edFiLearningStandardEquivalenceAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiLearningStandardEquivalenceAssociation.Namespace == null)
                throw new ArgumentNullException(nameof(edFiLearningStandardEquivalenceAssociation.Namespace), "Property is required for class EdFiLearningStandardEquivalenceAssociation.");

            if (edFiLearningStandardEquivalenceAssociation.SourceLearningStandardReference == null)
                throw new ArgumentNullException(nameof(edFiLearningStandardEquivalenceAssociation.SourceLearningStandardReference), "Property is required for class EdFiLearningStandardEquivalenceAssociation.");

            if (edFiLearningStandardEquivalenceAssociation.TargetLearningStandardReference == null)
                throw new ArgumentNullException(nameof(edFiLearningStandardEquivalenceAssociation.TargetLearningStandardReference), "Property is required for class EdFiLearningStandardEquivalenceAssociation.");

            if (edFiLearningStandardEquivalenceAssociation.IdOption.IsSet && edFiLearningStandardEquivalenceAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiLearningStandardEquivalenceAssociation.Id), "Property is required for class EdFiLearningStandardEquivalenceAssociation.");

            if (edFiLearningStandardEquivalenceAssociation.EtagOption.IsSet && edFiLearningStandardEquivalenceAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiLearningStandardEquivalenceAssociation.Etag), "Property is required for class EdFiLearningStandardEquivalenceAssociation.");

            if (edFiLearningStandardEquivalenceAssociation.ExtOption.IsSet && edFiLearningStandardEquivalenceAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiLearningStandardEquivalenceAssociation.Ext), "Property is required for class EdFiLearningStandardEquivalenceAssociation.");

            writer.WriteString("namespace", edFiLearningStandardEquivalenceAssociation.Namespace);

            writer.WritePropertyName("sourceLearningStandardReference");
            JsonSerializer.Serialize(writer, edFiLearningStandardEquivalenceAssociation.SourceLearningStandardReference, jsonSerializerOptions);
            writer.WritePropertyName("targetLearningStandardReference");
            JsonSerializer.Serialize(writer, edFiLearningStandardEquivalenceAssociation.TargetLearningStandardReference, jsonSerializerOptions);
            if (edFiLearningStandardEquivalenceAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiLearningStandardEquivalenceAssociation.Id);

            if (edFiLearningStandardEquivalenceAssociation.EffectiveDateOption.IsSet)
                if (edFiLearningStandardEquivalenceAssociation.EffectiveDateOption.Value != null)
                    writer.WriteString("effectiveDate", edFiLearningStandardEquivalenceAssociation.EffectiveDateOption.Value!.Value.ToString(EffectiveDateFormat));
                else
                    writer.WriteNull("effectiveDate");

            if (edFiLearningStandardEquivalenceAssociation.LearningStandardEquivalenceStrengthDescriptionOption.IsSet)
                if (edFiLearningStandardEquivalenceAssociation.LearningStandardEquivalenceStrengthDescriptionOption.Value != null)
                    writer.WriteString("learningStandardEquivalenceStrengthDescription", edFiLearningStandardEquivalenceAssociation.LearningStandardEquivalenceStrengthDescription);
                else
                    writer.WriteNull("learningStandardEquivalenceStrengthDescription");

            if (edFiLearningStandardEquivalenceAssociation.LearningStandardEquivalenceStrengthDescriptorOption.IsSet)
                if (edFiLearningStandardEquivalenceAssociation.LearningStandardEquivalenceStrengthDescriptorOption.Value != null)
                    writer.WriteString("learningStandardEquivalenceStrengthDescriptor", edFiLearningStandardEquivalenceAssociation.LearningStandardEquivalenceStrengthDescriptor);
                else
                    writer.WriteNull("learningStandardEquivalenceStrengthDescriptor");

            if (edFiLearningStandardEquivalenceAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiLearningStandardEquivalenceAssociation.Etag);

            if (edFiLearningStandardEquivalenceAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiLearningStandardEquivalenceAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiLearningStandardEquivalenceAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiLearningStandardEquivalenceAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
