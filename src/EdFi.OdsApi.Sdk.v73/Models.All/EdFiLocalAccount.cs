// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiLocalAccount
    /// </summary>
    public partial class EdFiLocalAccount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocalAccount" /> class.
        /// </summary>
        /// <param name="accountIdentifier">Code value for the valid combination of account dimensions by LEA under which financials are reported.</param>
        /// <param name="fiscalYear">The fiscal year for the account.</param>
        /// <param name="chartOfAccountReference">chartOfAccountReference</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="id">id</param>
        /// <param name="accountName">A descriptive name for the account.</param>
        /// <param name="reportingTags">An unordered collection of localAccountReportingTags. Optional tag for accountability reporting.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the LocalAccount entity.</param>
        [JsonConstructor]
        public EdFiLocalAccount(string accountIdentifier, int fiscalYear, EdFiChartOfAccountReference chartOfAccountReference, EdFiEducationOrganizationReference educationOrganizationReference, Option<string?> id = default, Option<string?> accountName = default, Option<List<EdFiLocalAccountReportingTag>?> reportingTags = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            AccountIdentifier = accountIdentifier;
            FiscalYear = fiscalYear;
            ChartOfAccountReference = chartOfAccountReference;
            EducationOrganizationReference = educationOrganizationReference;
            IdOption = id;
            AccountNameOption = accountName;
            ReportingTagsOption = reportingTags;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Code value for the valid combination of account dimensions by LEA under which financials are reported.
        /// </summary>
        /// <value>Code value for the valid combination of account dimensions by LEA under which financials are reported.</value>
        [JsonPropertyName("accountIdentifier")]
        public string AccountIdentifier { get; set; }

        /// <summary>
        /// The fiscal year for the account.
        /// </summary>
        /// <value>The fiscal year for the account.</value>
        [JsonPropertyName("fiscalYear")]
        public int FiscalYear { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccountReference
        /// </summary>
        [JsonPropertyName("chartOfAccountReference")]
        public EdFiChartOfAccountReference ChartOfAccountReference { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccountNameOption { get; private set; }

        /// <summary>
        /// A descriptive name for the account.
        /// </summary>
        /// <value>A descriptive name for the account.</value>
        [JsonPropertyName("accountName")]
        public string? AccountName { get { return this.AccountNameOption; } set { this.AccountNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReportingTags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiLocalAccountReportingTag>?> ReportingTagsOption { get; private set; }

        /// <summary>
        /// An unordered collection of localAccountReportingTags. Optional tag for accountability reporting.
        /// </summary>
        /// <value>An unordered collection of localAccountReportingTags. Optional tag for accountability reporting.</value>
        [JsonPropertyName("reportingTags")]
        public List<EdFiLocalAccountReportingTag>? ReportingTags { get { return this.ReportingTagsOption; } set { this.ReportingTagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the LocalAccount entity.
        /// </summary>
        /// <value>Extensions to the LocalAccount entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLocalAccount {\n");
            sb.Append("  AccountIdentifier: ").Append(AccountIdentifier).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  ChartOfAccountReference: ").Append(ChartOfAccountReference).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ReportingTags: ").Append(ReportingTags).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountIdentifier (string) maxLength
            if (this.AccountIdentifier != null && this.AccountIdentifier.Length > 50)
            {
                yield return new ValidationResult("Invalid value for AccountIdentifier, length must be less than 50.", new [] { "AccountIdentifier" });
            }

            // FiscalYear (int) maximum
            if (this.FiscalYear > (int)2040)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value less than or equal to 2040.", new [] { "FiscalYear" });
            }

            // FiscalYear (int) minimum
            if (this.FiscalYear < (int)2020)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value greater than or equal to 2020.", new [] { "FiscalYear" });
            }

            // AccountName (string) maxLength
            if (this.AccountName != null && this.AccountName.Length > 100)
            {
                yield return new ValidationResult("Invalid value for AccountName, length must be less than 100.", new [] { "AccountName" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiLocalAccount" />
    /// </summary>
    public class EdFiLocalAccountJsonConverter : JsonConverter<EdFiLocalAccount>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiLocalAccount" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiLocalAccount Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accountIdentifier = default;
            Option<int?> fiscalYear = default;
            Option<EdFiChartOfAccountReference?> chartOfAccountReference = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<string?> id = default;
            Option<string?> accountName = default;
            Option<List<EdFiLocalAccountReportingTag>?> reportingTags = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountIdentifier":
                            accountIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fiscalYear":
                            fiscalYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "chartOfAccountReference":
                            chartOfAccountReference = new Option<EdFiChartOfAccountReference?>(JsonSerializer.Deserialize<EdFiChartOfAccountReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "accountName":
                            accountName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "reportingTags":
                            reportingTags = new Option<List<EdFiLocalAccountReportingTag>?>(JsonSerializer.Deserialize<List<EdFiLocalAccountReportingTag>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accountIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiLocalAccount.", nameof(accountIdentifier));

            if (!fiscalYear.IsSet)
                throw new ArgumentException("Property is required for class EdFiLocalAccount.", nameof(fiscalYear));

            if (!chartOfAccountReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiLocalAccount.", nameof(chartOfAccountReference));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiLocalAccount.", nameof(educationOrganizationReference));

            if (accountIdentifier.IsSet && accountIdentifier.Value == null)
                throw new ArgumentNullException(nameof(accountIdentifier), "Property is not nullable for class EdFiLocalAccount.");

            if (fiscalYear.IsSet && fiscalYear.Value == null)
                throw new ArgumentNullException(nameof(fiscalYear), "Property is not nullable for class EdFiLocalAccount.");

            if (chartOfAccountReference.IsSet && chartOfAccountReference.Value == null)
                throw new ArgumentNullException(nameof(chartOfAccountReference), "Property is not nullable for class EdFiLocalAccount.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiLocalAccount.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiLocalAccount.");

            if (reportingTags.IsSet && reportingTags.Value == null)
                throw new ArgumentNullException(nameof(reportingTags), "Property is not nullable for class EdFiLocalAccount.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiLocalAccount.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiLocalAccount.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiLocalAccount.");

            return new EdFiLocalAccount(accountIdentifier.Value!, fiscalYear.Value!.Value!, chartOfAccountReference.Value!, educationOrganizationReference.Value!, id, accountName, reportingTags, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiLocalAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLocalAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiLocalAccount edFiLocalAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiLocalAccount, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiLocalAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLocalAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiLocalAccount edFiLocalAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiLocalAccount.AccountIdentifier == null)
                throw new ArgumentNullException(nameof(edFiLocalAccount.AccountIdentifier), "Property is required for class EdFiLocalAccount.");

            if (edFiLocalAccount.ChartOfAccountReference == null)
                throw new ArgumentNullException(nameof(edFiLocalAccount.ChartOfAccountReference), "Property is required for class EdFiLocalAccount.");

            if (edFiLocalAccount.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiLocalAccount.EducationOrganizationReference), "Property is required for class EdFiLocalAccount.");

            if (edFiLocalAccount.IdOption.IsSet && edFiLocalAccount.Id == null)
                throw new ArgumentNullException(nameof(edFiLocalAccount.Id), "Property is required for class EdFiLocalAccount.");

            if (edFiLocalAccount.ReportingTagsOption.IsSet && edFiLocalAccount.ReportingTags == null)
                throw new ArgumentNullException(nameof(edFiLocalAccount.ReportingTags), "Property is required for class EdFiLocalAccount.");

            if (edFiLocalAccount.EtagOption.IsSet && edFiLocalAccount.Etag == null)
                throw new ArgumentNullException(nameof(edFiLocalAccount.Etag), "Property is required for class EdFiLocalAccount.");

            if (edFiLocalAccount.ExtOption.IsSet && edFiLocalAccount.Ext == null)
                throw new ArgumentNullException(nameof(edFiLocalAccount.Ext), "Property is required for class EdFiLocalAccount.");

            writer.WriteString("accountIdentifier", edFiLocalAccount.AccountIdentifier);

            writer.WriteNumber("fiscalYear", edFiLocalAccount.FiscalYear);

            writer.WritePropertyName("chartOfAccountReference");
            JsonSerializer.Serialize(writer, edFiLocalAccount.ChartOfAccountReference, jsonSerializerOptions);
            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiLocalAccount.EducationOrganizationReference, jsonSerializerOptions);
            if (edFiLocalAccount.IdOption.IsSet)
                writer.WriteString("id", edFiLocalAccount.Id);

            if (edFiLocalAccount.AccountNameOption.IsSet)
                if (edFiLocalAccount.AccountNameOption.Value != null)
                    writer.WriteString("accountName", edFiLocalAccount.AccountName);
                else
                    writer.WriteNull("accountName");

            if (edFiLocalAccount.ReportingTagsOption.IsSet)
            {
                writer.WritePropertyName("reportingTags");
                JsonSerializer.Serialize(writer, edFiLocalAccount.ReportingTags, jsonSerializerOptions);
            }
            if (edFiLocalAccount.EtagOption.IsSet)
                writer.WriteString("_etag", edFiLocalAccount.Etag);

            if (edFiLocalAccount.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiLocalAccount.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiLocalAccount.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiLocalAccount.Ext, jsonSerializerOptions);
            }
        }
    }
}
