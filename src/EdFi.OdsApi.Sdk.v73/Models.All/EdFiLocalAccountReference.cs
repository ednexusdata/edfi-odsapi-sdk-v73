// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiLocalAccountReference
    /// </summary>
    public partial class EdFiLocalAccountReference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocalAccountReference" /> class.
        /// </summary>
        /// <param name="accountIdentifier">Code value for the valid combination of account dimensions by LEA under which financials are reported.</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization.</param>
        /// <param name="fiscalYear">The fiscal year for the account.</param>
        /// <param name="link">link</param>
        [JsonConstructor]
        public EdFiLocalAccountReference(string accountIdentifier, long educationOrganizationId, int fiscalYear, Option<Link?> link = default)
        {
            AccountIdentifier = accountIdentifier;
            EducationOrganizationId = educationOrganizationId;
            FiscalYear = fiscalYear;
            LinkOption = link;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Code value for the valid combination of account dimensions by LEA under which financials are reported.
        /// </summary>
        /// <value>Code value for the valid combination of account dimensions by LEA under which financials are reported.</value>
        [JsonPropertyName("accountIdentifier")]
        public string AccountIdentifier { get; set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [JsonPropertyName("educationOrganizationId")]
        public long EducationOrganizationId { get; set; }

        /// <summary>
        /// The fiscal year for the account.
        /// </summary>
        /// <value>The fiscal year for the account.</value>
        [JsonPropertyName("fiscalYear")]
        public int FiscalYear { get; set; }

        /// <summary>
        /// Used to track the state of Link
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Link?> LinkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [JsonPropertyName("link")]
        public Link? Link { get { return this.LinkOption; } set { this.LinkOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLocalAccountReference {\n");
            sb.Append("  AccountIdentifier: ").Append(AccountIdentifier).Append("\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountIdentifier (string) maxLength
            if (this.AccountIdentifier != null && this.AccountIdentifier.Length > 50)
            {
                yield return new ValidationResult("Invalid value for AccountIdentifier, length must be less than 50.", new [] { "AccountIdentifier" });
            }

            // FiscalYear (int) maximum
            if (this.FiscalYear > (int)2040)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value less than or equal to 2040.", new [] { "FiscalYear" });
            }

            // FiscalYear (int) minimum
            if (this.FiscalYear < (int)2020)
            {
                yield return new ValidationResult("Invalid value for FiscalYear, must be a value greater than or equal to 2020.", new [] { "FiscalYear" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiLocalAccountReference" />
    /// </summary>
    public class EdFiLocalAccountReferenceJsonConverter : JsonConverter<EdFiLocalAccountReference>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiLocalAccountReference" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiLocalAccountReference Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accountIdentifier = default;
            Option<long?> educationOrganizationId = default;
            Option<int?> fiscalYear = default;
            Option<Link?> link = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountIdentifier":
                            accountIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationId":
                            educationOrganizationId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "fiscalYear":
                            fiscalYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "link":
                            link = new Option<Link?>(JsonSerializer.Deserialize<Link>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accountIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiLocalAccountReference.", nameof(accountIdentifier));

            if (!educationOrganizationId.IsSet)
                throw new ArgumentException("Property is required for class EdFiLocalAccountReference.", nameof(educationOrganizationId));

            if (!fiscalYear.IsSet)
                throw new ArgumentException("Property is required for class EdFiLocalAccountReference.", nameof(fiscalYear));

            if (accountIdentifier.IsSet && accountIdentifier.Value == null)
                throw new ArgumentNullException(nameof(accountIdentifier), "Property is not nullable for class EdFiLocalAccountReference.");

            if (educationOrganizationId.IsSet && educationOrganizationId.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationId), "Property is not nullable for class EdFiLocalAccountReference.");

            if (fiscalYear.IsSet && fiscalYear.Value == null)
                throw new ArgumentNullException(nameof(fiscalYear), "Property is not nullable for class EdFiLocalAccountReference.");

            if (link.IsSet && link.Value == null)
                throw new ArgumentNullException(nameof(link), "Property is not nullable for class EdFiLocalAccountReference.");

            return new EdFiLocalAccountReference(accountIdentifier.Value!, educationOrganizationId.Value!.Value!, fiscalYear.Value!.Value!, link);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiLocalAccountReference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLocalAccountReference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiLocalAccountReference edFiLocalAccountReference, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiLocalAccountReference, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiLocalAccountReference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLocalAccountReference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiLocalAccountReference edFiLocalAccountReference, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiLocalAccountReference.AccountIdentifier == null)
                throw new ArgumentNullException(nameof(edFiLocalAccountReference.AccountIdentifier), "Property is required for class EdFiLocalAccountReference.");

            if (edFiLocalAccountReference.LinkOption.IsSet && edFiLocalAccountReference.Link == null)
                throw new ArgumentNullException(nameof(edFiLocalAccountReference.Link), "Property is required for class EdFiLocalAccountReference.");

            writer.WriteString("accountIdentifier", edFiLocalAccountReference.AccountIdentifier);

            writer.WriteNumber("educationOrganizationId", edFiLocalAccountReference.EducationOrganizationId);

            writer.WriteNumber("fiscalYear", edFiLocalAccountReference.FiscalYear);

            if (edFiLocalAccountReference.LinkOption.IsSet)
            {
                writer.WritePropertyName("link");
                JsonSerializer.Serialize(writer, edFiLocalAccountReference.Link, jsonSerializerOptions);
            }
        }
    }
}
