// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiLocalEducationAgencyFederalFunds
    /// </summary>
    public partial class EdFiLocalEducationAgencyFederalFunds : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocalEducationAgencyFederalFunds" /> class.
        /// </summary>
        /// <param name="fiscalYear">The fiscal year for which the federal funds are received.</param>
        /// <param name="innovativeDollarsSpent">The total Title V, Part A funds expended by LEAs.</param>
        /// <param name="innovativeDollarsSpentStrategicPriorities">The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.</param>
        /// <param name="innovativeProgramsFundsReceived">The total Title V, Part A funds received by LEAs.</param>
        /// <param name="schoolImprovementAllocation">The amount of Section 1003(a) and 1003(g) allocations to LEAs.</param>
        /// <param name="schoolImprovementReservedFundsPercentage">An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED&#39;s regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.</param>
        /// <param name="stateAssessmentAdministrationFunding">The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state&#39;s schools and LEAs are held accountable for results.</param>
        /// <param name="supplementalEducationalServicesFundsSpent">The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.</param>
        /// <param name="supplementalEducationalServicesPerPupilExpenditure">The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.</param>
        /// <param name="ext">Extensions to the LocalEducationAgencyFederalFunds entity.</param>
        [JsonConstructor]
        public EdFiLocalEducationAgencyFederalFunds(int fiscalYear, Option<double?> innovativeDollarsSpent = default, Option<double?> innovativeDollarsSpentStrategicPriorities = default, Option<double?> innovativeProgramsFundsReceived = default, Option<double?> schoolImprovementAllocation = default, Option<double?> schoolImprovementReservedFundsPercentage = default, Option<double?> stateAssessmentAdministrationFunding = default, Option<double?> supplementalEducationalServicesFundsSpent = default, Option<double?> supplementalEducationalServicesPerPupilExpenditure = default, Option<Object?> ext = default)
        {
            FiscalYear = fiscalYear;
            InnovativeDollarsSpentOption = innovativeDollarsSpent;
            InnovativeDollarsSpentStrategicPrioritiesOption = innovativeDollarsSpentStrategicPriorities;
            InnovativeProgramsFundsReceivedOption = innovativeProgramsFundsReceived;
            SchoolImprovementAllocationOption = schoolImprovementAllocation;
            SchoolImprovementReservedFundsPercentageOption = schoolImprovementReservedFundsPercentage;
            StateAssessmentAdministrationFundingOption = stateAssessmentAdministrationFunding;
            SupplementalEducationalServicesFundsSpentOption = supplementalEducationalServicesFundsSpent;
            SupplementalEducationalServicesPerPupilExpenditureOption = supplementalEducationalServicesPerPupilExpenditure;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The fiscal year for which the federal funds are received.
        /// </summary>
        /// <value>The fiscal year for which the federal funds are received.</value>
        [JsonPropertyName("fiscalYear")]
        public int FiscalYear { get; set; }

        /// <summary>
        /// Used to track the state of InnovativeDollarsSpent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> InnovativeDollarsSpentOption { get; private set; }

        /// <summary>
        /// The total Title V, Part A funds expended by LEAs.
        /// </summary>
        /// <value>The total Title V, Part A funds expended by LEAs.</value>
        [JsonPropertyName("innovativeDollarsSpent")]
        public double? InnovativeDollarsSpent { get { return this.InnovativeDollarsSpentOption; } set { this.InnovativeDollarsSpentOption = new(value); } }

        /// <summary>
        /// Used to track the state of InnovativeDollarsSpentStrategicPriorities
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> InnovativeDollarsSpentStrategicPrioritiesOption { get; private set; }

        /// <summary>
        /// The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.
        /// </summary>
        /// <value>The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.</value>
        [JsonPropertyName("innovativeDollarsSpentStrategicPriorities")]
        public double? InnovativeDollarsSpentStrategicPriorities { get { return this.InnovativeDollarsSpentStrategicPrioritiesOption; } set { this.InnovativeDollarsSpentStrategicPrioritiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of InnovativeProgramsFundsReceived
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> InnovativeProgramsFundsReceivedOption { get; private set; }

        /// <summary>
        /// The total Title V, Part A funds received by LEAs.
        /// </summary>
        /// <value>The total Title V, Part A funds received by LEAs.</value>
        [JsonPropertyName("innovativeProgramsFundsReceived")]
        public double? InnovativeProgramsFundsReceived { get { return this.InnovativeProgramsFundsReceivedOption; } set { this.InnovativeProgramsFundsReceivedOption = new(value); } }

        /// <summary>
        /// Used to track the state of SchoolImprovementAllocation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SchoolImprovementAllocationOption { get; private set; }

        /// <summary>
        /// The amount of Section 1003(a) and 1003(g) allocations to LEAs.
        /// </summary>
        /// <value>The amount of Section 1003(a) and 1003(g) allocations to LEAs.</value>
        [JsonPropertyName("schoolImprovementAllocation")]
        public double? SchoolImprovementAllocation { get { return this.SchoolImprovementAllocationOption; } set { this.SchoolImprovementAllocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of SchoolImprovementReservedFundsPercentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SchoolImprovementReservedFundsPercentageOption { get; private set; }

        /// <summary>
        /// An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED&#39;s regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.
        /// </summary>
        /// <value>An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED&#39;s regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.</value>
        [JsonPropertyName("schoolImprovementReservedFundsPercentage")]
        public double? SchoolImprovementReservedFundsPercentage { get { return this.SchoolImprovementReservedFundsPercentageOption; } set { this.SchoolImprovementReservedFundsPercentageOption = new(value); } }

        /// <summary>
        /// Used to track the state of StateAssessmentAdministrationFunding
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> StateAssessmentAdministrationFundingOption { get; private set; }

        /// <summary>
        /// The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state&#39;s schools and LEAs are held accountable for results.
        /// </summary>
        /// <value>The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state&#39;s schools and LEAs are held accountable for results.</value>
        [JsonPropertyName("stateAssessmentAdministrationFunding")]
        public double? StateAssessmentAdministrationFunding { get { return this.StateAssessmentAdministrationFundingOption; } set { this.StateAssessmentAdministrationFundingOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplementalEducationalServicesFundsSpent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SupplementalEducationalServicesFundsSpentOption { get; private set; }

        /// <summary>
        /// The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.
        /// </summary>
        /// <value>The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.</value>
        [JsonPropertyName("supplementalEducationalServicesFundsSpent")]
        public double? SupplementalEducationalServicesFundsSpent { get { return this.SupplementalEducationalServicesFundsSpentOption; } set { this.SupplementalEducationalServicesFundsSpentOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplementalEducationalServicesPerPupilExpenditure
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SupplementalEducationalServicesPerPupilExpenditureOption { get; private set; }

        /// <summary>
        /// The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.
        /// </summary>
        /// <value>The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.</value>
        [JsonPropertyName("supplementalEducationalServicesPerPupilExpenditure")]
        public double? SupplementalEducationalServicesPerPupilExpenditure { get { return this.SupplementalEducationalServicesPerPupilExpenditureOption; } set { this.SupplementalEducationalServicesPerPupilExpenditureOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the LocalEducationAgencyFederalFunds entity.
        /// </summary>
        /// <value>Extensions to the LocalEducationAgencyFederalFunds entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLocalEducationAgencyFederalFunds {\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  InnovativeDollarsSpent: ").Append(InnovativeDollarsSpent).Append("\n");
            sb.Append("  InnovativeDollarsSpentStrategicPriorities: ").Append(InnovativeDollarsSpentStrategicPriorities).Append("\n");
            sb.Append("  InnovativeProgramsFundsReceived: ").Append(InnovativeProgramsFundsReceived).Append("\n");
            sb.Append("  SchoolImprovementAllocation: ").Append(SchoolImprovementAllocation).Append("\n");
            sb.Append("  SchoolImprovementReservedFundsPercentage: ").Append(SchoolImprovementReservedFundsPercentage).Append("\n");
            sb.Append("  StateAssessmentAdministrationFunding: ").Append(StateAssessmentAdministrationFunding).Append("\n");
            sb.Append("  SupplementalEducationalServicesFundsSpent: ").Append(SupplementalEducationalServicesFundsSpent).Append("\n");
            sb.Append("  SupplementalEducationalServicesPerPupilExpenditure: ").Append(SupplementalEducationalServicesPerPupilExpenditure).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InnovativeDollarsSpent (double) maximum
            if (this.InnovativeDollarsSpentOption.IsSet && this.InnovativeDollarsSpentOption.Value > (double)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeDollarsSpent, must be a value less than or equal to 922337203685477.6.", new [] { "InnovativeDollarsSpent" });
            }

            // InnovativeDollarsSpent (double) minimum
            if (this.InnovativeDollarsSpentOption.IsSet && this.InnovativeDollarsSpentOption.Value < (double)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeDollarsSpent, must be a value greater than or equal to -922337203685477.6.", new [] { "InnovativeDollarsSpent" });
            }

            // InnovativeDollarsSpentStrategicPriorities (double) maximum
            if (this.InnovativeDollarsSpentStrategicPrioritiesOption.IsSet && this.InnovativeDollarsSpentStrategicPrioritiesOption.Value > (double)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeDollarsSpentStrategicPriorities, must be a value less than or equal to 922337203685477.6.", new [] { "InnovativeDollarsSpentStrategicPriorities" });
            }

            // InnovativeDollarsSpentStrategicPriorities (double) minimum
            if (this.InnovativeDollarsSpentStrategicPrioritiesOption.IsSet && this.InnovativeDollarsSpentStrategicPrioritiesOption.Value < (double)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeDollarsSpentStrategicPriorities, must be a value greater than or equal to -922337203685477.6.", new [] { "InnovativeDollarsSpentStrategicPriorities" });
            }

            // InnovativeProgramsFundsReceived (double) maximum
            if (this.InnovativeProgramsFundsReceivedOption.IsSet && this.InnovativeProgramsFundsReceivedOption.Value > (double)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeProgramsFundsReceived, must be a value less than or equal to 922337203685477.6.", new [] { "InnovativeProgramsFundsReceived" });
            }

            // InnovativeProgramsFundsReceived (double) minimum
            if (this.InnovativeProgramsFundsReceivedOption.IsSet && this.InnovativeProgramsFundsReceivedOption.Value < (double)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for InnovativeProgramsFundsReceived, must be a value greater than or equal to -922337203685477.6.", new [] { "InnovativeProgramsFundsReceived" });
            }

            // SchoolImprovementAllocation (double) maximum
            if (this.SchoolImprovementAllocationOption.IsSet && this.SchoolImprovementAllocationOption.Value > (double)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SchoolImprovementAllocation, must be a value less than or equal to 922337203685477.6.", new [] { "SchoolImprovementAllocation" });
            }

            // SchoolImprovementAllocation (double) minimum
            if (this.SchoolImprovementAllocationOption.IsSet && this.SchoolImprovementAllocationOption.Value < (double)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SchoolImprovementAllocation, must be a value greater than or equal to -922337203685477.6.", new [] { "SchoolImprovementAllocation" });
            }

            // SchoolImprovementReservedFundsPercentage (double) maximum
            if (this.SchoolImprovementReservedFundsPercentageOption.IsSet && this.SchoolImprovementReservedFundsPercentageOption.Value > (double)9.9999)
            {
                yield return new ValidationResult("Invalid value for SchoolImprovementReservedFundsPercentage, must be a value less than or equal to 9.9999.", new [] { "SchoolImprovementReservedFundsPercentage" });
            }

            // SchoolImprovementReservedFundsPercentage (double) minimum
            if (this.SchoolImprovementReservedFundsPercentageOption.IsSet && this.SchoolImprovementReservedFundsPercentageOption.Value < (double)-9.9999)
            {
                yield return new ValidationResult("Invalid value for SchoolImprovementReservedFundsPercentage, must be a value greater than or equal to -9.9999.", new [] { "SchoolImprovementReservedFundsPercentage" });
            }

            // StateAssessmentAdministrationFunding (double) maximum
            if (this.StateAssessmentAdministrationFundingOption.IsSet && this.StateAssessmentAdministrationFundingOption.Value > (double)9.9999)
            {
                yield return new ValidationResult("Invalid value for StateAssessmentAdministrationFunding, must be a value less than or equal to 9.9999.", new [] { "StateAssessmentAdministrationFunding" });
            }

            // StateAssessmentAdministrationFunding (double) minimum
            if (this.StateAssessmentAdministrationFundingOption.IsSet && this.StateAssessmentAdministrationFundingOption.Value < (double)-9.9999)
            {
                yield return new ValidationResult("Invalid value for StateAssessmentAdministrationFunding, must be a value greater than or equal to -9.9999.", new [] { "StateAssessmentAdministrationFunding" });
            }

            // SupplementalEducationalServicesFundsSpent (double) maximum
            if (this.SupplementalEducationalServicesFundsSpentOption.IsSet && this.SupplementalEducationalServicesFundsSpentOption.Value > (double)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SupplementalEducationalServicesFundsSpent, must be a value less than or equal to 922337203685477.6.", new [] { "SupplementalEducationalServicesFundsSpent" });
            }

            // SupplementalEducationalServicesFundsSpent (double) minimum
            if (this.SupplementalEducationalServicesFundsSpentOption.IsSet && this.SupplementalEducationalServicesFundsSpentOption.Value < (double)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SupplementalEducationalServicesFundsSpent, must be a value greater than or equal to -922337203685477.6.", new [] { "SupplementalEducationalServicesFundsSpent" });
            }

            // SupplementalEducationalServicesPerPupilExpenditure (double) maximum
            if (this.SupplementalEducationalServicesPerPupilExpenditureOption.IsSet && this.SupplementalEducationalServicesPerPupilExpenditureOption.Value > (double)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SupplementalEducationalServicesPerPupilExpenditure, must be a value less than or equal to 922337203685477.6.", new [] { "SupplementalEducationalServicesPerPupilExpenditure" });
            }

            // SupplementalEducationalServicesPerPupilExpenditure (double) minimum
            if (this.SupplementalEducationalServicesPerPupilExpenditureOption.IsSet && this.SupplementalEducationalServicesPerPupilExpenditureOption.Value < (double)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for SupplementalEducationalServicesPerPupilExpenditure, must be a value greater than or equal to -922337203685477.6.", new [] { "SupplementalEducationalServicesPerPupilExpenditure" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiLocalEducationAgencyFederalFunds" />
    /// </summary>
    public class EdFiLocalEducationAgencyFederalFundsJsonConverter : JsonConverter<EdFiLocalEducationAgencyFederalFunds>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiLocalEducationAgencyFederalFunds" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiLocalEducationAgencyFederalFunds Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> fiscalYear = default;
            Option<double?> innovativeDollarsSpent = default;
            Option<double?> innovativeDollarsSpentStrategicPriorities = default;
            Option<double?> innovativeProgramsFundsReceived = default;
            Option<double?> schoolImprovementAllocation = default;
            Option<double?> schoolImprovementReservedFundsPercentage = default;
            Option<double?> stateAssessmentAdministrationFunding = default;
            Option<double?> supplementalEducationalServicesFundsSpent = default;
            Option<double?> supplementalEducationalServicesPerPupilExpenditure = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fiscalYear":
                            fiscalYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "innovativeDollarsSpent":
                            innovativeDollarsSpent = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "innovativeDollarsSpentStrategicPriorities":
                            innovativeDollarsSpentStrategicPriorities = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "innovativeProgramsFundsReceived":
                            innovativeProgramsFundsReceived = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "schoolImprovementAllocation":
                            schoolImprovementAllocation = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "schoolImprovementReservedFundsPercentage":
                            schoolImprovementReservedFundsPercentage = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "stateAssessmentAdministrationFunding":
                            stateAssessmentAdministrationFunding = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "supplementalEducationalServicesFundsSpent":
                            supplementalEducationalServicesFundsSpent = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "supplementalEducationalServicesPerPupilExpenditure":
                            supplementalEducationalServicesPerPupilExpenditure = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fiscalYear.IsSet)
                throw new ArgumentException("Property is required for class EdFiLocalEducationAgencyFederalFunds.", nameof(fiscalYear));

            if (fiscalYear.IsSet && fiscalYear.Value == null)
                throw new ArgumentNullException(nameof(fiscalYear), "Property is not nullable for class EdFiLocalEducationAgencyFederalFunds.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiLocalEducationAgencyFederalFunds.");

            return new EdFiLocalEducationAgencyFederalFunds(fiscalYear.Value!.Value!, innovativeDollarsSpent, innovativeDollarsSpentStrategicPriorities, innovativeProgramsFundsReceived, schoolImprovementAllocation, schoolImprovementReservedFundsPercentage, stateAssessmentAdministrationFunding, supplementalEducationalServicesFundsSpent, supplementalEducationalServicesPerPupilExpenditure, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiLocalEducationAgencyFederalFunds" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLocalEducationAgencyFederalFunds"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiLocalEducationAgencyFederalFunds edFiLocalEducationAgencyFederalFunds, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiLocalEducationAgencyFederalFunds, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiLocalEducationAgencyFederalFunds" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLocalEducationAgencyFederalFunds"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiLocalEducationAgencyFederalFunds edFiLocalEducationAgencyFederalFunds, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiLocalEducationAgencyFederalFunds.ExtOption.IsSet && edFiLocalEducationAgencyFederalFunds.Ext == null)
                throw new ArgumentNullException(nameof(edFiLocalEducationAgencyFederalFunds.Ext), "Property is required for class EdFiLocalEducationAgencyFederalFunds.");

            writer.WriteNumber("fiscalYear", edFiLocalEducationAgencyFederalFunds.FiscalYear);

            if (edFiLocalEducationAgencyFederalFunds.InnovativeDollarsSpentOption.IsSet)
                if (edFiLocalEducationAgencyFederalFunds.InnovativeDollarsSpentOption.Value != null)
                    writer.WriteNumber("innovativeDollarsSpent", edFiLocalEducationAgencyFederalFunds.InnovativeDollarsSpentOption.Value!.Value);
                else
                    writer.WriteNull("innovativeDollarsSpent");

            if (edFiLocalEducationAgencyFederalFunds.InnovativeDollarsSpentStrategicPrioritiesOption.IsSet)
                if (edFiLocalEducationAgencyFederalFunds.InnovativeDollarsSpentStrategicPrioritiesOption.Value != null)
                    writer.WriteNumber("innovativeDollarsSpentStrategicPriorities", edFiLocalEducationAgencyFederalFunds.InnovativeDollarsSpentStrategicPrioritiesOption.Value!.Value);
                else
                    writer.WriteNull("innovativeDollarsSpentStrategicPriorities");

            if (edFiLocalEducationAgencyFederalFunds.InnovativeProgramsFundsReceivedOption.IsSet)
                if (edFiLocalEducationAgencyFederalFunds.InnovativeProgramsFundsReceivedOption.Value != null)
                    writer.WriteNumber("innovativeProgramsFundsReceived", edFiLocalEducationAgencyFederalFunds.InnovativeProgramsFundsReceivedOption.Value!.Value);
                else
                    writer.WriteNull("innovativeProgramsFundsReceived");

            if (edFiLocalEducationAgencyFederalFunds.SchoolImprovementAllocationOption.IsSet)
                if (edFiLocalEducationAgencyFederalFunds.SchoolImprovementAllocationOption.Value != null)
                    writer.WriteNumber("schoolImprovementAllocation", edFiLocalEducationAgencyFederalFunds.SchoolImprovementAllocationOption.Value!.Value);
                else
                    writer.WriteNull("schoolImprovementAllocation");

            if (edFiLocalEducationAgencyFederalFunds.SchoolImprovementReservedFundsPercentageOption.IsSet)
                if (edFiLocalEducationAgencyFederalFunds.SchoolImprovementReservedFundsPercentageOption.Value != null)
                    writer.WriteNumber("schoolImprovementReservedFundsPercentage", edFiLocalEducationAgencyFederalFunds.SchoolImprovementReservedFundsPercentageOption.Value!.Value);
                else
                    writer.WriteNull("schoolImprovementReservedFundsPercentage");

            if (edFiLocalEducationAgencyFederalFunds.StateAssessmentAdministrationFundingOption.IsSet)
                if (edFiLocalEducationAgencyFederalFunds.StateAssessmentAdministrationFundingOption.Value != null)
                    writer.WriteNumber("stateAssessmentAdministrationFunding", edFiLocalEducationAgencyFederalFunds.StateAssessmentAdministrationFundingOption.Value!.Value);
                else
                    writer.WriteNull("stateAssessmentAdministrationFunding");

            if (edFiLocalEducationAgencyFederalFunds.SupplementalEducationalServicesFundsSpentOption.IsSet)
                if (edFiLocalEducationAgencyFederalFunds.SupplementalEducationalServicesFundsSpentOption.Value != null)
                    writer.WriteNumber("supplementalEducationalServicesFundsSpent", edFiLocalEducationAgencyFederalFunds.SupplementalEducationalServicesFundsSpentOption.Value!.Value);
                else
                    writer.WriteNull("supplementalEducationalServicesFundsSpent");

            if (edFiLocalEducationAgencyFederalFunds.SupplementalEducationalServicesPerPupilExpenditureOption.IsSet)
                if (edFiLocalEducationAgencyFederalFunds.SupplementalEducationalServicesPerPupilExpenditureOption.Value != null)
                    writer.WriteNumber("supplementalEducationalServicesPerPupilExpenditure", edFiLocalEducationAgencyFederalFunds.SupplementalEducationalServicesPerPupilExpenditureOption.Value!.Value);
                else
                    writer.WriteNull("supplementalEducationalServicesPerPupilExpenditure");

            if (edFiLocalEducationAgencyFederalFunds.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiLocalEducationAgencyFederalFunds.Ext, jsonSerializerOptions);
            }
        }
    }
}
