// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiLocation
    /// </summary>
    public partial class EdFiLocation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocation" /> class.
        /// </summary>
        /// <param name="classroomIdentificationCode">A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.</param>
        /// <param name="schoolReference">schoolReference</param>
        /// <param name="id">id</param>
        /// <param name="maximumNumberOfSeats">The most number of seats the class can maintain.</param>
        /// <param name="optimalNumberOfSeats">The number of seats that is most favorable to the class.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Location entity.</param>
        [JsonConstructor]
        public EdFiLocation(string classroomIdentificationCode, EdFiSchoolReference schoolReference, Option<string?> id = default, Option<int?> maximumNumberOfSeats = default, Option<int?> optimalNumberOfSeats = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            ClassroomIdentificationCode = classroomIdentificationCode;
            SchoolReference = schoolReference;
            IdOption = id;
            MaximumNumberOfSeatsOption = maximumNumberOfSeats;
            OptimalNumberOfSeatsOption = optimalNumberOfSeats;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.</value>
        [JsonPropertyName("classroomIdentificationCode")]
        public string ClassroomIdentificationCode { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [JsonPropertyName("schoolReference")]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaximumNumberOfSeats
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaximumNumberOfSeatsOption { get; private set; }

        /// <summary>
        /// The most number of seats the class can maintain.
        /// </summary>
        /// <value>The most number of seats the class can maintain.</value>
        [JsonPropertyName("maximumNumberOfSeats")]
        public int? MaximumNumberOfSeats { get { return this.MaximumNumberOfSeatsOption; } set { this.MaximumNumberOfSeatsOption = new(value); } }

        /// <summary>
        /// Used to track the state of OptimalNumberOfSeats
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OptimalNumberOfSeatsOption { get; private set; }

        /// <summary>
        /// The number of seats that is most favorable to the class.
        /// </summary>
        /// <value>The number of seats that is most favorable to the class.</value>
        [JsonPropertyName("optimalNumberOfSeats")]
        public int? OptimalNumberOfSeats { get { return this.OptimalNumberOfSeatsOption; } set { this.OptimalNumberOfSeatsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Location entity.
        /// </summary>
        /// <value>Extensions to the Location entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLocation {\n");
            sb.Append("  ClassroomIdentificationCode: ").Append(ClassroomIdentificationCode).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MaximumNumberOfSeats: ").Append(MaximumNumberOfSeats).Append("\n");
            sb.Append("  OptimalNumberOfSeats: ").Append(OptimalNumberOfSeats).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClassroomIdentificationCode (string) maxLength
            if (this.ClassroomIdentificationCode != null && this.ClassroomIdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ClassroomIdentificationCode, length must be less than 60.", new [] { "ClassroomIdentificationCode" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiLocation" />
    /// </summary>
    public class EdFiLocationJsonConverter : JsonConverter<EdFiLocation>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiLocation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiLocation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> classroomIdentificationCode = default;
            Option<EdFiSchoolReference?> schoolReference = default;
            Option<string?> id = default;
            Option<int?> maximumNumberOfSeats = default;
            Option<int?> optimalNumberOfSeats = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "classroomIdentificationCode":
                            classroomIdentificationCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schoolReference":
                            schoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "maximumNumberOfSeats":
                            maximumNumberOfSeats = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "optimalNumberOfSeats":
                            optimalNumberOfSeats = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!classroomIdentificationCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiLocation.", nameof(classroomIdentificationCode));

            if (!schoolReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiLocation.", nameof(schoolReference));

            if (classroomIdentificationCode.IsSet && classroomIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(classroomIdentificationCode), "Property is not nullable for class EdFiLocation.");

            if (schoolReference.IsSet && schoolReference.Value == null)
                throw new ArgumentNullException(nameof(schoolReference), "Property is not nullable for class EdFiLocation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiLocation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiLocation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiLocation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiLocation.");

            return new EdFiLocation(classroomIdentificationCode.Value!, schoolReference.Value!, id, maximumNumberOfSeats, optimalNumberOfSeats, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiLocation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLocation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiLocation edFiLocation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiLocation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiLocation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLocation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiLocation edFiLocation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiLocation.ClassroomIdentificationCode == null)
                throw new ArgumentNullException(nameof(edFiLocation.ClassroomIdentificationCode), "Property is required for class EdFiLocation.");

            if (edFiLocation.SchoolReference == null)
                throw new ArgumentNullException(nameof(edFiLocation.SchoolReference), "Property is required for class EdFiLocation.");

            if (edFiLocation.IdOption.IsSet && edFiLocation.Id == null)
                throw new ArgumentNullException(nameof(edFiLocation.Id), "Property is required for class EdFiLocation.");

            if (edFiLocation.EtagOption.IsSet && edFiLocation.Etag == null)
                throw new ArgumentNullException(nameof(edFiLocation.Etag), "Property is required for class EdFiLocation.");

            if (edFiLocation.ExtOption.IsSet && edFiLocation.Ext == null)
                throw new ArgumentNullException(nameof(edFiLocation.Ext), "Property is required for class EdFiLocation.");

            writer.WriteString("classroomIdentificationCode", edFiLocation.ClassroomIdentificationCode);

            writer.WritePropertyName("schoolReference");
            JsonSerializer.Serialize(writer, edFiLocation.SchoolReference, jsonSerializerOptions);
            if (edFiLocation.IdOption.IsSet)
                writer.WriteString("id", edFiLocation.Id);

            if (edFiLocation.MaximumNumberOfSeatsOption.IsSet)
                if (edFiLocation.MaximumNumberOfSeatsOption.Value != null)
                    writer.WriteNumber("maximumNumberOfSeats", edFiLocation.MaximumNumberOfSeatsOption.Value!.Value);
                else
                    writer.WriteNull("maximumNumberOfSeats");

            if (edFiLocation.OptimalNumberOfSeatsOption.IsSet)
                if (edFiLocation.OptimalNumberOfSeatsOption.Value != null)
                    writer.WriteNumber("optimalNumberOfSeats", edFiLocation.OptimalNumberOfSeatsOption.Value!.Value);
                else
                    writer.WriteNull("optimalNumberOfSeats");

            if (edFiLocation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiLocation.Etag);

            if (edFiLocation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiLocation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiLocation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiLocation.Ext, jsonSerializerOptions);
            }
        }
    }
}
