// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiObjectiveAssessment
    /// </summary>
    public partial class EdFiObjectiveAssessment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiObjectiveAssessment" /> class.
        /// </summary>
        /// <param name="identificationCode">A unique number or alphanumeric code assigned to an objective assessment by a school, school system, a state, or other agency or entity.</param>
        /// <param name="assessmentReference">assessmentReference</param>
        /// <param name="id">id</param>
        /// <param name="parentObjectiveAssessmentReference">parentObjectiveAssessmentReference</param>
        /// <param name="academicSubjectDescriptor">The subject area of the objective assessment.</param>
        /// <param name="assessmentItems">An unordered collection of objectiveAssessmentAssessmentItems. References individual test items, if appropriate.</param>
        /// <param name="description">The description of the objective assessment (e.g., vocabulary, measurement, or geometry).</param>
        /// <param name="learningStandards">An unordered collection of objectiveAssessmentLearningStandards. Learning standard tested by this objective assessment.</param>
        /// <param name="maxRawScore">The maximum raw score achievable across all assessment items that are correct and scored at the maximum.</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for this level of objective assessment.</param>
        /// <param name="percentOfAssessment">The percentage of the assessment that tests this objective.</param>
        /// <param name="performanceLevels">An unordered collection of objectiveAssessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported: 1. Specification of performance level by minimum and maximum score, 2. Specification of performance level by cut score, using only minimum score, 3. Specification of performance level without any mapping to scores</param>
        /// <param name="scores">An unordered collection of objectiveAssessmentScores. Definition of the scores to be expected from this objective assessment.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the ObjectiveAssessment entity.</param>
        [JsonConstructor]
        public EdFiObjectiveAssessment(string identificationCode, EdFiAssessmentReference assessmentReference, Option<string?> id = default, Option<EdFiObjectiveAssessmentReference?> parentObjectiveAssessmentReference = default, Option<string?> academicSubjectDescriptor = default, Option<List<EdFiObjectiveAssessmentAssessmentItem>?> assessmentItems = default, Option<string?> description = default, Option<List<EdFiObjectiveAssessmentLearningStandard>?> learningStandards = default, Option<double?> maxRawScore = default, Option<string?> nomenclature = default, Option<double?> percentOfAssessment = default, Option<List<EdFiObjectiveAssessmentPerformanceLevel>?> performanceLevels = default, Option<List<EdFiObjectiveAssessmentScore>?> scores = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            IdentificationCode = identificationCode;
            AssessmentReference = assessmentReference;
            IdOption = id;
            ParentObjectiveAssessmentReferenceOption = parentObjectiveAssessmentReference;
            AcademicSubjectDescriptorOption = academicSubjectDescriptor;
            AssessmentItemsOption = assessmentItems;
            DescriptionOption = description;
            LearningStandardsOption = learningStandards;
            MaxRawScoreOption = maxRawScore;
            NomenclatureOption = nomenclature;
            PercentOfAssessmentOption = percentOfAssessment;
            PerformanceLevelsOption = performanceLevels;
            ScoresOption = scores;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique number or alphanumeric code assigned to an objective assessment by a school, school system, a state, or other agency or entity.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an objective assessment by a school, school system, a state, or other agency or entity.</value>
        [JsonPropertyName("identificationCode")]
        public string IdentificationCode { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentReference
        /// </summary>
        [JsonPropertyName("assessmentReference")]
        public EdFiAssessmentReference AssessmentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentObjectiveAssessmentReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiObjectiveAssessmentReference?> ParentObjectiveAssessmentReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentObjectiveAssessmentReference
        /// </summary>
        [JsonPropertyName("parentObjectiveAssessmentReference")]
        public EdFiObjectiveAssessmentReference? ParentObjectiveAssessmentReference { get { return this.ParentObjectiveAssessmentReferenceOption; } set { this.ParentObjectiveAssessmentReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AcademicSubjectDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AcademicSubjectDescriptorOption { get; private set; }

        /// <summary>
        /// The subject area of the objective assessment.
        /// </summary>
        /// <value>The subject area of the objective assessment.</value>
        [JsonPropertyName("academicSubjectDescriptor")]
        public string? AcademicSubjectDescriptor { get { return this.AcademicSubjectDescriptorOption; } set { this.AcademicSubjectDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentItems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiObjectiveAssessmentAssessmentItem>?> AssessmentItemsOption { get; private set; }

        /// <summary>
        /// An unordered collection of objectiveAssessmentAssessmentItems. References individual test items, if appropriate.
        /// </summary>
        /// <value>An unordered collection of objectiveAssessmentAssessmentItems. References individual test items, if appropriate.</value>
        [JsonPropertyName("assessmentItems")]
        public List<EdFiObjectiveAssessmentAssessmentItem>? AssessmentItems { get { return this.AssessmentItemsOption; } set { this.AssessmentItemsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the objective assessment (e.g., vocabulary, measurement, or geometry).
        /// </summary>
        /// <value>The description of the objective assessment (e.g., vocabulary, measurement, or geometry).</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandards
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiObjectiveAssessmentLearningStandard>?> LearningStandardsOption { get; private set; }

        /// <summary>
        /// An unordered collection of objectiveAssessmentLearningStandards. Learning standard tested by this objective assessment.
        /// </summary>
        /// <value>An unordered collection of objectiveAssessmentLearningStandards. Learning standard tested by this objective assessment.</value>
        [JsonPropertyName("learningStandards")]
        public List<EdFiObjectiveAssessmentLearningStandard>? LearningStandards { get { return this.LearningStandardsOption; } set { this.LearningStandardsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxRawScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MaxRawScoreOption { get; private set; }

        /// <summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        /// </summary>
        /// <value>The maximum raw score achievable across all assessment items that are correct and scored at the maximum.</value>
        [JsonPropertyName("maxRawScore")]
        public double? MaxRawScore { get { return this.MaxRawScoreOption; } set { this.MaxRawScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nomenclature
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NomenclatureOption { get; private set; }

        /// <summary>
        /// Reflects the specific nomenclature used for this level of objective assessment.
        /// </summary>
        /// <value>Reflects the specific nomenclature used for this level of objective assessment.</value>
        [JsonPropertyName("nomenclature")]
        public string? Nomenclature { get { return this.NomenclatureOption; } set { this.NomenclatureOption = new(value); } }

        /// <summary>
        /// Used to track the state of PercentOfAssessment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PercentOfAssessmentOption { get; private set; }

        /// <summary>
        /// The percentage of the assessment that tests this objective.
        /// </summary>
        /// <value>The percentage of the assessment that tests this objective.</value>
        [JsonPropertyName("percentOfAssessment")]
        public double? PercentOfAssessment { get { return this.PercentOfAssessmentOption; } set { this.PercentOfAssessmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of PerformanceLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiObjectiveAssessmentPerformanceLevel>?> PerformanceLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of objectiveAssessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported: 1. Specification of performance level by minimum and maximum score, 2. Specification of performance level by cut score, using only minimum score, 3. Specification of performance level without any mapping to scores
        /// </summary>
        /// <value>An unordered collection of objectiveAssessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported: 1. Specification of performance level by minimum and maximum score, 2. Specification of performance level by cut score, using only minimum score, 3. Specification of performance level without any mapping to scores</value>
        [JsonPropertyName("performanceLevels")]
        public List<EdFiObjectiveAssessmentPerformanceLevel>? PerformanceLevels { get { return this.PerformanceLevelsOption; } set { this.PerformanceLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Scores
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiObjectiveAssessmentScore>?> ScoresOption { get; private set; }

        /// <summary>
        /// An unordered collection of objectiveAssessmentScores. Definition of the scores to be expected from this objective assessment.
        /// </summary>
        /// <value>An unordered collection of objectiveAssessmentScores. Definition of the scores to be expected from this objective assessment.</value>
        [JsonPropertyName("scores")]
        public List<EdFiObjectiveAssessmentScore>? Scores { get { return this.ScoresOption; } set { this.ScoresOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the ObjectiveAssessment entity.
        /// </summary>
        /// <value>Extensions to the ObjectiveAssessment entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiObjectiveAssessment {\n");
            sb.Append("  IdentificationCode: ").Append(IdentificationCode).Append("\n");
            sb.Append("  AssessmentReference: ").Append(AssessmentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentObjectiveAssessmentReference: ").Append(ParentObjectiveAssessmentReference).Append("\n");
            sb.Append("  AcademicSubjectDescriptor: ").Append(AcademicSubjectDescriptor).Append("\n");
            sb.Append("  AssessmentItems: ").Append(AssessmentItems).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  MaxRawScore: ").Append(MaxRawScore).Append("\n");
            sb.Append("  Nomenclature: ").Append(Nomenclature).Append("\n");
            sb.Append("  PercentOfAssessment: ").Append(PercentOfAssessment).Append("\n");
            sb.Append("  PerformanceLevels: ").Append(PerformanceLevels).Append("\n");
            sb.Append("  Scores: ").Append(Scores).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IdentificationCode (string) maxLength
            if (this.IdentificationCode != null && this.IdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for IdentificationCode, length must be less than 60.", new [] { "IdentificationCode" });
            }

            // AcademicSubjectDescriptor (string) maxLength
            if (this.AcademicSubjectDescriptor != null && this.AcademicSubjectDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AcademicSubjectDescriptor, length must be less than 306.", new [] { "AcademicSubjectDescriptor" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // MaxRawScore (double) maximum
            if (this.MaxRawScoreOption.IsSet && this.MaxRawScoreOption.Value > (double)9999999999.99999)
            {
                yield return new ValidationResult("Invalid value for MaxRawScore, must be a value less than or equal to 9999999999.99999.", new [] { "MaxRawScore" });
            }

            // MaxRawScore (double) minimum
            if (this.MaxRawScoreOption.IsSet && this.MaxRawScoreOption.Value < (double)-9999999999.99999)
            {
                yield return new ValidationResult("Invalid value for MaxRawScore, must be a value greater than or equal to -9999999999.99999.", new [] { "MaxRawScore" });
            }

            // Nomenclature (string) maxLength
            if (this.Nomenclature != null && this.Nomenclature.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Nomenclature, length must be less than 100.", new [] { "Nomenclature" });
            }

            // PercentOfAssessment (double) maximum
            if (this.PercentOfAssessmentOption.IsSet && this.PercentOfAssessmentOption.Value > (double)9.9999)
            {
                yield return new ValidationResult("Invalid value for PercentOfAssessment, must be a value less than or equal to 9.9999.", new [] { "PercentOfAssessment" });
            }

            // PercentOfAssessment (double) minimum
            if (this.PercentOfAssessmentOption.IsSet && this.PercentOfAssessmentOption.Value < (double)-9.9999)
            {
                yield return new ValidationResult("Invalid value for PercentOfAssessment, must be a value greater than or equal to -9.9999.", new [] { "PercentOfAssessment" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiObjectiveAssessment" />
    /// </summary>
    public class EdFiObjectiveAssessmentJsonConverter : JsonConverter<EdFiObjectiveAssessment>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiObjectiveAssessment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiObjectiveAssessment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> identificationCode = default;
            Option<EdFiAssessmentReference?> assessmentReference = default;
            Option<string?> id = default;
            Option<EdFiObjectiveAssessmentReference?> parentObjectiveAssessmentReference = default;
            Option<string?> academicSubjectDescriptor = default;
            Option<List<EdFiObjectiveAssessmentAssessmentItem>?> assessmentItems = default;
            Option<string?> description = default;
            Option<List<EdFiObjectiveAssessmentLearningStandard>?> learningStandards = default;
            Option<double?> maxRawScore = default;
            Option<string?> nomenclature = default;
            Option<double?> percentOfAssessment = default;
            Option<List<EdFiObjectiveAssessmentPerformanceLevel>?> performanceLevels = default;
            Option<List<EdFiObjectiveAssessmentScore>?> scores = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "identificationCode":
                            identificationCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assessmentReference":
                            assessmentReference = new Option<EdFiAssessmentReference?>(JsonSerializer.Deserialize<EdFiAssessmentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parentObjectiveAssessmentReference":
                            parentObjectiveAssessmentReference = new Option<EdFiObjectiveAssessmentReference?>(JsonSerializer.Deserialize<EdFiObjectiveAssessmentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "academicSubjectDescriptor":
                            academicSubjectDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "assessmentItems":
                            assessmentItems = new Option<List<EdFiObjectiveAssessmentAssessmentItem>?>(JsonSerializer.Deserialize<List<EdFiObjectiveAssessmentAssessmentItem>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "learningStandards":
                            learningStandards = new Option<List<EdFiObjectiveAssessmentLearningStandard>?>(JsonSerializer.Deserialize<List<EdFiObjectiveAssessmentLearningStandard>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "maxRawScore":
                            maxRawScore = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "nomenclature":
                            nomenclature = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "percentOfAssessment":
                            percentOfAssessment = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "performanceLevels":
                            performanceLevels = new Option<List<EdFiObjectiveAssessmentPerformanceLevel>?>(JsonSerializer.Deserialize<List<EdFiObjectiveAssessmentPerformanceLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "scores":
                            scores = new Option<List<EdFiObjectiveAssessmentScore>?>(JsonSerializer.Deserialize<List<EdFiObjectiveAssessmentScore>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!identificationCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiObjectiveAssessment.", nameof(identificationCode));

            if (!assessmentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiObjectiveAssessment.", nameof(assessmentReference));

            if (identificationCode.IsSet && identificationCode.Value == null)
                throw new ArgumentNullException(nameof(identificationCode), "Property is not nullable for class EdFiObjectiveAssessment.");

            if (assessmentReference.IsSet && assessmentReference.Value == null)
                throw new ArgumentNullException(nameof(assessmentReference), "Property is not nullable for class EdFiObjectiveAssessment.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiObjectiveAssessment.");

            if (parentObjectiveAssessmentReference.IsSet && parentObjectiveAssessmentReference.Value == null)
                throw new ArgumentNullException(nameof(parentObjectiveAssessmentReference), "Property is not nullable for class EdFiObjectiveAssessment.");

            if (assessmentItems.IsSet && assessmentItems.Value == null)
                throw new ArgumentNullException(nameof(assessmentItems), "Property is not nullable for class EdFiObjectiveAssessment.");

            if (learningStandards.IsSet && learningStandards.Value == null)
                throw new ArgumentNullException(nameof(learningStandards), "Property is not nullable for class EdFiObjectiveAssessment.");

            if (performanceLevels.IsSet && performanceLevels.Value == null)
                throw new ArgumentNullException(nameof(performanceLevels), "Property is not nullable for class EdFiObjectiveAssessment.");

            if (scores.IsSet && scores.Value == null)
                throw new ArgumentNullException(nameof(scores), "Property is not nullable for class EdFiObjectiveAssessment.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiObjectiveAssessment.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiObjectiveAssessment.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiObjectiveAssessment.");

            return new EdFiObjectiveAssessment(identificationCode.Value!, assessmentReference.Value!, id, parentObjectiveAssessmentReference, academicSubjectDescriptor, assessmentItems, description, learningStandards, maxRawScore, nomenclature, percentOfAssessment, performanceLevels, scores, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiObjectiveAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiObjectiveAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiObjectiveAssessment edFiObjectiveAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiObjectiveAssessment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiObjectiveAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiObjectiveAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiObjectiveAssessment edFiObjectiveAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiObjectiveAssessment.IdentificationCode == null)
                throw new ArgumentNullException(nameof(edFiObjectiveAssessment.IdentificationCode), "Property is required for class EdFiObjectiveAssessment.");

            if (edFiObjectiveAssessment.AssessmentReference == null)
                throw new ArgumentNullException(nameof(edFiObjectiveAssessment.AssessmentReference), "Property is required for class EdFiObjectiveAssessment.");

            if (edFiObjectiveAssessment.IdOption.IsSet && edFiObjectiveAssessment.Id == null)
                throw new ArgumentNullException(nameof(edFiObjectiveAssessment.Id), "Property is required for class EdFiObjectiveAssessment.");

            if (edFiObjectiveAssessment.ParentObjectiveAssessmentReferenceOption.IsSet && edFiObjectiveAssessment.ParentObjectiveAssessmentReference == null)
                throw new ArgumentNullException(nameof(edFiObjectiveAssessment.ParentObjectiveAssessmentReference), "Property is required for class EdFiObjectiveAssessment.");

            if (edFiObjectiveAssessment.AssessmentItemsOption.IsSet && edFiObjectiveAssessment.AssessmentItems == null)
                throw new ArgumentNullException(nameof(edFiObjectiveAssessment.AssessmentItems), "Property is required for class EdFiObjectiveAssessment.");

            if (edFiObjectiveAssessment.LearningStandardsOption.IsSet && edFiObjectiveAssessment.LearningStandards == null)
                throw new ArgumentNullException(nameof(edFiObjectiveAssessment.LearningStandards), "Property is required for class EdFiObjectiveAssessment.");

            if (edFiObjectiveAssessment.PerformanceLevelsOption.IsSet && edFiObjectiveAssessment.PerformanceLevels == null)
                throw new ArgumentNullException(nameof(edFiObjectiveAssessment.PerformanceLevels), "Property is required for class EdFiObjectiveAssessment.");

            if (edFiObjectiveAssessment.ScoresOption.IsSet && edFiObjectiveAssessment.Scores == null)
                throw new ArgumentNullException(nameof(edFiObjectiveAssessment.Scores), "Property is required for class EdFiObjectiveAssessment.");

            if (edFiObjectiveAssessment.EtagOption.IsSet && edFiObjectiveAssessment.Etag == null)
                throw new ArgumentNullException(nameof(edFiObjectiveAssessment.Etag), "Property is required for class EdFiObjectiveAssessment.");

            if (edFiObjectiveAssessment.ExtOption.IsSet && edFiObjectiveAssessment.Ext == null)
                throw new ArgumentNullException(nameof(edFiObjectiveAssessment.Ext), "Property is required for class EdFiObjectiveAssessment.");

            writer.WriteString("identificationCode", edFiObjectiveAssessment.IdentificationCode);

            writer.WritePropertyName("assessmentReference");
            JsonSerializer.Serialize(writer, edFiObjectiveAssessment.AssessmentReference, jsonSerializerOptions);
            if (edFiObjectiveAssessment.IdOption.IsSet)
                writer.WriteString("id", edFiObjectiveAssessment.Id);

            if (edFiObjectiveAssessment.ParentObjectiveAssessmentReferenceOption.IsSet)
            {
                writer.WritePropertyName("parentObjectiveAssessmentReference");
                JsonSerializer.Serialize(writer, edFiObjectiveAssessment.ParentObjectiveAssessmentReference, jsonSerializerOptions);
            }
            if (edFiObjectiveAssessment.AcademicSubjectDescriptorOption.IsSet)
                if (edFiObjectiveAssessment.AcademicSubjectDescriptorOption.Value != null)
                    writer.WriteString("academicSubjectDescriptor", edFiObjectiveAssessment.AcademicSubjectDescriptor);
                else
                    writer.WriteNull("academicSubjectDescriptor");

            if (edFiObjectiveAssessment.AssessmentItemsOption.IsSet)
            {
                writer.WritePropertyName("assessmentItems");
                JsonSerializer.Serialize(writer, edFiObjectiveAssessment.AssessmentItems, jsonSerializerOptions);
            }
            if (edFiObjectiveAssessment.DescriptionOption.IsSet)
                if (edFiObjectiveAssessment.DescriptionOption.Value != null)
                    writer.WriteString("description", edFiObjectiveAssessment.Description);
                else
                    writer.WriteNull("description");

            if (edFiObjectiveAssessment.LearningStandardsOption.IsSet)
            {
                writer.WritePropertyName("learningStandards");
                JsonSerializer.Serialize(writer, edFiObjectiveAssessment.LearningStandards, jsonSerializerOptions);
            }
            if (edFiObjectiveAssessment.MaxRawScoreOption.IsSet)
                if (edFiObjectiveAssessment.MaxRawScoreOption.Value != null)
                    writer.WriteNumber("maxRawScore", edFiObjectiveAssessment.MaxRawScoreOption.Value!.Value);
                else
                    writer.WriteNull("maxRawScore");

            if (edFiObjectiveAssessment.NomenclatureOption.IsSet)
                if (edFiObjectiveAssessment.NomenclatureOption.Value != null)
                    writer.WriteString("nomenclature", edFiObjectiveAssessment.Nomenclature);
                else
                    writer.WriteNull("nomenclature");

            if (edFiObjectiveAssessment.PercentOfAssessmentOption.IsSet)
                if (edFiObjectiveAssessment.PercentOfAssessmentOption.Value != null)
                    writer.WriteNumber("percentOfAssessment", edFiObjectiveAssessment.PercentOfAssessmentOption.Value!.Value);
                else
                    writer.WriteNull("percentOfAssessment");

            if (edFiObjectiveAssessment.PerformanceLevelsOption.IsSet)
            {
                writer.WritePropertyName("performanceLevels");
                JsonSerializer.Serialize(writer, edFiObjectiveAssessment.PerformanceLevels, jsonSerializerOptions);
            }
            if (edFiObjectiveAssessment.ScoresOption.IsSet)
            {
                writer.WritePropertyName("scores");
                JsonSerializer.Serialize(writer, edFiObjectiveAssessment.Scores, jsonSerializerOptions);
            }
            if (edFiObjectiveAssessment.EtagOption.IsSet)
                writer.WriteString("_etag", edFiObjectiveAssessment.Etag);

            if (edFiObjectiveAssessment.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiObjectiveAssessment.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiObjectiveAssessment.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiObjectiveAssessment.Ext, jsonSerializerOptions);
            }
        }
    }
}
