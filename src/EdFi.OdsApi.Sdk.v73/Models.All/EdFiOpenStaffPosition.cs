// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiOpenStaffPosition
    /// </summary>
    public partial class EdFiOpenStaffPosition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiOpenStaffPosition" /> class.
        /// </summary>
        /// <param name="requisitionNumber">The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="datePosted">Date the open staff position was posted.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract desired for the position.</param>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff.</param>
        /// <param name="id">id</param>
        /// <param name="academicSubjects">An unordered collection of openStaffPositionAcademicSubjects. The teaching field required for the open staff position.</param>
        /// <param name="datePostingRemoved">The date the posting was removed or filled.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="instructionalGradeLevels">An unordered collection of openStaffPositionInstructionalGradeLevels. The set of grade levels for which the position&#39;s assignment is responsible.</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position.</param>
        /// <param name="postingResultDescriptor">Indication of whether the OpenStaffPosition was filled or retired without filling.</param>
        /// <param name="programAssignmentDescriptor">The name of the program for which the open staff position will be assigned.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the OpenStaffPosition entity.</param>
        [JsonConstructor]
        public EdFiOpenStaffPosition(string requisitionNumber, EdFiEducationOrganizationReference educationOrganizationReference, DateOnly datePosted, string employmentStatusDescriptor, string staffClassificationDescriptor, Option<string?> id = default, Option<List<EdFiOpenStaffPositionAcademicSubject>?> academicSubjects = default, Option<DateOnly?> datePostingRemoved = default, Option<List<EdFiOpenStaffPositionInstructionalGradeLevel>?> instructionalGradeLevels = default, Option<string?> positionTitle = default, Option<string?> postingResultDescriptor = default, Option<string?> programAssignmentDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            RequisitionNumber = requisitionNumber;
            EducationOrganizationReference = educationOrganizationReference;
            DatePosted = datePosted;
            EmploymentStatusDescriptor = employmentStatusDescriptor;
            StaffClassificationDescriptor = staffClassificationDescriptor;
            IdOption = id;
            AcademicSubjectsOption = academicSubjects;
            DatePostingRemovedOption = datePostingRemoved;
            InstructionalGradeLevelsOption = instructionalGradeLevels;
            PositionTitleOption = positionTitle;
            PostingResultDescriptorOption = postingResultDescriptor;
            ProgramAssignmentDescriptorOption = programAssignmentDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        /// </summary>
        /// <value>The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.</value>
        [JsonPropertyName("requisitionNumber")]
        public string RequisitionNumber { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Date the open staff position was posted.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Date the open staff position was posted.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("datePosted")]
        public DateOnly DatePosted { get; set; }

        /// <summary>
        /// Reflects the type of employment or contract desired for the position.
        /// </summary>
        /// <value>Reflects the type of employment or contract desired for the position.</value>
        [JsonPropertyName("employmentStatusDescriptor")]
        public string EmploymentStatusDescriptor { get; set; }

        /// <summary>
        /// The titles of employment, official status, or rank of education staff.
        /// </summary>
        /// <value>The titles of employment, official status, or rank of education staff.</value>
        [JsonPropertyName("staffClassificationDescriptor")]
        public string StaffClassificationDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AcademicSubjects
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiOpenStaffPositionAcademicSubject>?> AcademicSubjectsOption { get; private set; }

        /// <summary>
        /// An unordered collection of openStaffPositionAcademicSubjects. The teaching field required for the open staff position.
        /// </summary>
        /// <value>An unordered collection of openStaffPositionAcademicSubjects. The teaching field required for the open staff position.</value>
        [JsonPropertyName("academicSubjects")]
        public List<EdFiOpenStaffPositionAcademicSubject>? AcademicSubjects { get { return this.AcademicSubjectsOption; } set { this.AcademicSubjectsOption = new(value); } }

        /// <summary>
        /// Used to track the state of DatePostingRemoved
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DatePostingRemovedOption { get; private set; }

        /// <summary>
        /// The date the posting was removed or filled.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The date the posting was removed or filled.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("datePostingRemoved")]
        public DateOnly? DatePostingRemoved { get { return this.DatePostingRemovedOption; } set { this.DatePostingRemovedOption = new(value); } }

        /// <summary>
        /// Used to track the state of InstructionalGradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiOpenStaffPositionInstructionalGradeLevel>?> InstructionalGradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of openStaffPositionInstructionalGradeLevels. The set of grade levels for which the position&#39;s assignment is responsible.
        /// </summary>
        /// <value>An unordered collection of openStaffPositionInstructionalGradeLevels. The set of grade levels for which the position&#39;s assignment is responsible.</value>
        [JsonPropertyName("instructionalGradeLevels")]
        public List<EdFiOpenStaffPositionInstructionalGradeLevel>? InstructionalGradeLevels { get { return this.InstructionalGradeLevelsOption; } set { this.InstructionalGradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PositionTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PositionTitleOption { get; private set; }

        /// <summary>
        /// The descriptive name of an individual&#39;s position.
        /// </summary>
        /// <value>The descriptive name of an individual&#39;s position.</value>
        [JsonPropertyName("positionTitle")]
        public string? PositionTitle { get { return this.PositionTitleOption; } set { this.PositionTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of PostingResultDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostingResultDescriptorOption { get; private set; }

        /// <summary>
        /// Indication of whether the OpenStaffPosition was filled or retired without filling.
        /// </summary>
        /// <value>Indication of whether the OpenStaffPosition was filled or retired without filling.</value>
        [JsonPropertyName("postingResultDescriptor")]
        public string? PostingResultDescriptor { get { return this.PostingResultDescriptorOption; } set { this.PostingResultDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramAssignmentDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgramAssignmentDescriptorOption { get; private set; }

        /// <summary>
        /// The name of the program for which the open staff position will be assigned.
        /// </summary>
        /// <value>The name of the program for which the open staff position will be assigned.</value>
        [JsonPropertyName("programAssignmentDescriptor")]
        public string? ProgramAssignmentDescriptor { get { return this.ProgramAssignmentDescriptorOption; } set { this.ProgramAssignmentDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the OpenStaffPosition entity.
        /// </summary>
        /// <value>Extensions to the OpenStaffPosition entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiOpenStaffPosition {\n");
            sb.Append("  RequisitionNumber: ").Append(RequisitionNumber).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  DatePosted: ").Append(DatePosted).Append("\n");
            sb.Append("  EmploymentStatusDescriptor: ").Append(EmploymentStatusDescriptor).Append("\n");
            sb.Append("  StaffClassificationDescriptor: ").Append(StaffClassificationDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  DatePostingRemoved: ").Append(DatePostingRemoved).Append("\n");
            sb.Append("  InstructionalGradeLevels: ").Append(InstructionalGradeLevels).Append("\n");
            sb.Append("  PositionTitle: ").Append(PositionTitle).Append("\n");
            sb.Append("  PostingResultDescriptor: ").Append(PostingResultDescriptor).Append("\n");
            sb.Append("  ProgramAssignmentDescriptor: ").Append(ProgramAssignmentDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RequisitionNumber (string) maxLength
            if (this.RequisitionNumber != null && this.RequisitionNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for RequisitionNumber, length must be less than 20.", new [] { "RequisitionNumber" });
            }

            // EmploymentStatusDescriptor (string) maxLength
            if (this.EmploymentStatusDescriptor != null && this.EmploymentStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EmploymentStatusDescriptor, length must be less than 306.", new [] { "EmploymentStatusDescriptor" });
            }

            // StaffClassificationDescriptor (string) maxLength
            if (this.StaffClassificationDescriptor != null && this.StaffClassificationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for StaffClassificationDescriptor, length must be less than 306.", new [] { "StaffClassificationDescriptor" });
            }

            // PositionTitle (string) maxLength
            if (this.PositionTitle != null && this.PositionTitle.Length > 100)
            {
                yield return new ValidationResult("Invalid value for PositionTitle, length must be less than 100.", new [] { "PositionTitle" });
            }

            // PostingResultDescriptor (string) maxLength
            if (this.PostingResultDescriptor != null && this.PostingResultDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PostingResultDescriptor, length must be less than 306.", new [] { "PostingResultDescriptor" });
            }

            // ProgramAssignmentDescriptor (string) maxLength
            if (this.ProgramAssignmentDescriptor != null && this.ProgramAssignmentDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramAssignmentDescriptor, length must be less than 306.", new [] { "ProgramAssignmentDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiOpenStaffPosition" />
    /// </summary>
    public class EdFiOpenStaffPositionJsonConverter : JsonConverter<EdFiOpenStaffPosition>
    {
        /// <summary>
        /// The format to use to serialize DatePosted
        /// </summary>
        public static string DatePostedFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize DatePostingRemoved
        /// </summary>
        public static string DatePostingRemovedFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiOpenStaffPosition" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiOpenStaffPosition Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> requisitionNumber = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<DateOnly?> datePosted = default;
            Option<string?> employmentStatusDescriptor = default;
            Option<string?> staffClassificationDescriptor = default;
            Option<string?> id = default;
            Option<List<EdFiOpenStaffPositionAcademicSubject>?> academicSubjects = default;
            Option<DateOnly?> datePostingRemoved = default;
            Option<List<EdFiOpenStaffPositionInstructionalGradeLevel>?> instructionalGradeLevels = default;
            Option<string?> positionTitle = default;
            Option<string?> postingResultDescriptor = default;
            Option<string?> programAssignmentDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "requisitionNumber":
                            requisitionNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "datePosted":
                            datePosted = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "employmentStatusDescriptor":
                            employmentStatusDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "staffClassificationDescriptor":
                            staffClassificationDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "academicSubjects":
                            academicSubjects = new Option<List<EdFiOpenStaffPositionAcademicSubject>?>(JsonSerializer.Deserialize<List<EdFiOpenStaffPositionAcademicSubject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "datePostingRemoved":
                            datePostingRemoved = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "instructionalGradeLevels":
                            instructionalGradeLevels = new Option<List<EdFiOpenStaffPositionInstructionalGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiOpenStaffPositionInstructionalGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "positionTitle":
                            positionTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "postingResultDescriptor":
                            postingResultDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "programAssignmentDescriptor":
                            programAssignmentDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!requisitionNumber.IsSet)
                throw new ArgumentException("Property is required for class EdFiOpenStaffPosition.", nameof(requisitionNumber));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiOpenStaffPosition.", nameof(educationOrganizationReference));

            if (!datePosted.IsSet)
                throw new ArgumentException("Property is required for class EdFiOpenStaffPosition.", nameof(datePosted));

            if (!employmentStatusDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiOpenStaffPosition.", nameof(employmentStatusDescriptor));

            if (!staffClassificationDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiOpenStaffPosition.", nameof(staffClassificationDescriptor));

            if (requisitionNumber.IsSet && requisitionNumber.Value == null)
                throw new ArgumentNullException(nameof(requisitionNumber), "Property is not nullable for class EdFiOpenStaffPosition.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiOpenStaffPosition.");

            if (datePosted.IsSet && datePosted.Value == null)
                throw new ArgumentNullException(nameof(datePosted), "Property is not nullable for class EdFiOpenStaffPosition.");

            if (employmentStatusDescriptor.IsSet && employmentStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(employmentStatusDescriptor), "Property is not nullable for class EdFiOpenStaffPosition.");

            if (staffClassificationDescriptor.IsSet && staffClassificationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(staffClassificationDescriptor), "Property is not nullable for class EdFiOpenStaffPosition.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiOpenStaffPosition.");

            if (academicSubjects.IsSet && academicSubjects.Value == null)
                throw new ArgumentNullException(nameof(academicSubjects), "Property is not nullable for class EdFiOpenStaffPosition.");

            if (instructionalGradeLevels.IsSet && instructionalGradeLevels.Value == null)
                throw new ArgumentNullException(nameof(instructionalGradeLevels), "Property is not nullable for class EdFiOpenStaffPosition.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiOpenStaffPosition.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiOpenStaffPosition.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiOpenStaffPosition.");

            return new EdFiOpenStaffPosition(requisitionNumber.Value!, educationOrganizationReference.Value!, datePosted.Value!.Value!, employmentStatusDescriptor.Value!, staffClassificationDescriptor.Value!, id, academicSubjects, datePostingRemoved, instructionalGradeLevels, positionTitle, postingResultDescriptor, programAssignmentDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiOpenStaffPosition" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiOpenStaffPosition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiOpenStaffPosition edFiOpenStaffPosition, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiOpenStaffPosition, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiOpenStaffPosition" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiOpenStaffPosition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiOpenStaffPosition edFiOpenStaffPosition, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiOpenStaffPosition.RequisitionNumber == null)
                throw new ArgumentNullException(nameof(edFiOpenStaffPosition.RequisitionNumber), "Property is required for class EdFiOpenStaffPosition.");

            if (edFiOpenStaffPosition.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiOpenStaffPosition.EducationOrganizationReference), "Property is required for class EdFiOpenStaffPosition.");

            if (edFiOpenStaffPosition.EmploymentStatusDescriptor == null)
                throw new ArgumentNullException(nameof(edFiOpenStaffPosition.EmploymentStatusDescriptor), "Property is required for class EdFiOpenStaffPosition.");

            if (edFiOpenStaffPosition.StaffClassificationDescriptor == null)
                throw new ArgumentNullException(nameof(edFiOpenStaffPosition.StaffClassificationDescriptor), "Property is required for class EdFiOpenStaffPosition.");

            if (edFiOpenStaffPosition.IdOption.IsSet && edFiOpenStaffPosition.Id == null)
                throw new ArgumentNullException(nameof(edFiOpenStaffPosition.Id), "Property is required for class EdFiOpenStaffPosition.");

            if (edFiOpenStaffPosition.AcademicSubjectsOption.IsSet && edFiOpenStaffPosition.AcademicSubjects == null)
                throw new ArgumentNullException(nameof(edFiOpenStaffPosition.AcademicSubjects), "Property is required for class EdFiOpenStaffPosition.");

            if (edFiOpenStaffPosition.InstructionalGradeLevelsOption.IsSet && edFiOpenStaffPosition.InstructionalGradeLevels == null)
                throw new ArgumentNullException(nameof(edFiOpenStaffPosition.InstructionalGradeLevels), "Property is required for class EdFiOpenStaffPosition.");

            if (edFiOpenStaffPosition.EtagOption.IsSet && edFiOpenStaffPosition.Etag == null)
                throw new ArgumentNullException(nameof(edFiOpenStaffPosition.Etag), "Property is required for class EdFiOpenStaffPosition.");

            if (edFiOpenStaffPosition.ExtOption.IsSet && edFiOpenStaffPosition.Ext == null)
                throw new ArgumentNullException(nameof(edFiOpenStaffPosition.Ext), "Property is required for class EdFiOpenStaffPosition.");

            writer.WriteString("requisitionNumber", edFiOpenStaffPosition.RequisitionNumber);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiOpenStaffPosition.EducationOrganizationReference, jsonSerializerOptions);
            writer.WriteString("datePosted", edFiOpenStaffPosition.DatePosted.ToString(DatePostedFormat));

            writer.WriteString("employmentStatusDescriptor", edFiOpenStaffPosition.EmploymentStatusDescriptor);

            writer.WriteString("staffClassificationDescriptor", edFiOpenStaffPosition.StaffClassificationDescriptor);

            if (edFiOpenStaffPosition.IdOption.IsSet)
                writer.WriteString("id", edFiOpenStaffPosition.Id);

            if (edFiOpenStaffPosition.AcademicSubjectsOption.IsSet)
            {
                writer.WritePropertyName("academicSubjects");
                JsonSerializer.Serialize(writer, edFiOpenStaffPosition.AcademicSubjects, jsonSerializerOptions);
            }
            if (edFiOpenStaffPosition.DatePostingRemovedOption.IsSet)
                if (edFiOpenStaffPosition.DatePostingRemovedOption.Value != null)
                    writer.WriteString("datePostingRemoved", edFiOpenStaffPosition.DatePostingRemovedOption.Value!.Value.ToString(DatePostingRemovedFormat));
                else
                    writer.WriteNull("datePostingRemoved");

            if (edFiOpenStaffPosition.InstructionalGradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("instructionalGradeLevels");
                JsonSerializer.Serialize(writer, edFiOpenStaffPosition.InstructionalGradeLevels, jsonSerializerOptions);
            }
            if (edFiOpenStaffPosition.PositionTitleOption.IsSet)
                if (edFiOpenStaffPosition.PositionTitleOption.Value != null)
                    writer.WriteString("positionTitle", edFiOpenStaffPosition.PositionTitle);
                else
                    writer.WriteNull("positionTitle");

            if (edFiOpenStaffPosition.PostingResultDescriptorOption.IsSet)
                if (edFiOpenStaffPosition.PostingResultDescriptorOption.Value != null)
                    writer.WriteString("postingResultDescriptor", edFiOpenStaffPosition.PostingResultDescriptor);
                else
                    writer.WriteNull("postingResultDescriptor");

            if (edFiOpenStaffPosition.ProgramAssignmentDescriptorOption.IsSet)
                if (edFiOpenStaffPosition.ProgramAssignmentDescriptorOption.Value != null)
                    writer.WriteString("programAssignmentDescriptor", edFiOpenStaffPosition.ProgramAssignmentDescriptor);
                else
                    writer.WriteNull("programAssignmentDescriptor");

            if (edFiOpenStaffPosition.EtagOption.IsSet)
                writer.WriteString("_etag", edFiOpenStaffPosition.Etag);

            if (edFiOpenStaffPosition.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiOpenStaffPosition.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiOpenStaffPosition.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiOpenStaffPosition.Ext, jsonSerializerOptions);
            }
        }
    }
}
