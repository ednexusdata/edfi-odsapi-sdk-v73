// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiOrganizationDepartment
    /// </summary>
    public partial class EdFiOrganizationDepartment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiOrganizationDepartment" /> class.
        /// </summary>
        /// <param name="categories">An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.</param>
        /// <param name="organizationDepartmentId">The unique identification code for the organization department. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</param>
        /// <param name="nameOfInstitution">The full, legally accepted name of the institution.</param>
        /// <param name="id">id</param>
        /// <param name="parentEducationOrganizationReference">parentEducationOrganizationReference</param>
        /// <param name="academicSubjectDescriptor">The intended major subject area of the department.</param>
        /// <param name="addresses">An unordered collection of educationOrganizationAddresses. The set of elements that describes an address for the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.</param>
        /// <param name="identificationCodes">An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.</param>
        /// <param name="indicators">An unordered collection of educationOrganizationIndicators. An indicator or metric of an education organization.</param>
        /// <param name="institutionTelephones">An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.</param>
        /// <param name="internationalAddresses">An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.</param>
        /// <param name="operationalStatusDescriptor">The current operational status of the education organization (e.g., active, inactive).</param>
        /// <param name="shortNameOfInstitution">A short name for the institution.</param>
        /// <param name="webSite">The public web site address (URL) for the education organization.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the OrganizationDepartment entity.</param>
        [JsonConstructor]
        public EdFiOrganizationDepartment(List<EdFiEducationOrganizationCategory> categories, long organizationDepartmentId, string nameOfInstitution, Option<string?> id = default, Option<EdFiEducationOrganizationReference?> parentEducationOrganizationReference = default, Option<string?> academicSubjectDescriptor = default, Option<List<EdFiEducationOrganizationAddress>?> addresses = default, Option<List<EdFiEducationOrganizationIdentificationCode>?> identificationCodes = default, Option<List<EdFiEducationOrganizationIndicator>?> indicators = default, Option<List<EdFiEducationOrganizationInstitutionTelephone>?> institutionTelephones = default, Option<List<EdFiEducationOrganizationInternationalAddress>?> internationalAddresses = default, Option<string?> operationalStatusDescriptor = default, Option<string?> shortNameOfInstitution = default, Option<string?> webSite = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            Categories = categories;
            OrganizationDepartmentId = organizationDepartmentId;
            NameOfInstitution = nameOfInstitution;
            IdOption = id;
            ParentEducationOrganizationReferenceOption = parentEducationOrganizationReference;
            AcademicSubjectDescriptorOption = academicSubjectDescriptor;
            AddressesOption = addresses;
            IdentificationCodesOption = identificationCodes;
            IndicatorsOption = indicators;
            InstitutionTelephonesOption = institutionTelephones;
            InternationalAddressesOption = internationalAddresses;
            OperationalStatusDescriptorOption = operationalStatusDescriptor;
            ShortNameOfInstitutionOption = shortNameOfInstitution;
            WebSiteOption = webSite;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.</value>
        [JsonPropertyName("categories")]
        public List<EdFiEducationOrganizationCategory> Categories { get; set; }

        /// <summary>
        /// The unique identification code for the organization department. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.
        /// </summary>
        /// <value>The unique identification code for the organization department. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</value>
        [JsonPropertyName("organizationDepartmentId")]
        public long OrganizationDepartmentId { get; set; }

        /// <summary>
        /// The full, legally accepted name of the institution.
        /// </summary>
        /// <value>The full, legally accepted name of the institution.</value>
        [JsonPropertyName("nameOfInstitution")]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentEducationOrganizationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiEducationOrganizationReference?> ParentEducationOrganizationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentEducationOrganizationReference
        /// </summary>
        [JsonPropertyName("parentEducationOrganizationReference")]
        public EdFiEducationOrganizationReference? ParentEducationOrganizationReference { get { return this.ParentEducationOrganizationReferenceOption; } set { this.ParentEducationOrganizationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AcademicSubjectDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AcademicSubjectDescriptorOption { get; private set; }

        /// <summary>
        /// The intended major subject area of the department.
        /// </summary>
        /// <value>The intended major subject area of the department.</value>
        [JsonPropertyName("academicSubjectDescriptor")]
        public string? AcademicSubjectDescriptor { get { return this.AcademicSubjectDescriptorOption; } set { this.AcademicSubjectDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Addresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationAddress>?> AddressesOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationAddresses. The set of elements that describes an address for the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationAddresses. The set of elements that describes an address for the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.</value>
        [JsonPropertyName("addresses")]
        public List<EdFiEducationOrganizationAddress>? Addresses { get { return this.AddressesOption; } set { this.AddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdentificationCodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationIdentificationCode>?> IdentificationCodesOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.</value>
        [JsonPropertyName("identificationCodes")]
        public List<EdFiEducationOrganizationIdentificationCode>? IdentificationCodes { get { return this.IdentificationCodesOption; } set { this.IdentificationCodesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Indicators
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationIndicator>?> IndicatorsOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationIndicators. An indicator or metric of an education organization.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationIndicators. An indicator or metric of an education organization.</value>
        [JsonPropertyName("indicators")]
        public List<EdFiEducationOrganizationIndicator>? Indicators { get { return this.IndicatorsOption; } set { this.IndicatorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of InstitutionTelephones
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationInstitutionTelephone>?> InstitutionTelephonesOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.</value>
        [JsonPropertyName("institutionTelephones")]
        public List<EdFiEducationOrganizationInstitutionTelephone>? InstitutionTelephones { get { return this.InstitutionTelephonesOption; } set { this.InstitutionTelephonesOption = new(value); } }

        /// <summary>
        /// Used to track the state of InternationalAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiEducationOrganizationInternationalAddress>?> InternationalAddressesOption { get; private set; }

        /// <summary>
        /// An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.
        /// </summary>
        /// <value>An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.</value>
        [JsonPropertyName("internationalAddresses")]
        public List<EdFiEducationOrganizationInternationalAddress>? InternationalAddresses { get { return this.InternationalAddressesOption; } set { this.InternationalAddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of OperationalStatusDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OperationalStatusDescriptorOption { get; private set; }

        /// <summary>
        /// The current operational status of the education organization (e.g., active, inactive).
        /// </summary>
        /// <value>The current operational status of the education organization (e.g., active, inactive).</value>
        [JsonPropertyName("operationalStatusDescriptor")]
        public string? OperationalStatusDescriptor { get { return this.OperationalStatusDescriptorOption; } set { this.OperationalStatusDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShortNameOfInstitution
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShortNameOfInstitutionOption { get; private set; }

        /// <summary>
        /// A short name for the institution.
        /// </summary>
        /// <value>A short name for the institution.</value>
        [JsonPropertyName("shortNameOfInstitution")]
        public string? ShortNameOfInstitution { get { return this.ShortNameOfInstitutionOption; } set { this.ShortNameOfInstitutionOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebSite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebSiteOption { get; private set; }

        /// <summary>
        /// The public web site address (URL) for the education organization.
        /// </summary>
        /// <value>The public web site address (URL) for the education organization.</value>
        [JsonPropertyName("webSite")]
        public string? WebSite { get { return this.WebSiteOption; } set { this.WebSiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the OrganizationDepartment entity.
        /// </summary>
        /// <value>Extensions to the OrganizationDepartment entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiOrganizationDepartment {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  OrganizationDepartmentId: ").Append(OrganizationDepartmentId).Append("\n");
            sb.Append("  NameOfInstitution: ").Append(NameOfInstitution).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentEducationOrganizationReference: ").Append(ParentEducationOrganizationReference).Append("\n");
            sb.Append("  AcademicSubjectDescriptor: ").Append(AcademicSubjectDescriptor).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  Indicators: ").Append(Indicators).Append("\n");
            sb.Append("  InstitutionTelephones: ").Append(InstitutionTelephones).Append("\n");
            sb.Append("  InternationalAddresses: ").Append(InternationalAddresses).Append("\n");
            sb.Append("  OperationalStatusDescriptor: ").Append(OperationalStatusDescriptor).Append("\n");
            sb.Append("  ShortNameOfInstitution: ").Append(ShortNameOfInstitution).Append("\n");
            sb.Append("  WebSite: ").Append(WebSite).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NameOfInstitution (string) maxLength
            if (this.NameOfInstitution != null && this.NameOfInstitution.Length > 75)
            {
                yield return new ValidationResult("Invalid value for NameOfInstitution, length must be less than 75.", new [] { "NameOfInstitution" });
            }

            // AcademicSubjectDescriptor (string) maxLength
            if (this.AcademicSubjectDescriptor != null && this.AcademicSubjectDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AcademicSubjectDescriptor, length must be less than 306.", new [] { "AcademicSubjectDescriptor" });
            }

            // OperationalStatusDescriptor (string) maxLength
            if (this.OperationalStatusDescriptor != null && this.OperationalStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for OperationalStatusDescriptor, length must be less than 306.", new [] { "OperationalStatusDescriptor" });
            }

            // ShortNameOfInstitution (string) maxLength
            if (this.ShortNameOfInstitution != null && this.ShortNameOfInstitution.Length > 75)
            {
                yield return new ValidationResult("Invalid value for ShortNameOfInstitution, length must be less than 75.", new [] { "ShortNameOfInstitution" });
            }

            // WebSite (string) maxLength
            if (this.WebSite != null && this.WebSite.Length > 255)
            {
                yield return new ValidationResult("Invalid value for WebSite, length must be less than 255.", new [] { "WebSite" });
            }

            // WebSite (string) minLength
            if (this.WebSite != null && this.WebSite.Length < 5)
            {
                yield return new ValidationResult("Invalid value for WebSite, length must be greater than 5.", new [] { "WebSite" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiOrganizationDepartment" />
    /// </summary>
    public class EdFiOrganizationDepartmentJsonConverter : JsonConverter<EdFiOrganizationDepartment>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiOrganizationDepartment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiOrganizationDepartment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EdFiEducationOrganizationCategory>?> categories = default;
            Option<long?> organizationDepartmentId = default;
            Option<string?> nameOfInstitution = default;
            Option<string?> id = default;
            Option<EdFiEducationOrganizationReference?> parentEducationOrganizationReference = default;
            Option<string?> academicSubjectDescriptor = default;
            Option<List<EdFiEducationOrganizationAddress>?> addresses = default;
            Option<List<EdFiEducationOrganizationIdentificationCode>?> identificationCodes = default;
            Option<List<EdFiEducationOrganizationIndicator>?> indicators = default;
            Option<List<EdFiEducationOrganizationInstitutionTelephone>?> institutionTelephones = default;
            Option<List<EdFiEducationOrganizationInternationalAddress>?> internationalAddresses = default;
            Option<string?> operationalStatusDescriptor = default;
            Option<string?> shortNameOfInstitution = default;
            Option<string?> webSite = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "categories":
                            categories = new Option<List<EdFiEducationOrganizationCategory>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationCategory>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "organizationDepartmentId":
                            organizationDepartmentId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "nameOfInstitution":
                            nameOfInstitution = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parentEducationOrganizationReference":
                            parentEducationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "academicSubjectDescriptor":
                            academicSubjectDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "addresses":
                            addresses = new Option<List<EdFiEducationOrganizationAddress>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationAddress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "identificationCodes":
                            identificationCodes = new Option<List<EdFiEducationOrganizationIdentificationCode>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationIdentificationCode>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "indicators":
                            indicators = new Option<List<EdFiEducationOrganizationIndicator>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationIndicator>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "institutionTelephones":
                            institutionTelephones = new Option<List<EdFiEducationOrganizationInstitutionTelephone>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationInstitutionTelephone>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "internationalAddresses":
                            internationalAddresses = new Option<List<EdFiEducationOrganizationInternationalAddress>?>(JsonSerializer.Deserialize<List<EdFiEducationOrganizationInternationalAddress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "operationalStatusDescriptor":
                            operationalStatusDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "shortNameOfInstitution":
                            shortNameOfInstitution = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "webSite":
                            webSite = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!categories.IsSet)
                throw new ArgumentException("Property is required for class EdFiOrganizationDepartment.", nameof(categories));

            if (!organizationDepartmentId.IsSet)
                throw new ArgumentException("Property is required for class EdFiOrganizationDepartment.", nameof(organizationDepartmentId));

            if (!nameOfInstitution.IsSet)
                throw new ArgumentException("Property is required for class EdFiOrganizationDepartment.", nameof(nameOfInstitution));

            if (categories.IsSet && categories.Value == null)
                throw new ArgumentNullException(nameof(categories), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (organizationDepartmentId.IsSet && organizationDepartmentId.Value == null)
                throw new ArgumentNullException(nameof(organizationDepartmentId), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (nameOfInstitution.IsSet && nameOfInstitution.Value == null)
                throw new ArgumentNullException(nameof(nameOfInstitution), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (parentEducationOrganizationReference.IsSet && parentEducationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(parentEducationOrganizationReference), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (addresses.IsSet && addresses.Value == null)
                throw new ArgumentNullException(nameof(addresses), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (identificationCodes.IsSet && identificationCodes.Value == null)
                throw new ArgumentNullException(nameof(identificationCodes), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (indicators.IsSet && indicators.Value == null)
                throw new ArgumentNullException(nameof(indicators), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (institutionTelephones.IsSet && institutionTelephones.Value == null)
                throw new ArgumentNullException(nameof(institutionTelephones), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (internationalAddresses.IsSet && internationalAddresses.Value == null)
                throw new ArgumentNullException(nameof(internationalAddresses), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiOrganizationDepartment.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiOrganizationDepartment.");

            return new EdFiOrganizationDepartment(categories.Value!, organizationDepartmentId.Value!.Value!, nameOfInstitution.Value!, id, parentEducationOrganizationReference, academicSubjectDescriptor, addresses, identificationCodes, indicators, institutionTelephones, internationalAddresses, operationalStatusDescriptor, shortNameOfInstitution, webSite, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiOrganizationDepartment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiOrganizationDepartment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiOrganizationDepartment edFiOrganizationDepartment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiOrganizationDepartment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiOrganizationDepartment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiOrganizationDepartment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiOrganizationDepartment edFiOrganizationDepartment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiOrganizationDepartment.Categories == null)
                throw new ArgumentNullException(nameof(edFiOrganizationDepartment.Categories), "Property is required for class EdFiOrganizationDepartment.");

            if (edFiOrganizationDepartment.NameOfInstitution == null)
                throw new ArgumentNullException(nameof(edFiOrganizationDepartment.NameOfInstitution), "Property is required for class EdFiOrganizationDepartment.");

            if (edFiOrganizationDepartment.IdOption.IsSet && edFiOrganizationDepartment.Id == null)
                throw new ArgumentNullException(nameof(edFiOrganizationDepartment.Id), "Property is required for class EdFiOrganizationDepartment.");

            if (edFiOrganizationDepartment.ParentEducationOrganizationReferenceOption.IsSet && edFiOrganizationDepartment.ParentEducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiOrganizationDepartment.ParentEducationOrganizationReference), "Property is required for class EdFiOrganizationDepartment.");

            if (edFiOrganizationDepartment.AddressesOption.IsSet && edFiOrganizationDepartment.Addresses == null)
                throw new ArgumentNullException(nameof(edFiOrganizationDepartment.Addresses), "Property is required for class EdFiOrganizationDepartment.");

            if (edFiOrganizationDepartment.IdentificationCodesOption.IsSet && edFiOrganizationDepartment.IdentificationCodes == null)
                throw new ArgumentNullException(nameof(edFiOrganizationDepartment.IdentificationCodes), "Property is required for class EdFiOrganizationDepartment.");

            if (edFiOrganizationDepartment.IndicatorsOption.IsSet && edFiOrganizationDepartment.Indicators == null)
                throw new ArgumentNullException(nameof(edFiOrganizationDepartment.Indicators), "Property is required for class EdFiOrganizationDepartment.");

            if (edFiOrganizationDepartment.InstitutionTelephonesOption.IsSet && edFiOrganizationDepartment.InstitutionTelephones == null)
                throw new ArgumentNullException(nameof(edFiOrganizationDepartment.InstitutionTelephones), "Property is required for class EdFiOrganizationDepartment.");

            if (edFiOrganizationDepartment.InternationalAddressesOption.IsSet && edFiOrganizationDepartment.InternationalAddresses == null)
                throw new ArgumentNullException(nameof(edFiOrganizationDepartment.InternationalAddresses), "Property is required for class EdFiOrganizationDepartment.");

            if (edFiOrganizationDepartment.EtagOption.IsSet && edFiOrganizationDepartment.Etag == null)
                throw new ArgumentNullException(nameof(edFiOrganizationDepartment.Etag), "Property is required for class EdFiOrganizationDepartment.");

            if (edFiOrganizationDepartment.ExtOption.IsSet && edFiOrganizationDepartment.Ext == null)
                throw new ArgumentNullException(nameof(edFiOrganizationDepartment.Ext), "Property is required for class EdFiOrganizationDepartment.");

            writer.WritePropertyName("categories");
            JsonSerializer.Serialize(writer, edFiOrganizationDepartment.Categories, jsonSerializerOptions);
            writer.WriteNumber("organizationDepartmentId", edFiOrganizationDepartment.OrganizationDepartmentId);

            writer.WriteString("nameOfInstitution", edFiOrganizationDepartment.NameOfInstitution);

            if (edFiOrganizationDepartment.IdOption.IsSet)
                writer.WriteString("id", edFiOrganizationDepartment.Id);

            if (edFiOrganizationDepartment.ParentEducationOrganizationReferenceOption.IsSet)
            {
                writer.WritePropertyName("parentEducationOrganizationReference");
                JsonSerializer.Serialize(writer, edFiOrganizationDepartment.ParentEducationOrganizationReference, jsonSerializerOptions);
            }
            if (edFiOrganizationDepartment.AcademicSubjectDescriptorOption.IsSet)
                if (edFiOrganizationDepartment.AcademicSubjectDescriptorOption.Value != null)
                    writer.WriteString("academicSubjectDescriptor", edFiOrganizationDepartment.AcademicSubjectDescriptor);
                else
                    writer.WriteNull("academicSubjectDescriptor");

            if (edFiOrganizationDepartment.AddressesOption.IsSet)
            {
                writer.WritePropertyName("addresses");
                JsonSerializer.Serialize(writer, edFiOrganizationDepartment.Addresses, jsonSerializerOptions);
            }
            if (edFiOrganizationDepartment.IdentificationCodesOption.IsSet)
            {
                writer.WritePropertyName("identificationCodes");
                JsonSerializer.Serialize(writer, edFiOrganizationDepartment.IdentificationCodes, jsonSerializerOptions);
            }
            if (edFiOrganizationDepartment.IndicatorsOption.IsSet)
            {
                writer.WritePropertyName("indicators");
                JsonSerializer.Serialize(writer, edFiOrganizationDepartment.Indicators, jsonSerializerOptions);
            }
            if (edFiOrganizationDepartment.InstitutionTelephonesOption.IsSet)
            {
                writer.WritePropertyName("institutionTelephones");
                JsonSerializer.Serialize(writer, edFiOrganizationDepartment.InstitutionTelephones, jsonSerializerOptions);
            }
            if (edFiOrganizationDepartment.InternationalAddressesOption.IsSet)
            {
                writer.WritePropertyName("internationalAddresses");
                JsonSerializer.Serialize(writer, edFiOrganizationDepartment.InternationalAddresses, jsonSerializerOptions);
            }
            if (edFiOrganizationDepartment.OperationalStatusDescriptorOption.IsSet)
                if (edFiOrganizationDepartment.OperationalStatusDescriptorOption.Value != null)
                    writer.WriteString("operationalStatusDescriptor", edFiOrganizationDepartment.OperationalStatusDescriptor);
                else
                    writer.WriteNull("operationalStatusDescriptor");

            if (edFiOrganizationDepartment.ShortNameOfInstitutionOption.IsSet)
                if (edFiOrganizationDepartment.ShortNameOfInstitutionOption.Value != null)
                    writer.WriteString("shortNameOfInstitution", edFiOrganizationDepartment.ShortNameOfInstitution);
                else
                    writer.WriteNull("shortNameOfInstitution");

            if (edFiOrganizationDepartment.WebSiteOption.IsSet)
                if (edFiOrganizationDepartment.WebSiteOption.Value != null)
                    writer.WriteString("webSite", edFiOrganizationDepartment.WebSite);
                else
                    writer.WriteNull("webSite");

            if (edFiOrganizationDepartment.EtagOption.IsSet)
                writer.WriteString("_etag", edFiOrganizationDepartment.Etag);

            if (edFiOrganizationDepartment.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiOrganizationDepartment.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiOrganizationDepartment.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiOrganizationDepartment.Ext, jsonSerializerOptions);
            }
        }
    }
}
