// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiProgram
    /// </summary>
    public partial class EdFiProgram : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgram" /> class.
        /// </summary>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.</param>
        /// <param name="programTypeDescriptor">The type of program.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="id">id</param>
        /// <param name="characteristics">An unordered collection of programCharacteristics. Reflects important characteristics of the program, such as categories or particular indications.</param>
        /// <param name="learningStandards">An unordered collection of programLearningStandards. Learning standard followed by this program.</param>
        /// <param name="programId">A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.</param>
        /// <param name="sponsors">An unordered collection of programSponsors. Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual&#39;s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Program entity.</param>
        [JsonConstructor]
        public EdFiProgram(string programName, string programTypeDescriptor, EdFiEducationOrganizationReference educationOrganizationReference, Option<string?> id = default, Option<List<EdFiProgramCharacteristic>?> characteristics = default, Option<List<EdFiProgramLearningStandard>?> learningStandards = default, Option<string?> programId = default, Option<List<EdFiProgramSponsor>?> sponsors = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            ProgramName = programName;
            ProgramTypeDescriptor = programTypeDescriptor;
            EducationOrganizationReference = educationOrganizationReference;
            IdOption = id;
            CharacteristicsOption = characteristics;
            LearningStandardsOption = learningStandards;
            ProgramIdOption = programId;
            SponsorsOption = sponsors;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        /// <value>The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.</value>
        [JsonPropertyName("programName")]
        public string ProgramName { get; set; }

        /// <summary>
        /// The type of program.
        /// </summary>
        /// <value>The type of program.</value>
        [JsonPropertyName("programTypeDescriptor")]
        public string ProgramTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Characteristics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiProgramCharacteristic>?> CharacteristicsOption { get; private set; }

        /// <summary>
        /// An unordered collection of programCharacteristics. Reflects important characteristics of the program, such as categories or particular indications.
        /// </summary>
        /// <value>An unordered collection of programCharacteristics. Reflects important characteristics of the program, such as categories or particular indications.</value>
        [JsonPropertyName("characteristics")]
        public List<EdFiProgramCharacteristic>? Characteristics { get { return this.CharacteristicsOption; } set { this.CharacteristicsOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandards
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiProgramLearningStandard>?> LearningStandardsOption { get; private set; }

        /// <summary>
        /// An unordered collection of programLearningStandards. Learning standard followed by this program.
        /// </summary>
        /// <value>An unordered collection of programLearningStandards. Learning standard followed by this program.</value>
        [JsonPropertyName("learningStandards")]
        public List<EdFiProgramLearningStandard>? LearningStandards { get { return this.LearningStandardsOption; } set { this.LearningStandardsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgramIdOption { get; private set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.</value>
        [JsonPropertyName("programId")]
        public string? ProgramId { get { return this.ProgramIdOption; } set { this.ProgramIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sponsors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiProgramSponsor>?> SponsorsOption { get; private set; }

        /// <summary>
        /// An unordered collection of programSponsors. Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual&#39;s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).
        /// </summary>
        /// <value>An unordered collection of programSponsors. Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual&#39;s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).</value>
        [JsonPropertyName("sponsors")]
        public List<EdFiProgramSponsor>? Sponsors { get { return this.SponsorsOption; } set { this.SponsorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Program entity.
        /// </summary>
        /// <value>Extensions to the Program entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiProgram {\n");
            sb.Append("  ProgramName: ").Append(ProgramName).Append("\n");
            sb.Append("  ProgramTypeDescriptor: ").Append(ProgramTypeDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Characteristics: ").Append(Characteristics).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  Sponsors: ").Append(Sponsors).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramName (string) maxLength
            if (this.ProgramName != null && this.ProgramName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ProgramName, length must be less than 60.", new [] { "ProgramName" });
            }

            // ProgramTypeDescriptor (string) maxLength
            if (this.ProgramTypeDescriptor != null && this.ProgramTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramTypeDescriptor, length must be less than 306.", new [] { "ProgramTypeDescriptor" });
            }

            // ProgramId (string) maxLength
            if (this.ProgramId != null && this.ProgramId.Length > 20)
            {
                yield return new ValidationResult("Invalid value for ProgramId, length must be less than 20.", new [] { "ProgramId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiProgram" />
    /// </summary>
    public class EdFiProgramJsonConverter : JsonConverter<EdFiProgram>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiProgram" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiProgram Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> programName = default;
            Option<string?> programTypeDescriptor = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<string?> id = default;
            Option<List<EdFiProgramCharacteristic>?> characteristics = default;
            Option<List<EdFiProgramLearningStandard>?> learningStandards = default;
            Option<string?> programId = default;
            Option<List<EdFiProgramSponsor>?> sponsors = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "programName":
                            programName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programTypeDescriptor":
                            programTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "characteristics":
                            characteristics = new Option<List<EdFiProgramCharacteristic>?>(JsonSerializer.Deserialize<List<EdFiProgramCharacteristic>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "learningStandards":
                            learningStandards = new Option<List<EdFiProgramLearningStandard>?>(JsonSerializer.Deserialize<List<EdFiProgramLearningStandard>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programId":
                            programId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sponsors":
                            sponsors = new Option<List<EdFiProgramSponsor>?>(JsonSerializer.Deserialize<List<EdFiProgramSponsor>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!programName.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgram.", nameof(programName));

            if (!programTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgram.", nameof(programTypeDescriptor));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgram.", nameof(educationOrganizationReference));

            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName), "Property is not nullable for class EdFiProgram.");

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor), "Property is not nullable for class EdFiProgram.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiProgram.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiProgram.");

            if (characteristics.IsSet && characteristics.Value == null)
                throw new ArgumentNullException(nameof(characteristics), "Property is not nullable for class EdFiProgram.");

            if (learningStandards.IsSet && learningStandards.Value == null)
                throw new ArgumentNullException(nameof(learningStandards), "Property is not nullable for class EdFiProgram.");

            if (sponsors.IsSet && sponsors.Value == null)
                throw new ArgumentNullException(nameof(sponsors), "Property is not nullable for class EdFiProgram.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiProgram.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiProgram.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiProgram.");

            return new EdFiProgram(programName.Value!, programTypeDescriptor.Value!, educationOrganizationReference.Value!, id, characteristics, learningStandards, programId, sponsors, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiProgram" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiProgram"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiProgram edFiProgram, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiProgram, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiProgram" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiProgram"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiProgram edFiProgram, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiProgram.ProgramName == null)
                throw new ArgumentNullException(nameof(edFiProgram.ProgramName), "Property is required for class EdFiProgram.");

            if (edFiProgram.ProgramTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiProgram.ProgramTypeDescriptor), "Property is required for class EdFiProgram.");

            if (edFiProgram.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiProgram.EducationOrganizationReference), "Property is required for class EdFiProgram.");

            if (edFiProgram.IdOption.IsSet && edFiProgram.Id == null)
                throw new ArgumentNullException(nameof(edFiProgram.Id), "Property is required for class EdFiProgram.");

            if (edFiProgram.CharacteristicsOption.IsSet && edFiProgram.Characteristics == null)
                throw new ArgumentNullException(nameof(edFiProgram.Characteristics), "Property is required for class EdFiProgram.");

            if (edFiProgram.LearningStandardsOption.IsSet && edFiProgram.LearningStandards == null)
                throw new ArgumentNullException(nameof(edFiProgram.LearningStandards), "Property is required for class EdFiProgram.");

            if (edFiProgram.SponsorsOption.IsSet && edFiProgram.Sponsors == null)
                throw new ArgumentNullException(nameof(edFiProgram.Sponsors), "Property is required for class EdFiProgram.");

            if (edFiProgram.EtagOption.IsSet && edFiProgram.Etag == null)
                throw new ArgumentNullException(nameof(edFiProgram.Etag), "Property is required for class EdFiProgram.");

            if (edFiProgram.ExtOption.IsSet && edFiProgram.Ext == null)
                throw new ArgumentNullException(nameof(edFiProgram.Ext), "Property is required for class EdFiProgram.");

            writer.WriteString("programName", edFiProgram.ProgramName);

            writer.WriteString("programTypeDescriptor", edFiProgram.ProgramTypeDescriptor);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiProgram.EducationOrganizationReference, jsonSerializerOptions);
            if (edFiProgram.IdOption.IsSet)
                writer.WriteString("id", edFiProgram.Id);

            if (edFiProgram.CharacteristicsOption.IsSet)
            {
                writer.WritePropertyName("characteristics");
                JsonSerializer.Serialize(writer, edFiProgram.Characteristics, jsonSerializerOptions);
            }
            if (edFiProgram.LearningStandardsOption.IsSet)
            {
                writer.WritePropertyName("learningStandards");
                JsonSerializer.Serialize(writer, edFiProgram.LearningStandards, jsonSerializerOptions);
            }
            if (edFiProgram.ProgramIdOption.IsSet)
                if (edFiProgram.ProgramIdOption.Value != null)
                    writer.WriteString("programId", edFiProgram.ProgramId);
                else
                    writer.WriteNull("programId");

            if (edFiProgram.SponsorsOption.IsSet)
            {
                writer.WritePropertyName("sponsors");
                JsonSerializer.Serialize(writer, edFiProgram.Sponsors, jsonSerializerOptions);
            }
            if (edFiProgram.EtagOption.IsSet)
                writer.WriteString("_etag", edFiProgram.Etag);

            if (edFiProgram.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiProgram.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiProgram.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiProgram.Ext, jsonSerializerOptions);
            }
        }
    }
}
