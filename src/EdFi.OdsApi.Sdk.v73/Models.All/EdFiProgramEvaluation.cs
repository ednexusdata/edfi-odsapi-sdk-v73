// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiProgramEvaluation
    /// </summary>
    public partial class EdFiProgramEvaluation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgramEvaluation" /> class.
        /// </summary>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation.</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation.</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted.</param>
        /// <param name="programReference">programReference</param>
        /// <param name="id">id</param>
        /// <param name="evaluationMaxNumericRating">The maximum summary numerical rating or score for the program evaluation.</param>
        /// <param name="evaluationMinNumericRating">The minimum summary numerical rating or score for the program evaluation. If omitted, assumed to be 0.0</param>
        /// <param name="levels">An unordered collection of programEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation.</param>
        /// <param name="programEvaluationDescription">The long description of the program evaluation.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the ProgramEvaluation entity.</param>
        [JsonConstructor]
        public EdFiProgramEvaluation(string programEvaluationPeriodDescriptor, string programEvaluationTitle, string programEvaluationTypeDescriptor, EdFiProgramReference programReference, Option<string?> id = default, Option<double?> evaluationMaxNumericRating = default, Option<double?> evaluationMinNumericRating = default, Option<List<EdFiProgramEvaluationLevel>?> levels = default, Option<string?> programEvaluationDescription = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            ProgramEvaluationPeriodDescriptor = programEvaluationPeriodDescriptor;
            ProgramEvaluationTitle = programEvaluationTitle;
            ProgramEvaluationTypeDescriptor = programEvaluationTypeDescriptor;
            ProgramReference = programReference;
            IdOption = id;
            EvaluationMaxNumericRatingOption = evaluationMaxNumericRating;
            EvaluationMinNumericRatingOption = evaluationMinNumericRating;
            LevelsOption = levels;
            ProgramEvaluationDescriptionOption = programEvaluationDescription;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name of the period for the program evaluation.
        /// </summary>
        /// <value>The name of the period for the program evaluation.</value>
        [JsonPropertyName("programEvaluationPeriodDescriptor")]
        public string ProgramEvaluationPeriodDescriptor { get; set; }

        /// <summary>
        /// An assigned unique identifier for the student program evaluation.
        /// </summary>
        /// <value>An assigned unique identifier for the student program evaluation.</value>
        [JsonPropertyName("programEvaluationTitle")]
        public string ProgramEvaluationTitle { get; set; }

        /// <summary>
        /// The type of program evaluation conducted.
        /// </summary>
        /// <value>The type of program evaluation conducted.</value>
        [JsonPropertyName("programEvaluationTypeDescriptor")]
        public string ProgramEvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets ProgramReference
        /// </summary>
        [JsonPropertyName("programReference")]
        public EdFiProgramReference ProgramReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EvaluationMaxNumericRating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> EvaluationMaxNumericRatingOption { get; private set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the program evaluation.
        /// </summary>
        /// <value>The maximum summary numerical rating or score for the program evaluation.</value>
        [JsonPropertyName("evaluationMaxNumericRating")]
        public double? EvaluationMaxNumericRating { get { return this.EvaluationMaxNumericRatingOption; } set { this.EvaluationMaxNumericRatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of EvaluationMinNumericRating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> EvaluationMinNumericRatingOption { get; private set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the program evaluation. If omitted, assumed to be 0.0
        /// </summary>
        /// <value>The minimum summary numerical rating or score for the program evaluation. If omitted, assumed to be 0.0</value>
        [JsonPropertyName("evaluationMinNumericRating")]
        public double? EvaluationMinNumericRating { get { return this.EvaluationMinNumericRatingOption; } set { this.EvaluationMinNumericRatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Levels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiProgramEvaluationLevel>?> LevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of programEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation.
        /// </summary>
        /// <value>An unordered collection of programEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation.</value>
        [JsonPropertyName("levels")]
        public List<EdFiProgramEvaluationLevel>? Levels { get { return this.LevelsOption; } set { this.LevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramEvaluationDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgramEvaluationDescriptionOption { get; private set; }

        /// <summary>
        /// The long description of the program evaluation.
        /// </summary>
        /// <value>The long description of the program evaluation.</value>
        [JsonPropertyName("programEvaluationDescription")]
        public string? ProgramEvaluationDescription { get { return this.ProgramEvaluationDescriptionOption; } set { this.ProgramEvaluationDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the ProgramEvaluation entity.
        /// </summary>
        /// <value>Extensions to the ProgramEvaluation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiProgramEvaluation {\n");
            sb.Append("  ProgramEvaluationPeriodDescriptor: ").Append(ProgramEvaluationPeriodDescriptor).Append("\n");
            sb.Append("  ProgramEvaluationTitle: ").Append(ProgramEvaluationTitle).Append("\n");
            sb.Append("  ProgramEvaluationTypeDescriptor: ").Append(ProgramEvaluationTypeDescriptor).Append("\n");
            sb.Append("  ProgramReference: ").Append(ProgramReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EvaluationMaxNumericRating: ").Append(EvaluationMaxNumericRating).Append("\n");
            sb.Append("  EvaluationMinNumericRating: ").Append(EvaluationMinNumericRating).Append("\n");
            sb.Append("  Levels: ").Append(Levels).Append("\n");
            sb.Append("  ProgramEvaluationDescription: ").Append(ProgramEvaluationDescription).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramEvaluationPeriodDescriptor (string) maxLength
            if (this.ProgramEvaluationPeriodDescriptor != null && this.ProgramEvaluationPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationPeriodDescriptor, length must be less than 306.", new [] { "ProgramEvaluationPeriodDescriptor" });
            }

            // ProgramEvaluationTitle (string) maxLength
            if (this.ProgramEvaluationTitle != null && this.ProgramEvaluationTitle.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationTitle, length must be less than 50.", new [] { "ProgramEvaluationTitle" });
            }

            // ProgramEvaluationTypeDescriptor (string) maxLength
            if (this.ProgramEvaluationTypeDescriptor != null && this.ProgramEvaluationTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationTypeDescriptor, length must be less than 306.", new [] { "ProgramEvaluationTypeDescriptor" });
            }

            // EvaluationMaxNumericRating (double) maximum
            if (this.EvaluationMaxNumericRatingOption.IsSet && this.EvaluationMaxNumericRatingOption.Value > (double)999.999)
            {
                yield return new ValidationResult("Invalid value for EvaluationMaxNumericRating, must be a value less than or equal to 999.999.", new [] { "EvaluationMaxNumericRating" });
            }

            // EvaluationMaxNumericRating (double) minimum
            if (this.EvaluationMaxNumericRatingOption.IsSet && this.EvaluationMaxNumericRatingOption.Value < (double)-999.999)
            {
                yield return new ValidationResult("Invalid value for EvaluationMaxNumericRating, must be a value greater than or equal to -999.999.", new [] { "EvaluationMaxNumericRating" });
            }

            // EvaluationMinNumericRating (double) maximum
            if (this.EvaluationMinNumericRatingOption.IsSet && this.EvaluationMinNumericRatingOption.Value > (double)999.999)
            {
                yield return new ValidationResult("Invalid value for EvaluationMinNumericRating, must be a value less than or equal to 999.999.", new [] { "EvaluationMinNumericRating" });
            }

            // EvaluationMinNumericRating (double) minimum
            if (this.EvaluationMinNumericRatingOption.IsSet && this.EvaluationMinNumericRatingOption.Value < (double)-999.999)
            {
                yield return new ValidationResult("Invalid value for EvaluationMinNumericRating, must be a value greater than or equal to -999.999.", new [] { "EvaluationMinNumericRating" });
            }

            // ProgramEvaluationDescription (string) maxLength
            if (this.ProgramEvaluationDescription != null && this.ProgramEvaluationDescription.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationDescription, length must be less than 255.", new [] { "ProgramEvaluationDescription" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiProgramEvaluation" />
    /// </summary>
    public class EdFiProgramEvaluationJsonConverter : JsonConverter<EdFiProgramEvaluation>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiProgramEvaluation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiProgramEvaluation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> programEvaluationPeriodDescriptor = default;
            Option<string?> programEvaluationTitle = default;
            Option<string?> programEvaluationTypeDescriptor = default;
            Option<EdFiProgramReference?> programReference = default;
            Option<string?> id = default;
            Option<double?> evaluationMaxNumericRating = default;
            Option<double?> evaluationMinNumericRating = default;
            Option<List<EdFiProgramEvaluationLevel>?> levels = default;
            Option<string?> programEvaluationDescription = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "programEvaluationPeriodDescriptor":
                            programEvaluationPeriodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programEvaluationTitle":
                            programEvaluationTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programEvaluationTypeDescriptor":
                            programEvaluationTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programReference":
                            programReference = new Option<EdFiProgramReference?>(JsonSerializer.Deserialize<EdFiProgramReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "evaluationMaxNumericRating":
                            evaluationMaxNumericRating = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "evaluationMinNumericRating":
                            evaluationMinNumericRating = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "levels":
                            levels = new Option<List<EdFiProgramEvaluationLevel>?>(JsonSerializer.Deserialize<List<EdFiProgramEvaluationLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programEvaluationDescription":
                            programEvaluationDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!programEvaluationPeriodDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgramEvaluation.", nameof(programEvaluationPeriodDescriptor));

            if (!programEvaluationTitle.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgramEvaluation.", nameof(programEvaluationTitle));

            if (!programEvaluationTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgramEvaluation.", nameof(programEvaluationTypeDescriptor));

            if (!programReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgramEvaluation.", nameof(programReference));

            if (programEvaluationPeriodDescriptor.IsSet && programEvaluationPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationPeriodDescriptor), "Property is not nullable for class EdFiProgramEvaluation.");

            if (programEvaluationTitle.IsSet && programEvaluationTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTitle), "Property is not nullable for class EdFiProgramEvaluation.");

            if (programEvaluationTypeDescriptor.IsSet && programEvaluationTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTypeDescriptor), "Property is not nullable for class EdFiProgramEvaluation.");

            if (programReference.IsSet && programReference.Value == null)
                throw new ArgumentNullException(nameof(programReference), "Property is not nullable for class EdFiProgramEvaluation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiProgramEvaluation.");

            if (levels.IsSet && levels.Value == null)
                throw new ArgumentNullException(nameof(levels), "Property is not nullable for class EdFiProgramEvaluation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiProgramEvaluation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiProgramEvaluation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiProgramEvaluation.");

            return new EdFiProgramEvaluation(programEvaluationPeriodDescriptor.Value!, programEvaluationTitle.Value!, programEvaluationTypeDescriptor.Value!, programReference.Value!, id, evaluationMaxNumericRating, evaluationMinNumericRating, levels, programEvaluationDescription, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiProgramEvaluation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiProgramEvaluation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiProgramEvaluation edFiProgramEvaluation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiProgramEvaluation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiProgramEvaluation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiProgramEvaluation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiProgramEvaluation edFiProgramEvaluation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiProgramEvaluation.ProgramEvaluationPeriodDescriptor == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluation.ProgramEvaluationPeriodDescriptor), "Property is required for class EdFiProgramEvaluation.");

            if (edFiProgramEvaluation.ProgramEvaluationTitle == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluation.ProgramEvaluationTitle), "Property is required for class EdFiProgramEvaluation.");

            if (edFiProgramEvaluation.ProgramEvaluationTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluation.ProgramEvaluationTypeDescriptor), "Property is required for class EdFiProgramEvaluation.");

            if (edFiProgramEvaluation.ProgramReference == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluation.ProgramReference), "Property is required for class EdFiProgramEvaluation.");

            if (edFiProgramEvaluation.IdOption.IsSet && edFiProgramEvaluation.Id == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluation.Id), "Property is required for class EdFiProgramEvaluation.");

            if (edFiProgramEvaluation.LevelsOption.IsSet && edFiProgramEvaluation.Levels == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluation.Levels), "Property is required for class EdFiProgramEvaluation.");

            if (edFiProgramEvaluation.EtagOption.IsSet && edFiProgramEvaluation.Etag == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluation.Etag), "Property is required for class EdFiProgramEvaluation.");

            if (edFiProgramEvaluation.ExtOption.IsSet && edFiProgramEvaluation.Ext == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluation.Ext), "Property is required for class EdFiProgramEvaluation.");

            writer.WriteString("programEvaluationPeriodDescriptor", edFiProgramEvaluation.ProgramEvaluationPeriodDescriptor);

            writer.WriteString("programEvaluationTitle", edFiProgramEvaluation.ProgramEvaluationTitle);

            writer.WriteString("programEvaluationTypeDescriptor", edFiProgramEvaluation.ProgramEvaluationTypeDescriptor);

            writer.WritePropertyName("programReference");
            JsonSerializer.Serialize(writer, edFiProgramEvaluation.ProgramReference, jsonSerializerOptions);
            if (edFiProgramEvaluation.IdOption.IsSet)
                writer.WriteString("id", edFiProgramEvaluation.Id);

            if (edFiProgramEvaluation.EvaluationMaxNumericRatingOption.IsSet)
                if (edFiProgramEvaluation.EvaluationMaxNumericRatingOption.Value != null)
                    writer.WriteNumber("evaluationMaxNumericRating", edFiProgramEvaluation.EvaluationMaxNumericRatingOption.Value!.Value);
                else
                    writer.WriteNull("evaluationMaxNumericRating");

            if (edFiProgramEvaluation.EvaluationMinNumericRatingOption.IsSet)
                if (edFiProgramEvaluation.EvaluationMinNumericRatingOption.Value != null)
                    writer.WriteNumber("evaluationMinNumericRating", edFiProgramEvaluation.EvaluationMinNumericRatingOption.Value!.Value);
                else
                    writer.WriteNull("evaluationMinNumericRating");

            if (edFiProgramEvaluation.LevelsOption.IsSet)
            {
                writer.WritePropertyName("levels");
                JsonSerializer.Serialize(writer, edFiProgramEvaluation.Levels, jsonSerializerOptions);
            }
            if (edFiProgramEvaluation.ProgramEvaluationDescriptionOption.IsSet)
                if (edFiProgramEvaluation.ProgramEvaluationDescriptionOption.Value != null)
                    writer.WriteString("programEvaluationDescription", edFiProgramEvaluation.ProgramEvaluationDescription);
                else
                    writer.WriteNull("programEvaluationDescription");

            if (edFiProgramEvaluation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiProgramEvaluation.Etag);

            if (edFiProgramEvaluation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiProgramEvaluation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiProgramEvaluation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiProgramEvaluation.Ext, jsonSerializerOptions);
            }
        }
    }
}
