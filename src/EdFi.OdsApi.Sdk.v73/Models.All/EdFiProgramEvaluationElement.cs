// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiProgramEvaluationElement
    /// </summary>
    public partial class EdFiProgramEvaluationElement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgramEvaluationElement" /> class.
        /// </summary>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element.</param>
        /// <param name="programEvaluationReference">programEvaluationReference</param>
        /// <param name="id">id</param>
        /// <param name="programEvaluationObjectiveReference">programEvaluationObjectiveReference</param>
        /// <param name="elementMaxNumericRating">The maximum summary numerical rating or score for the program evaluation element.</param>
        /// <param name="elementMinNumericRating">The minimum summary numerical rating or score for the program evaluation element. If omitted, assumed to be 0.0.</param>
        /// <param name="elementSortOrder">The sort order of this program evaluation element.</param>
        /// <param name="programEvaluationElementDescription">The long description of the program evaluation element.</param>
        /// <param name="programEvaluationLevels">An unordered collection of programEvaluationElementProgramEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation element.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the ProgramEvaluationElement entity.</param>
        [JsonConstructor]
        public EdFiProgramEvaluationElement(string programEvaluationElementTitle, EdFiProgramEvaluationReference programEvaluationReference, Option<string?> id = default, Option<EdFiProgramEvaluationObjectiveReference?> programEvaluationObjectiveReference = default, Option<double?> elementMaxNumericRating = default, Option<double?> elementMinNumericRating = default, Option<int?> elementSortOrder = default, Option<string?> programEvaluationElementDescription = default, Option<List<EdFiProgramEvaluationElementProgramEvaluationLevel>?> programEvaluationLevels = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            ProgramEvaluationElementTitle = programEvaluationElementTitle;
            ProgramEvaluationReference = programEvaluationReference;
            IdOption = id;
            ProgramEvaluationObjectiveReferenceOption = programEvaluationObjectiveReference;
            ElementMaxNumericRatingOption = elementMaxNumericRating;
            ElementMinNumericRatingOption = elementMinNumericRating;
            ElementSortOrderOption = elementSortOrder;
            ProgramEvaluationElementDescriptionOption = programEvaluationElementDescription;
            ProgramEvaluationLevelsOption = programEvaluationLevels;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name or title of the program evaluation element.
        /// </summary>
        /// <value>The name or title of the program evaluation element.</value>
        [JsonPropertyName("programEvaluationElementTitle")]
        public string ProgramEvaluationElementTitle { get; set; }

        /// <summary>
        /// Gets or Sets ProgramEvaluationReference
        /// </summary>
        [JsonPropertyName("programEvaluationReference")]
        public EdFiProgramEvaluationReference ProgramEvaluationReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramEvaluationObjectiveReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiProgramEvaluationObjectiveReference?> ProgramEvaluationObjectiveReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProgramEvaluationObjectiveReference
        /// </summary>
        [JsonPropertyName("programEvaluationObjectiveReference")]
        public EdFiProgramEvaluationObjectiveReference? ProgramEvaluationObjectiveReference { get { return this.ProgramEvaluationObjectiveReferenceOption; } set { this.ProgramEvaluationObjectiveReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ElementMaxNumericRating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ElementMaxNumericRatingOption { get; private set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the program evaluation element.
        /// </summary>
        /// <value>The maximum summary numerical rating or score for the program evaluation element.</value>
        [JsonPropertyName("elementMaxNumericRating")]
        public double? ElementMaxNumericRating { get { return this.ElementMaxNumericRatingOption; } set { this.ElementMaxNumericRatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of ElementMinNumericRating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ElementMinNumericRatingOption { get; private set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the program evaluation element. If omitted, assumed to be 0.0.
        /// </summary>
        /// <value>The minimum summary numerical rating or score for the program evaluation element. If omitted, assumed to be 0.0.</value>
        [JsonPropertyName("elementMinNumericRating")]
        public double? ElementMinNumericRating { get { return this.ElementMinNumericRatingOption; } set { this.ElementMinNumericRatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of ElementSortOrder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ElementSortOrderOption { get; private set; }

        /// <summary>
        /// The sort order of this program evaluation element.
        /// </summary>
        /// <value>The sort order of this program evaluation element.</value>
        [JsonPropertyName("elementSortOrder")]
        public int? ElementSortOrder { get { return this.ElementSortOrderOption; } set { this.ElementSortOrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramEvaluationElementDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgramEvaluationElementDescriptionOption { get; private set; }

        /// <summary>
        /// The long description of the program evaluation element.
        /// </summary>
        /// <value>The long description of the program evaluation element.</value>
        [JsonPropertyName("programEvaluationElementDescription")]
        public string? ProgramEvaluationElementDescription { get { return this.ProgramEvaluationElementDescriptionOption; } set { this.ProgramEvaluationElementDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramEvaluationLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiProgramEvaluationElementProgramEvaluationLevel>?> ProgramEvaluationLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of programEvaluationElementProgramEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation element.
        /// </summary>
        /// <value>An unordered collection of programEvaluationElementProgramEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation element.</value>
        [JsonPropertyName("programEvaluationLevels")]
        public List<EdFiProgramEvaluationElementProgramEvaluationLevel>? ProgramEvaluationLevels { get { return this.ProgramEvaluationLevelsOption; } set { this.ProgramEvaluationLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the ProgramEvaluationElement entity.
        /// </summary>
        /// <value>Extensions to the ProgramEvaluationElement entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiProgramEvaluationElement {\n");
            sb.Append("  ProgramEvaluationElementTitle: ").Append(ProgramEvaluationElementTitle).Append("\n");
            sb.Append("  ProgramEvaluationReference: ").Append(ProgramEvaluationReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgramEvaluationObjectiveReference: ").Append(ProgramEvaluationObjectiveReference).Append("\n");
            sb.Append("  ElementMaxNumericRating: ").Append(ElementMaxNumericRating).Append("\n");
            sb.Append("  ElementMinNumericRating: ").Append(ElementMinNumericRating).Append("\n");
            sb.Append("  ElementSortOrder: ").Append(ElementSortOrder).Append("\n");
            sb.Append("  ProgramEvaluationElementDescription: ").Append(ProgramEvaluationElementDescription).Append("\n");
            sb.Append("  ProgramEvaluationLevels: ").Append(ProgramEvaluationLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramEvaluationElementTitle (string) maxLength
            if (this.ProgramEvaluationElementTitle != null && this.ProgramEvaluationElementTitle.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationElementTitle, length must be less than 50.", new [] { "ProgramEvaluationElementTitle" });
            }

            // ElementMaxNumericRating (double) maximum
            if (this.ElementMaxNumericRatingOption.IsSet && this.ElementMaxNumericRatingOption.Value > (double)999.999)
            {
                yield return new ValidationResult("Invalid value for ElementMaxNumericRating, must be a value less than or equal to 999.999.", new [] { "ElementMaxNumericRating" });
            }

            // ElementMaxNumericRating (double) minimum
            if (this.ElementMaxNumericRatingOption.IsSet && this.ElementMaxNumericRatingOption.Value < (double)-999.999)
            {
                yield return new ValidationResult("Invalid value for ElementMaxNumericRating, must be a value greater than or equal to -999.999.", new [] { "ElementMaxNumericRating" });
            }

            // ElementMinNumericRating (double) maximum
            if (this.ElementMinNumericRatingOption.IsSet && this.ElementMinNumericRatingOption.Value > (double)999.999)
            {
                yield return new ValidationResult("Invalid value for ElementMinNumericRating, must be a value less than or equal to 999.999.", new [] { "ElementMinNumericRating" });
            }

            // ElementMinNumericRating (double) minimum
            if (this.ElementMinNumericRatingOption.IsSet && this.ElementMinNumericRatingOption.Value < (double)-999.999)
            {
                yield return new ValidationResult("Invalid value for ElementMinNumericRating, must be a value greater than or equal to -999.999.", new [] { "ElementMinNumericRating" });
            }

            // ProgramEvaluationElementDescription (string) maxLength
            if (this.ProgramEvaluationElementDescription != null && this.ProgramEvaluationElementDescription.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationElementDescription, length must be less than 255.", new [] { "ProgramEvaluationElementDescription" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiProgramEvaluationElement" />
    /// </summary>
    public class EdFiProgramEvaluationElementJsonConverter : JsonConverter<EdFiProgramEvaluationElement>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiProgramEvaluationElement" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiProgramEvaluationElement Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> programEvaluationElementTitle = default;
            Option<EdFiProgramEvaluationReference?> programEvaluationReference = default;
            Option<string?> id = default;
            Option<EdFiProgramEvaluationObjectiveReference?> programEvaluationObjectiveReference = default;
            Option<double?> elementMaxNumericRating = default;
            Option<double?> elementMinNumericRating = default;
            Option<int?> elementSortOrder = default;
            Option<string?> programEvaluationElementDescription = default;
            Option<List<EdFiProgramEvaluationElementProgramEvaluationLevel>?> programEvaluationLevels = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "programEvaluationElementTitle":
                            programEvaluationElementTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programEvaluationReference":
                            programEvaluationReference = new Option<EdFiProgramEvaluationReference?>(JsonSerializer.Deserialize<EdFiProgramEvaluationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programEvaluationObjectiveReference":
                            programEvaluationObjectiveReference = new Option<EdFiProgramEvaluationObjectiveReference?>(JsonSerializer.Deserialize<EdFiProgramEvaluationObjectiveReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "elementMaxNumericRating":
                            elementMaxNumericRating = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "elementMinNumericRating":
                            elementMinNumericRating = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "elementSortOrder":
                            elementSortOrder = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "programEvaluationElementDescription":
                            programEvaluationElementDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "programEvaluationLevels":
                            programEvaluationLevels = new Option<List<EdFiProgramEvaluationElementProgramEvaluationLevel>?>(JsonSerializer.Deserialize<List<EdFiProgramEvaluationElementProgramEvaluationLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!programEvaluationElementTitle.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgramEvaluationElement.", nameof(programEvaluationElementTitle));

            if (!programEvaluationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgramEvaluationElement.", nameof(programEvaluationReference));

            if (programEvaluationElementTitle.IsSet && programEvaluationElementTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationElementTitle), "Property is not nullable for class EdFiProgramEvaluationElement.");

            if (programEvaluationReference.IsSet && programEvaluationReference.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationReference), "Property is not nullable for class EdFiProgramEvaluationElement.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiProgramEvaluationElement.");

            if (programEvaluationObjectiveReference.IsSet && programEvaluationObjectiveReference.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationObjectiveReference), "Property is not nullable for class EdFiProgramEvaluationElement.");

            if (programEvaluationLevels.IsSet && programEvaluationLevels.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationLevels), "Property is not nullable for class EdFiProgramEvaluationElement.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiProgramEvaluationElement.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiProgramEvaluationElement.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiProgramEvaluationElement.");

            return new EdFiProgramEvaluationElement(programEvaluationElementTitle.Value!, programEvaluationReference.Value!, id, programEvaluationObjectiveReference, elementMaxNumericRating, elementMinNumericRating, elementSortOrder, programEvaluationElementDescription, programEvaluationLevels, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiProgramEvaluationElement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiProgramEvaluationElement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiProgramEvaluationElement edFiProgramEvaluationElement, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiProgramEvaluationElement, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiProgramEvaluationElement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiProgramEvaluationElement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiProgramEvaluationElement edFiProgramEvaluationElement, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiProgramEvaluationElement.ProgramEvaluationElementTitle == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationElement.ProgramEvaluationElementTitle), "Property is required for class EdFiProgramEvaluationElement.");

            if (edFiProgramEvaluationElement.ProgramEvaluationReference == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationElement.ProgramEvaluationReference), "Property is required for class EdFiProgramEvaluationElement.");

            if (edFiProgramEvaluationElement.IdOption.IsSet && edFiProgramEvaluationElement.Id == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationElement.Id), "Property is required for class EdFiProgramEvaluationElement.");

            if (edFiProgramEvaluationElement.ProgramEvaluationObjectiveReferenceOption.IsSet && edFiProgramEvaluationElement.ProgramEvaluationObjectiveReference == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationElement.ProgramEvaluationObjectiveReference), "Property is required for class EdFiProgramEvaluationElement.");

            if (edFiProgramEvaluationElement.ProgramEvaluationLevelsOption.IsSet && edFiProgramEvaluationElement.ProgramEvaluationLevels == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationElement.ProgramEvaluationLevels), "Property is required for class EdFiProgramEvaluationElement.");

            if (edFiProgramEvaluationElement.EtagOption.IsSet && edFiProgramEvaluationElement.Etag == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationElement.Etag), "Property is required for class EdFiProgramEvaluationElement.");

            if (edFiProgramEvaluationElement.ExtOption.IsSet && edFiProgramEvaluationElement.Ext == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationElement.Ext), "Property is required for class EdFiProgramEvaluationElement.");

            writer.WriteString("programEvaluationElementTitle", edFiProgramEvaluationElement.ProgramEvaluationElementTitle);

            writer.WritePropertyName("programEvaluationReference");
            JsonSerializer.Serialize(writer, edFiProgramEvaluationElement.ProgramEvaluationReference, jsonSerializerOptions);
            if (edFiProgramEvaluationElement.IdOption.IsSet)
                writer.WriteString("id", edFiProgramEvaluationElement.Id);

            if (edFiProgramEvaluationElement.ProgramEvaluationObjectiveReferenceOption.IsSet)
            {
                writer.WritePropertyName("programEvaluationObjectiveReference");
                JsonSerializer.Serialize(writer, edFiProgramEvaluationElement.ProgramEvaluationObjectiveReference, jsonSerializerOptions);
            }
            if (edFiProgramEvaluationElement.ElementMaxNumericRatingOption.IsSet)
                if (edFiProgramEvaluationElement.ElementMaxNumericRatingOption.Value != null)
                    writer.WriteNumber("elementMaxNumericRating", edFiProgramEvaluationElement.ElementMaxNumericRatingOption.Value!.Value);
                else
                    writer.WriteNull("elementMaxNumericRating");

            if (edFiProgramEvaluationElement.ElementMinNumericRatingOption.IsSet)
                if (edFiProgramEvaluationElement.ElementMinNumericRatingOption.Value != null)
                    writer.WriteNumber("elementMinNumericRating", edFiProgramEvaluationElement.ElementMinNumericRatingOption.Value!.Value);
                else
                    writer.WriteNull("elementMinNumericRating");

            if (edFiProgramEvaluationElement.ElementSortOrderOption.IsSet)
                if (edFiProgramEvaluationElement.ElementSortOrderOption.Value != null)
                    writer.WriteNumber("elementSortOrder", edFiProgramEvaluationElement.ElementSortOrderOption.Value!.Value);
                else
                    writer.WriteNull("elementSortOrder");

            if (edFiProgramEvaluationElement.ProgramEvaluationElementDescriptionOption.IsSet)
                if (edFiProgramEvaluationElement.ProgramEvaluationElementDescriptionOption.Value != null)
                    writer.WriteString("programEvaluationElementDescription", edFiProgramEvaluationElement.ProgramEvaluationElementDescription);
                else
                    writer.WriteNull("programEvaluationElementDescription");

            if (edFiProgramEvaluationElement.ProgramEvaluationLevelsOption.IsSet)
            {
                writer.WritePropertyName("programEvaluationLevels");
                JsonSerializer.Serialize(writer, edFiProgramEvaluationElement.ProgramEvaluationLevels, jsonSerializerOptions);
            }
            if (edFiProgramEvaluationElement.EtagOption.IsSet)
                writer.WriteString("_etag", edFiProgramEvaluationElement.Etag);

            if (edFiProgramEvaluationElement.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiProgramEvaluationElement.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiProgramEvaluationElement.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiProgramEvaluationElement.Ext, jsonSerializerOptions);
            }
        }
    }
}
