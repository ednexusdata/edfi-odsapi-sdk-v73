// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiProgramEvaluationObjective
    /// </summary>
    public partial class EdFiProgramEvaluationObjective : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgramEvaluationObjective" /> class.
        /// </summary>
        /// <param name="programEvaluationObjectiveTitle">The name or title of the program evaluation objective.</param>
        /// <param name="programEvaluationReference">programEvaluationReference</param>
        /// <param name="id">id</param>
        /// <param name="objectiveMaxNumericRating">The maximum summary numerical rating or score for the program evaluation objective.</param>
        /// <param name="objectiveMinNumericRating">The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0</param>
        /// <param name="objectiveSortOrder">The sort order of this program evaluation objective.</param>
        /// <param name="programEvaluationLevels">An unordered collection of programEvaluationObjectiveProgramEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation objective.</param>
        /// <param name="programEvaluationObjectiveDescription">The long description of the program evaluation objective.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the ProgramEvaluationObjective entity.</param>
        [JsonConstructor]
        public EdFiProgramEvaluationObjective(string programEvaluationObjectiveTitle, EdFiProgramEvaluationReference programEvaluationReference, Option<string?> id = default, Option<double?> objectiveMaxNumericRating = default, Option<double?> objectiveMinNumericRating = default, Option<int?> objectiveSortOrder = default, Option<List<EdFiProgramEvaluationObjectiveProgramEvaluationLevel>?> programEvaluationLevels = default, Option<string?> programEvaluationObjectiveDescription = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            ProgramEvaluationObjectiveTitle = programEvaluationObjectiveTitle;
            ProgramEvaluationReference = programEvaluationReference;
            IdOption = id;
            ObjectiveMaxNumericRatingOption = objectiveMaxNumericRating;
            ObjectiveMinNumericRatingOption = objectiveMinNumericRating;
            ObjectiveSortOrderOption = objectiveSortOrder;
            ProgramEvaluationLevelsOption = programEvaluationLevels;
            ProgramEvaluationObjectiveDescriptionOption = programEvaluationObjectiveDescription;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name or title of the program evaluation objective.
        /// </summary>
        /// <value>The name or title of the program evaluation objective.</value>
        [JsonPropertyName("programEvaluationObjectiveTitle")]
        public string ProgramEvaluationObjectiveTitle { get; set; }

        /// <summary>
        /// Gets or Sets ProgramEvaluationReference
        /// </summary>
        [JsonPropertyName("programEvaluationReference")]
        public EdFiProgramEvaluationReference ProgramEvaluationReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectiveMaxNumericRating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ObjectiveMaxNumericRatingOption { get; private set; }

        /// <summary>
        /// The maximum summary numerical rating or score for the program evaluation objective.
        /// </summary>
        /// <value>The maximum summary numerical rating or score for the program evaluation objective.</value>
        [JsonPropertyName("objectiveMaxNumericRating")]
        public double? ObjectiveMaxNumericRating { get { return this.ObjectiveMaxNumericRatingOption; } set { this.ObjectiveMaxNumericRatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectiveMinNumericRating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ObjectiveMinNumericRatingOption { get; private set; }

        /// <summary>
        /// The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0
        /// </summary>
        /// <value>The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0</value>
        [JsonPropertyName("objectiveMinNumericRating")]
        public double? ObjectiveMinNumericRating { get { return this.ObjectiveMinNumericRatingOption; } set { this.ObjectiveMinNumericRatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectiveSortOrder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ObjectiveSortOrderOption { get; private set; }

        /// <summary>
        /// The sort order of this program evaluation objective.
        /// </summary>
        /// <value>The sort order of this program evaluation objective.</value>
        [JsonPropertyName("objectiveSortOrder")]
        public int? ObjectiveSortOrder { get { return this.ObjectiveSortOrderOption; } set { this.ObjectiveSortOrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramEvaluationLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiProgramEvaluationObjectiveProgramEvaluationLevel>?> ProgramEvaluationLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of programEvaluationObjectiveProgramEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation objective.
        /// </summary>
        /// <value>An unordered collection of programEvaluationObjectiveProgramEvaluationLevels. The descriptive level(s) of ratings (cut scores) for the program evaluation objective.</value>
        [JsonPropertyName("programEvaluationLevels")]
        public List<EdFiProgramEvaluationObjectiveProgramEvaluationLevel>? ProgramEvaluationLevels { get { return this.ProgramEvaluationLevelsOption; } set { this.ProgramEvaluationLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramEvaluationObjectiveDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgramEvaluationObjectiveDescriptionOption { get; private set; }

        /// <summary>
        /// The long description of the program evaluation objective.
        /// </summary>
        /// <value>The long description of the program evaluation objective.</value>
        [JsonPropertyName("programEvaluationObjectiveDescription")]
        public string? ProgramEvaluationObjectiveDescription { get { return this.ProgramEvaluationObjectiveDescriptionOption; } set { this.ProgramEvaluationObjectiveDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the ProgramEvaluationObjective entity.
        /// </summary>
        /// <value>Extensions to the ProgramEvaluationObjective entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiProgramEvaluationObjective {\n");
            sb.Append("  ProgramEvaluationObjectiveTitle: ").Append(ProgramEvaluationObjectiveTitle).Append("\n");
            sb.Append("  ProgramEvaluationReference: ").Append(ProgramEvaluationReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ObjectiveMaxNumericRating: ").Append(ObjectiveMaxNumericRating).Append("\n");
            sb.Append("  ObjectiveMinNumericRating: ").Append(ObjectiveMinNumericRating).Append("\n");
            sb.Append("  ObjectiveSortOrder: ").Append(ObjectiveSortOrder).Append("\n");
            sb.Append("  ProgramEvaluationLevels: ").Append(ProgramEvaluationLevels).Append("\n");
            sb.Append("  ProgramEvaluationObjectiveDescription: ").Append(ProgramEvaluationObjectiveDescription).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramEvaluationObjectiveTitle (string) maxLength
            if (this.ProgramEvaluationObjectiveTitle != null && this.ProgramEvaluationObjectiveTitle.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationObjectiveTitle, length must be less than 50.", new [] { "ProgramEvaluationObjectiveTitle" });
            }

            // ObjectiveMaxNumericRating (double) maximum
            if (this.ObjectiveMaxNumericRatingOption.IsSet && this.ObjectiveMaxNumericRatingOption.Value > (double)999.999)
            {
                yield return new ValidationResult("Invalid value for ObjectiveMaxNumericRating, must be a value less than or equal to 999.999.", new [] { "ObjectiveMaxNumericRating" });
            }

            // ObjectiveMaxNumericRating (double) minimum
            if (this.ObjectiveMaxNumericRatingOption.IsSet && this.ObjectiveMaxNumericRatingOption.Value < (double)-999.999)
            {
                yield return new ValidationResult("Invalid value for ObjectiveMaxNumericRating, must be a value greater than or equal to -999.999.", new [] { "ObjectiveMaxNumericRating" });
            }

            // ObjectiveMinNumericRating (double) maximum
            if (this.ObjectiveMinNumericRatingOption.IsSet && this.ObjectiveMinNumericRatingOption.Value > (double)999.999)
            {
                yield return new ValidationResult("Invalid value for ObjectiveMinNumericRating, must be a value less than or equal to 999.999.", new [] { "ObjectiveMinNumericRating" });
            }

            // ObjectiveMinNumericRating (double) minimum
            if (this.ObjectiveMinNumericRatingOption.IsSet && this.ObjectiveMinNumericRatingOption.Value < (double)-999.999)
            {
                yield return new ValidationResult("Invalid value for ObjectiveMinNumericRating, must be a value greater than or equal to -999.999.", new [] { "ObjectiveMinNumericRating" });
            }

            // ProgramEvaluationObjectiveDescription (string) maxLength
            if (this.ProgramEvaluationObjectiveDescription != null && this.ProgramEvaluationObjectiveDescription.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationObjectiveDescription, length must be less than 255.", new [] { "ProgramEvaluationObjectiveDescription" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiProgramEvaluationObjective" />
    /// </summary>
    public class EdFiProgramEvaluationObjectiveJsonConverter : JsonConverter<EdFiProgramEvaluationObjective>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiProgramEvaluationObjective" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiProgramEvaluationObjective Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> programEvaluationObjectiveTitle = default;
            Option<EdFiProgramEvaluationReference?> programEvaluationReference = default;
            Option<string?> id = default;
            Option<double?> objectiveMaxNumericRating = default;
            Option<double?> objectiveMinNumericRating = default;
            Option<int?> objectiveSortOrder = default;
            Option<List<EdFiProgramEvaluationObjectiveProgramEvaluationLevel>?> programEvaluationLevels = default;
            Option<string?> programEvaluationObjectiveDescription = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "programEvaluationObjectiveTitle":
                            programEvaluationObjectiveTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programEvaluationReference":
                            programEvaluationReference = new Option<EdFiProgramEvaluationReference?>(JsonSerializer.Deserialize<EdFiProgramEvaluationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "objectiveMaxNumericRating":
                            objectiveMaxNumericRating = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "objectiveMinNumericRating":
                            objectiveMinNumericRating = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "objectiveSortOrder":
                            objectiveSortOrder = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "programEvaluationLevels":
                            programEvaluationLevels = new Option<List<EdFiProgramEvaluationObjectiveProgramEvaluationLevel>?>(JsonSerializer.Deserialize<List<EdFiProgramEvaluationObjectiveProgramEvaluationLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programEvaluationObjectiveDescription":
                            programEvaluationObjectiveDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!programEvaluationObjectiveTitle.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgramEvaluationObjective.", nameof(programEvaluationObjectiveTitle));

            if (!programEvaluationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgramEvaluationObjective.", nameof(programEvaluationReference));

            if (programEvaluationObjectiveTitle.IsSet && programEvaluationObjectiveTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationObjectiveTitle), "Property is not nullable for class EdFiProgramEvaluationObjective.");

            if (programEvaluationReference.IsSet && programEvaluationReference.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationReference), "Property is not nullable for class EdFiProgramEvaluationObjective.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiProgramEvaluationObjective.");

            if (programEvaluationLevels.IsSet && programEvaluationLevels.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationLevels), "Property is not nullable for class EdFiProgramEvaluationObjective.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiProgramEvaluationObjective.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiProgramEvaluationObjective.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiProgramEvaluationObjective.");

            return new EdFiProgramEvaluationObjective(programEvaluationObjectiveTitle.Value!, programEvaluationReference.Value!, id, objectiveMaxNumericRating, objectiveMinNumericRating, objectiveSortOrder, programEvaluationLevels, programEvaluationObjectiveDescription, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiProgramEvaluationObjective" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiProgramEvaluationObjective"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiProgramEvaluationObjective, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiProgramEvaluationObjective" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiProgramEvaluationObjective"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiProgramEvaluationObjective edFiProgramEvaluationObjective, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiProgramEvaluationObjective.ProgramEvaluationObjectiveTitle == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationObjective.ProgramEvaluationObjectiveTitle), "Property is required for class EdFiProgramEvaluationObjective.");

            if (edFiProgramEvaluationObjective.ProgramEvaluationReference == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationObjective.ProgramEvaluationReference), "Property is required for class EdFiProgramEvaluationObjective.");

            if (edFiProgramEvaluationObjective.IdOption.IsSet && edFiProgramEvaluationObjective.Id == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationObjective.Id), "Property is required for class EdFiProgramEvaluationObjective.");

            if (edFiProgramEvaluationObjective.ProgramEvaluationLevelsOption.IsSet && edFiProgramEvaluationObjective.ProgramEvaluationLevels == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationObjective.ProgramEvaluationLevels), "Property is required for class EdFiProgramEvaluationObjective.");

            if (edFiProgramEvaluationObjective.EtagOption.IsSet && edFiProgramEvaluationObjective.Etag == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationObjective.Etag), "Property is required for class EdFiProgramEvaluationObjective.");

            if (edFiProgramEvaluationObjective.ExtOption.IsSet && edFiProgramEvaluationObjective.Ext == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationObjective.Ext), "Property is required for class EdFiProgramEvaluationObjective.");

            writer.WriteString("programEvaluationObjectiveTitle", edFiProgramEvaluationObjective.ProgramEvaluationObjectiveTitle);

            writer.WritePropertyName("programEvaluationReference");
            JsonSerializer.Serialize(writer, edFiProgramEvaluationObjective.ProgramEvaluationReference, jsonSerializerOptions);
            if (edFiProgramEvaluationObjective.IdOption.IsSet)
                writer.WriteString("id", edFiProgramEvaluationObjective.Id);

            if (edFiProgramEvaluationObjective.ObjectiveMaxNumericRatingOption.IsSet)
                if (edFiProgramEvaluationObjective.ObjectiveMaxNumericRatingOption.Value != null)
                    writer.WriteNumber("objectiveMaxNumericRating", edFiProgramEvaluationObjective.ObjectiveMaxNumericRatingOption.Value!.Value);
                else
                    writer.WriteNull("objectiveMaxNumericRating");

            if (edFiProgramEvaluationObjective.ObjectiveMinNumericRatingOption.IsSet)
                if (edFiProgramEvaluationObjective.ObjectiveMinNumericRatingOption.Value != null)
                    writer.WriteNumber("objectiveMinNumericRating", edFiProgramEvaluationObjective.ObjectiveMinNumericRatingOption.Value!.Value);
                else
                    writer.WriteNull("objectiveMinNumericRating");

            if (edFiProgramEvaluationObjective.ObjectiveSortOrderOption.IsSet)
                if (edFiProgramEvaluationObjective.ObjectiveSortOrderOption.Value != null)
                    writer.WriteNumber("objectiveSortOrder", edFiProgramEvaluationObjective.ObjectiveSortOrderOption.Value!.Value);
                else
                    writer.WriteNull("objectiveSortOrder");

            if (edFiProgramEvaluationObjective.ProgramEvaluationLevelsOption.IsSet)
            {
                writer.WritePropertyName("programEvaluationLevels");
                JsonSerializer.Serialize(writer, edFiProgramEvaluationObjective.ProgramEvaluationLevels, jsonSerializerOptions);
            }
            if (edFiProgramEvaluationObjective.ProgramEvaluationObjectiveDescriptionOption.IsSet)
                if (edFiProgramEvaluationObjective.ProgramEvaluationObjectiveDescriptionOption.Value != null)
                    writer.WriteString("programEvaluationObjectiveDescription", edFiProgramEvaluationObjective.ProgramEvaluationObjectiveDescription);
                else
                    writer.WriteNull("programEvaluationObjectiveDescription");

            if (edFiProgramEvaluationObjective.EtagOption.IsSet)
                writer.WriteString("_etag", edFiProgramEvaluationObjective.Etag);

            if (edFiProgramEvaluationObjective.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiProgramEvaluationObjective.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiProgramEvaluationObjective.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiProgramEvaluationObjective.Ext, jsonSerializerOptions);
            }
        }
    }
}
