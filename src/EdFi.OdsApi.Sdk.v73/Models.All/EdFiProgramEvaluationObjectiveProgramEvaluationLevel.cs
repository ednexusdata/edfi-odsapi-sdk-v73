// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiProgramEvaluationObjectiveProgramEvaluationLevel
    /// </summary>
    public partial class EdFiProgramEvaluationObjectiveProgramEvaluationLevel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgramEvaluationObjectiveProgramEvaluationLevel" /> class.
        /// </summary>
        /// <param name="ratingLevelDescriptor">The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).</param>
        /// <param name="maxNumericRating">The maximum numerical rating or score to achieve the evaluation rating level.</param>
        /// <param name="minNumericRating">The minimum numerical rating or score to achieve the evaluation rating level.</param>
        /// <param name="ext">Extensions to the ProgramEvaluationObjectiveProgramEvaluationLevel entity.</param>
        [JsonConstructor]
        public EdFiProgramEvaluationObjectiveProgramEvaluationLevel(string ratingLevelDescriptor, Option<double?> maxNumericRating = default, Option<double?> minNumericRating = default, Option<Object?> ext = default)
        {
            RatingLevelDescriptor = ratingLevelDescriptor;
            MaxNumericRatingOption = maxNumericRating;
            MinNumericRatingOption = minNumericRating;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).
        /// </summary>
        /// <value>The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).</value>
        [JsonPropertyName("ratingLevelDescriptor")]
        public string RatingLevelDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of MaxNumericRating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MaxNumericRatingOption { get; private set; }

        /// <summary>
        /// The maximum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        /// <value>The maximum numerical rating or score to achieve the evaluation rating level.</value>
        [JsonPropertyName("maxNumericRating")]
        public double? MaxNumericRating { get { return this.MaxNumericRatingOption; } set { this.MaxNumericRatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinNumericRating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MinNumericRatingOption { get; private set; }

        /// <summary>
        /// The minimum numerical rating or score to achieve the evaluation rating level.
        /// </summary>
        /// <value>The minimum numerical rating or score to achieve the evaluation rating level.</value>
        [JsonPropertyName("minNumericRating")]
        public double? MinNumericRating { get { return this.MinNumericRatingOption; } set { this.MinNumericRatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the ProgramEvaluationObjectiveProgramEvaluationLevel entity.
        /// </summary>
        /// <value>Extensions to the ProgramEvaluationObjectiveProgramEvaluationLevel entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiProgramEvaluationObjectiveProgramEvaluationLevel {\n");
            sb.Append("  RatingLevelDescriptor: ").Append(RatingLevelDescriptor).Append("\n");
            sb.Append("  MaxNumericRating: ").Append(MaxNumericRating).Append("\n");
            sb.Append("  MinNumericRating: ").Append(MinNumericRating).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RatingLevelDescriptor (string) maxLength
            if (this.RatingLevelDescriptor != null && this.RatingLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for RatingLevelDescriptor, length must be less than 306.", new [] { "RatingLevelDescriptor" });
            }

            // MaxNumericRating (double) maximum
            if (this.MaxNumericRatingOption.IsSet && this.MaxNumericRatingOption.Value > (double)999.999)
            {
                yield return new ValidationResult("Invalid value for MaxNumericRating, must be a value less than or equal to 999.999.", new [] { "MaxNumericRating" });
            }

            // MaxNumericRating (double) minimum
            if (this.MaxNumericRatingOption.IsSet && this.MaxNumericRatingOption.Value < (double)-999.999)
            {
                yield return new ValidationResult("Invalid value for MaxNumericRating, must be a value greater than or equal to -999.999.", new [] { "MaxNumericRating" });
            }

            // MinNumericRating (double) maximum
            if (this.MinNumericRatingOption.IsSet && this.MinNumericRatingOption.Value > (double)999.999)
            {
                yield return new ValidationResult("Invalid value for MinNumericRating, must be a value less than or equal to 999.999.", new [] { "MinNumericRating" });
            }

            // MinNumericRating (double) minimum
            if (this.MinNumericRatingOption.IsSet && this.MinNumericRatingOption.Value < (double)-999.999)
            {
                yield return new ValidationResult("Invalid value for MinNumericRating, must be a value greater than or equal to -999.999.", new [] { "MinNumericRating" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiProgramEvaluationObjectiveProgramEvaluationLevel" />
    /// </summary>
    public class EdFiProgramEvaluationObjectiveProgramEvaluationLevelJsonConverter : JsonConverter<EdFiProgramEvaluationObjectiveProgramEvaluationLevel>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiProgramEvaluationObjectiveProgramEvaluationLevel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiProgramEvaluationObjectiveProgramEvaluationLevel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ratingLevelDescriptor = default;
            Option<double?> maxNumericRating = default;
            Option<double?> minNumericRating = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ratingLevelDescriptor":
                            ratingLevelDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "maxNumericRating":
                            maxNumericRating = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "minNumericRating":
                            minNumericRating = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ratingLevelDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiProgramEvaluationObjectiveProgramEvaluationLevel.", nameof(ratingLevelDescriptor));

            if (ratingLevelDescriptor.IsSet && ratingLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(ratingLevelDescriptor), "Property is not nullable for class EdFiProgramEvaluationObjectiveProgramEvaluationLevel.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiProgramEvaluationObjectiveProgramEvaluationLevel.");

            return new EdFiProgramEvaluationObjectiveProgramEvaluationLevel(ratingLevelDescriptor.Value!, maxNumericRating, minNumericRating, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiProgramEvaluationObjectiveProgramEvaluationLevel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiProgramEvaluationObjectiveProgramEvaluationLevel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiProgramEvaluationObjectiveProgramEvaluationLevel edFiProgramEvaluationObjectiveProgramEvaluationLevel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiProgramEvaluationObjectiveProgramEvaluationLevel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiProgramEvaluationObjectiveProgramEvaluationLevel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiProgramEvaluationObjectiveProgramEvaluationLevel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiProgramEvaluationObjectiveProgramEvaluationLevel edFiProgramEvaluationObjectiveProgramEvaluationLevel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiProgramEvaluationObjectiveProgramEvaluationLevel.RatingLevelDescriptor == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationObjectiveProgramEvaluationLevel.RatingLevelDescriptor), "Property is required for class EdFiProgramEvaluationObjectiveProgramEvaluationLevel.");

            if (edFiProgramEvaluationObjectiveProgramEvaluationLevel.ExtOption.IsSet && edFiProgramEvaluationObjectiveProgramEvaluationLevel.Ext == null)
                throw new ArgumentNullException(nameof(edFiProgramEvaluationObjectiveProgramEvaluationLevel.Ext), "Property is required for class EdFiProgramEvaluationObjectiveProgramEvaluationLevel.");

            writer.WriteString("ratingLevelDescriptor", edFiProgramEvaluationObjectiveProgramEvaluationLevel.RatingLevelDescriptor);

            if (edFiProgramEvaluationObjectiveProgramEvaluationLevel.MaxNumericRatingOption.IsSet)
                if (edFiProgramEvaluationObjectiveProgramEvaluationLevel.MaxNumericRatingOption.Value != null)
                    writer.WriteNumber("maxNumericRating", edFiProgramEvaluationObjectiveProgramEvaluationLevel.MaxNumericRatingOption.Value!.Value);
                else
                    writer.WriteNull("maxNumericRating");

            if (edFiProgramEvaluationObjectiveProgramEvaluationLevel.MinNumericRatingOption.IsSet)
                if (edFiProgramEvaluationObjectiveProgramEvaluationLevel.MinNumericRatingOption.Value != null)
                    writer.WriteNumber("minNumericRating", edFiProgramEvaluationObjectiveProgramEvaluationLevel.MinNumericRatingOption.Value!.Value);
                else
                    writer.WriteNull("minNumericRating");

            if (edFiProgramEvaluationObjectiveProgramEvaluationLevel.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiProgramEvaluationObjectiveProgramEvaluationLevel.Ext, jsonSerializerOptions);
            }
        }
    }
}
