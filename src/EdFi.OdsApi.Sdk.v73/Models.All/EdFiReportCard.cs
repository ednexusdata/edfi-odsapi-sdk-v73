// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiReportCard
    /// </summary>
    public partial class EdFiReportCard : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiReportCard" /> class.
        /// </summary>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="gradingPeriodReference">gradingPeriodReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="gradePointAverages">An unordered collection of reportCardGradePointAverages. A measure of average performance for courses taken by an individual.</param>
        /// <param name="grades">An unordered collection of reportCardGrades. Grades for the classes attended by the student for this grading period.</param>
        /// <param name="numberOfDaysAbsent">The number of days an individual is absent when school is in session during a given reporting period.</param>
        /// <param name="numberOfDaysInAttendance">The number of days an individual is present when school is in session during a given reporting period.</param>
        /// <param name="numberOfDaysTardy">The number of days an individual is tardy during a given reporting period.</param>
        /// <param name="studentCompetencyObjectives">An unordered collection of reportCardStudentCompetencyObjectives. The student competency evaluations associated for this grading period.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the ReportCard entity.</param>
        [JsonConstructor]
        public EdFiReportCard(EdFiEducationOrganizationReference educationOrganizationReference, EdFiGradingPeriodReference gradingPeriodReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<List<EdFiReportCardGradePointAverage>?> gradePointAverages = default, Option<List<EdFiReportCardGrade>?> grades = default, Option<double?> numberOfDaysAbsent = default, Option<double?> numberOfDaysInAttendance = default, Option<int?> numberOfDaysTardy = default, Option<List<EdFiReportCardStudentCompetencyObjective>?> studentCompetencyObjectives = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            EducationOrganizationReference = educationOrganizationReference;
            GradingPeriodReference = gradingPeriodReference;
            StudentReference = studentReference;
            IdOption = id;
            GradePointAveragesOption = gradePointAverages;
            GradesOption = grades;
            NumberOfDaysAbsentOption = numberOfDaysAbsent;
            NumberOfDaysInAttendanceOption = numberOfDaysInAttendance;
            NumberOfDaysTardyOption = numberOfDaysTardy;
            StudentCompetencyObjectivesOption = studentCompetencyObjectives;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets GradingPeriodReference
        /// </summary>
        [JsonPropertyName("gradingPeriodReference")]
        public EdFiGradingPeriodReference GradingPeriodReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradePointAverages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiReportCardGradePointAverage>?> GradePointAveragesOption { get; private set; }

        /// <summary>
        /// An unordered collection of reportCardGradePointAverages. A measure of average performance for courses taken by an individual.
        /// </summary>
        /// <value>An unordered collection of reportCardGradePointAverages. A measure of average performance for courses taken by an individual.</value>
        [JsonPropertyName("gradePointAverages")]
        public List<EdFiReportCardGradePointAverage>? GradePointAverages { get { return this.GradePointAveragesOption; } set { this.GradePointAveragesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Grades
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiReportCardGrade>?> GradesOption { get; private set; }

        /// <summary>
        /// An unordered collection of reportCardGrades. Grades for the classes attended by the student for this grading period.
        /// </summary>
        /// <value>An unordered collection of reportCardGrades. Grades for the classes attended by the student for this grading period.</value>
        [JsonPropertyName("grades")]
        public List<EdFiReportCardGrade>? Grades { get { return this.GradesOption; } set { this.GradesOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumberOfDaysAbsent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NumberOfDaysAbsentOption { get; private set; }

        /// <summary>
        /// The number of days an individual is absent when school is in session during a given reporting period.
        /// </summary>
        /// <value>The number of days an individual is absent when school is in session during a given reporting period.</value>
        [JsonPropertyName("numberOfDaysAbsent")]
        public double? NumberOfDaysAbsent { get { return this.NumberOfDaysAbsentOption; } set { this.NumberOfDaysAbsentOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumberOfDaysInAttendance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NumberOfDaysInAttendanceOption { get; private set; }

        /// <summary>
        /// The number of days an individual is present when school is in session during a given reporting period.
        /// </summary>
        /// <value>The number of days an individual is present when school is in session during a given reporting period.</value>
        [JsonPropertyName("numberOfDaysInAttendance")]
        public double? NumberOfDaysInAttendance { get { return this.NumberOfDaysInAttendanceOption; } set { this.NumberOfDaysInAttendanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumberOfDaysTardy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOfDaysTardyOption { get; private set; }

        /// <summary>
        /// The number of days an individual is tardy during a given reporting period.
        /// </summary>
        /// <value>The number of days an individual is tardy during a given reporting period.</value>
        [JsonPropertyName("numberOfDaysTardy")]
        public int? NumberOfDaysTardy { get { return this.NumberOfDaysTardyOption; } set { this.NumberOfDaysTardyOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentCompetencyObjectives
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiReportCardStudentCompetencyObjective>?> StudentCompetencyObjectivesOption { get; private set; }

        /// <summary>
        /// An unordered collection of reportCardStudentCompetencyObjectives. The student competency evaluations associated for this grading period.
        /// </summary>
        /// <value>An unordered collection of reportCardStudentCompetencyObjectives. The student competency evaluations associated for this grading period.</value>
        [JsonPropertyName("studentCompetencyObjectives")]
        public List<EdFiReportCardStudentCompetencyObjective>? StudentCompetencyObjectives { get { return this.StudentCompetencyObjectivesOption; } set { this.StudentCompetencyObjectivesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the ReportCard entity.
        /// </summary>
        /// <value>Extensions to the ReportCard entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiReportCard {\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  GradingPeriodReference: ").Append(GradingPeriodReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GradePointAverages: ").Append(GradePointAverages).Append("\n");
            sb.Append("  Grades: ").Append(Grades).Append("\n");
            sb.Append("  NumberOfDaysAbsent: ").Append(NumberOfDaysAbsent).Append("\n");
            sb.Append("  NumberOfDaysInAttendance: ").Append(NumberOfDaysInAttendance).Append("\n");
            sb.Append("  NumberOfDaysTardy: ").Append(NumberOfDaysTardy).Append("\n");
            sb.Append("  StudentCompetencyObjectives: ").Append(StudentCompetencyObjectives).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfDaysAbsent (double) maximum
            if (this.NumberOfDaysAbsentOption.IsSet && this.NumberOfDaysAbsentOption.Value > (double)1.0E+14)
            {
                yield return new ValidationResult("Invalid value for NumberOfDaysAbsent, must be a value less than or equal to 1.0E+14.", new [] { "NumberOfDaysAbsent" });
            }

            // NumberOfDaysAbsent (double) minimum
            if (this.NumberOfDaysAbsentOption.IsSet && this.NumberOfDaysAbsentOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for NumberOfDaysAbsent, must be a value greater than or equal to 0.0.", new [] { "NumberOfDaysAbsent" });
            }

            // NumberOfDaysInAttendance (double) maximum
            if (this.NumberOfDaysInAttendanceOption.IsSet && this.NumberOfDaysInAttendanceOption.Value > (double)1.0E+14)
            {
                yield return new ValidationResult("Invalid value for NumberOfDaysInAttendance, must be a value less than or equal to 1.0E+14.", new [] { "NumberOfDaysInAttendance" });
            }

            // NumberOfDaysInAttendance (double) minimum
            if (this.NumberOfDaysInAttendanceOption.IsSet && this.NumberOfDaysInAttendanceOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for NumberOfDaysInAttendance, must be a value greater than or equal to 0.0.", new [] { "NumberOfDaysInAttendance" });
            }

            // NumberOfDaysTardy (int) minimum
            if (this.NumberOfDaysTardyOption.IsSet && this.NumberOfDaysTardyOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for NumberOfDaysTardy, must be a value greater than or equal to 0.", new [] { "NumberOfDaysTardy" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiReportCard" />
    /// </summary>
    public class EdFiReportCardJsonConverter : JsonConverter<EdFiReportCard>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiReportCard" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiReportCard Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiGradingPeriodReference?> gradingPeriodReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<List<EdFiReportCardGradePointAverage>?> gradePointAverages = default;
            Option<List<EdFiReportCardGrade>?> grades = default;
            Option<double?> numberOfDaysAbsent = default;
            Option<double?> numberOfDaysInAttendance = default;
            Option<int?> numberOfDaysTardy = default;
            Option<List<EdFiReportCardStudentCompetencyObjective>?> studentCompetencyObjectives = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "gradingPeriodReference":
                            gradingPeriodReference = new Option<EdFiGradingPeriodReference?>(JsonSerializer.Deserialize<EdFiGradingPeriodReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradePointAverages":
                            gradePointAverages = new Option<List<EdFiReportCardGradePointAverage>?>(JsonSerializer.Deserialize<List<EdFiReportCardGradePointAverage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "grades":
                            grades = new Option<List<EdFiReportCardGrade>?>(JsonSerializer.Deserialize<List<EdFiReportCardGrade>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "numberOfDaysAbsent":
                            numberOfDaysAbsent = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "numberOfDaysInAttendance":
                            numberOfDaysInAttendance = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "numberOfDaysTardy":
                            numberOfDaysTardy = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "studentCompetencyObjectives":
                            studentCompetencyObjectives = new Option<List<EdFiReportCardStudentCompetencyObjective>?>(JsonSerializer.Deserialize<List<EdFiReportCardStudentCompetencyObjective>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiReportCard.", nameof(educationOrganizationReference));

            if (!gradingPeriodReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiReportCard.", nameof(gradingPeriodReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiReportCard.", nameof(studentReference));

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiReportCard.");

            if (gradingPeriodReference.IsSet && gradingPeriodReference.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodReference), "Property is not nullable for class EdFiReportCard.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiReportCard.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiReportCard.");

            if (gradePointAverages.IsSet && gradePointAverages.Value == null)
                throw new ArgumentNullException(nameof(gradePointAverages), "Property is not nullable for class EdFiReportCard.");

            if (grades.IsSet && grades.Value == null)
                throw new ArgumentNullException(nameof(grades), "Property is not nullable for class EdFiReportCard.");

            if (studentCompetencyObjectives.IsSet && studentCompetencyObjectives.Value == null)
                throw new ArgumentNullException(nameof(studentCompetencyObjectives), "Property is not nullable for class EdFiReportCard.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiReportCard.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiReportCard.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiReportCard.");

            return new EdFiReportCard(educationOrganizationReference.Value!, gradingPeriodReference.Value!, studentReference.Value!, id, gradePointAverages, grades, numberOfDaysAbsent, numberOfDaysInAttendance, numberOfDaysTardy, studentCompetencyObjectives, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiReportCard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiReportCard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiReportCard edFiReportCard, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiReportCard, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiReportCard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiReportCard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiReportCard edFiReportCard, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiReportCard.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiReportCard.EducationOrganizationReference), "Property is required for class EdFiReportCard.");

            if (edFiReportCard.GradingPeriodReference == null)
                throw new ArgumentNullException(nameof(edFiReportCard.GradingPeriodReference), "Property is required for class EdFiReportCard.");

            if (edFiReportCard.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiReportCard.StudentReference), "Property is required for class EdFiReportCard.");

            if (edFiReportCard.IdOption.IsSet && edFiReportCard.Id == null)
                throw new ArgumentNullException(nameof(edFiReportCard.Id), "Property is required for class EdFiReportCard.");

            if (edFiReportCard.GradePointAveragesOption.IsSet && edFiReportCard.GradePointAverages == null)
                throw new ArgumentNullException(nameof(edFiReportCard.GradePointAverages), "Property is required for class EdFiReportCard.");

            if (edFiReportCard.GradesOption.IsSet && edFiReportCard.Grades == null)
                throw new ArgumentNullException(nameof(edFiReportCard.Grades), "Property is required for class EdFiReportCard.");

            if (edFiReportCard.StudentCompetencyObjectivesOption.IsSet && edFiReportCard.StudentCompetencyObjectives == null)
                throw new ArgumentNullException(nameof(edFiReportCard.StudentCompetencyObjectives), "Property is required for class EdFiReportCard.");

            if (edFiReportCard.EtagOption.IsSet && edFiReportCard.Etag == null)
                throw new ArgumentNullException(nameof(edFiReportCard.Etag), "Property is required for class EdFiReportCard.");

            if (edFiReportCard.ExtOption.IsSet && edFiReportCard.Ext == null)
                throw new ArgumentNullException(nameof(edFiReportCard.Ext), "Property is required for class EdFiReportCard.");

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiReportCard.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("gradingPeriodReference");
            JsonSerializer.Serialize(writer, edFiReportCard.GradingPeriodReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiReportCard.StudentReference, jsonSerializerOptions);
            if (edFiReportCard.IdOption.IsSet)
                writer.WriteString("id", edFiReportCard.Id);

            if (edFiReportCard.GradePointAveragesOption.IsSet)
            {
                writer.WritePropertyName("gradePointAverages");
                JsonSerializer.Serialize(writer, edFiReportCard.GradePointAverages, jsonSerializerOptions);
            }
            if (edFiReportCard.GradesOption.IsSet)
            {
                writer.WritePropertyName("grades");
                JsonSerializer.Serialize(writer, edFiReportCard.Grades, jsonSerializerOptions);
            }
            if (edFiReportCard.NumberOfDaysAbsentOption.IsSet)
                if (edFiReportCard.NumberOfDaysAbsentOption.Value != null)
                    writer.WriteNumber("numberOfDaysAbsent", edFiReportCard.NumberOfDaysAbsentOption.Value!.Value);
                else
                    writer.WriteNull("numberOfDaysAbsent");

            if (edFiReportCard.NumberOfDaysInAttendanceOption.IsSet)
                if (edFiReportCard.NumberOfDaysInAttendanceOption.Value != null)
                    writer.WriteNumber("numberOfDaysInAttendance", edFiReportCard.NumberOfDaysInAttendanceOption.Value!.Value);
                else
                    writer.WriteNull("numberOfDaysInAttendance");

            if (edFiReportCard.NumberOfDaysTardyOption.IsSet)
                if (edFiReportCard.NumberOfDaysTardyOption.Value != null)
                    writer.WriteNumber("numberOfDaysTardy", edFiReportCard.NumberOfDaysTardyOption.Value!.Value);
                else
                    writer.WriteNull("numberOfDaysTardy");

            if (edFiReportCard.StudentCompetencyObjectivesOption.IsSet)
            {
                writer.WritePropertyName("studentCompetencyObjectives");
                JsonSerializer.Serialize(writer, edFiReportCard.StudentCompetencyObjectives, jsonSerializerOptions);
            }
            if (edFiReportCard.EtagOption.IsSet)
                writer.WriteString("_etag", edFiReportCard.Etag);

            if (edFiReportCard.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiReportCard.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiReportCard.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiReportCard.Ext, jsonSerializerOptions);
            }
        }
    }
}
