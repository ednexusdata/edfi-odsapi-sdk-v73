// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiReportCardGradePointAverage
    /// </summary>
    public partial class EdFiReportCardGradePointAverage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiReportCardGradePointAverage" /> class.
        /// </summary>
        /// <param name="gradePointAverageTypeDescriptor">The system used for calculating the grade point average for an individual.</param>
        /// <param name="gradePointAverageValue">The value of the grade points earned divided by the number of credits attempted.</param>
        /// <param name="isCumulative">Indicator of whether or not the Grade Point Average value is cumulative.</param>
        /// <param name="maxGradePointAverageValue">The maximum value for the grade point average.</param>
        /// <param name="ext">Extensions to the ReportCardGradePointAverage entity.</param>
        [JsonConstructor]
        public EdFiReportCardGradePointAverage(string gradePointAverageTypeDescriptor, double gradePointAverageValue, Option<bool?> isCumulative = default, Option<double?> maxGradePointAverageValue = default, Option<Object?> ext = default)
        {
            GradePointAverageTypeDescriptor = gradePointAverageTypeDescriptor;
            GradePointAverageValue = gradePointAverageValue;
            IsCumulativeOption = isCumulative;
            MaxGradePointAverageValueOption = maxGradePointAverageValue;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The system used for calculating the grade point average for an individual.
        /// </summary>
        /// <value>The system used for calculating the grade point average for an individual.</value>
        [JsonPropertyName("gradePointAverageTypeDescriptor")]
        public string GradePointAverageTypeDescriptor { get; set; }

        /// <summary>
        /// The value of the grade points earned divided by the number of credits attempted.
        /// </summary>
        /// <value>The value of the grade points earned divided by the number of credits attempted.</value>
        [JsonPropertyName("gradePointAverageValue")]
        public double GradePointAverageValue { get; set; }

        /// <summary>
        /// Used to track the state of IsCumulative
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCumulativeOption { get; private set; }

        /// <summary>
        /// Indicator of whether or not the Grade Point Average value is cumulative.
        /// </summary>
        /// <value>Indicator of whether or not the Grade Point Average value is cumulative.</value>
        [JsonPropertyName("isCumulative")]
        public bool? IsCumulative { get { return this.IsCumulativeOption; } set { this.IsCumulativeOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxGradePointAverageValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MaxGradePointAverageValueOption { get; private set; }

        /// <summary>
        /// The maximum value for the grade point average.
        /// </summary>
        /// <value>The maximum value for the grade point average.</value>
        [JsonPropertyName("maxGradePointAverageValue")]
        public double? MaxGradePointAverageValue { get { return this.MaxGradePointAverageValueOption; } set { this.MaxGradePointAverageValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the ReportCardGradePointAverage entity.
        /// </summary>
        /// <value>Extensions to the ReportCardGradePointAverage entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiReportCardGradePointAverage {\n");
            sb.Append("  GradePointAverageTypeDescriptor: ").Append(GradePointAverageTypeDescriptor).Append("\n");
            sb.Append("  GradePointAverageValue: ").Append(GradePointAverageValue).Append("\n");
            sb.Append("  IsCumulative: ").Append(IsCumulative).Append("\n");
            sb.Append("  MaxGradePointAverageValue: ").Append(MaxGradePointAverageValue).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradePointAverageTypeDescriptor (string) maxLength
            if (this.GradePointAverageTypeDescriptor != null && this.GradePointAverageTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradePointAverageTypeDescriptor, length must be less than 306.", new [] { "GradePointAverageTypeDescriptor" });
            }

            // GradePointAverageValue (double) maximum
            if (this.GradePointAverageValue > (double)1.0E+14)
            {
                yield return new ValidationResult("Invalid value for GradePointAverageValue, must be a value less than or equal to 1.0E+14.", new [] { "GradePointAverageValue" });
            }

            // GradePointAverageValue (double) minimum
            if (this.GradePointAverageValue < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for GradePointAverageValue, must be a value greater than or equal to 0.0.", new [] { "GradePointAverageValue" });
            }

            // MaxGradePointAverageValue (double) maximum
            if (this.MaxGradePointAverageValueOption.IsSet && this.MaxGradePointAverageValueOption.Value > (double)1.0E+14)
            {
                yield return new ValidationResult("Invalid value for MaxGradePointAverageValue, must be a value less than or equal to 1.0E+14.", new [] { "MaxGradePointAverageValue" });
            }

            // MaxGradePointAverageValue (double) minimum
            if (this.MaxGradePointAverageValueOption.IsSet && this.MaxGradePointAverageValueOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for MaxGradePointAverageValue, must be a value greater than or equal to 0.0.", new [] { "MaxGradePointAverageValue" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiReportCardGradePointAverage" />
    /// </summary>
    public class EdFiReportCardGradePointAverageJsonConverter : JsonConverter<EdFiReportCardGradePointAverage>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiReportCardGradePointAverage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiReportCardGradePointAverage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> gradePointAverageTypeDescriptor = default;
            Option<double?> gradePointAverageValue = default;
            Option<bool?> isCumulative = default;
            Option<double?> maxGradePointAverageValue = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gradePointAverageTypeDescriptor":
                            gradePointAverageTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradePointAverageValue":
                            gradePointAverageValue = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "isCumulative":
                            isCumulative = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "maxGradePointAverageValue":
                            maxGradePointAverageValue = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!gradePointAverageTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiReportCardGradePointAverage.", nameof(gradePointAverageTypeDescriptor));

            if (!gradePointAverageValue.IsSet)
                throw new ArgumentException("Property is required for class EdFiReportCardGradePointAverage.", nameof(gradePointAverageValue));

            if (gradePointAverageTypeDescriptor.IsSet && gradePointAverageTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradePointAverageTypeDescriptor), "Property is not nullable for class EdFiReportCardGradePointAverage.");

            if (gradePointAverageValue.IsSet && gradePointAverageValue.Value == null)
                throw new ArgumentNullException(nameof(gradePointAverageValue), "Property is not nullable for class EdFiReportCardGradePointAverage.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiReportCardGradePointAverage.");

            return new EdFiReportCardGradePointAverage(gradePointAverageTypeDescriptor.Value!, gradePointAverageValue.Value!.Value!, isCumulative, maxGradePointAverageValue, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiReportCardGradePointAverage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiReportCardGradePointAverage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiReportCardGradePointAverage edFiReportCardGradePointAverage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiReportCardGradePointAverage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiReportCardGradePointAverage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiReportCardGradePointAverage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiReportCardGradePointAverage edFiReportCardGradePointAverage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiReportCardGradePointAverage.GradePointAverageTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiReportCardGradePointAverage.GradePointAverageTypeDescriptor), "Property is required for class EdFiReportCardGradePointAverage.");

            if (edFiReportCardGradePointAverage.ExtOption.IsSet && edFiReportCardGradePointAverage.Ext == null)
                throw new ArgumentNullException(nameof(edFiReportCardGradePointAverage.Ext), "Property is required for class EdFiReportCardGradePointAverage.");

            writer.WriteString("gradePointAverageTypeDescriptor", edFiReportCardGradePointAverage.GradePointAverageTypeDescriptor);

            writer.WriteNumber("gradePointAverageValue", edFiReportCardGradePointAverage.GradePointAverageValue);

            if (edFiReportCardGradePointAverage.IsCumulativeOption.IsSet)
                if (edFiReportCardGradePointAverage.IsCumulativeOption.Value != null)
                    writer.WriteBoolean("isCumulative", edFiReportCardGradePointAverage.IsCumulativeOption.Value!.Value);
                else
                    writer.WriteNull("isCumulative");

            if (edFiReportCardGradePointAverage.MaxGradePointAverageValueOption.IsSet)
                if (edFiReportCardGradePointAverage.MaxGradePointAverageValueOption.Value != null)
                    writer.WriteNumber("maxGradePointAverageValue", edFiReportCardGradePointAverage.MaxGradePointAverageValueOption.Value!.Value);
                else
                    writer.WriteNull("maxGradePointAverageValue");

            if (edFiReportCardGradePointAverage.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiReportCardGradePointAverage.Ext, jsonSerializerOptions);
            }
        }
    }
}
