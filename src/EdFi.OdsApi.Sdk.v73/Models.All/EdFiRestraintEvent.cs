// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiRestraintEvent
    /// </summary>
    public partial class EdFiRestraintEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiRestraintEvent" /> class.
        /// </summary>
        /// <param name="restraintEventIdentifier">A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.</param>
        /// <param name="schoolReference">schoolReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="eventDate">Month, day, and year of the restraint event.</param>
        /// <param name="id">id</param>
        /// <param name="disciplineIncidentReference">disciplineIncidentReference</param>
        /// <param name="educationalEnvironmentDescriptor">The setting where the RestraintEvent was exercised.</param>
        /// <param name="programs">An unordered collection of restraintEventPrograms. The special education program associated with the restraint event.</param>
        /// <param name="reasons">An unordered collection of restraintEventReasons. A categorization of the circumstances or reason for the RestraintEvent.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the RestraintEvent entity.</param>
        [JsonConstructor]
        public EdFiRestraintEvent(string restraintEventIdentifier, EdFiSchoolReference schoolReference, EdFiStudentReference studentReference, DateOnly eventDate, Option<string?> id = default, Option<EdFiDisciplineIncidentReference?> disciplineIncidentReference = default, Option<string?> educationalEnvironmentDescriptor = default, Option<List<EdFiRestraintEventProgram>?> programs = default, Option<List<EdFiRestraintEventReason>?> reasons = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            RestraintEventIdentifier = restraintEventIdentifier;
            SchoolReference = schoolReference;
            StudentReference = studentReference;
            EventDate = eventDate;
            IdOption = id;
            DisciplineIncidentReferenceOption = disciplineIncidentReference;
            EducationalEnvironmentDescriptorOption = educationalEnvironmentDescriptor;
            ProgramsOption = programs;
            ReasonsOption = reasons;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.</value>
        [JsonPropertyName("restraintEventIdentifier")]
        public string RestraintEventIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [JsonPropertyName("schoolReference")]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Month, day, and year of the restraint event.
        /// </summary>
        /// <value>Month, day, and year of the restraint event.</value>
        [JsonPropertyName("eventDate")]
        public DateOnly EventDate { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisciplineIncidentReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiDisciplineIncidentReference?> DisciplineIncidentReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisciplineIncidentReference
        /// </summary>
        [JsonPropertyName("disciplineIncidentReference")]
        public EdFiDisciplineIncidentReference? DisciplineIncidentReference { get { return this.DisciplineIncidentReferenceOption; } set { this.DisciplineIncidentReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationalEnvironmentDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EducationalEnvironmentDescriptorOption { get; private set; }

        /// <summary>
        /// The setting where the RestraintEvent was exercised.
        /// </summary>
        /// <value>The setting where the RestraintEvent was exercised.</value>
        [JsonPropertyName("educationalEnvironmentDescriptor")]
        public string? EducationalEnvironmentDescriptor { get { return this.EducationalEnvironmentDescriptorOption; } set { this.EducationalEnvironmentDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Programs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiRestraintEventProgram>?> ProgramsOption { get; private set; }

        /// <summary>
        /// An unordered collection of restraintEventPrograms. The special education program associated with the restraint event.
        /// </summary>
        /// <value>An unordered collection of restraintEventPrograms. The special education program associated with the restraint event.</value>
        [JsonPropertyName("programs")]
        public List<EdFiRestraintEventProgram>? Programs { get { return this.ProgramsOption; } set { this.ProgramsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reasons
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiRestraintEventReason>?> ReasonsOption { get; private set; }

        /// <summary>
        /// An unordered collection of restraintEventReasons. A categorization of the circumstances or reason for the RestraintEvent.
        /// </summary>
        /// <value>An unordered collection of restraintEventReasons. A categorization of the circumstances or reason for the RestraintEvent.</value>
        [JsonPropertyName("reasons")]
        public List<EdFiRestraintEventReason>? Reasons { get { return this.ReasonsOption; } set { this.ReasonsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the RestraintEvent entity.
        /// </summary>
        /// <value>Extensions to the RestraintEvent entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiRestraintEvent {\n");
            sb.Append("  RestraintEventIdentifier: ").Append(RestraintEventIdentifier).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisciplineIncidentReference: ").Append(DisciplineIncidentReference).Append("\n");
            sb.Append("  EducationalEnvironmentDescriptor: ").Append(EducationalEnvironmentDescriptor).Append("\n");
            sb.Append("  Programs: ").Append(Programs).Append("\n");
            sb.Append("  Reasons: ").Append(Reasons).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RestraintEventIdentifier (string) maxLength
            if (this.RestraintEventIdentifier != null && this.RestraintEventIdentifier.Length > 36)
            {
                yield return new ValidationResult("Invalid value for RestraintEventIdentifier, length must be less than 36.", new [] { "RestraintEventIdentifier" });
            }

            // EducationalEnvironmentDescriptor (string) maxLength
            if (this.EducationalEnvironmentDescriptor != null && this.EducationalEnvironmentDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EducationalEnvironmentDescriptor, length must be less than 306.", new [] { "EducationalEnvironmentDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiRestraintEvent" />
    /// </summary>
    public class EdFiRestraintEventJsonConverter : JsonConverter<EdFiRestraintEvent>
    {
        /// <summary>
        /// The format to use to serialize EventDate
        /// </summary>
        public static string EventDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiRestraintEvent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiRestraintEvent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> restraintEventIdentifier = default;
            Option<EdFiSchoolReference?> schoolReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<DateOnly?> eventDate = default;
            Option<string?> id = default;
            Option<EdFiDisciplineIncidentReference?> disciplineIncidentReference = default;
            Option<string?> educationalEnvironmentDescriptor = default;
            Option<List<EdFiRestraintEventProgram>?> programs = default;
            Option<List<EdFiRestraintEventReason>?> reasons = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "restraintEventIdentifier":
                            restraintEventIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schoolReference":
                            schoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "eventDate":
                            eventDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "disciplineIncidentReference":
                            disciplineIncidentReference = new Option<EdFiDisciplineIncidentReference?>(JsonSerializer.Deserialize<EdFiDisciplineIncidentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "educationalEnvironmentDescriptor":
                            educationalEnvironmentDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "programs":
                            programs = new Option<List<EdFiRestraintEventProgram>?>(JsonSerializer.Deserialize<List<EdFiRestraintEventProgram>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reasons":
                            reasons = new Option<List<EdFiRestraintEventReason>?>(JsonSerializer.Deserialize<List<EdFiRestraintEventReason>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!restraintEventIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiRestraintEvent.", nameof(restraintEventIdentifier));

            if (!schoolReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiRestraintEvent.", nameof(schoolReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiRestraintEvent.", nameof(studentReference));

            if (!eventDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiRestraintEvent.", nameof(eventDate));

            if (restraintEventIdentifier.IsSet && restraintEventIdentifier.Value == null)
                throw new ArgumentNullException(nameof(restraintEventIdentifier), "Property is not nullable for class EdFiRestraintEvent.");

            if (schoolReference.IsSet && schoolReference.Value == null)
                throw new ArgumentNullException(nameof(schoolReference), "Property is not nullable for class EdFiRestraintEvent.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiRestraintEvent.");

            if (eventDate.IsSet && eventDate.Value == null)
                throw new ArgumentNullException(nameof(eventDate), "Property is not nullable for class EdFiRestraintEvent.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiRestraintEvent.");

            if (disciplineIncidentReference.IsSet && disciplineIncidentReference.Value == null)
                throw new ArgumentNullException(nameof(disciplineIncidentReference), "Property is not nullable for class EdFiRestraintEvent.");

            if (programs.IsSet && programs.Value == null)
                throw new ArgumentNullException(nameof(programs), "Property is not nullable for class EdFiRestraintEvent.");

            if (reasons.IsSet && reasons.Value == null)
                throw new ArgumentNullException(nameof(reasons), "Property is not nullable for class EdFiRestraintEvent.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiRestraintEvent.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiRestraintEvent.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiRestraintEvent.");

            return new EdFiRestraintEvent(restraintEventIdentifier.Value!, schoolReference.Value!, studentReference.Value!, eventDate.Value!.Value!, id, disciplineIncidentReference, educationalEnvironmentDescriptor, programs, reasons, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiRestraintEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiRestraintEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiRestraintEvent edFiRestraintEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiRestraintEvent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiRestraintEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiRestraintEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiRestraintEvent edFiRestraintEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiRestraintEvent.RestraintEventIdentifier == null)
                throw new ArgumentNullException(nameof(edFiRestraintEvent.RestraintEventIdentifier), "Property is required for class EdFiRestraintEvent.");

            if (edFiRestraintEvent.SchoolReference == null)
                throw new ArgumentNullException(nameof(edFiRestraintEvent.SchoolReference), "Property is required for class EdFiRestraintEvent.");

            if (edFiRestraintEvent.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiRestraintEvent.StudentReference), "Property is required for class EdFiRestraintEvent.");

            if (edFiRestraintEvent.IdOption.IsSet && edFiRestraintEvent.Id == null)
                throw new ArgumentNullException(nameof(edFiRestraintEvent.Id), "Property is required for class EdFiRestraintEvent.");

            if (edFiRestraintEvent.DisciplineIncidentReferenceOption.IsSet && edFiRestraintEvent.DisciplineIncidentReference == null)
                throw new ArgumentNullException(nameof(edFiRestraintEvent.DisciplineIncidentReference), "Property is required for class EdFiRestraintEvent.");

            if (edFiRestraintEvent.ProgramsOption.IsSet && edFiRestraintEvent.Programs == null)
                throw new ArgumentNullException(nameof(edFiRestraintEvent.Programs), "Property is required for class EdFiRestraintEvent.");

            if (edFiRestraintEvent.ReasonsOption.IsSet && edFiRestraintEvent.Reasons == null)
                throw new ArgumentNullException(nameof(edFiRestraintEvent.Reasons), "Property is required for class EdFiRestraintEvent.");

            if (edFiRestraintEvent.EtagOption.IsSet && edFiRestraintEvent.Etag == null)
                throw new ArgumentNullException(nameof(edFiRestraintEvent.Etag), "Property is required for class EdFiRestraintEvent.");

            if (edFiRestraintEvent.ExtOption.IsSet && edFiRestraintEvent.Ext == null)
                throw new ArgumentNullException(nameof(edFiRestraintEvent.Ext), "Property is required for class EdFiRestraintEvent.");

            writer.WriteString("restraintEventIdentifier", edFiRestraintEvent.RestraintEventIdentifier);

            writer.WritePropertyName("schoolReference");
            JsonSerializer.Serialize(writer, edFiRestraintEvent.SchoolReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiRestraintEvent.StudentReference, jsonSerializerOptions);
            writer.WriteString("eventDate", edFiRestraintEvent.EventDate.ToString(EventDateFormat));

            if (edFiRestraintEvent.IdOption.IsSet)
                writer.WriteString("id", edFiRestraintEvent.Id);

            if (edFiRestraintEvent.DisciplineIncidentReferenceOption.IsSet)
            {
                writer.WritePropertyName("disciplineIncidentReference");
                JsonSerializer.Serialize(writer, edFiRestraintEvent.DisciplineIncidentReference, jsonSerializerOptions);
            }
            if (edFiRestraintEvent.EducationalEnvironmentDescriptorOption.IsSet)
                if (edFiRestraintEvent.EducationalEnvironmentDescriptorOption.Value != null)
                    writer.WriteString("educationalEnvironmentDescriptor", edFiRestraintEvent.EducationalEnvironmentDescriptor);
                else
                    writer.WriteNull("educationalEnvironmentDescriptor");

            if (edFiRestraintEvent.ProgramsOption.IsSet)
            {
                writer.WritePropertyName("programs");
                JsonSerializer.Serialize(writer, edFiRestraintEvent.Programs, jsonSerializerOptions);
            }
            if (edFiRestraintEvent.ReasonsOption.IsSet)
            {
                writer.WritePropertyName("reasons");
                JsonSerializer.Serialize(writer, edFiRestraintEvent.Reasons, jsonSerializerOptions);
            }
            if (edFiRestraintEvent.EtagOption.IsSet)
                writer.WriteString("_etag", edFiRestraintEvent.Etag);

            if (edFiRestraintEvent.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiRestraintEvent.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiRestraintEvent.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiRestraintEvent.Ext, jsonSerializerOptions);
            }
        }
    }
}
