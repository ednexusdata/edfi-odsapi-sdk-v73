// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiSectionCourseLevelCharacteristic
    /// </summary>
    public partial class EdFiSectionCourseLevelCharacteristic : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSectionCourseLevelCharacteristic" /> class.
        /// </summary>
        /// <param name="courseLevelCharacteristicDescriptor">The type of specific program or designation with which the section is associated. This collection should only be populated if it differs from the course level characteristics identified at the course offering level.</param>
        /// <param name="ext">Extensions to the SectionCourseLevelCharacteristic entity.</param>
        [JsonConstructor]
        public EdFiSectionCourseLevelCharacteristic(string courseLevelCharacteristicDescriptor, Option<Object?> ext = default)
        {
            CourseLevelCharacteristicDescriptor = courseLevelCharacteristicDescriptor;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of specific program or designation with which the section is associated. This collection should only be populated if it differs from the course level characteristics identified at the course offering level.
        /// </summary>
        /// <value>The type of specific program or designation with which the section is associated. This collection should only be populated if it differs from the course level characteristics identified at the course offering level.</value>
        [JsonPropertyName("courseLevelCharacteristicDescriptor")]
        public string CourseLevelCharacteristicDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the SectionCourseLevelCharacteristic entity.
        /// </summary>
        /// <value>Extensions to the SectionCourseLevelCharacteristic entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSectionCourseLevelCharacteristic {\n");
            sb.Append("  CourseLevelCharacteristicDescriptor: ").Append(CourseLevelCharacteristicDescriptor).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CourseLevelCharacteristicDescriptor (string) maxLength
            if (this.CourseLevelCharacteristicDescriptor != null && this.CourseLevelCharacteristicDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CourseLevelCharacteristicDescriptor, length must be less than 306.", new [] { "CourseLevelCharacteristicDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiSectionCourseLevelCharacteristic" />
    /// </summary>
    public class EdFiSectionCourseLevelCharacteristicJsonConverter : JsonConverter<EdFiSectionCourseLevelCharacteristic>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiSectionCourseLevelCharacteristic" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiSectionCourseLevelCharacteristic Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> courseLevelCharacteristicDescriptor = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "courseLevelCharacteristicDescriptor":
                            courseLevelCharacteristicDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!courseLevelCharacteristicDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiSectionCourseLevelCharacteristic.", nameof(courseLevelCharacteristicDescriptor));

            if (courseLevelCharacteristicDescriptor.IsSet && courseLevelCharacteristicDescriptor.Value == null)
                throw new ArgumentNullException(nameof(courseLevelCharacteristicDescriptor), "Property is not nullable for class EdFiSectionCourseLevelCharacteristic.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiSectionCourseLevelCharacteristic.");

            return new EdFiSectionCourseLevelCharacteristic(courseLevelCharacteristicDescriptor.Value!, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiSectionCourseLevelCharacteristic" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSectionCourseLevelCharacteristic"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiSectionCourseLevelCharacteristic edFiSectionCourseLevelCharacteristic, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiSectionCourseLevelCharacteristic, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiSectionCourseLevelCharacteristic" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSectionCourseLevelCharacteristic"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiSectionCourseLevelCharacteristic edFiSectionCourseLevelCharacteristic, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiSectionCourseLevelCharacteristic.CourseLevelCharacteristicDescriptor == null)
                throw new ArgumentNullException(nameof(edFiSectionCourseLevelCharacteristic.CourseLevelCharacteristicDescriptor), "Property is required for class EdFiSectionCourseLevelCharacteristic.");

            if (edFiSectionCourseLevelCharacteristic.ExtOption.IsSet && edFiSectionCourseLevelCharacteristic.Ext == null)
                throw new ArgumentNullException(nameof(edFiSectionCourseLevelCharacteristic.Ext), "Property is required for class EdFiSectionCourseLevelCharacteristic.");

            writer.WriteString("courseLevelCharacteristicDescriptor", edFiSectionCourseLevelCharacteristic.CourseLevelCharacteristicDescriptor);

            if (edFiSectionCourseLevelCharacteristic.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiSectionCourseLevelCharacteristic.Ext, jsonSerializerOptions);
            }
        }
    }
}
