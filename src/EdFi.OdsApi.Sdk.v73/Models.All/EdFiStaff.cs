// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStaff
    /// </summary>
    public partial class EdFiStaff : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaff" /> class.
        /// </summary>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff.</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</param>
        /// <param name="lastSurname">The name borne in common by members of a family.</param>
        /// <param name="id">id</param>
        /// <param name="personReference">personReference</param>
        /// <param name="addresses">An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.</param>
        /// <param name="ancestryEthnicOrigins">An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born.</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen.</param>
        /// <param name="credentials">An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services.</param>
        /// <param name="electronicMails">An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</param>
        /// <param name="genderIdentity">The gender the staff member identifies themselves as.</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;</param>
        /// <param name="identificationCodes">An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.</param>
        /// <param name="identificationDocuments">An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship.</param>
        /// <param name="internationalAddresses">An unordered collection of staffInternationalAddresses. The set of elements that describes an international address.</param>
        /// <param name="languages">An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface.</param>
        /// <param name="maidenName">The individual&#39;s maiden name.</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony.</param>
        /// <param name="otherNames">An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual.</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name</param>
        /// <param name="races">An unordered collection of staffRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.</param>
        /// <param name="recognitions">An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.</param>
        /// <param name="sexDescriptor">The birth sex of the staff member.</param>
        /// <param name="telephones">An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person.</param>
        /// <param name="tribalAffiliations">An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated.</param>
        /// <param name="visas">An unordered collection of staffVisas. An indicator of a non-US citizen&#39;s Visa type.</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year.</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Staff entity.</param>
        [JsonConstructor]
        public EdFiStaff(string staffUniqueId, string firstName, string lastSurname, Option<string?> id = default, Option<EdFiPersonReference?> personReference = default, Option<List<EdFiStaffAddress>?> addresses = default, Option<List<EdFiStaffAncestryEthnicOrigin>?> ancestryEthnicOrigins = default, Option<DateOnly?> birthDate = default, Option<string?> citizenshipStatusDescriptor = default, Option<List<EdFiStaffCredential>?> credentials = default, Option<List<EdFiStaffElectronicMail>?> electronicMails = default, Option<string?> genderIdentity = default, Option<string?> generationCodeSuffix = default, Option<string?> highestCompletedLevelOfEducationDescriptor = default, Option<bool?> highlyQualifiedTeacher = default, Option<bool?> hispanicLatinoEthnicity = default, Option<List<EdFiStaffIdentificationCode>?> identificationCodes = default, Option<List<EdFiStaffIdentificationDocument>?> identificationDocuments = default, Option<List<EdFiStaffInternationalAddress>?> internationalAddresses = default, Option<List<EdFiStaffLanguage>?> languages = default, Option<string?> loginId = default, Option<string?> maidenName = default, Option<string?> middleName = default, Option<List<EdFiStaffOtherName>?> otherNames = default, Option<List<EdFiStaffPersonalIdentificationDocument>?> personalIdentificationDocuments = default, Option<string?> personalTitlePrefix = default, Option<string?> preferredFirstName = default, Option<string?> preferredLastSurname = default, Option<List<EdFiStaffRace>?> races = default, Option<List<EdFiStaffRecognition>?> recognitions = default, Option<string?> sexDescriptor = default, Option<List<EdFiStaffTelephone>?> telephones = default, Option<List<EdFiStaffTribalAffiliation>?> tribalAffiliations = default, Option<List<EdFiStaffVisa>?> visas = default, Option<double?> yearsOfPriorProfessionalExperience = default, Option<double?> yearsOfPriorTeachingExperience = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            StaffUniqueId = staffUniqueId;
            FirstName = firstName;
            LastSurname = lastSurname;
            IdOption = id;
            PersonReferenceOption = personReference;
            AddressesOption = addresses;
            AncestryEthnicOriginsOption = ancestryEthnicOrigins;
            BirthDateOption = birthDate;
            CitizenshipStatusDescriptorOption = citizenshipStatusDescriptor;
            CredentialsOption = credentials;
            ElectronicMailsOption = electronicMails;
            GenderIdentityOption = genderIdentity;
            GenerationCodeSuffixOption = generationCodeSuffix;
            HighestCompletedLevelOfEducationDescriptorOption = highestCompletedLevelOfEducationDescriptor;
            HighlyQualifiedTeacherOption = highlyQualifiedTeacher;
            HispanicLatinoEthnicityOption = hispanicLatinoEthnicity;
            IdentificationCodesOption = identificationCodes;
            IdentificationDocumentsOption = identificationDocuments;
            InternationalAddressesOption = internationalAddresses;
            LanguagesOption = languages;
            LoginIdOption = loginId;
            MaidenNameOption = maidenName;
            MiddleNameOption = middleName;
            OtherNamesOption = otherNames;
            PersonalIdentificationDocumentsOption = personalIdentificationDocuments;
            PersonalTitlePrefixOption = personalTitlePrefix;
            PreferredFirstNameOption = preferredFirstName;
            PreferredLastSurnameOption = preferredLastSurname;
            RacesOption = races;
            RecognitionsOption = recognitions;
            SexDescriptorOption = sexDescriptor;
            TelephonesOption = telephones;
            TribalAffiliationsOption = tribalAffiliations;
            VisasOption = visas;
            YearsOfPriorProfessionalExperienceOption = yearsOfPriorProfessionalExperience;
            YearsOfPriorTeachingExperienceOption = yearsOfPriorTeachingExperience;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a staff.</value>
        [JsonPropertyName("staffUniqueId")]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [JsonPropertyName("lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiPersonReference?> PersonReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [JsonPropertyName("personReference")]
        public EdFiPersonReference? PersonReference { get { return this.PersonReferenceOption; } set { this.PersonReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Addresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffAddress>?> AddressesOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.
        /// </summary>
        /// <value>An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.</value>
        [JsonPropertyName("addresses")]
        public List<EdFiStaffAddress>? Addresses { get { return this.AddressesOption; } set { this.AddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of AncestryEthnicOrigins
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffAncestryEthnicOrigin>?> AncestryEthnicOriginsOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.
        /// </summary>
        /// <value>An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.</value>
        [JsonPropertyName("ancestryEthnicOrigins")]
        public List<EdFiStaffAncestryEthnicOrigin>? AncestryEthnicOrigins { get { return this.AncestryEthnicOriginsOption; } set { this.AncestryEthnicOriginsOption = new(value); } }

        /// <summary>
        /// Used to track the state of BirthDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> BirthDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [JsonPropertyName("birthDate")]
        public DateOnly? BirthDate { get { return this.BirthDateOption; } set { this.BirthDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CitizenshipStatusDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CitizenshipStatusDescriptorOption { get; private set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        /// <value>An indicator of whether or not the person is a U.S. citizen.</value>
        [JsonPropertyName("citizenshipStatusDescriptor")]
        public string? CitizenshipStatusDescriptor { get { return this.CitizenshipStatusDescriptorOption; } set { this.CitizenshipStatusDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Credentials
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffCredential>?> CredentialsOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services.
        /// </summary>
        /// <value>An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services.</value>
        [JsonPropertyName("credentials")]
        public List<EdFiStaffCredential>? Credentials { get { return this.CredentialsOption; } set { this.CredentialsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ElectronicMails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffElectronicMail>?> ElectronicMailsOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [JsonPropertyName("electronicMails")]
        public List<EdFiStaffElectronicMail>? ElectronicMails { get { return this.ElectronicMailsOption; } set { this.ElectronicMailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GenderIdentity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GenderIdentityOption { get; private set; }

        /// <summary>
        /// The gender the staff member identifies themselves as.
        /// </summary>
        /// <value>The gender the staff member identifies themselves as.</value>
        [JsonPropertyName("genderIdentity")]
        public string? GenderIdentity { get { return this.GenderIdentityOption; } set { this.GenderIdentityOption = new(value); } }

        /// <summary>
        /// Used to track the state of GenerationCodeSuffix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GenerationCodeSuffixOption { get; private set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [JsonPropertyName("generationCodeSuffix")]
        public string? GenerationCodeSuffix { get { return this.GenerationCodeSuffixOption; } set { this.GenerationCodeSuffixOption = new(value); } }

        /// <summary>
        /// Used to track the state of HighestCompletedLevelOfEducationDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HighestCompletedLevelOfEducationDescriptorOption { get; private set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        /// <value>The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).</value>
        [JsonPropertyName("highestCompletedLevelOfEducationDescriptor")]
        public string? HighestCompletedLevelOfEducationDescriptor { get { return this.HighestCompletedLevelOfEducationDescriptorOption; } set { this.HighestCompletedLevelOfEducationDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of HighlyQualifiedTeacher
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HighlyQualifiedTeacherOption { get; private set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        /// <value>An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.</value>
        [JsonPropertyName("highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get { return this.HighlyQualifiedTeacherOption; } set { this.HighlyQualifiedTeacherOption = new(value); } }

        /// <summary>
        /// Used to track the state of HispanicLatinoEthnicity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HispanicLatinoEthnicityOption { get; private set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;</value>
        [JsonPropertyName("hispanicLatinoEthnicity")]
        public bool? HispanicLatinoEthnicity { get { return this.HispanicLatinoEthnicityOption; } set { this.HispanicLatinoEthnicityOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdentificationCodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffIdentificationCode>?> IdentificationCodesOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        /// </summary>
        /// <value>An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.</value>
        [JsonPropertyName("identificationCodes")]
        public List<EdFiStaffIdentificationCode>? IdentificationCodes { get { return this.IdentificationCodesOption; } set { this.IdentificationCodesOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdentificationDocuments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffIdentificationDocument>?> IdentificationDocumentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship.
        /// </summary>
        /// <value>An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship.</value>
        [JsonPropertyName("identificationDocuments")]
        public List<EdFiStaffIdentificationDocument>? IdentificationDocuments { get { return this.IdentificationDocumentsOption; } set { this.IdentificationDocumentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of InternationalAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffInternationalAddress>?> InternationalAddressesOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffInternationalAddresses. The set of elements that describes an international address.
        /// </summary>
        /// <value>An unordered collection of staffInternationalAddresses. The set of elements that describes an international address.</value>
        [JsonPropertyName("internationalAddresses")]
        public List<EdFiStaffInternationalAddress>? InternationalAddresses { get { return this.InternationalAddressesOption; } set { this.InternationalAddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Languages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffLanguage>?> LanguagesOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.
        /// </summary>
        /// <value>An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.</value>
        [JsonPropertyName("languages")]
        public List<EdFiStaffLanguage>? Languages { get { return this.LanguagesOption; } set { this.LanguagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of LoginId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LoginIdOption { get; private set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        /// <value>The login ID for the user; used for security access control interface.</value>
        [JsonPropertyName("loginId")]
        public string? LoginId { get { return this.LoginIdOption; } set { this.LoginIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaidenName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MaidenNameOption { get; private set; }

        /// <summary>
        /// The individual&#39;s maiden name.
        /// </summary>
        /// <value>The individual&#39;s maiden name.</value>
        [JsonPropertyName("maidenName")]
        public string? MaidenName { get { return this.MaidenNameOption; } set { this.MaidenNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of MiddleName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MiddleNameOption { get; private set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [JsonPropertyName("middleName")]
        public string? MiddleName { get { return this.MiddleNameOption; } set { this.MiddleNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of OtherNames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffOtherName>?> OtherNamesOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
        /// </summary>
        /// <value>An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</value>
        [JsonPropertyName("otherNames")]
        public List<EdFiStaffOtherName>? OtherNames { get { return this.OtherNamesOption; } set { this.OtherNamesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonalIdentificationDocuments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffPersonalIdentificationDocument>?> PersonalIdentificationDocumentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [JsonPropertyName("personalIdentificationDocuments")]
        public List<EdFiStaffPersonalIdentificationDocument>? PersonalIdentificationDocuments { get { return this.PersonalIdentificationDocumentsOption; } set { this.PersonalIdentificationDocumentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonalTitlePrefix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PersonalTitlePrefixOption { get; private set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the individual.</value>
        [JsonPropertyName("personalTitlePrefix")]
        public string? PersonalTitlePrefix { get { return this.PersonalTitlePrefixOption; } set { this.PersonalTitlePrefixOption = new(value); } }

        /// <summary>
        /// Used to track the state of PreferredFirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreferredFirstNameOption { get; private set; }

        /// <summary>
        /// The first name the individual prefers, if different from their legal first name
        /// </summary>
        /// <value>The first name the individual prefers, if different from their legal first name</value>
        [JsonPropertyName("preferredFirstName")]
        public string? PreferredFirstName { get { return this.PreferredFirstNameOption; } set { this.PreferredFirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of PreferredLastSurname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreferredLastSurnameOption { get; private set; }

        /// <summary>
        /// The last name the individual prefers, if different from their legal last name
        /// </summary>
        /// <value>The last name the individual prefers, if different from their legal last name</value>
        [JsonPropertyName("preferredLastSurname")]
        public string? PreferredLastSurname { get { return this.PreferredLastSurnameOption; } set { this.PreferredLastSurnameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Races
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffRace>?> RacesOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        /// <value>An unordered collection of staffRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.</value>
        [JsonPropertyName("races")]
        public List<EdFiStaffRace>? Races { get { return this.RacesOption; } set { this.RacesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Recognitions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffRecognition>?> RecognitionsOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.
        /// </summary>
        /// <value>An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.</value>
        [JsonPropertyName("recognitions")]
        public List<EdFiStaffRecognition>? Recognitions { get { return this.RecognitionsOption; } set { this.RecognitionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SexDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SexDescriptorOption { get; private set; }

        /// <summary>
        /// The birth sex of the staff member.
        /// </summary>
        /// <value>The birth sex of the staff member.</value>
        [JsonPropertyName("sexDescriptor")]
        public string? SexDescriptor { get { return this.SexDescriptorOption; } set { this.SexDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Telephones
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffTelephone>?> TelephonesOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [JsonPropertyName("telephones")]
        public List<EdFiStaffTelephone>? Telephones { get { return this.TelephonesOption; } set { this.TelephonesOption = new(value); } }

        /// <summary>
        /// Used to track the state of TribalAffiliations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffTribalAffiliation>?> TribalAffiliationsOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated.
        /// </summary>
        /// <value>An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated.</value>
        [JsonPropertyName("tribalAffiliations")]
        public List<EdFiStaffTribalAffiliation>? TribalAffiliations { get { return this.TribalAffiliationsOption; } set { this.TribalAffiliationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Visas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffVisa>?> VisasOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffVisas. An indicator of a non-US citizen&#39;s Visa type.
        /// </summary>
        /// <value>An unordered collection of staffVisas. An indicator of a non-US citizen&#39;s Visa type.</value>
        [JsonPropertyName("visas")]
        public List<EdFiStaffVisa>? Visas { get { return this.VisasOption; } set { this.VisasOption = new(value); } }

        /// <summary>
        /// Used to track the state of YearsOfPriorProfessionalExperience
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> YearsOfPriorProfessionalExperienceOption { get; private set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year.
        /// </summary>
        /// <value>The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year.</value>
        [JsonPropertyName("yearsOfPriorProfessionalExperience")]
        public double? YearsOfPriorProfessionalExperience { get { return this.YearsOfPriorProfessionalExperienceOption; } set { this.YearsOfPriorProfessionalExperienceOption = new(value); } }

        /// <summary>
        /// Used to track the state of YearsOfPriorTeachingExperience
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> YearsOfPriorTeachingExperienceOption { get; private set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year.
        /// </summary>
        /// <value>The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year.</value>
        [JsonPropertyName("yearsOfPriorTeachingExperience")]
        public double? YearsOfPriorTeachingExperience { get { return this.YearsOfPriorTeachingExperienceOption; } set { this.YearsOfPriorTeachingExperienceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Staff entity.
        /// </summary>
        /// <value>Extensions to the Staff entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaff {\n");
            sb.Append("  StaffUniqueId: ").Append(StaffUniqueId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  AncestryEthnicOrigins: ").Append(AncestryEthnicOrigins).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  CitizenshipStatusDescriptor: ").Append(CitizenshipStatusDescriptor).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            sb.Append("  GenderIdentity: ").Append(GenderIdentity).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  HighestCompletedLevelOfEducationDescriptor: ").Append(HighestCompletedLevelOfEducationDescriptor).Append("\n");
            sb.Append("  HighlyQualifiedTeacher: ").Append(HighlyQualifiedTeacher).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  IdentificationDocuments: ").Append(IdentificationDocuments).Append("\n");
            sb.Append("  InternationalAddresses: ").Append(InternationalAddresses).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  OtherNames: ").Append(OtherNames).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  PreferredFirstName: ").Append(PreferredFirstName).Append("\n");
            sb.Append("  PreferredLastSurname: ").Append(PreferredLastSurname).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  Recognitions: ").Append(Recognitions).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  TribalAffiliations: ").Append(TribalAffiliations).Append("\n");
            sb.Append("  Visas: ").Append(Visas).Append("\n");
            sb.Append("  YearsOfPriorProfessionalExperience: ").Append(YearsOfPriorProfessionalExperience).Append("\n");
            sb.Append("  YearsOfPriorTeachingExperience: ").Append(YearsOfPriorTeachingExperience).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StaffUniqueId (string) maxLength
            if (this.StaffUniqueId != null && this.StaffUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StaffUniqueId, length must be less than 32.", new [] { "StaffUniqueId" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // LastSurname (string) maxLength
            if (this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // CitizenshipStatusDescriptor (string) maxLength
            if (this.CitizenshipStatusDescriptor != null && this.CitizenshipStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CitizenshipStatusDescriptor, length must be less than 306.", new [] { "CitizenshipStatusDescriptor" });
            }

            // GenderIdentity (string) maxLength
            if (this.GenderIdentity != null && this.GenderIdentity.Length > 60)
            {
                yield return new ValidationResult("Invalid value for GenderIdentity, length must be less than 60.", new [] { "GenderIdentity" });
            }

            // GenerationCodeSuffix (string) maxLength
            if (this.GenerationCodeSuffix != null && this.GenerationCodeSuffix.Length > 10)
            {
                yield return new ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new [] { "GenerationCodeSuffix" });
            }

            // HighestCompletedLevelOfEducationDescriptor (string) maxLength
            if (this.HighestCompletedLevelOfEducationDescriptor != null && this.HighestCompletedLevelOfEducationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for HighestCompletedLevelOfEducationDescriptor, length must be less than 306.", new [] { "HighestCompletedLevelOfEducationDescriptor" });
            }

            // LoginId (string) maxLength
            if (this.LoginId != null && this.LoginId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LoginId, length must be less than 60.", new [] { "LoginId" });
            }

            // MaidenName (string) maxLength
            if (this.MaidenName != null && this.MaidenName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MaidenName, length must be less than 75.", new [] { "MaidenName" });
            }

            // MiddleName (string) maxLength
            if (this.MiddleName != null && this.MiddleName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MiddleName, length must be less than 75.", new [] { "MiddleName" });
            }

            // PersonalTitlePrefix (string) maxLength
            if (this.PersonalTitlePrefix != null && this.PersonalTitlePrefix.Length > 30)
            {
                yield return new ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new [] { "PersonalTitlePrefix" });
            }

            // PreferredFirstName (string) maxLength
            if (this.PreferredFirstName != null && this.PreferredFirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for PreferredFirstName, length must be less than 75.", new [] { "PreferredFirstName" });
            }

            // PreferredLastSurname (string) maxLength
            if (this.PreferredLastSurname != null && this.PreferredLastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for PreferredLastSurname, length must be less than 75.", new [] { "PreferredLastSurname" });
            }

            // SexDescriptor (string) maxLength
            if (this.SexDescriptor != null && this.SexDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SexDescriptor, length must be less than 306.", new [] { "SexDescriptor" });
            }

            // YearsOfPriorProfessionalExperience (double) maximum
            if (this.YearsOfPriorProfessionalExperienceOption.IsSet && this.YearsOfPriorProfessionalExperienceOption.Value > (double)999.99)
            {
                yield return new ValidationResult("Invalid value for YearsOfPriorProfessionalExperience, must be a value less than or equal to 999.99.", new [] { "YearsOfPriorProfessionalExperience" });
            }

            // YearsOfPriorProfessionalExperience (double) minimum
            if (this.YearsOfPriorProfessionalExperienceOption.IsSet && this.YearsOfPriorProfessionalExperienceOption.Value < (double)-999.99)
            {
                yield return new ValidationResult("Invalid value for YearsOfPriorProfessionalExperience, must be a value greater than or equal to -999.99.", new [] { "YearsOfPriorProfessionalExperience" });
            }

            // YearsOfPriorTeachingExperience (double) maximum
            if (this.YearsOfPriorTeachingExperienceOption.IsSet && this.YearsOfPriorTeachingExperienceOption.Value > (double)999.99)
            {
                yield return new ValidationResult("Invalid value for YearsOfPriorTeachingExperience, must be a value less than or equal to 999.99.", new [] { "YearsOfPriorTeachingExperience" });
            }

            // YearsOfPriorTeachingExperience (double) minimum
            if (this.YearsOfPriorTeachingExperienceOption.IsSet && this.YearsOfPriorTeachingExperienceOption.Value < (double)-999.99)
            {
                yield return new ValidationResult("Invalid value for YearsOfPriorTeachingExperience, must be a value greater than or equal to -999.99.", new [] { "YearsOfPriorTeachingExperience" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStaff" />
    /// </summary>
    public class EdFiStaffJsonConverter : JsonConverter<EdFiStaff>
    {
        /// <summary>
        /// The format to use to serialize BirthDate
        /// </summary>
        public static string BirthDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStaff" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStaff Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> staffUniqueId = default;
            Option<string?> firstName = default;
            Option<string?> lastSurname = default;
            Option<string?> id = default;
            Option<EdFiPersonReference?> personReference = default;
            Option<List<EdFiStaffAddress>?> addresses = default;
            Option<List<EdFiStaffAncestryEthnicOrigin>?> ancestryEthnicOrigins = default;
            Option<DateOnly?> birthDate = default;
            Option<string?> citizenshipStatusDescriptor = default;
            Option<List<EdFiStaffCredential>?> credentials = default;
            Option<List<EdFiStaffElectronicMail>?> electronicMails = default;
            Option<string?> genderIdentity = default;
            Option<string?> generationCodeSuffix = default;
            Option<string?> highestCompletedLevelOfEducationDescriptor = default;
            Option<bool?> highlyQualifiedTeacher = default;
            Option<bool?> hispanicLatinoEthnicity = default;
            Option<List<EdFiStaffIdentificationCode>?> identificationCodes = default;
            Option<List<EdFiStaffIdentificationDocument>?> identificationDocuments = default;
            Option<List<EdFiStaffInternationalAddress>?> internationalAddresses = default;
            Option<List<EdFiStaffLanguage>?> languages = default;
            Option<string?> loginId = default;
            Option<string?> maidenName = default;
            Option<string?> middleName = default;
            Option<List<EdFiStaffOtherName>?> otherNames = default;
            Option<List<EdFiStaffPersonalIdentificationDocument>?> personalIdentificationDocuments = default;
            Option<string?> personalTitlePrefix = default;
            Option<string?> preferredFirstName = default;
            Option<string?> preferredLastSurname = default;
            Option<List<EdFiStaffRace>?> races = default;
            Option<List<EdFiStaffRecognition>?> recognitions = default;
            Option<string?> sexDescriptor = default;
            Option<List<EdFiStaffTelephone>?> telephones = default;
            Option<List<EdFiStaffTribalAffiliation>?> tribalAffiliations = default;
            Option<List<EdFiStaffVisa>?> visas = default;
            Option<double?> yearsOfPriorProfessionalExperience = default;
            Option<double?> yearsOfPriorTeachingExperience = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "staffUniqueId":
                            staffUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastSurname":
                            lastSurname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "personReference":
                            personReference = new Option<EdFiPersonReference?>(JsonSerializer.Deserialize<EdFiPersonReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "addresses":
                            addresses = new Option<List<EdFiStaffAddress>?>(JsonSerializer.Deserialize<List<EdFiStaffAddress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ancestryEthnicOrigins":
                            ancestryEthnicOrigins = new Option<List<EdFiStaffAncestryEthnicOrigin>?>(JsonSerializer.Deserialize<List<EdFiStaffAncestryEthnicOrigin>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "birthDate":
                            birthDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "citizenshipStatusDescriptor":
                            citizenshipStatusDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "credentials":
                            credentials = new Option<List<EdFiStaffCredential>?>(JsonSerializer.Deserialize<List<EdFiStaffCredential>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "electronicMails":
                            electronicMails = new Option<List<EdFiStaffElectronicMail>?>(JsonSerializer.Deserialize<List<EdFiStaffElectronicMail>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "genderIdentity":
                            genderIdentity = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "generationCodeSuffix":
                            generationCodeSuffix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "highestCompletedLevelOfEducationDescriptor":
                            highestCompletedLevelOfEducationDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "highlyQualifiedTeacher":
                            highlyQualifiedTeacher = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "hispanicLatinoEthnicity":
                            hispanicLatinoEthnicity = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "identificationCodes":
                            identificationCodes = new Option<List<EdFiStaffIdentificationCode>?>(JsonSerializer.Deserialize<List<EdFiStaffIdentificationCode>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "identificationDocuments":
                            identificationDocuments = new Option<List<EdFiStaffIdentificationDocument>?>(JsonSerializer.Deserialize<List<EdFiStaffIdentificationDocument>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "internationalAddresses":
                            internationalAddresses = new Option<List<EdFiStaffInternationalAddress>?>(JsonSerializer.Deserialize<List<EdFiStaffInternationalAddress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "languages":
                            languages = new Option<List<EdFiStaffLanguage>?>(JsonSerializer.Deserialize<List<EdFiStaffLanguage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "loginId":
                            loginId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "maidenName":
                            maidenName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "middleName":
                            middleName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "otherNames":
                            otherNames = new Option<List<EdFiStaffOtherName>?>(JsonSerializer.Deserialize<List<EdFiStaffOtherName>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "personalIdentificationDocuments":
                            personalIdentificationDocuments = new Option<List<EdFiStaffPersonalIdentificationDocument>?>(JsonSerializer.Deserialize<List<EdFiStaffPersonalIdentificationDocument>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "personalTitlePrefix":
                            personalTitlePrefix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "preferredFirstName":
                            preferredFirstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "preferredLastSurname":
                            preferredLastSurname = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "races":
                            races = new Option<List<EdFiStaffRace>?>(JsonSerializer.Deserialize<List<EdFiStaffRace>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "recognitions":
                            recognitions = new Option<List<EdFiStaffRecognition>?>(JsonSerializer.Deserialize<List<EdFiStaffRecognition>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sexDescriptor":
                            sexDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "telephones":
                            telephones = new Option<List<EdFiStaffTelephone>?>(JsonSerializer.Deserialize<List<EdFiStaffTelephone>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tribalAffiliations":
                            tribalAffiliations = new Option<List<EdFiStaffTribalAffiliation>?>(JsonSerializer.Deserialize<List<EdFiStaffTribalAffiliation>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "visas":
                            visas = new Option<List<EdFiStaffVisa>?>(JsonSerializer.Deserialize<List<EdFiStaffVisa>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "yearsOfPriorProfessionalExperience":
                            yearsOfPriorProfessionalExperience = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "yearsOfPriorTeachingExperience":
                            yearsOfPriorTeachingExperience = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!staffUniqueId.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaff.", nameof(staffUniqueId));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaff.", nameof(firstName));

            if (!lastSurname.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaff.", nameof(lastSurname));

            if (staffUniqueId.IsSet && staffUniqueId.Value == null)
                throw new ArgumentNullException(nameof(staffUniqueId), "Property is not nullable for class EdFiStaff.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class EdFiStaff.");

            if (lastSurname.IsSet && lastSurname.Value == null)
                throw new ArgumentNullException(nameof(lastSurname), "Property is not nullable for class EdFiStaff.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStaff.");

            if (personReference.IsSet && personReference.Value == null)
                throw new ArgumentNullException(nameof(personReference), "Property is not nullable for class EdFiStaff.");

            if (addresses.IsSet && addresses.Value == null)
                throw new ArgumentNullException(nameof(addresses), "Property is not nullable for class EdFiStaff.");

            if (ancestryEthnicOrigins.IsSet && ancestryEthnicOrigins.Value == null)
                throw new ArgumentNullException(nameof(ancestryEthnicOrigins), "Property is not nullable for class EdFiStaff.");

            if (credentials.IsSet && credentials.Value == null)
                throw new ArgumentNullException(nameof(credentials), "Property is not nullable for class EdFiStaff.");

            if (electronicMails.IsSet && electronicMails.Value == null)
                throw new ArgumentNullException(nameof(electronicMails), "Property is not nullable for class EdFiStaff.");

            if (identificationCodes.IsSet && identificationCodes.Value == null)
                throw new ArgumentNullException(nameof(identificationCodes), "Property is not nullable for class EdFiStaff.");

            if (identificationDocuments.IsSet && identificationDocuments.Value == null)
                throw new ArgumentNullException(nameof(identificationDocuments), "Property is not nullable for class EdFiStaff.");

            if (internationalAddresses.IsSet && internationalAddresses.Value == null)
                throw new ArgumentNullException(nameof(internationalAddresses), "Property is not nullable for class EdFiStaff.");

            if (languages.IsSet && languages.Value == null)
                throw new ArgumentNullException(nameof(languages), "Property is not nullable for class EdFiStaff.");

            if (otherNames.IsSet && otherNames.Value == null)
                throw new ArgumentNullException(nameof(otherNames), "Property is not nullable for class EdFiStaff.");

            if (personalIdentificationDocuments.IsSet && personalIdentificationDocuments.Value == null)
                throw new ArgumentNullException(nameof(personalIdentificationDocuments), "Property is not nullable for class EdFiStaff.");

            if (races.IsSet && races.Value == null)
                throw new ArgumentNullException(nameof(races), "Property is not nullable for class EdFiStaff.");

            if (recognitions.IsSet && recognitions.Value == null)
                throw new ArgumentNullException(nameof(recognitions), "Property is not nullable for class EdFiStaff.");

            if (telephones.IsSet && telephones.Value == null)
                throw new ArgumentNullException(nameof(telephones), "Property is not nullable for class EdFiStaff.");

            if (tribalAffiliations.IsSet && tribalAffiliations.Value == null)
                throw new ArgumentNullException(nameof(tribalAffiliations), "Property is not nullable for class EdFiStaff.");

            if (visas.IsSet && visas.Value == null)
                throw new ArgumentNullException(nameof(visas), "Property is not nullable for class EdFiStaff.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStaff.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStaff.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStaff.");

            return new EdFiStaff(staffUniqueId.Value!, firstName.Value!, lastSurname.Value!, id, personReference, addresses, ancestryEthnicOrigins, birthDate, citizenshipStatusDescriptor, credentials, electronicMails, genderIdentity, generationCodeSuffix, highestCompletedLevelOfEducationDescriptor, highlyQualifiedTeacher, hispanicLatinoEthnicity, identificationCodes, identificationDocuments, internationalAddresses, languages, loginId, maidenName, middleName, otherNames, personalIdentificationDocuments, personalTitlePrefix, preferredFirstName, preferredLastSurname, races, recognitions, sexDescriptor, telephones, tribalAffiliations, visas, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStaff" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaff"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStaff edFiStaff, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStaff, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStaff" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaff"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStaff edFiStaff, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStaff.StaffUniqueId == null)
                throw new ArgumentNullException(nameof(edFiStaff.StaffUniqueId), "Property is required for class EdFiStaff.");

            if (edFiStaff.FirstName == null)
                throw new ArgumentNullException(nameof(edFiStaff.FirstName), "Property is required for class EdFiStaff.");

            if (edFiStaff.LastSurname == null)
                throw new ArgumentNullException(nameof(edFiStaff.LastSurname), "Property is required for class EdFiStaff.");

            if (edFiStaff.IdOption.IsSet && edFiStaff.Id == null)
                throw new ArgumentNullException(nameof(edFiStaff.Id), "Property is required for class EdFiStaff.");

            if (edFiStaff.PersonReferenceOption.IsSet && edFiStaff.PersonReference == null)
                throw new ArgumentNullException(nameof(edFiStaff.PersonReference), "Property is required for class EdFiStaff.");

            if (edFiStaff.AddressesOption.IsSet && edFiStaff.Addresses == null)
                throw new ArgumentNullException(nameof(edFiStaff.Addresses), "Property is required for class EdFiStaff.");

            if (edFiStaff.AncestryEthnicOriginsOption.IsSet && edFiStaff.AncestryEthnicOrigins == null)
                throw new ArgumentNullException(nameof(edFiStaff.AncestryEthnicOrigins), "Property is required for class EdFiStaff.");

            if (edFiStaff.CredentialsOption.IsSet && edFiStaff.Credentials == null)
                throw new ArgumentNullException(nameof(edFiStaff.Credentials), "Property is required for class EdFiStaff.");

            if (edFiStaff.ElectronicMailsOption.IsSet && edFiStaff.ElectronicMails == null)
                throw new ArgumentNullException(nameof(edFiStaff.ElectronicMails), "Property is required for class EdFiStaff.");

            if (edFiStaff.IdentificationCodesOption.IsSet && edFiStaff.IdentificationCodes == null)
                throw new ArgumentNullException(nameof(edFiStaff.IdentificationCodes), "Property is required for class EdFiStaff.");

            if (edFiStaff.IdentificationDocumentsOption.IsSet && edFiStaff.IdentificationDocuments == null)
                throw new ArgumentNullException(nameof(edFiStaff.IdentificationDocuments), "Property is required for class EdFiStaff.");

            if (edFiStaff.InternationalAddressesOption.IsSet && edFiStaff.InternationalAddresses == null)
                throw new ArgumentNullException(nameof(edFiStaff.InternationalAddresses), "Property is required for class EdFiStaff.");

            if (edFiStaff.LanguagesOption.IsSet && edFiStaff.Languages == null)
                throw new ArgumentNullException(nameof(edFiStaff.Languages), "Property is required for class EdFiStaff.");

            if (edFiStaff.OtherNamesOption.IsSet && edFiStaff.OtherNames == null)
                throw new ArgumentNullException(nameof(edFiStaff.OtherNames), "Property is required for class EdFiStaff.");

            if (edFiStaff.PersonalIdentificationDocumentsOption.IsSet && edFiStaff.PersonalIdentificationDocuments == null)
                throw new ArgumentNullException(nameof(edFiStaff.PersonalIdentificationDocuments), "Property is required for class EdFiStaff.");

            if (edFiStaff.RacesOption.IsSet && edFiStaff.Races == null)
                throw new ArgumentNullException(nameof(edFiStaff.Races), "Property is required for class EdFiStaff.");

            if (edFiStaff.RecognitionsOption.IsSet && edFiStaff.Recognitions == null)
                throw new ArgumentNullException(nameof(edFiStaff.Recognitions), "Property is required for class EdFiStaff.");

            if (edFiStaff.TelephonesOption.IsSet && edFiStaff.Telephones == null)
                throw new ArgumentNullException(nameof(edFiStaff.Telephones), "Property is required for class EdFiStaff.");

            if (edFiStaff.TribalAffiliationsOption.IsSet && edFiStaff.TribalAffiliations == null)
                throw new ArgumentNullException(nameof(edFiStaff.TribalAffiliations), "Property is required for class EdFiStaff.");

            if (edFiStaff.VisasOption.IsSet && edFiStaff.Visas == null)
                throw new ArgumentNullException(nameof(edFiStaff.Visas), "Property is required for class EdFiStaff.");

            if (edFiStaff.EtagOption.IsSet && edFiStaff.Etag == null)
                throw new ArgumentNullException(nameof(edFiStaff.Etag), "Property is required for class EdFiStaff.");

            if (edFiStaff.ExtOption.IsSet && edFiStaff.Ext == null)
                throw new ArgumentNullException(nameof(edFiStaff.Ext), "Property is required for class EdFiStaff.");

            writer.WriteString("staffUniqueId", edFiStaff.StaffUniqueId);

            writer.WriteString("firstName", edFiStaff.FirstName);

            writer.WriteString("lastSurname", edFiStaff.LastSurname);

            if (edFiStaff.IdOption.IsSet)
                writer.WriteString("id", edFiStaff.Id);

            if (edFiStaff.PersonReferenceOption.IsSet)
            {
                writer.WritePropertyName("personReference");
                JsonSerializer.Serialize(writer, edFiStaff.PersonReference, jsonSerializerOptions);
            }
            if (edFiStaff.AddressesOption.IsSet)
            {
                writer.WritePropertyName("addresses");
                JsonSerializer.Serialize(writer, edFiStaff.Addresses, jsonSerializerOptions);
            }
            if (edFiStaff.AncestryEthnicOriginsOption.IsSet)
            {
                writer.WritePropertyName("ancestryEthnicOrigins");
                JsonSerializer.Serialize(writer, edFiStaff.AncestryEthnicOrigins, jsonSerializerOptions);
            }
            if (edFiStaff.BirthDateOption.IsSet)
                if (edFiStaff.BirthDateOption.Value != null)
                    writer.WriteString("birthDate", edFiStaff.BirthDateOption.Value!.Value.ToString(BirthDateFormat));
                else
                    writer.WriteNull("birthDate");

            if (edFiStaff.CitizenshipStatusDescriptorOption.IsSet)
                if (edFiStaff.CitizenshipStatusDescriptorOption.Value != null)
                    writer.WriteString("citizenshipStatusDescriptor", edFiStaff.CitizenshipStatusDescriptor);
                else
                    writer.WriteNull("citizenshipStatusDescriptor");

            if (edFiStaff.CredentialsOption.IsSet)
            {
                writer.WritePropertyName("credentials");
                JsonSerializer.Serialize(writer, edFiStaff.Credentials, jsonSerializerOptions);
            }
            if (edFiStaff.ElectronicMailsOption.IsSet)
            {
                writer.WritePropertyName("electronicMails");
                JsonSerializer.Serialize(writer, edFiStaff.ElectronicMails, jsonSerializerOptions);
            }
            if (edFiStaff.GenderIdentityOption.IsSet)
                if (edFiStaff.GenderIdentityOption.Value != null)
                    writer.WriteString("genderIdentity", edFiStaff.GenderIdentity);
                else
                    writer.WriteNull("genderIdentity");

            if (edFiStaff.GenerationCodeSuffixOption.IsSet)
                if (edFiStaff.GenerationCodeSuffixOption.Value != null)
                    writer.WriteString("generationCodeSuffix", edFiStaff.GenerationCodeSuffix);
                else
                    writer.WriteNull("generationCodeSuffix");

            if (edFiStaff.HighestCompletedLevelOfEducationDescriptorOption.IsSet)
                if (edFiStaff.HighestCompletedLevelOfEducationDescriptorOption.Value != null)
                    writer.WriteString("highestCompletedLevelOfEducationDescriptor", edFiStaff.HighestCompletedLevelOfEducationDescriptor);
                else
                    writer.WriteNull("highestCompletedLevelOfEducationDescriptor");

            if (edFiStaff.HighlyQualifiedTeacherOption.IsSet)
                if (edFiStaff.HighlyQualifiedTeacherOption.Value != null)
                    writer.WriteBoolean("highlyQualifiedTeacher", edFiStaff.HighlyQualifiedTeacherOption.Value!.Value);
                else
                    writer.WriteNull("highlyQualifiedTeacher");

            if (edFiStaff.HispanicLatinoEthnicityOption.IsSet)
                if (edFiStaff.HispanicLatinoEthnicityOption.Value != null)
                    writer.WriteBoolean("hispanicLatinoEthnicity", edFiStaff.HispanicLatinoEthnicityOption.Value!.Value);
                else
                    writer.WriteNull("hispanicLatinoEthnicity");

            if (edFiStaff.IdentificationCodesOption.IsSet)
            {
                writer.WritePropertyName("identificationCodes");
                JsonSerializer.Serialize(writer, edFiStaff.IdentificationCodes, jsonSerializerOptions);
            }
            if (edFiStaff.IdentificationDocumentsOption.IsSet)
            {
                writer.WritePropertyName("identificationDocuments");
                JsonSerializer.Serialize(writer, edFiStaff.IdentificationDocuments, jsonSerializerOptions);
            }
            if (edFiStaff.InternationalAddressesOption.IsSet)
            {
                writer.WritePropertyName("internationalAddresses");
                JsonSerializer.Serialize(writer, edFiStaff.InternationalAddresses, jsonSerializerOptions);
            }
            if (edFiStaff.LanguagesOption.IsSet)
            {
                writer.WritePropertyName("languages");
                JsonSerializer.Serialize(writer, edFiStaff.Languages, jsonSerializerOptions);
            }
            if (edFiStaff.LoginIdOption.IsSet)
                if (edFiStaff.LoginIdOption.Value != null)
                    writer.WriteString("loginId", edFiStaff.LoginId);
                else
                    writer.WriteNull("loginId");

            if (edFiStaff.MaidenNameOption.IsSet)
                if (edFiStaff.MaidenNameOption.Value != null)
                    writer.WriteString("maidenName", edFiStaff.MaidenName);
                else
                    writer.WriteNull("maidenName");

            if (edFiStaff.MiddleNameOption.IsSet)
                if (edFiStaff.MiddleNameOption.Value != null)
                    writer.WriteString("middleName", edFiStaff.MiddleName);
                else
                    writer.WriteNull("middleName");

            if (edFiStaff.OtherNamesOption.IsSet)
            {
                writer.WritePropertyName("otherNames");
                JsonSerializer.Serialize(writer, edFiStaff.OtherNames, jsonSerializerOptions);
            }
            if (edFiStaff.PersonalIdentificationDocumentsOption.IsSet)
            {
                writer.WritePropertyName("personalIdentificationDocuments");
                JsonSerializer.Serialize(writer, edFiStaff.PersonalIdentificationDocuments, jsonSerializerOptions);
            }
            if (edFiStaff.PersonalTitlePrefixOption.IsSet)
                if (edFiStaff.PersonalTitlePrefixOption.Value != null)
                    writer.WriteString("personalTitlePrefix", edFiStaff.PersonalTitlePrefix);
                else
                    writer.WriteNull("personalTitlePrefix");

            if (edFiStaff.PreferredFirstNameOption.IsSet)
                if (edFiStaff.PreferredFirstNameOption.Value != null)
                    writer.WriteString("preferredFirstName", edFiStaff.PreferredFirstName);
                else
                    writer.WriteNull("preferredFirstName");

            if (edFiStaff.PreferredLastSurnameOption.IsSet)
                if (edFiStaff.PreferredLastSurnameOption.Value != null)
                    writer.WriteString("preferredLastSurname", edFiStaff.PreferredLastSurname);
                else
                    writer.WriteNull("preferredLastSurname");

            if (edFiStaff.RacesOption.IsSet)
            {
                writer.WritePropertyName("races");
                JsonSerializer.Serialize(writer, edFiStaff.Races, jsonSerializerOptions);
            }
            if (edFiStaff.RecognitionsOption.IsSet)
            {
                writer.WritePropertyName("recognitions");
                JsonSerializer.Serialize(writer, edFiStaff.Recognitions, jsonSerializerOptions);
            }
            if (edFiStaff.SexDescriptorOption.IsSet)
                if (edFiStaff.SexDescriptorOption.Value != null)
                    writer.WriteString("sexDescriptor", edFiStaff.SexDescriptor);
                else
                    writer.WriteNull("sexDescriptor");

            if (edFiStaff.TelephonesOption.IsSet)
            {
                writer.WritePropertyName("telephones");
                JsonSerializer.Serialize(writer, edFiStaff.Telephones, jsonSerializerOptions);
            }
            if (edFiStaff.TribalAffiliationsOption.IsSet)
            {
                writer.WritePropertyName("tribalAffiliations");
                JsonSerializer.Serialize(writer, edFiStaff.TribalAffiliations, jsonSerializerOptions);
            }
            if (edFiStaff.VisasOption.IsSet)
            {
                writer.WritePropertyName("visas");
                JsonSerializer.Serialize(writer, edFiStaff.Visas, jsonSerializerOptions);
            }
            if (edFiStaff.YearsOfPriorProfessionalExperienceOption.IsSet)
                if (edFiStaff.YearsOfPriorProfessionalExperienceOption.Value != null)
                    writer.WriteNumber("yearsOfPriorProfessionalExperience", edFiStaff.YearsOfPriorProfessionalExperienceOption.Value!.Value);
                else
                    writer.WriteNull("yearsOfPriorProfessionalExperience");

            if (edFiStaff.YearsOfPriorTeachingExperienceOption.IsSet)
                if (edFiStaff.YearsOfPriorTeachingExperienceOption.Value != null)
                    writer.WriteNumber("yearsOfPriorTeachingExperience", edFiStaff.YearsOfPriorTeachingExperienceOption.Value!.Value);
                else
                    writer.WriteNull("yearsOfPriorTeachingExperience");

            if (edFiStaff.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStaff.Etag);

            if (edFiStaff.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStaff.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStaff.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStaff.Ext, jsonSerializerOptions);
            }
        }
    }
}
