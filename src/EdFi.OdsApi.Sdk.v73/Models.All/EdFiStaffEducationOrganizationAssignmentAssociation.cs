// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStaffEducationOrganizationAssignmentAssociation
    /// </summary>
    public partial class EdFiStaffEducationOrganizationAssignmentAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffEducationOrganizationAssignmentAssociation" /> class.
        /// </summary>
        /// <param name="beginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="staffReference">staffReference</param>
        /// <param name="id">id</param>
        /// <param name="credentialReference">credentialReference</param>
        /// <param name="employmentStaffEducationOrganizationEmploymentAssociationReference">employmentStaffEducationOrganizationEmploymentAssociationReference</param>
        /// <param name="endDate">Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.</param>
        /// <param name="orderOfAssignment">Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc.</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StaffEducationOrganizationAssignmentAssociation entity.</param>
        [JsonConstructor]
        public EdFiStaffEducationOrganizationAssignmentAssociation(DateOnly beginDate, string staffClassificationDescriptor, EdFiEducationOrganizationReference educationOrganizationReference, EdFiStaffReference staffReference, Option<string?> id = default, Option<EdFiCredentialReference?> credentialReference = default, Option<EdFiStaffEducationOrganizationEmploymentAssociationReference?> employmentStaffEducationOrganizationEmploymentAssociationReference = default, Option<DateOnly?> endDate = default, Option<double?> fullTimeEquivalency = default, Option<int?> orderOfAssignment = default, Option<string?> positionTitle = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            BeginDate = beginDate;
            StaffClassificationDescriptor = staffClassificationDescriptor;
            EducationOrganizationReference = educationOrganizationReference;
            StaffReference = staffReference;
            IdOption = id;
            CredentialReferenceOption = credentialReference;
            EmploymentStaffEducationOrganizationEmploymentAssociationReferenceOption = employmentStaffEducationOrganizationEmploymentAssociationReference;
            EndDateOption = endDate;
            FullTimeEquivalencyOption = fullTimeEquivalency;
            OrderOfAssignmentOption = orderOfAssignment;
            PositionTitleOption = positionTitle;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// The titles of employment, official status, or rank of education staff.
        /// </summary>
        /// <value>The titles of employment, official status, or rank of education staff.</value>
        [JsonPropertyName("staffClassificationDescriptor")]
        public string StaffClassificationDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [JsonPropertyName("staffReference")]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CredentialReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiCredentialReference?> CredentialReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets CredentialReference
        /// </summary>
        [JsonPropertyName("credentialReference")]
        public EdFiCredentialReference? CredentialReference { get { return this.CredentialReferenceOption; } set { this.CredentialReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmploymentStaffEducationOrganizationEmploymentAssociationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiStaffEducationOrganizationEmploymentAssociationReference?> EmploymentStaffEducationOrganizationEmploymentAssociationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmploymentStaffEducationOrganizationEmploymentAssociationReference
        /// </summary>
        [JsonPropertyName("employmentStaffEducationOrganizationEmploymentAssociationReference")]
        public EdFiStaffEducationOrganizationEmploymentAssociationReference? EmploymentStaffEducationOrganizationEmploymentAssociationReference { get { return this.EmploymentStaffEducationOrganizationEmploymentAssociationReferenceOption; } set { this.EmploymentStaffEducationOrganizationEmploymentAssociationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullTimeEquivalency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> FullTimeEquivalencyOption { get; private set; }

        /// <summary>
        /// The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.
        /// </summary>
        /// <value>The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.</value>
        [JsonPropertyName("fullTimeEquivalency")]
        public double? FullTimeEquivalency { get { return this.FullTimeEquivalencyOption; } set { this.FullTimeEquivalencyOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrderOfAssignment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOfAssignmentOption { get; private set; }

        /// <summary>
        /// Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc.
        /// </summary>
        /// <value>Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc.</value>
        [JsonPropertyName("orderOfAssignment")]
        public int? OrderOfAssignment { get { return this.OrderOfAssignmentOption; } set { this.OrderOfAssignmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of PositionTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PositionTitleOption { get; private set; }

        /// <summary>
        /// The descriptive name of an individual&#39;s position.
        /// </summary>
        /// <value>The descriptive name of an individual&#39;s position.</value>
        [JsonPropertyName("positionTitle")]
        public string? PositionTitle { get { return this.PositionTitleOption; } set { this.PositionTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StaffEducationOrganizationAssignmentAssociation entity.
        /// </summary>
        /// <value>Extensions to the StaffEducationOrganizationAssignmentAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffEducationOrganizationAssignmentAssociation {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  StaffClassificationDescriptor: ").Append(StaffClassificationDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CredentialReference: ").Append(CredentialReference).Append("\n");
            sb.Append("  EmploymentStaffEducationOrganizationEmploymentAssociationReference: ").Append(EmploymentStaffEducationOrganizationEmploymentAssociationReference).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FullTimeEquivalency: ").Append(FullTimeEquivalency).Append("\n");
            sb.Append("  OrderOfAssignment: ").Append(OrderOfAssignment).Append("\n");
            sb.Append("  PositionTitle: ").Append(PositionTitle).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StaffClassificationDescriptor (string) maxLength
            if (this.StaffClassificationDescriptor != null && this.StaffClassificationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for StaffClassificationDescriptor, length must be less than 306.", new [] { "StaffClassificationDescriptor" });
            }

            // FullTimeEquivalency (double) maximum
            if (this.FullTimeEquivalencyOption.IsSet && this.FullTimeEquivalencyOption.Value > (double)9.9999)
            {
                yield return new ValidationResult("Invalid value for FullTimeEquivalency, must be a value less than or equal to 9.9999.", new [] { "FullTimeEquivalency" });
            }

            // FullTimeEquivalency (double) minimum
            if (this.FullTimeEquivalencyOption.IsSet && this.FullTimeEquivalencyOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for FullTimeEquivalency, must be a value greater than or equal to 0.0.", new [] { "FullTimeEquivalency" });
            }

            // PositionTitle (string) maxLength
            if (this.PositionTitle != null && this.PositionTitle.Length > 100)
            {
                yield return new ValidationResult("Invalid value for PositionTitle, length must be less than 100.", new [] { "PositionTitle" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStaffEducationOrganizationAssignmentAssociation" />
    /// </summary>
    public class EdFiStaffEducationOrganizationAssignmentAssociationJsonConverter : JsonConverter<EdFiStaffEducationOrganizationAssignmentAssociation>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStaffEducationOrganizationAssignmentAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStaffEducationOrganizationAssignmentAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> beginDate = default;
            Option<string?> staffClassificationDescriptor = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiStaffReference?> staffReference = default;
            Option<string?> id = default;
            Option<EdFiCredentialReference?> credentialReference = default;
            Option<EdFiStaffEducationOrganizationEmploymentAssociationReference?> employmentStaffEducationOrganizationEmploymentAssociationReference = default;
            Option<DateOnly?> endDate = default;
            Option<double?> fullTimeEquivalency = default;
            Option<int?> orderOfAssignment = default;
            Option<string?> positionTitle = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "staffClassificationDescriptor":
                            staffClassificationDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "staffReference":
                            staffReference = new Option<EdFiStaffReference?>(JsonSerializer.Deserialize<EdFiStaffReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "credentialReference":
                            credentialReference = new Option<EdFiCredentialReference?>(JsonSerializer.Deserialize<EdFiCredentialReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "employmentStaffEducationOrganizationEmploymentAssociationReference":
                            employmentStaffEducationOrganizationEmploymentAssociationReference = new Option<EdFiStaffEducationOrganizationEmploymentAssociationReference?>(JsonSerializer.Deserialize<EdFiStaffEducationOrganizationEmploymentAssociationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fullTimeEquivalency":
                            fullTimeEquivalency = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "orderOfAssignment":
                            orderOfAssignment = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "positionTitle":
                            positionTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.", nameof(beginDate));

            if (!staffClassificationDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.", nameof(staffClassificationDescriptor));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.", nameof(educationOrganizationReference));

            if (!staffReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.", nameof(staffReference));

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (staffClassificationDescriptor.IsSet && staffClassificationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(staffClassificationDescriptor), "Property is not nullable for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (staffReference.IsSet && staffReference.Value == null)
                throw new ArgumentNullException(nameof(staffReference), "Property is not nullable for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (credentialReference.IsSet && credentialReference.Value == null)
                throw new ArgumentNullException(nameof(credentialReference), "Property is not nullable for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (employmentStaffEducationOrganizationEmploymentAssociationReference.IsSet && employmentStaffEducationOrganizationEmploymentAssociationReference.Value == null)
                throw new ArgumentNullException(nameof(employmentStaffEducationOrganizationEmploymentAssociationReference), "Property is not nullable for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            return new EdFiStaffEducationOrganizationAssignmentAssociation(beginDate.Value!.Value!, staffClassificationDescriptor.Value!, educationOrganizationReference.Value!, staffReference.Value!, id, credentialReference, employmentStaffEducationOrganizationEmploymentAssociationReference, endDate, fullTimeEquivalency, orderOfAssignment, positionTitle, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStaffEducationOrganizationAssignmentAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStaffEducationOrganizationAssignmentAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStaffEducationOrganizationAssignmentAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffEducationOrganizationAssignmentAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStaffEducationOrganizationAssignmentAssociation edFiStaffEducationOrganizationAssignmentAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStaffEducationOrganizationAssignmentAssociation.StaffClassificationDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationAssignmentAssociation.StaffClassificationDescriptor), "Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (edFiStaffEducationOrganizationAssignmentAssociation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationAssignmentAssociation.EducationOrganizationReference), "Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (edFiStaffEducationOrganizationAssignmentAssociation.StaffReference == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationAssignmentAssociation.StaffReference), "Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (edFiStaffEducationOrganizationAssignmentAssociation.IdOption.IsSet && edFiStaffEducationOrganizationAssignmentAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationAssignmentAssociation.Id), "Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (edFiStaffEducationOrganizationAssignmentAssociation.CredentialReferenceOption.IsSet && edFiStaffEducationOrganizationAssignmentAssociation.CredentialReference == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationAssignmentAssociation.CredentialReference), "Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (edFiStaffEducationOrganizationAssignmentAssociation.EmploymentStaffEducationOrganizationEmploymentAssociationReferenceOption.IsSet && edFiStaffEducationOrganizationAssignmentAssociation.EmploymentStaffEducationOrganizationEmploymentAssociationReference == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationAssignmentAssociation.EmploymentStaffEducationOrganizationEmploymentAssociationReference), "Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (edFiStaffEducationOrganizationAssignmentAssociation.EtagOption.IsSet && edFiStaffEducationOrganizationAssignmentAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationAssignmentAssociation.Etag), "Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            if (edFiStaffEducationOrganizationAssignmentAssociation.ExtOption.IsSet && edFiStaffEducationOrganizationAssignmentAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationAssignmentAssociation.Ext), "Property is required for class EdFiStaffEducationOrganizationAssignmentAssociation.");

            writer.WriteString("beginDate", edFiStaffEducationOrganizationAssignmentAssociation.BeginDate.ToString(BeginDateFormat));

            writer.WriteString("staffClassificationDescriptor", edFiStaffEducationOrganizationAssignmentAssociation.StaffClassificationDescriptor);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationAssignmentAssociation.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("staffReference");
            JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationAssignmentAssociation.StaffReference, jsonSerializerOptions);
            if (edFiStaffEducationOrganizationAssignmentAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStaffEducationOrganizationAssignmentAssociation.Id);

            if (edFiStaffEducationOrganizationAssignmentAssociation.CredentialReferenceOption.IsSet)
            {
                writer.WritePropertyName("credentialReference");
                JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationAssignmentAssociation.CredentialReference, jsonSerializerOptions);
            }
            if (edFiStaffEducationOrganizationAssignmentAssociation.EmploymentStaffEducationOrganizationEmploymentAssociationReferenceOption.IsSet)
            {
                writer.WritePropertyName("employmentStaffEducationOrganizationEmploymentAssociationReference");
                JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationAssignmentAssociation.EmploymentStaffEducationOrganizationEmploymentAssociationReference, jsonSerializerOptions);
            }
            if (edFiStaffEducationOrganizationAssignmentAssociation.EndDateOption.IsSet)
                if (edFiStaffEducationOrganizationAssignmentAssociation.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiStaffEducationOrganizationAssignmentAssociation.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiStaffEducationOrganizationAssignmentAssociation.FullTimeEquivalencyOption.IsSet)
                if (edFiStaffEducationOrganizationAssignmentAssociation.FullTimeEquivalencyOption.Value != null)
                    writer.WriteNumber("fullTimeEquivalency", edFiStaffEducationOrganizationAssignmentAssociation.FullTimeEquivalencyOption.Value!.Value);
                else
                    writer.WriteNull("fullTimeEquivalency");

            if (edFiStaffEducationOrganizationAssignmentAssociation.OrderOfAssignmentOption.IsSet)
                if (edFiStaffEducationOrganizationAssignmentAssociation.OrderOfAssignmentOption.Value != null)
                    writer.WriteNumber("orderOfAssignment", edFiStaffEducationOrganizationAssignmentAssociation.OrderOfAssignmentOption.Value!.Value);
                else
                    writer.WriteNull("orderOfAssignment");

            if (edFiStaffEducationOrganizationAssignmentAssociation.PositionTitleOption.IsSet)
                if (edFiStaffEducationOrganizationAssignmentAssociation.PositionTitleOption.Value != null)
                    writer.WriteString("positionTitle", edFiStaffEducationOrganizationAssignmentAssociation.PositionTitle);
                else
                    writer.WriteNull("positionTitle");

            if (edFiStaffEducationOrganizationAssignmentAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStaffEducationOrganizationAssignmentAssociation.Etag);

            if (edFiStaffEducationOrganizationAssignmentAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStaffEducationOrganizationAssignmentAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStaffEducationOrganizationAssignmentAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationAssignmentAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
