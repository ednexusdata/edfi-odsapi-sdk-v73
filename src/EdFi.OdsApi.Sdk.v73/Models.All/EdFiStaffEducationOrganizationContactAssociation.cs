// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStaffEducationOrganizationContactAssociation
    /// </summary>
    public partial class EdFiStaffEducationOrganizationContactAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffEducationOrganizationContactAssociation" /> class.
        /// </summary>
        /// <param name="contactTitle">The title of the contact in the context of the education organization.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="staffReference">staffReference</param>
        /// <param name="electronicMailAddress">The email for the contact associated with the education organization.</param>
        /// <param name="id">id</param>
        /// <param name="address">address</param>
        /// <param name="contactTypeDescriptor">Indicates the type for the contact information.</param>
        /// <param name="telephones">An unordered collection of staffEducationOrganizationContactAssociationTelephones. The optional telephone for the contact associated with the education organization.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StaffEducationOrganizationContactAssociation entity.</param>
        [JsonConstructor]
        public EdFiStaffEducationOrganizationContactAssociation(string contactTitle, EdFiEducationOrganizationReference educationOrganizationReference, EdFiStaffReference staffReference, string electronicMailAddress, Option<string?> id = default, Option<EdFiStaffEducationOrganizationContactAssociationAddress?> address = default, Option<string?> contactTypeDescriptor = default, Option<List<EdFiStaffEducationOrganizationContactAssociationTelephone>?> telephones = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            ContactTitle = contactTitle;
            EducationOrganizationReference = educationOrganizationReference;
            StaffReference = staffReference;
            ElectronicMailAddress = electronicMailAddress;
            IdOption = id;
            AddressOption = address;
            ContactTypeDescriptorOption = contactTypeDescriptor;
            TelephonesOption = telephones;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The title of the contact in the context of the education organization.
        /// </summary>
        /// <value>The title of the contact in the context of the education organization.</value>
        [JsonPropertyName("contactTitle")]
        public string ContactTitle { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [JsonPropertyName("staffReference")]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// The email for the contact associated with the education organization.
        /// </summary>
        /// <value>The email for the contact associated with the education organization.</value>
        [JsonPropertyName("electronicMailAddress")]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiStaffEducationOrganizationContactAssociationAddress?> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public EdFiStaffEducationOrganizationContactAssociationAddress? Address { get { return this.AddressOption; } set { this.AddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContactTypeDescriptorOption { get; private set; }

        /// <summary>
        /// Indicates the type for the contact information.
        /// </summary>
        /// <value>Indicates the type for the contact information.</value>
        [JsonPropertyName("contactTypeDescriptor")]
        public string? ContactTypeDescriptor { get { return this.ContactTypeDescriptorOption; } set { this.ContactTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Telephones
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffEducationOrganizationContactAssociationTelephone>?> TelephonesOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffEducationOrganizationContactAssociationTelephones. The optional telephone for the contact associated with the education organization.
        /// </summary>
        /// <value>An unordered collection of staffEducationOrganizationContactAssociationTelephones. The optional telephone for the contact associated with the education organization.</value>
        [JsonPropertyName("telephones")]
        public List<EdFiStaffEducationOrganizationContactAssociationTelephone>? Telephones { get { return this.TelephonesOption; } set { this.TelephonesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StaffEducationOrganizationContactAssociation entity.
        /// </summary>
        /// <value>Extensions to the StaffEducationOrganizationContactAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffEducationOrganizationContactAssociation {\n");
            sb.Append("  ContactTitle: ").Append(ContactTitle).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  ElectronicMailAddress: ").Append(ElectronicMailAddress).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ContactTypeDescriptor: ").Append(ContactTypeDescriptor).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContactTitle (string) maxLength
            if (this.ContactTitle != null && this.ContactTitle.Length > 75)
            {
                yield return new ValidationResult("Invalid value for ContactTitle, length must be less than 75.", new [] { "ContactTitle" });
            }

            // ElectronicMailAddress (string) maxLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length > 128)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be less than 128.", new [] { "ElectronicMailAddress" });
            }

            // ElectronicMailAddress (string) minLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length < 7)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be greater than 7.", new [] { "ElectronicMailAddress" });
            }

            // ContactTypeDescriptor (string) maxLength
            if (this.ContactTypeDescriptor != null && this.ContactTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ContactTypeDescriptor, length must be less than 306.", new [] { "ContactTypeDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStaffEducationOrganizationContactAssociation" />
    /// </summary>
    public class EdFiStaffEducationOrganizationContactAssociationJsonConverter : JsonConverter<EdFiStaffEducationOrganizationContactAssociation>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStaffEducationOrganizationContactAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStaffEducationOrganizationContactAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> contactTitle = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiStaffReference?> staffReference = default;
            Option<string?> electronicMailAddress = default;
            Option<string?> id = default;
            Option<EdFiStaffEducationOrganizationContactAssociationAddress?> address = default;
            Option<string?> contactTypeDescriptor = default;
            Option<List<EdFiStaffEducationOrganizationContactAssociationTelephone>?> telephones = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contactTitle":
                            contactTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "staffReference":
                            staffReference = new Option<EdFiStaffReference?>(JsonSerializer.Deserialize<EdFiStaffReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "electronicMailAddress":
                            electronicMailAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "address":
                            address = new Option<EdFiStaffEducationOrganizationContactAssociationAddress?>(JsonSerializer.Deserialize<EdFiStaffEducationOrganizationContactAssociationAddress>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "contactTypeDescriptor":
                            contactTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "telephones":
                            telephones = new Option<List<EdFiStaffEducationOrganizationContactAssociationTelephone>?>(JsonSerializer.Deserialize<List<EdFiStaffEducationOrganizationContactAssociationTelephone>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!contactTitle.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationContactAssociation.", nameof(contactTitle));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationContactAssociation.", nameof(educationOrganizationReference));

            if (!staffReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationContactAssociation.", nameof(staffReference));

            if (!electronicMailAddress.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationContactAssociation.", nameof(electronicMailAddress));

            if (contactTitle.IsSet && contactTitle.Value == null)
                throw new ArgumentNullException(nameof(contactTitle), "Property is not nullable for class EdFiStaffEducationOrganizationContactAssociation.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStaffEducationOrganizationContactAssociation.");

            if (staffReference.IsSet && staffReference.Value == null)
                throw new ArgumentNullException(nameof(staffReference), "Property is not nullable for class EdFiStaffEducationOrganizationContactAssociation.");

            if (electronicMailAddress.IsSet && electronicMailAddress.Value == null)
                throw new ArgumentNullException(nameof(electronicMailAddress), "Property is not nullable for class EdFiStaffEducationOrganizationContactAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStaffEducationOrganizationContactAssociation.");

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class EdFiStaffEducationOrganizationContactAssociation.");

            if (telephones.IsSet && telephones.Value == null)
                throw new ArgumentNullException(nameof(telephones), "Property is not nullable for class EdFiStaffEducationOrganizationContactAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStaffEducationOrganizationContactAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStaffEducationOrganizationContactAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStaffEducationOrganizationContactAssociation.");

            return new EdFiStaffEducationOrganizationContactAssociation(contactTitle.Value!, educationOrganizationReference.Value!, staffReference.Value!, electronicMailAddress.Value!, id, address, contactTypeDescriptor, telephones, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStaffEducationOrganizationContactAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffEducationOrganizationContactAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStaffEducationOrganizationContactAssociation edFiStaffEducationOrganizationContactAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStaffEducationOrganizationContactAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStaffEducationOrganizationContactAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffEducationOrganizationContactAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStaffEducationOrganizationContactAssociation edFiStaffEducationOrganizationContactAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStaffEducationOrganizationContactAssociation.ContactTitle == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationContactAssociation.ContactTitle), "Property is required for class EdFiStaffEducationOrganizationContactAssociation.");

            if (edFiStaffEducationOrganizationContactAssociation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationContactAssociation.EducationOrganizationReference), "Property is required for class EdFiStaffEducationOrganizationContactAssociation.");

            if (edFiStaffEducationOrganizationContactAssociation.StaffReference == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationContactAssociation.StaffReference), "Property is required for class EdFiStaffEducationOrganizationContactAssociation.");

            if (edFiStaffEducationOrganizationContactAssociation.ElectronicMailAddress == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationContactAssociation.ElectronicMailAddress), "Property is required for class EdFiStaffEducationOrganizationContactAssociation.");

            if (edFiStaffEducationOrganizationContactAssociation.IdOption.IsSet && edFiStaffEducationOrganizationContactAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationContactAssociation.Id), "Property is required for class EdFiStaffEducationOrganizationContactAssociation.");

            if (edFiStaffEducationOrganizationContactAssociation.AddressOption.IsSet && edFiStaffEducationOrganizationContactAssociation.Address == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationContactAssociation.Address), "Property is required for class EdFiStaffEducationOrganizationContactAssociation.");

            if (edFiStaffEducationOrganizationContactAssociation.TelephonesOption.IsSet && edFiStaffEducationOrganizationContactAssociation.Telephones == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationContactAssociation.Telephones), "Property is required for class EdFiStaffEducationOrganizationContactAssociation.");

            if (edFiStaffEducationOrganizationContactAssociation.EtagOption.IsSet && edFiStaffEducationOrganizationContactAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationContactAssociation.Etag), "Property is required for class EdFiStaffEducationOrganizationContactAssociation.");

            if (edFiStaffEducationOrganizationContactAssociation.ExtOption.IsSet && edFiStaffEducationOrganizationContactAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationContactAssociation.Ext), "Property is required for class EdFiStaffEducationOrganizationContactAssociation.");

            writer.WriteString("contactTitle", edFiStaffEducationOrganizationContactAssociation.ContactTitle);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationContactAssociation.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("staffReference");
            JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationContactAssociation.StaffReference, jsonSerializerOptions);
            writer.WriteString("electronicMailAddress", edFiStaffEducationOrganizationContactAssociation.ElectronicMailAddress);

            if (edFiStaffEducationOrganizationContactAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStaffEducationOrganizationContactAssociation.Id);

            if (edFiStaffEducationOrganizationContactAssociation.AddressOption.IsSet)
            {
                writer.WritePropertyName("address");
                JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationContactAssociation.Address, jsonSerializerOptions);
            }
            if (edFiStaffEducationOrganizationContactAssociation.ContactTypeDescriptorOption.IsSet)
                if (edFiStaffEducationOrganizationContactAssociation.ContactTypeDescriptorOption.Value != null)
                    writer.WriteString("contactTypeDescriptor", edFiStaffEducationOrganizationContactAssociation.ContactTypeDescriptor);
                else
                    writer.WriteNull("contactTypeDescriptor");

            if (edFiStaffEducationOrganizationContactAssociation.TelephonesOption.IsSet)
            {
                writer.WritePropertyName("telephones");
                JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationContactAssociation.Telephones, jsonSerializerOptions);
            }
            if (edFiStaffEducationOrganizationContactAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStaffEducationOrganizationContactAssociation.Etag);

            if (edFiStaffEducationOrganizationContactAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStaffEducationOrganizationContactAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStaffEducationOrganizationContactAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationContactAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
