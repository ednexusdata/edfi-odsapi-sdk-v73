// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStaffEducationOrganizationEmploymentAssociation
    /// </summary>
    public partial class EdFiStaffEducationOrganizationEmploymentAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffEducationOrganizationEmploymentAssociation" /> class.
        /// </summary>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract.</param>
        /// <param name="hireDate">The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="staffReference">staffReference</param>
        /// <param name="id">id</param>
        /// <param name="credentialReference">credentialReference</param>
        /// <param name="annualWage">Annual wage associated with the employment position being reported.</param>
        /// <param name="department">The department or suborganization the employee/contractor is associated with in the education organization.</param>
        /// <param name="endDate">The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.</param>
        /// <param name="hourlyWage">Hourly wage associated with the employment position being reported.</param>
        /// <param name="offerDate">Date at which the staff member was made an official offer for this employment.</param>
        /// <param name="separationDescriptor">Type of employment separation.</param>
        /// <param name="separationReasonDescriptor">Reason for terminating the employment.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StaffEducationOrganizationEmploymentAssociation entity.</param>
        [JsonConstructor]
        public EdFiStaffEducationOrganizationEmploymentAssociation(string employmentStatusDescriptor, DateOnly hireDate, EdFiEducationOrganizationReference educationOrganizationReference, EdFiStaffReference staffReference, Option<string?> id = default, Option<EdFiCredentialReference?> credentialReference = default, Option<double?> annualWage = default, Option<string?> department = default, Option<DateOnly?> endDate = default, Option<double?> fullTimeEquivalency = default, Option<double?> hourlyWage = default, Option<DateOnly?> offerDate = default, Option<string?> separationDescriptor = default, Option<string?> separationReasonDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            EmploymentStatusDescriptor = employmentStatusDescriptor;
            HireDate = hireDate;
            EducationOrganizationReference = educationOrganizationReference;
            StaffReference = staffReference;
            IdOption = id;
            CredentialReferenceOption = credentialReference;
            AnnualWageOption = annualWage;
            DepartmentOption = department;
            EndDateOption = endDate;
            FullTimeEquivalencyOption = fullTimeEquivalency;
            HourlyWageOption = hourlyWage;
            OfferDateOption = offerDate;
            SeparationDescriptorOption = separationDescriptor;
            SeparationReasonDescriptorOption = separationReasonDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Reflects the type of employment or contract.
        /// </summary>
        /// <value>Reflects the type of employment or contract.</value>
        [JsonPropertyName("employmentStatusDescriptor")]
        public string EmploymentStatusDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("hireDate")]
        public DateOnly HireDate { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [JsonPropertyName("staffReference")]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CredentialReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiCredentialReference?> CredentialReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets CredentialReference
        /// </summary>
        [JsonPropertyName("credentialReference")]
        public EdFiCredentialReference? CredentialReference { get { return this.CredentialReferenceOption; } set { this.CredentialReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AnnualWage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AnnualWageOption { get; private set; }

        /// <summary>
        /// Annual wage associated with the employment position being reported.
        /// </summary>
        /// <value>Annual wage associated with the employment position being reported.</value>
        [JsonPropertyName("annualWage")]
        public double? AnnualWage { get { return this.AnnualWageOption; } set { this.AnnualWageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Department
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentOption { get; private set; }

        /// <summary>
        /// The department or suborganization the employee/contractor is associated with in the education organization.
        /// </summary>
        /// <value>The department or suborganization the employee/contractor is associated with in the education organization.</value>
        [JsonPropertyName("department")]
        public string? Department { get { return this.DepartmentOption; } set { this.DepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullTimeEquivalency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> FullTimeEquivalencyOption { get; private set; }

        /// <summary>
        /// The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.
        /// </summary>
        /// <value>The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.</value>
        [JsonPropertyName("fullTimeEquivalency")]
        public double? FullTimeEquivalency { get { return this.FullTimeEquivalencyOption; } set { this.FullTimeEquivalencyOption = new(value); } }

        /// <summary>
        /// Used to track the state of HourlyWage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> HourlyWageOption { get; private set; }

        /// <summary>
        /// Hourly wage associated with the employment position being reported.
        /// </summary>
        /// <value>Hourly wage associated with the employment position being reported.</value>
        [JsonPropertyName("hourlyWage")]
        public double? HourlyWage { get { return this.HourlyWageOption; } set { this.HourlyWageOption = new(value); } }

        /// <summary>
        /// Used to track the state of OfferDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> OfferDateOption { get; private set; }

        /// <summary>
        /// Date at which the staff member was made an official offer for this employment.
        /// </summary>
        /// <value>Date at which the staff member was made an official offer for this employment.</value>
        [JsonPropertyName("offerDate")]
        public DateOnly? OfferDate { get { return this.OfferDateOption; } set { this.OfferDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of SeparationDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SeparationDescriptorOption { get; private set; }

        /// <summary>
        /// Type of employment separation.
        /// </summary>
        /// <value>Type of employment separation.</value>
        [JsonPropertyName("separationDescriptor")]
        public string? SeparationDescriptor { get { return this.SeparationDescriptorOption; } set { this.SeparationDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of SeparationReasonDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SeparationReasonDescriptorOption { get; private set; }

        /// <summary>
        /// Reason for terminating the employment.
        /// </summary>
        /// <value>Reason for terminating the employment.</value>
        [JsonPropertyName("separationReasonDescriptor")]
        public string? SeparationReasonDescriptor { get { return this.SeparationReasonDescriptorOption; } set { this.SeparationReasonDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StaffEducationOrganizationEmploymentAssociation entity.
        /// </summary>
        /// <value>Extensions to the StaffEducationOrganizationEmploymentAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffEducationOrganizationEmploymentAssociation {\n");
            sb.Append("  EmploymentStatusDescriptor: ").Append(EmploymentStatusDescriptor).Append("\n");
            sb.Append("  HireDate: ").Append(HireDate).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CredentialReference: ").Append(CredentialReference).Append("\n");
            sb.Append("  AnnualWage: ").Append(AnnualWage).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FullTimeEquivalency: ").Append(FullTimeEquivalency).Append("\n");
            sb.Append("  HourlyWage: ").Append(HourlyWage).Append("\n");
            sb.Append("  OfferDate: ").Append(OfferDate).Append("\n");
            sb.Append("  SeparationDescriptor: ").Append(SeparationDescriptor).Append("\n");
            sb.Append("  SeparationReasonDescriptor: ").Append(SeparationReasonDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EmploymentStatusDescriptor (string) maxLength
            if (this.EmploymentStatusDescriptor != null && this.EmploymentStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EmploymentStatusDescriptor, length must be less than 306.", new [] { "EmploymentStatusDescriptor" });
            }

            // AnnualWage (double) maximum
            if (this.AnnualWageOption.IsSet && this.AnnualWageOption.Value > (double)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for AnnualWage, must be a value less than or equal to 922337203685477.6.", new [] { "AnnualWage" });
            }

            // AnnualWage (double) minimum
            if (this.AnnualWageOption.IsSet && this.AnnualWageOption.Value < (double)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for AnnualWage, must be a value greater than or equal to -922337203685477.6.", new [] { "AnnualWage" });
            }

            // Department (string) maxLength
            if (this.Department != null && this.Department.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Department, length must be less than 60.", new [] { "Department" });
            }

            // FullTimeEquivalency (double) maximum
            if (this.FullTimeEquivalencyOption.IsSet && this.FullTimeEquivalencyOption.Value > (double)9.9999)
            {
                yield return new ValidationResult("Invalid value for FullTimeEquivalency, must be a value less than or equal to 9.9999.", new [] { "FullTimeEquivalency" });
            }

            // FullTimeEquivalency (double) minimum
            if (this.FullTimeEquivalencyOption.IsSet && this.FullTimeEquivalencyOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for FullTimeEquivalency, must be a value greater than or equal to 0.0.", new [] { "FullTimeEquivalency" });
            }

            // HourlyWage (double) maximum
            if (this.HourlyWageOption.IsSet && this.HourlyWageOption.Value > (double)922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for HourlyWage, must be a value less than or equal to 922337203685477.6.", new [] { "HourlyWage" });
            }

            // HourlyWage (double) minimum
            if (this.HourlyWageOption.IsSet && this.HourlyWageOption.Value < (double)-922337203685477.6)
            {
                yield return new ValidationResult("Invalid value for HourlyWage, must be a value greater than or equal to -922337203685477.6.", new [] { "HourlyWage" });
            }

            // SeparationDescriptor (string) maxLength
            if (this.SeparationDescriptor != null && this.SeparationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SeparationDescriptor, length must be less than 306.", new [] { "SeparationDescriptor" });
            }

            // SeparationReasonDescriptor (string) maxLength
            if (this.SeparationReasonDescriptor != null && this.SeparationReasonDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SeparationReasonDescriptor, length must be less than 306.", new [] { "SeparationReasonDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStaffEducationOrganizationEmploymentAssociation" />
    /// </summary>
    public class EdFiStaffEducationOrganizationEmploymentAssociationJsonConverter : JsonConverter<EdFiStaffEducationOrganizationEmploymentAssociation>
    {
        /// <summary>
        /// The format to use to serialize HireDate
        /// </summary>
        public static string HireDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize OfferDate
        /// </summary>
        public static string OfferDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStaffEducationOrganizationEmploymentAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStaffEducationOrganizationEmploymentAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> employmentStatusDescriptor = default;
            Option<DateOnly?> hireDate = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiStaffReference?> staffReference = default;
            Option<string?> id = default;
            Option<EdFiCredentialReference?> credentialReference = default;
            Option<double?> annualWage = default;
            Option<string?> department = default;
            Option<DateOnly?> endDate = default;
            Option<double?> fullTimeEquivalency = default;
            Option<double?> hourlyWage = default;
            Option<DateOnly?> offerDate = default;
            Option<string?> separationDescriptor = default;
            Option<string?> separationReasonDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "employmentStatusDescriptor":
                            employmentStatusDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hireDate":
                            hireDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "staffReference":
                            staffReference = new Option<EdFiStaffReference?>(JsonSerializer.Deserialize<EdFiStaffReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "credentialReference":
                            credentialReference = new Option<EdFiCredentialReference?>(JsonSerializer.Deserialize<EdFiCredentialReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "annualWage":
                            annualWage = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "department":
                            department = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fullTimeEquivalency":
                            fullTimeEquivalency = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "hourlyWage":
                            hourlyWage = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "offerDate":
                            offerDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "separationDescriptor":
                            separationDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "separationReasonDescriptor":
                            separationReasonDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!employmentStatusDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationEmploymentAssociation.", nameof(employmentStatusDescriptor));

            if (!hireDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationEmploymentAssociation.", nameof(hireDate));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationEmploymentAssociation.", nameof(educationOrganizationReference));

            if (!staffReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffEducationOrganizationEmploymentAssociation.", nameof(staffReference));

            if (employmentStatusDescriptor.IsSet && employmentStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(employmentStatusDescriptor), "Property is not nullable for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (hireDate.IsSet && hireDate.Value == null)
                throw new ArgumentNullException(nameof(hireDate), "Property is not nullable for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (staffReference.IsSet && staffReference.Value == null)
                throw new ArgumentNullException(nameof(staffReference), "Property is not nullable for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (credentialReference.IsSet && credentialReference.Value == null)
                throw new ArgumentNullException(nameof(credentialReference), "Property is not nullable for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            return new EdFiStaffEducationOrganizationEmploymentAssociation(employmentStatusDescriptor.Value!, hireDate.Value!.Value!, educationOrganizationReference.Value!, staffReference.Value!, id, credentialReference, annualWage, department, endDate, fullTimeEquivalency, hourlyWage, offerDate, separationDescriptor, separationReasonDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStaffEducationOrganizationEmploymentAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffEducationOrganizationEmploymentAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStaffEducationOrganizationEmploymentAssociation edFiStaffEducationOrganizationEmploymentAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStaffEducationOrganizationEmploymentAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStaffEducationOrganizationEmploymentAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffEducationOrganizationEmploymentAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStaffEducationOrganizationEmploymentAssociation edFiStaffEducationOrganizationEmploymentAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStaffEducationOrganizationEmploymentAssociation.EmploymentStatusDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationEmploymentAssociation.EmploymentStatusDescriptor), "Property is required for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (edFiStaffEducationOrganizationEmploymentAssociation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationEmploymentAssociation.EducationOrganizationReference), "Property is required for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (edFiStaffEducationOrganizationEmploymentAssociation.StaffReference == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationEmploymentAssociation.StaffReference), "Property is required for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (edFiStaffEducationOrganizationEmploymentAssociation.IdOption.IsSet && edFiStaffEducationOrganizationEmploymentAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationEmploymentAssociation.Id), "Property is required for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (edFiStaffEducationOrganizationEmploymentAssociation.CredentialReferenceOption.IsSet && edFiStaffEducationOrganizationEmploymentAssociation.CredentialReference == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationEmploymentAssociation.CredentialReference), "Property is required for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (edFiStaffEducationOrganizationEmploymentAssociation.EtagOption.IsSet && edFiStaffEducationOrganizationEmploymentAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationEmploymentAssociation.Etag), "Property is required for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            if (edFiStaffEducationOrganizationEmploymentAssociation.ExtOption.IsSet && edFiStaffEducationOrganizationEmploymentAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStaffEducationOrganizationEmploymentAssociation.Ext), "Property is required for class EdFiStaffEducationOrganizationEmploymentAssociation.");

            writer.WriteString("employmentStatusDescriptor", edFiStaffEducationOrganizationEmploymentAssociation.EmploymentStatusDescriptor);

            writer.WriteString("hireDate", edFiStaffEducationOrganizationEmploymentAssociation.HireDate.ToString(HireDateFormat));

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationEmploymentAssociation.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("staffReference");
            JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationEmploymentAssociation.StaffReference, jsonSerializerOptions);
            if (edFiStaffEducationOrganizationEmploymentAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStaffEducationOrganizationEmploymentAssociation.Id);

            if (edFiStaffEducationOrganizationEmploymentAssociation.CredentialReferenceOption.IsSet)
            {
                writer.WritePropertyName("credentialReference");
                JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationEmploymentAssociation.CredentialReference, jsonSerializerOptions);
            }
            if (edFiStaffEducationOrganizationEmploymentAssociation.AnnualWageOption.IsSet)
                if (edFiStaffEducationOrganizationEmploymentAssociation.AnnualWageOption.Value != null)
                    writer.WriteNumber("annualWage", edFiStaffEducationOrganizationEmploymentAssociation.AnnualWageOption.Value!.Value);
                else
                    writer.WriteNull("annualWage");

            if (edFiStaffEducationOrganizationEmploymentAssociation.DepartmentOption.IsSet)
                if (edFiStaffEducationOrganizationEmploymentAssociation.DepartmentOption.Value != null)
                    writer.WriteString("department", edFiStaffEducationOrganizationEmploymentAssociation.Department);
                else
                    writer.WriteNull("department");

            if (edFiStaffEducationOrganizationEmploymentAssociation.EndDateOption.IsSet)
                if (edFiStaffEducationOrganizationEmploymentAssociation.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiStaffEducationOrganizationEmploymentAssociation.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiStaffEducationOrganizationEmploymentAssociation.FullTimeEquivalencyOption.IsSet)
                if (edFiStaffEducationOrganizationEmploymentAssociation.FullTimeEquivalencyOption.Value != null)
                    writer.WriteNumber("fullTimeEquivalency", edFiStaffEducationOrganizationEmploymentAssociation.FullTimeEquivalencyOption.Value!.Value);
                else
                    writer.WriteNull("fullTimeEquivalency");

            if (edFiStaffEducationOrganizationEmploymentAssociation.HourlyWageOption.IsSet)
                if (edFiStaffEducationOrganizationEmploymentAssociation.HourlyWageOption.Value != null)
                    writer.WriteNumber("hourlyWage", edFiStaffEducationOrganizationEmploymentAssociation.HourlyWageOption.Value!.Value);
                else
                    writer.WriteNull("hourlyWage");

            if (edFiStaffEducationOrganizationEmploymentAssociation.OfferDateOption.IsSet)
                if (edFiStaffEducationOrganizationEmploymentAssociation.OfferDateOption.Value != null)
                    writer.WriteString("offerDate", edFiStaffEducationOrganizationEmploymentAssociation.OfferDateOption.Value!.Value.ToString(OfferDateFormat));
                else
                    writer.WriteNull("offerDate");

            if (edFiStaffEducationOrganizationEmploymentAssociation.SeparationDescriptorOption.IsSet)
                if (edFiStaffEducationOrganizationEmploymentAssociation.SeparationDescriptorOption.Value != null)
                    writer.WriteString("separationDescriptor", edFiStaffEducationOrganizationEmploymentAssociation.SeparationDescriptor);
                else
                    writer.WriteNull("separationDescriptor");

            if (edFiStaffEducationOrganizationEmploymentAssociation.SeparationReasonDescriptorOption.IsSet)
                if (edFiStaffEducationOrganizationEmploymentAssociation.SeparationReasonDescriptorOption.Value != null)
                    writer.WriteString("separationReasonDescriptor", edFiStaffEducationOrganizationEmploymentAssociation.SeparationReasonDescriptor);
                else
                    writer.WriteNull("separationReasonDescriptor");

            if (edFiStaffEducationOrganizationEmploymentAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStaffEducationOrganizationEmploymentAssociation.Etag);

            if (edFiStaffEducationOrganizationEmploymentAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStaffEducationOrganizationEmploymentAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStaffEducationOrganizationEmploymentAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStaffEducationOrganizationEmploymentAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
