// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStaffInternationalAddress
    /// </summary>
    public partial class EdFiStaffInternationalAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffInternationalAddress" /> class.
        /// </summary>
        /// <param name="addressTypeDescriptor">The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)</param>
        /// <param name="countryDescriptor">The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.</param>
        /// <param name="addressLine1">The first line of the address.</param>
        /// <param name="addressLine2">The second line of the address.</param>
        /// <param name="addressLine3">The third line of the address.</param>
        /// <param name="addressLine4">The fourth line of the address.</param>
        /// <param name="beginDate">The first date the address is valid. For physical addresses, the date the individual moved to that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="endDate">The last date the address is valid. For physical addresses, the date the individual moved from that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="latitude">The geographic latitude of the physical address.</param>
        /// <param name="longitude">The geographic longitude of the physical address.</param>
        /// <param name="ext">Extensions to the StaffInternationalAddress entity.</param>
        [JsonConstructor]
        public EdFiStaffInternationalAddress(string addressTypeDescriptor, string countryDescriptor, string addressLine1, Option<string?> addressLine2 = default, Option<string?> addressLine3 = default, Option<string?> addressLine4 = default, Option<DateOnly?> beginDate = default, Option<DateOnly?> endDate = default, Option<string?> latitude = default, Option<string?> longitude = default, Option<Object?> ext = default)
        {
            AddressTypeDescriptor = addressTypeDescriptor;
            CountryDescriptor = countryDescriptor;
            AddressLine1 = addressLine1;
            AddressLine2Option = addressLine2;
            AddressLine3Option = addressLine3;
            AddressLine4Option = addressLine4;
            BeginDateOption = beginDate;
            EndDateOption = endDate;
            LatitudeOption = latitude;
            LongitudeOption = longitude;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        /// </summary>
        /// <value>The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)</value>
        [JsonPropertyName("addressTypeDescriptor")]
        public string AddressTypeDescriptor { get; set; }

        /// <summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        /// <value>The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.</value>
        [JsonPropertyName("countryDescriptor")]
        public string CountryDescriptor { get; set; }

        /// <summary>
        /// The first line of the address.
        /// </summary>
        /// <value>The first line of the address.</value>
        [JsonPropertyName("addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Used to track the state of AddressLine2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine2Option { get; private set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        /// <value>The second line of the address.</value>
        [JsonPropertyName("addressLine2")]
        public string? AddressLine2 { get { return this.AddressLine2Option; } set { this.AddressLine2Option = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine3Option { get; private set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        /// <value>The third line of the address.</value>
        [JsonPropertyName("addressLine3")]
        public string? AddressLine3 { get { return this.AddressLine3Option; } set { this.AddressLine3Option = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine4
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine4Option { get; private set; }

        /// <summary>
        /// The fourth line of the address.
        /// </summary>
        /// <value>The fourth line of the address.</value>
        [JsonPropertyName("addressLine4")]
        public string? AddressLine4 { get { return this.AddressLine4Option; } set { this.AddressLine4Option = new(value); } }

        /// <summary>
        /// Used to track the state of BeginDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> BeginDateOption { get; private set; }

        /// <summary>
        /// The first date the address is valid. For physical addresses, the date the individual moved to that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The first date the address is valid. For physical addresses, the date the individual moved to that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly? BeginDate { get { return this.BeginDateOption; } set { this.BeginDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The last date the address is valid. For physical addresses, the date the individual moved from that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The last date the address is valid. For physical addresses, the date the individual moved from that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LatitudeOption { get; private set; }

        /// <summary>
        /// The geographic latitude of the physical address.
        /// </summary>
        /// <value>The geographic latitude of the physical address.</value>
        [JsonPropertyName("latitude")]
        public string? Latitude { get { return this.LatitudeOption; } set { this.LatitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LongitudeOption { get; private set; }

        /// <summary>
        /// The geographic longitude of the physical address.
        /// </summary>
        /// <value>The geographic longitude of the physical address.</value>
        [JsonPropertyName("longitude")]
        public string? Longitude { get { return this.LongitudeOption; } set { this.LongitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StaffInternationalAddress entity.
        /// </summary>
        /// <value>Extensions to the StaffInternationalAddress entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffInternationalAddress {\n");
            sb.Append("  AddressTypeDescriptor: ").Append(AddressTypeDescriptor).Append("\n");
            sb.Append("  CountryDescriptor: ").Append(CountryDescriptor).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  AddressLine4: ").Append(AddressLine4).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AddressTypeDescriptor (string) maxLength
            if (this.AddressTypeDescriptor != null && this.AddressTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AddressTypeDescriptor, length must be less than 306.", new [] { "AddressTypeDescriptor" });
            }

            // CountryDescriptor (string) maxLength
            if (this.CountryDescriptor != null && this.CountryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CountryDescriptor, length must be less than 306.", new [] { "CountryDescriptor" });
            }

            // AddressLine1 (string) maxLength
            if (this.AddressLine1 != null && this.AddressLine1.Length > 150)
            {
                yield return new ValidationResult("Invalid value for AddressLine1, length must be less than 150.", new [] { "AddressLine1" });
            }

            // AddressLine2 (string) maxLength
            if (this.AddressLine2 != null && this.AddressLine2.Length > 150)
            {
                yield return new ValidationResult("Invalid value for AddressLine2, length must be less than 150.", new [] { "AddressLine2" });
            }

            // AddressLine3 (string) maxLength
            if (this.AddressLine3 != null && this.AddressLine3.Length > 150)
            {
                yield return new ValidationResult("Invalid value for AddressLine3, length must be less than 150.", new [] { "AddressLine3" });
            }

            // AddressLine4 (string) maxLength
            if (this.AddressLine4 != null && this.AddressLine4.Length > 150)
            {
                yield return new ValidationResult("Invalid value for AddressLine4, length must be less than 150.", new [] { "AddressLine4" });
            }

            // Latitude (string) maxLength
            if (this.Latitude != null && this.Latitude.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Latitude, length must be less than 20.", new [] { "Latitude" });
            }

            // Longitude (string) maxLength
            if (this.Longitude != null && this.Longitude.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Longitude, length must be less than 20.", new [] { "Longitude" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStaffInternationalAddress" />
    /// </summary>
    public class EdFiStaffInternationalAddressJsonConverter : JsonConverter<EdFiStaffInternationalAddress>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStaffInternationalAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStaffInternationalAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> addressTypeDescriptor = default;
            Option<string?> countryDescriptor = default;
            Option<string?> addressLine1 = default;
            Option<string?> addressLine2 = default;
            Option<string?> addressLine3 = default;
            Option<string?> addressLine4 = default;
            Option<DateOnly?> beginDate = default;
            Option<DateOnly?> endDate = default;
            Option<string?> latitude = default;
            Option<string?> longitude = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addressTypeDescriptor":
                            addressTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "countryDescriptor":
                            countryDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine1":
                            addressLine1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine2":
                            addressLine2 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "addressLine3":
                            addressLine3 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "addressLine4":
                            addressLine4 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "latitude":
                            latitude = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "longitude":
                            longitude = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!addressTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffInternationalAddress.", nameof(addressTypeDescriptor));

            if (!countryDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffInternationalAddress.", nameof(countryDescriptor));

            if (!addressLine1.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffInternationalAddress.", nameof(addressLine1));

            if (addressTypeDescriptor.IsSet && addressTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(addressTypeDescriptor), "Property is not nullable for class EdFiStaffInternationalAddress.");

            if (countryDescriptor.IsSet && countryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(countryDescriptor), "Property is not nullable for class EdFiStaffInternationalAddress.");

            if (addressLine1.IsSet && addressLine1.Value == null)
                throw new ArgumentNullException(nameof(addressLine1), "Property is not nullable for class EdFiStaffInternationalAddress.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStaffInternationalAddress.");

            return new EdFiStaffInternationalAddress(addressTypeDescriptor.Value!, countryDescriptor.Value!, addressLine1.Value!, addressLine2, addressLine3, addressLine4, beginDate, endDate, latitude, longitude, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStaffInternationalAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffInternationalAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStaffInternationalAddress edFiStaffInternationalAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStaffInternationalAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStaffInternationalAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffInternationalAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStaffInternationalAddress edFiStaffInternationalAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStaffInternationalAddress.AddressTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStaffInternationalAddress.AddressTypeDescriptor), "Property is required for class EdFiStaffInternationalAddress.");

            if (edFiStaffInternationalAddress.CountryDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStaffInternationalAddress.CountryDescriptor), "Property is required for class EdFiStaffInternationalAddress.");

            if (edFiStaffInternationalAddress.AddressLine1 == null)
                throw new ArgumentNullException(nameof(edFiStaffInternationalAddress.AddressLine1), "Property is required for class EdFiStaffInternationalAddress.");

            if (edFiStaffInternationalAddress.ExtOption.IsSet && edFiStaffInternationalAddress.Ext == null)
                throw new ArgumentNullException(nameof(edFiStaffInternationalAddress.Ext), "Property is required for class EdFiStaffInternationalAddress.");

            writer.WriteString("addressTypeDescriptor", edFiStaffInternationalAddress.AddressTypeDescriptor);

            writer.WriteString("countryDescriptor", edFiStaffInternationalAddress.CountryDescriptor);

            writer.WriteString("addressLine1", edFiStaffInternationalAddress.AddressLine1);

            if (edFiStaffInternationalAddress.AddressLine2Option.IsSet)
                if (edFiStaffInternationalAddress.AddressLine2Option.Value != null)
                    writer.WriteString("addressLine2", edFiStaffInternationalAddress.AddressLine2);
                else
                    writer.WriteNull("addressLine2");

            if (edFiStaffInternationalAddress.AddressLine3Option.IsSet)
                if (edFiStaffInternationalAddress.AddressLine3Option.Value != null)
                    writer.WriteString("addressLine3", edFiStaffInternationalAddress.AddressLine3);
                else
                    writer.WriteNull("addressLine3");

            if (edFiStaffInternationalAddress.AddressLine4Option.IsSet)
                if (edFiStaffInternationalAddress.AddressLine4Option.Value != null)
                    writer.WriteString("addressLine4", edFiStaffInternationalAddress.AddressLine4);
                else
                    writer.WriteNull("addressLine4");

            if (edFiStaffInternationalAddress.BeginDateOption.IsSet)
                if (edFiStaffInternationalAddress.BeginDateOption.Value != null)
                    writer.WriteString("beginDate", edFiStaffInternationalAddress.BeginDateOption.Value!.Value.ToString(BeginDateFormat));
                else
                    writer.WriteNull("beginDate");

            if (edFiStaffInternationalAddress.EndDateOption.IsSet)
                if (edFiStaffInternationalAddress.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiStaffInternationalAddress.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiStaffInternationalAddress.LatitudeOption.IsSet)
                if (edFiStaffInternationalAddress.LatitudeOption.Value != null)
                    writer.WriteString("latitude", edFiStaffInternationalAddress.Latitude);
                else
                    writer.WriteNull("latitude");

            if (edFiStaffInternationalAddress.LongitudeOption.IsSet)
                if (edFiStaffInternationalAddress.LongitudeOption.Value != null)
                    writer.WriteString("longitude", edFiStaffInternationalAddress.Longitude);
                else
                    writer.WriteNull("longitude");

            if (edFiStaffInternationalAddress.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStaffInternationalAddress.Ext, jsonSerializerOptions);
            }
        }
    }
}
