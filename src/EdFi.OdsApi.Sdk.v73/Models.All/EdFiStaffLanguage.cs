// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStaffLanguage
    /// </summary>
    public partial class EdFiStaffLanguage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffLanguage" /> class.
        /// </summary>
        /// <param name="languageDescriptor">A specification of which written or spoken communication is being used.</param>
        /// <param name="uses">An unordered collection of staffLanguageUses. A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).</param>
        /// <param name="ext">Extensions to the StaffLanguage entity.</param>
        [JsonConstructor]
        public EdFiStaffLanguage(string languageDescriptor, Option<List<EdFiStaffLanguageUse>?> uses = default, Option<Object?> ext = default)
        {
            LanguageDescriptor = languageDescriptor;
            UsesOption = uses;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A specification of which written or spoken communication is being used.
        /// </summary>
        /// <value>A specification of which written or spoken communication is being used.</value>
        [JsonPropertyName("languageDescriptor")]
        public string LanguageDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Uses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffLanguageUse>?> UsesOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffLanguageUses. A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        /// </summary>
        /// <value>An unordered collection of staffLanguageUses. A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).</value>
        [JsonPropertyName("uses")]
        public List<EdFiStaffLanguageUse>? Uses { get { return this.UsesOption; } set { this.UsesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StaffLanguage entity.
        /// </summary>
        /// <value>Extensions to the StaffLanguage entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffLanguage {\n");
            sb.Append("  LanguageDescriptor: ").Append(LanguageDescriptor).Append("\n");
            sb.Append("  Uses: ").Append(Uses).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LanguageDescriptor (string) maxLength
            if (this.LanguageDescriptor != null && this.LanguageDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LanguageDescriptor, length must be less than 306.", new [] { "LanguageDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStaffLanguage" />
    /// </summary>
    public class EdFiStaffLanguageJsonConverter : JsonConverter<EdFiStaffLanguage>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiStaffLanguage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStaffLanguage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> languageDescriptor = default;
            Option<List<EdFiStaffLanguageUse>?> uses = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "languageDescriptor":
                            languageDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "uses":
                            uses = new Option<List<EdFiStaffLanguageUse>?>(JsonSerializer.Deserialize<List<EdFiStaffLanguageUse>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!languageDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffLanguage.", nameof(languageDescriptor));

            if (languageDescriptor.IsSet && languageDescriptor.Value == null)
                throw new ArgumentNullException(nameof(languageDescriptor), "Property is not nullable for class EdFiStaffLanguage.");

            if (uses.IsSet && uses.Value == null)
                throw new ArgumentNullException(nameof(uses), "Property is not nullable for class EdFiStaffLanguage.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStaffLanguage.");

            return new EdFiStaffLanguage(languageDescriptor.Value!, uses, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStaffLanguage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffLanguage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStaffLanguage edFiStaffLanguage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStaffLanguage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStaffLanguage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffLanguage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStaffLanguage edFiStaffLanguage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStaffLanguage.LanguageDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStaffLanguage.LanguageDescriptor), "Property is required for class EdFiStaffLanguage.");

            if (edFiStaffLanguage.UsesOption.IsSet && edFiStaffLanguage.Uses == null)
                throw new ArgumentNullException(nameof(edFiStaffLanguage.Uses), "Property is required for class EdFiStaffLanguage.");

            if (edFiStaffLanguage.ExtOption.IsSet && edFiStaffLanguage.Ext == null)
                throw new ArgumentNullException(nameof(edFiStaffLanguage.Ext), "Property is required for class EdFiStaffLanguage.");

            writer.WriteString("languageDescriptor", edFiStaffLanguage.LanguageDescriptor);

            if (edFiStaffLanguage.UsesOption.IsSet)
            {
                writer.WritePropertyName("uses");
                JsonSerializer.Serialize(writer, edFiStaffLanguage.Uses, jsonSerializerOptions);
            }
            if (edFiStaffLanguage.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStaffLanguage.Ext, jsonSerializerOptions);
            }
        }
    }
}
