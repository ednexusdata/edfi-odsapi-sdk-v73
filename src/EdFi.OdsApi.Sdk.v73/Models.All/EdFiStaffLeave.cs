// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStaffLeave
    /// </summary>
    public partial class EdFiStaffLeave : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffLeave" /> class.
        /// </summary>
        /// <param name="beginDate">The begin date of the staff leave.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="staffLeaveEventCategoryDescriptor">The code describing the type of leave taken.</param>
        /// <param name="staffReference">staffReference</param>
        /// <param name="id">id</param>
        /// <param name="endDate">The end date of the staff leave.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="reason">Expanded reason for the staff leave.</param>
        /// <param name="substituteAssigned">Indicator of whether a substitute was assigned during the period of staff leave.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StaffLeave entity.</param>
        [JsonConstructor]
        public EdFiStaffLeave(DateOnly beginDate, string staffLeaveEventCategoryDescriptor, EdFiStaffReference staffReference, Option<string?> id = default, Option<DateOnly?> endDate = default, Option<string?> reason = default, Option<bool?> substituteAssigned = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            BeginDate = beginDate;
            StaffLeaveEventCategoryDescriptor = staffLeaveEventCategoryDescriptor;
            StaffReference = staffReference;
            IdOption = id;
            EndDateOption = endDate;
            ReasonOption = reason;
            SubstituteAssignedOption = substituteAssigned;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The begin date of the staff leave.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The begin date of the staff leave.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// The code describing the type of leave taken.
        /// </summary>
        /// <value>The code describing the type of leave taken.</value>
        [JsonPropertyName("staffLeaveEventCategoryDescriptor")]
        public string StaffLeaveEventCategoryDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [JsonPropertyName("staffReference")]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The end date of the staff leave.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The end date of the staff leave.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonOption { get; private set; }

        /// <summary>
        /// Expanded reason for the staff leave.
        /// </summary>
        /// <value>Expanded reason for the staff leave.</value>
        [JsonPropertyName("reason")]
        public string? Reason { get { return this.ReasonOption; } set { this.ReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubstituteAssigned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SubstituteAssignedOption { get; private set; }

        /// <summary>
        /// Indicator of whether a substitute was assigned during the period of staff leave.
        /// </summary>
        /// <value>Indicator of whether a substitute was assigned during the period of staff leave.</value>
        [JsonPropertyName("substituteAssigned")]
        public bool? SubstituteAssigned { get { return this.SubstituteAssignedOption; } set { this.SubstituteAssignedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StaffLeave entity.
        /// </summary>
        /// <value>Extensions to the StaffLeave entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffLeave {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  StaffLeaveEventCategoryDescriptor: ").Append(StaffLeaveEventCategoryDescriptor).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  SubstituteAssigned: ").Append(SubstituteAssigned).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StaffLeaveEventCategoryDescriptor (string) maxLength
            if (this.StaffLeaveEventCategoryDescriptor != null && this.StaffLeaveEventCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for StaffLeaveEventCategoryDescriptor, length must be less than 306.", new [] { "StaffLeaveEventCategoryDescriptor" });
            }

            // Reason (string) maxLength
            if (this.Reason != null && this.Reason.Length > 40)
            {
                yield return new ValidationResult("Invalid value for Reason, length must be less than 40.", new [] { "Reason" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStaffLeave" />
    /// </summary>
    public class EdFiStaffLeaveJsonConverter : JsonConverter<EdFiStaffLeave>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStaffLeave" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStaffLeave Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> beginDate = default;
            Option<string?> staffLeaveEventCategoryDescriptor = default;
            Option<EdFiStaffReference?> staffReference = default;
            Option<string?> id = default;
            Option<DateOnly?> endDate = default;
            Option<string?> reason = default;
            Option<bool?> substituteAssigned = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "staffLeaveEventCategoryDescriptor":
                            staffLeaveEventCategoryDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "staffReference":
                            staffReference = new Option<EdFiStaffReference?>(JsonSerializer.Deserialize<EdFiStaffReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "reason":
                            reason = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "substituteAssigned":
                            substituteAssigned = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffLeave.", nameof(beginDate));

            if (!staffLeaveEventCategoryDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffLeave.", nameof(staffLeaveEventCategoryDescriptor));

            if (!staffReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffLeave.", nameof(staffReference));

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiStaffLeave.");

            if (staffLeaveEventCategoryDescriptor.IsSet && staffLeaveEventCategoryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(staffLeaveEventCategoryDescriptor), "Property is not nullable for class EdFiStaffLeave.");

            if (staffReference.IsSet && staffReference.Value == null)
                throw new ArgumentNullException(nameof(staffReference), "Property is not nullable for class EdFiStaffLeave.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStaffLeave.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStaffLeave.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStaffLeave.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStaffLeave.");

            return new EdFiStaffLeave(beginDate.Value!.Value!, staffLeaveEventCategoryDescriptor.Value!, staffReference.Value!, id, endDate, reason, substituteAssigned, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStaffLeave" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffLeave"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStaffLeave edFiStaffLeave, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStaffLeave, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStaffLeave" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffLeave"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStaffLeave edFiStaffLeave, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStaffLeave.StaffLeaveEventCategoryDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStaffLeave.StaffLeaveEventCategoryDescriptor), "Property is required for class EdFiStaffLeave.");

            if (edFiStaffLeave.StaffReference == null)
                throw new ArgumentNullException(nameof(edFiStaffLeave.StaffReference), "Property is required for class EdFiStaffLeave.");

            if (edFiStaffLeave.IdOption.IsSet && edFiStaffLeave.Id == null)
                throw new ArgumentNullException(nameof(edFiStaffLeave.Id), "Property is required for class EdFiStaffLeave.");

            if (edFiStaffLeave.EtagOption.IsSet && edFiStaffLeave.Etag == null)
                throw new ArgumentNullException(nameof(edFiStaffLeave.Etag), "Property is required for class EdFiStaffLeave.");

            if (edFiStaffLeave.ExtOption.IsSet && edFiStaffLeave.Ext == null)
                throw new ArgumentNullException(nameof(edFiStaffLeave.Ext), "Property is required for class EdFiStaffLeave.");

            writer.WriteString("beginDate", edFiStaffLeave.BeginDate.ToString(BeginDateFormat));

            writer.WriteString("staffLeaveEventCategoryDescriptor", edFiStaffLeave.StaffLeaveEventCategoryDescriptor);

            writer.WritePropertyName("staffReference");
            JsonSerializer.Serialize(writer, edFiStaffLeave.StaffReference, jsonSerializerOptions);
            if (edFiStaffLeave.IdOption.IsSet)
                writer.WriteString("id", edFiStaffLeave.Id);

            if (edFiStaffLeave.EndDateOption.IsSet)
                if (edFiStaffLeave.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiStaffLeave.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiStaffLeave.ReasonOption.IsSet)
                if (edFiStaffLeave.ReasonOption.Value != null)
                    writer.WriteString("reason", edFiStaffLeave.Reason);
                else
                    writer.WriteNull("reason");

            if (edFiStaffLeave.SubstituteAssignedOption.IsSet)
                if (edFiStaffLeave.SubstituteAssignedOption.Value != null)
                    writer.WriteBoolean("substituteAssigned", edFiStaffLeave.SubstituteAssignedOption.Value!.Value);
                else
                    writer.WriteNull("substituteAssigned");

            if (edFiStaffLeave.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStaffLeave.Etag);

            if (edFiStaffLeave.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStaffLeave.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStaffLeave.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStaffLeave.Ext, jsonSerializerOptions);
            }
        }
    }
}
