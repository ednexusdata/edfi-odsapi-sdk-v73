// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStaffRecognition
    /// </summary>
    public partial class EdFiStaffRecognition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffRecognition" /> class.
        /// </summary>
        /// <param name="recognitionTypeDescriptor">The nature of recognition given to the individual for accomplishments in a co-curricular, or extra-curricular activity.</param>
        /// <param name="achievementCategoryDescriptor">The category of achievement attributed to the individual.</param>
        /// <param name="achievementCategorySystem">The system that defines the categories by which an achievement is attributed to the individual.</param>
        /// <param name="achievementTitle">The title assigned to the achievement.</param>
        /// <param name="criteria">The criteria for competency-based completion of the achievement/award.</param>
        /// <param name="criteriaURL">The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.</param>
        /// <param name="evidenceStatement">A statement or reference describing the evidence that the individual met the criteria for attainment of the achievement/award.</param>
        /// <param name="imageURL">The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the achievement/award.</param>
        /// <param name="issuerName">The name of the agent, entity, or institution issuing the element.</param>
        /// <param name="issuerOriginURL">The Uniform Resource Locator (URL) from which the award was issued.</param>
        /// <param name="recognitionAwardDate">The date the recognition was awarded or earned.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="recognitionAwardExpiresDate">Date on which the recognition expires.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="recognitionDescription">A description of the type of recognition earned by or awarded to the individual.</param>
        /// <param name="ext">Extensions to the StaffRecognition entity.</param>
        [JsonConstructor]
        public EdFiStaffRecognition(string recognitionTypeDescriptor, Option<string?> achievementCategoryDescriptor = default, Option<string?> achievementCategorySystem = default, Option<string?> achievementTitle = default, Option<string?> criteria = default, Option<string?> criteriaURL = default, Option<string?> evidenceStatement = default, Option<string?> imageURL = default, Option<string?> issuerName = default, Option<string?> issuerOriginURL = default, Option<DateOnly?> recognitionAwardDate = default, Option<DateOnly?> recognitionAwardExpiresDate = default, Option<string?> recognitionDescription = default, Option<Object?> ext = default)
        {
            RecognitionTypeDescriptor = recognitionTypeDescriptor;
            AchievementCategoryDescriptorOption = achievementCategoryDescriptor;
            AchievementCategorySystemOption = achievementCategorySystem;
            AchievementTitleOption = achievementTitle;
            CriteriaOption = criteria;
            CriteriaURLOption = criteriaURL;
            EvidenceStatementOption = evidenceStatement;
            ImageURLOption = imageURL;
            IssuerNameOption = issuerName;
            IssuerOriginURLOption = issuerOriginURL;
            RecognitionAwardDateOption = recognitionAwardDate;
            RecognitionAwardExpiresDateOption = recognitionAwardExpiresDate;
            RecognitionDescriptionOption = recognitionDescription;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The nature of recognition given to the individual for accomplishments in a co-curricular, or extra-curricular activity.
        /// </summary>
        /// <value>The nature of recognition given to the individual for accomplishments in a co-curricular, or extra-curricular activity.</value>
        [JsonPropertyName("recognitionTypeDescriptor")]
        public string RecognitionTypeDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of AchievementCategoryDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AchievementCategoryDescriptorOption { get; private set; }

        /// <summary>
        /// The category of achievement attributed to the individual.
        /// </summary>
        /// <value>The category of achievement attributed to the individual.</value>
        [JsonPropertyName("achievementCategoryDescriptor")]
        public string? AchievementCategoryDescriptor { get { return this.AchievementCategoryDescriptorOption; } set { this.AchievementCategoryDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of AchievementCategorySystem
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AchievementCategorySystemOption { get; private set; }

        /// <summary>
        /// The system that defines the categories by which an achievement is attributed to the individual.
        /// </summary>
        /// <value>The system that defines the categories by which an achievement is attributed to the individual.</value>
        [JsonPropertyName("achievementCategorySystem")]
        public string? AchievementCategorySystem { get { return this.AchievementCategorySystemOption; } set { this.AchievementCategorySystemOption = new(value); } }

        /// <summary>
        /// Used to track the state of AchievementTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AchievementTitleOption { get; private set; }

        /// <summary>
        /// The title assigned to the achievement.
        /// </summary>
        /// <value>The title assigned to the achievement.</value>
        [JsonPropertyName("achievementTitle")]
        public string? AchievementTitle { get { return this.AchievementTitleOption; } set { this.AchievementTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Criteria
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CriteriaOption { get; private set; }

        /// <summary>
        /// The criteria for competency-based completion of the achievement/award.
        /// </summary>
        /// <value>The criteria for competency-based completion of the achievement/award.</value>
        [JsonPropertyName("criteria")]
        public string? Criteria { get { return this.CriteriaOption; } set { this.CriteriaOption = new(value); } }

        /// <summary>
        /// Used to track the state of CriteriaURL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CriteriaURLOption { get; private set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        /// </summary>
        /// <value>The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.</value>
        [JsonPropertyName("criteriaURL")]
        public string? CriteriaURL { get { return this.CriteriaURLOption; } set { this.CriteriaURLOption = new(value); } }

        /// <summary>
        /// Used to track the state of EvidenceStatement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EvidenceStatementOption { get; private set; }

        /// <summary>
        /// A statement or reference describing the evidence that the individual met the criteria for attainment of the achievement/award.
        /// </summary>
        /// <value>A statement or reference describing the evidence that the individual met the criteria for attainment of the achievement/award.</value>
        [JsonPropertyName("evidenceStatement")]
        public string? EvidenceStatement { get { return this.EvidenceStatementOption; } set { this.EvidenceStatementOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImageURL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ImageURLOption { get; private set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the achievement/award.
        /// </summary>
        /// <value>The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the achievement/award.</value>
        [JsonPropertyName("imageURL")]
        public string? ImageURL { get { return this.ImageURLOption; } set { this.ImageURLOption = new(value); } }

        /// <summary>
        /// Used to track the state of IssuerName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IssuerNameOption { get; private set; }

        /// <summary>
        /// The name of the agent, entity, or institution issuing the element.
        /// </summary>
        /// <value>The name of the agent, entity, or institution issuing the element.</value>
        [JsonPropertyName("issuerName")]
        public string? IssuerName { get { return this.IssuerNameOption; } set { this.IssuerNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of IssuerOriginURL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IssuerOriginURLOption { get; private set; }

        /// <summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        /// </summary>
        /// <value>The Uniform Resource Locator (URL) from which the award was issued.</value>
        [JsonPropertyName("issuerOriginURL")]
        public string? IssuerOriginURL { get { return this.IssuerOriginURLOption; } set { this.IssuerOriginURLOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecognitionAwardDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> RecognitionAwardDateOption { get; private set; }

        /// <summary>
        /// The date the recognition was awarded or earned.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The date the recognition was awarded or earned.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("recognitionAwardDate")]
        public DateOnly? RecognitionAwardDate { get { return this.RecognitionAwardDateOption; } set { this.RecognitionAwardDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecognitionAwardExpiresDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> RecognitionAwardExpiresDateOption { get; private set; }

        /// <summary>
        /// Date on which the recognition expires.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Date on which the recognition expires.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("recognitionAwardExpiresDate")]
        public DateOnly? RecognitionAwardExpiresDate { get { return this.RecognitionAwardExpiresDateOption; } set { this.RecognitionAwardExpiresDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecognitionDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RecognitionDescriptionOption { get; private set; }

        /// <summary>
        /// A description of the type of recognition earned by or awarded to the individual.
        /// </summary>
        /// <value>A description of the type of recognition earned by or awarded to the individual.</value>
        [JsonPropertyName("recognitionDescription")]
        public string? RecognitionDescription { get { return this.RecognitionDescriptionOption; } set { this.RecognitionDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StaffRecognition entity.
        /// </summary>
        /// <value>Extensions to the StaffRecognition entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffRecognition {\n");
            sb.Append("  RecognitionTypeDescriptor: ").Append(RecognitionTypeDescriptor).Append("\n");
            sb.Append("  AchievementCategoryDescriptor: ").Append(AchievementCategoryDescriptor).Append("\n");
            sb.Append("  AchievementCategorySystem: ").Append(AchievementCategorySystem).Append("\n");
            sb.Append("  AchievementTitle: ").Append(AchievementTitle).Append("\n");
            sb.Append("  Criteria: ").Append(Criteria).Append("\n");
            sb.Append("  CriteriaURL: ").Append(CriteriaURL).Append("\n");
            sb.Append("  EvidenceStatement: ").Append(EvidenceStatement).Append("\n");
            sb.Append("  ImageURL: ").Append(ImageURL).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  IssuerOriginURL: ").Append(IssuerOriginURL).Append("\n");
            sb.Append("  RecognitionAwardDate: ").Append(RecognitionAwardDate).Append("\n");
            sb.Append("  RecognitionAwardExpiresDate: ").Append(RecognitionAwardExpiresDate).Append("\n");
            sb.Append("  RecognitionDescription: ").Append(RecognitionDescription).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RecognitionTypeDescriptor (string) maxLength
            if (this.RecognitionTypeDescriptor != null && this.RecognitionTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for RecognitionTypeDescriptor, length must be less than 306.", new [] { "RecognitionTypeDescriptor" });
            }

            // AchievementCategoryDescriptor (string) maxLength
            if (this.AchievementCategoryDescriptor != null && this.AchievementCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AchievementCategoryDescriptor, length must be less than 306.", new [] { "AchievementCategoryDescriptor" });
            }

            // AchievementCategorySystem (string) maxLength
            if (this.AchievementCategorySystem != null && this.AchievementCategorySystem.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AchievementCategorySystem, length must be less than 60.", new [] { "AchievementCategorySystem" });
            }

            // AchievementTitle (string) maxLength
            if (this.AchievementTitle != null && this.AchievementTitle.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AchievementTitle, length must be less than 60.", new [] { "AchievementTitle" });
            }

            // Criteria (string) maxLength
            if (this.Criteria != null && this.Criteria.Length > 150)
            {
                yield return new ValidationResult("Invalid value for Criteria, length must be less than 150.", new [] { "Criteria" });
            }

            // CriteriaURL (string) maxLength
            if (this.CriteriaURL != null && this.CriteriaURL.Length > 255)
            {
                yield return new ValidationResult("Invalid value for CriteriaURL, length must be less than 255.", new [] { "CriteriaURL" });
            }

            // CriteriaURL (string) minLength
            if (this.CriteriaURL != null && this.CriteriaURL.Length < 5)
            {
                yield return new ValidationResult("Invalid value for CriteriaURL, length must be greater than 5.", new [] { "CriteriaURL" });
            }

            // EvidenceStatement (string) maxLength
            if (this.EvidenceStatement != null && this.EvidenceStatement.Length > 150)
            {
                yield return new ValidationResult("Invalid value for EvidenceStatement, length must be less than 150.", new [] { "EvidenceStatement" });
            }

            // ImageURL (string) maxLength
            if (this.ImageURL != null && this.ImageURL.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ImageURL, length must be less than 255.", new [] { "ImageURL" });
            }

            // ImageURL (string) minLength
            if (this.ImageURL != null && this.ImageURL.Length < 5)
            {
                yield return new ValidationResult("Invalid value for ImageURL, length must be greater than 5.", new [] { "ImageURL" });
            }

            // IssuerName (string) maxLength
            if (this.IssuerName != null && this.IssuerName.Length > 150)
            {
                yield return new ValidationResult("Invalid value for IssuerName, length must be less than 150.", new [] { "IssuerName" });
            }

            // IssuerOriginURL (string) maxLength
            if (this.IssuerOriginURL != null && this.IssuerOriginURL.Length > 255)
            {
                yield return new ValidationResult("Invalid value for IssuerOriginURL, length must be less than 255.", new [] { "IssuerOriginURL" });
            }

            // IssuerOriginURL (string) minLength
            if (this.IssuerOriginURL != null && this.IssuerOriginURL.Length < 5)
            {
                yield return new ValidationResult("Invalid value for IssuerOriginURL, length must be greater than 5.", new [] { "IssuerOriginURL" });
            }

            // RecognitionDescription (string) maxLength
            if (this.RecognitionDescription != null && this.RecognitionDescription.Length > 80)
            {
                yield return new ValidationResult("Invalid value for RecognitionDescription, length must be less than 80.", new [] { "RecognitionDescription" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStaffRecognition" />
    /// </summary>
    public class EdFiStaffRecognitionJsonConverter : JsonConverter<EdFiStaffRecognition>
    {
        /// <summary>
        /// The format to use to serialize RecognitionAwardDate
        /// </summary>
        public static string RecognitionAwardDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize RecognitionAwardExpiresDate
        /// </summary>
        public static string RecognitionAwardExpiresDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStaffRecognition" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStaffRecognition Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> recognitionTypeDescriptor = default;
            Option<string?> achievementCategoryDescriptor = default;
            Option<string?> achievementCategorySystem = default;
            Option<string?> achievementTitle = default;
            Option<string?> criteria = default;
            Option<string?> criteriaURL = default;
            Option<string?> evidenceStatement = default;
            Option<string?> imageURL = default;
            Option<string?> issuerName = default;
            Option<string?> issuerOriginURL = default;
            Option<DateOnly?> recognitionAwardDate = default;
            Option<DateOnly?> recognitionAwardExpiresDate = default;
            Option<string?> recognitionDescription = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "recognitionTypeDescriptor":
                            recognitionTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "achievementCategoryDescriptor":
                            achievementCategoryDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "achievementCategorySystem":
                            achievementCategorySystem = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "achievementTitle":
                            achievementTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "criteria":
                            criteria = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "criteriaURL":
                            criteriaURL = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "evidenceStatement":
                            evidenceStatement = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "imageURL":
                            imageURL = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "issuerName":
                            issuerName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "issuerOriginURL":
                            issuerOriginURL = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "recognitionAwardDate":
                            recognitionAwardDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recognitionAwardExpiresDate":
                            recognitionAwardExpiresDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recognitionDescription":
                            recognitionDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!recognitionTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffRecognition.", nameof(recognitionTypeDescriptor));

            if (recognitionTypeDescriptor.IsSet && recognitionTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(recognitionTypeDescriptor), "Property is not nullable for class EdFiStaffRecognition.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStaffRecognition.");

            return new EdFiStaffRecognition(recognitionTypeDescriptor.Value!, achievementCategoryDescriptor, achievementCategorySystem, achievementTitle, criteria, criteriaURL, evidenceStatement, imageURL, issuerName, issuerOriginURL, recognitionAwardDate, recognitionAwardExpiresDate, recognitionDescription, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStaffRecognition" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffRecognition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStaffRecognition edFiStaffRecognition, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStaffRecognition, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStaffRecognition" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffRecognition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStaffRecognition edFiStaffRecognition, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStaffRecognition.RecognitionTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStaffRecognition.RecognitionTypeDescriptor), "Property is required for class EdFiStaffRecognition.");

            if (edFiStaffRecognition.ExtOption.IsSet && edFiStaffRecognition.Ext == null)
                throw new ArgumentNullException(nameof(edFiStaffRecognition.Ext), "Property is required for class EdFiStaffRecognition.");

            writer.WriteString("recognitionTypeDescriptor", edFiStaffRecognition.RecognitionTypeDescriptor);

            if (edFiStaffRecognition.AchievementCategoryDescriptorOption.IsSet)
                if (edFiStaffRecognition.AchievementCategoryDescriptorOption.Value != null)
                    writer.WriteString("achievementCategoryDescriptor", edFiStaffRecognition.AchievementCategoryDescriptor);
                else
                    writer.WriteNull("achievementCategoryDescriptor");

            if (edFiStaffRecognition.AchievementCategorySystemOption.IsSet)
                if (edFiStaffRecognition.AchievementCategorySystemOption.Value != null)
                    writer.WriteString("achievementCategorySystem", edFiStaffRecognition.AchievementCategorySystem);
                else
                    writer.WriteNull("achievementCategorySystem");

            if (edFiStaffRecognition.AchievementTitleOption.IsSet)
                if (edFiStaffRecognition.AchievementTitleOption.Value != null)
                    writer.WriteString("achievementTitle", edFiStaffRecognition.AchievementTitle);
                else
                    writer.WriteNull("achievementTitle");

            if (edFiStaffRecognition.CriteriaOption.IsSet)
                if (edFiStaffRecognition.CriteriaOption.Value != null)
                    writer.WriteString("criteria", edFiStaffRecognition.Criteria);
                else
                    writer.WriteNull("criteria");

            if (edFiStaffRecognition.CriteriaURLOption.IsSet)
                if (edFiStaffRecognition.CriteriaURLOption.Value != null)
                    writer.WriteString("criteriaURL", edFiStaffRecognition.CriteriaURL);
                else
                    writer.WriteNull("criteriaURL");

            if (edFiStaffRecognition.EvidenceStatementOption.IsSet)
                if (edFiStaffRecognition.EvidenceStatementOption.Value != null)
                    writer.WriteString("evidenceStatement", edFiStaffRecognition.EvidenceStatement);
                else
                    writer.WriteNull("evidenceStatement");

            if (edFiStaffRecognition.ImageURLOption.IsSet)
                if (edFiStaffRecognition.ImageURLOption.Value != null)
                    writer.WriteString("imageURL", edFiStaffRecognition.ImageURL);
                else
                    writer.WriteNull("imageURL");

            if (edFiStaffRecognition.IssuerNameOption.IsSet)
                if (edFiStaffRecognition.IssuerNameOption.Value != null)
                    writer.WriteString("issuerName", edFiStaffRecognition.IssuerName);
                else
                    writer.WriteNull("issuerName");

            if (edFiStaffRecognition.IssuerOriginURLOption.IsSet)
                if (edFiStaffRecognition.IssuerOriginURLOption.Value != null)
                    writer.WriteString("issuerOriginURL", edFiStaffRecognition.IssuerOriginURL);
                else
                    writer.WriteNull("issuerOriginURL");

            if (edFiStaffRecognition.RecognitionAwardDateOption.IsSet)
                if (edFiStaffRecognition.RecognitionAwardDateOption.Value != null)
                    writer.WriteString("recognitionAwardDate", edFiStaffRecognition.RecognitionAwardDateOption.Value!.Value.ToString(RecognitionAwardDateFormat));
                else
                    writer.WriteNull("recognitionAwardDate");

            if (edFiStaffRecognition.RecognitionAwardExpiresDateOption.IsSet)
                if (edFiStaffRecognition.RecognitionAwardExpiresDateOption.Value != null)
                    writer.WriteString("recognitionAwardExpiresDate", edFiStaffRecognition.RecognitionAwardExpiresDateOption.Value!.Value.ToString(RecognitionAwardExpiresDateFormat));
                else
                    writer.WriteNull("recognitionAwardExpiresDate");

            if (edFiStaffRecognition.RecognitionDescriptionOption.IsSet)
                if (edFiStaffRecognition.RecognitionDescriptionOption.Value != null)
                    writer.WriteString("recognitionDescription", edFiStaffRecognition.RecognitionDescription);
                else
                    writer.WriteNull("recognitionDescription");

            if (edFiStaffRecognition.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStaffRecognition.Ext, jsonSerializerOptions);
            }
        }
    }
}
