// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStaffSchoolAssociation
    /// </summary>
    public partial class EdFiStaffSchoolAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffSchoolAssociation" /> class.
        /// </summary>
        /// <param name="programAssignmentDescriptor">The name of the program for which the individual is assigned.</param>
        /// <param name="schoolReference">schoolReference</param>
        /// <param name="staffReference">staffReference</param>
        /// <param name="id">id</param>
        /// <param name="calendarReference">calendarReference</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference</param>
        /// <param name="academicSubjects">An unordered collection of staffSchoolAssociationAcademicSubjects. The academic subjects the individual is eligible to teach.</param>
        /// <param name="gradeLevels">An unordered collection of staffSchoolAssociationGradeLevels. The grade levels the individual is eligible to teach.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StaffSchoolAssociation entity.</param>
        [JsonConstructor]
        public EdFiStaffSchoolAssociation(string programAssignmentDescriptor, EdFiSchoolReference schoolReference, EdFiStaffReference staffReference, Option<string?> id = default, Option<EdFiCalendarReference?> calendarReference = default, Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default, Option<List<EdFiStaffSchoolAssociationAcademicSubject>?> academicSubjects = default, Option<List<EdFiStaffSchoolAssociationGradeLevel>?> gradeLevels = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            ProgramAssignmentDescriptor = programAssignmentDescriptor;
            SchoolReference = schoolReference;
            StaffReference = staffReference;
            IdOption = id;
            CalendarReferenceOption = calendarReference;
            SchoolYearTypeReferenceOption = schoolYearTypeReference;
            AcademicSubjectsOption = academicSubjects;
            GradeLevelsOption = gradeLevels;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name of the program for which the individual is assigned.
        /// </summary>
        /// <value>The name of the program for which the individual is assigned.</value>
        [JsonPropertyName("programAssignmentDescriptor")]
        public string ProgramAssignmentDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [JsonPropertyName("schoolReference")]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [JsonPropertyName("staffReference")]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CalendarReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiCalendarReference?> CalendarReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets CalendarReference
        /// </summary>
        [JsonPropertyName("calendarReference")]
        public EdFiCalendarReference? CalendarReference { get { return this.CalendarReferenceOption; } set { this.CalendarReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of SchoolYearTypeReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiSchoolYearTypeReference?> SchoolYearTypeReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [JsonPropertyName("schoolYearTypeReference")]
        public EdFiSchoolYearTypeReference? SchoolYearTypeReference { get { return this.SchoolYearTypeReferenceOption; } set { this.SchoolYearTypeReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AcademicSubjects
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffSchoolAssociationAcademicSubject>?> AcademicSubjectsOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffSchoolAssociationAcademicSubjects. The academic subjects the individual is eligible to teach.
        /// </summary>
        /// <value>An unordered collection of staffSchoolAssociationAcademicSubjects. The academic subjects the individual is eligible to teach.</value>
        [JsonPropertyName("academicSubjects")]
        public List<EdFiStaffSchoolAssociationAcademicSubject>? AcademicSubjects { get { return this.AcademicSubjectsOption; } set { this.AcademicSubjectsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStaffSchoolAssociationGradeLevel>?> GradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of staffSchoolAssociationGradeLevels. The grade levels the individual is eligible to teach.
        /// </summary>
        /// <value>An unordered collection of staffSchoolAssociationGradeLevels. The grade levels the individual is eligible to teach.</value>
        [JsonPropertyName("gradeLevels")]
        public List<EdFiStaffSchoolAssociationGradeLevel>? GradeLevels { get { return this.GradeLevelsOption; } set { this.GradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StaffSchoolAssociation entity.
        /// </summary>
        /// <value>Extensions to the StaffSchoolAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffSchoolAssociation {\n");
            sb.Append("  ProgramAssignmentDescriptor: ").Append(ProgramAssignmentDescriptor).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CalendarReference: ").Append(CalendarReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramAssignmentDescriptor (string) maxLength
            if (this.ProgramAssignmentDescriptor != null && this.ProgramAssignmentDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramAssignmentDescriptor, length must be less than 306.", new [] { "ProgramAssignmentDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStaffSchoolAssociation" />
    /// </summary>
    public class EdFiStaffSchoolAssociationJsonConverter : JsonConverter<EdFiStaffSchoolAssociation>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStaffSchoolAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStaffSchoolAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> programAssignmentDescriptor = default;
            Option<EdFiSchoolReference?> schoolReference = default;
            Option<EdFiStaffReference?> staffReference = default;
            Option<string?> id = default;
            Option<EdFiCalendarReference?> calendarReference = default;
            Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default;
            Option<List<EdFiStaffSchoolAssociationAcademicSubject>?> academicSubjects = default;
            Option<List<EdFiStaffSchoolAssociationGradeLevel>?> gradeLevels = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "programAssignmentDescriptor":
                            programAssignmentDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schoolReference":
                            schoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "staffReference":
                            staffReference = new Option<EdFiStaffReference?>(JsonSerializer.Deserialize<EdFiStaffReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "calendarReference":
                            calendarReference = new Option<EdFiCalendarReference?>(JsonSerializer.Deserialize<EdFiCalendarReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "schoolYearTypeReference":
                            schoolYearTypeReference = new Option<EdFiSchoolYearTypeReference?>(JsonSerializer.Deserialize<EdFiSchoolYearTypeReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "academicSubjects":
                            academicSubjects = new Option<List<EdFiStaffSchoolAssociationAcademicSubject>?>(JsonSerializer.Deserialize<List<EdFiStaffSchoolAssociationAcademicSubject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "gradeLevels":
                            gradeLevels = new Option<List<EdFiStaffSchoolAssociationGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiStaffSchoolAssociationGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!programAssignmentDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffSchoolAssociation.", nameof(programAssignmentDescriptor));

            if (!schoolReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffSchoolAssociation.", nameof(schoolReference));

            if (!staffReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffSchoolAssociation.", nameof(staffReference));

            if (programAssignmentDescriptor.IsSet && programAssignmentDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programAssignmentDescriptor), "Property is not nullable for class EdFiStaffSchoolAssociation.");

            if (schoolReference.IsSet && schoolReference.Value == null)
                throw new ArgumentNullException(nameof(schoolReference), "Property is not nullable for class EdFiStaffSchoolAssociation.");

            if (staffReference.IsSet && staffReference.Value == null)
                throw new ArgumentNullException(nameof(staffReference), "Property is not nullable for class EdFiStaffSchoolAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStaffSchoolAssociation.");

            if (calendarReference.IsSet && calendarReference.Value == null)
                throw new ArgumentNullException(nameof(calendarReference), "Property is not nullable for class EdFiStaffSchoolAssociation.");

            if (schoolYearTypeReference.IsSet && schoolYearTypeReference.Value == null)
                throw new ArgumentNullException(nameof(schoolYearTypeReference), "Property is not nullable for class EdFiStaffSchoolAssociation.");

            if (academicSubjects.IsSet && academicSubjects.Value == null)
                throw new ArgumentNullException(nameof(academicSubjects), "Property is not nullable for class EdFiStaffSchoolAssociation.");

            if (gradeLevels.IsSet && gradeLevels.Value == null)
                throw new ArgumentNullException(nameof(gradeLevels), "Property is not nullable for class EdFiStaffSchoolAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStaffSchoolAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStaffSchoolAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStaffSchoolAssociation.");

            return new EdFiStaffSchoolAssociation(programAssignmentDescriptor.Value!, schoolReference.Value!, staffReference.Value!, id, calendarReference, schoolYearTypeReference, academicSubjects, gradeLevels, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStaffSchoolAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffSchoolAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStaffSchoolAssociation edFiStaffSchoolAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStaffSchoolAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStaffSchoolAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffSchoolAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStaffSchoolAssociation edFiStaffSchoolAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStaffSchoolAssociation.ProgramAssignmentDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStaffSchoolAssociation.ProgramAssignmentDescriptor), "Property is required for class EdFiStaffSchoolAssociation.");

            if (edFiStaffSchoolAssociation.SchoolReference == null)
                throw new ArgumentNullException(nameof(edFiStaffSchoolAssociation.SchoolReference), "Property is required for class EdFiStaffSchoolAssociation.");

            if (edFiStaffSchoolAssociation.StaffReference == null)
                throw new ArgumentNullException(nameof(edFiStaffSchoolAssociation.StaffReference), "Property is required for class EdFiStaffSchoolAssociation.");

            if (edFiStaffSchoolAssociation.IdOption.IsSet && edFiStaffSchoolAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStaffSchoolAssociation.Id), "Property is required for class EdFiStaffSchoolAssociation.");

            if (edFiStaffSchoolAssociation.CalendarReferenceOption.IsSet && edFiStaffSchoolAssociation.CalendarReference == null)
                throw new ArgumentNullException(nameof(edFiStaffSchoolAssociation.CalendarReference), "Property is required for class EdFiStaffSchoolAssociation.");

            if (edFiStaffSchoolAssociation.SchoolYearTypeReferenceOption.IsSet && edFiStaffSchoolAssociation.SchoolYearTypeReference == null)
                throw new ArgumentNullException(nameof(edFiStaffSchoolAssociation.SchoolYearTypeReference), "Property is required for class EdFiStaffSchoolAssociation.");

            if (edFiStaffSchoolAssociation.AcademicSubjectsOption.IsSet && edFiStaffSchoolAssociation.AcademicSubjects == null)
                throw new ArgumentNullException(nameof(edFiStaffSchoolAssociation.AcademicSubjects), "Property is required for class EdFiStaffSchoolAssociation.");

            if (edFiStaffSchoolAssociation.GradeLevelsOption.IsSet && edFiStaffSchoolAssociation.GradeLevels == null)
                throw new ArgumentNullException(nameof(edFiStaffSchoolAssociation.GradeLevels), "Property is required for class EdFiStaffSchoolAssociation.");

            if (edFiStaffSchoolAssociation.EtagOption.IsSet && edFiStaffSchoolAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStaffSchoolAssociation.Etag), "Property is required for class EdFiStaffSchoolAssociation.");

            if (edFiStaffSchoolAssociation.ExtOption.IsSet && edFiStaffSchoolAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStaffSchoolAssociation.Ext), "Property is required for class EdFiStaffSchoolAssociation.");

            writer.WriteString("programAssignmentDescriptor", edFiStaffSchoolAssociation.ProgramAssignmentDescriptor);

            writer.WritePropertyName("schoolReference");
            JsonSerializer.Serialize(writer, edFiStaffSchoolAssociation.SchoolReference, jsonSerializerOptions);
            writer.WritePropertyName("staffReference");
            JsonSerializer.Serialize(writer, edFiStaffSchoolAssociation.StaffReference, jsonSerializerOptions);
            if (edFiStaffSchoolAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStaffSchoolAssociation.Id);

            if (edFiStaffSchoolAssociation.CalendarReferenceOption.IsSet)
            {
                writer.WritePropertyName("calendarReference");
                JsonSerializer.Serialize(writer, edFiStaffSchoolAssociation.CalendarReference, jsonSerializerOptions);
            }
            if (edFiStaffSchoolAssociation.SchoolYearTypeReferenceOption.IsSet)
            {
                writer.WritePropertyName("schoolYearTypeReference");
                JsonSerializer.Serialize(writer, edFiStaffSchoolAssociation.SchoolYearTypeReference, jsonSerializerOptions);
            }
            if (edFiStaffSchoolAssociation.AcademicSubjectsOption.IsSet)
            {
                writer.WritePropertyName("academicSubjects");
                JsonSerializer.Serialize(writer, edFiStaffSchoolAssociation.AcademicSubjects, jsonSerializerOptions);
            }
            if (edFiStaffSchoolAssociation.GradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("gradeLevels");
                JsonSerializer.Serialize(writer, edFiStaffSchoolAssociation.GradeLevels, jsonSerializerOptions);
            }
            if (edFiStaffSchoolAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStaffSchoolAssociation.Etag);

            if (edFiStaffSchoolAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStaffSchoolAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStaffSchoolAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStaffSchoolAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
