// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStaffSectionAssociation
    /// </summary>
    public partial class EdFiStaffSectionAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffSectionAssociation" /> class.
        /// </summary>
        /// <param name="beginDate">Month, day, and year of a teacher&#39;s assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="sectionReference">sectionReference</param>
        /// <param name="staffReference">staffReference</param>
        /// <param name="classroomPositionDescriptor">The type of position the staff member holds in the specific class/section.</param>
        /// <param name="id">id</param>
        /// <param name="endDate">Month, day, and year of the last day of a staff member&#39;s assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.</param>
        /// <param name="percentageContribution">Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.</param>
        /// <param name="teacherStudentDataLinkExclusion">Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StaffSectionAssociation entity.</param>
        [JsonConstructor]
        public EdFiStaffSectionAssociation(DateOnly beginDate, EdFiSectionReference sectionReference, EdFiStaffReference staffReference, string classroomPositionDescriptor, Option<string?> id = default, Option<DateOnly?> endDate = default, Option<bool?> highlyQualifiedTeacher = default, Option<double?> percentageContribution = default, Option<bool?> teacherStudentDataLinkExclusion = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            BeginDate = beginDate;
            SectionReference = sectionReference;
            StaffReference = staffReference;
            ClassroomPositionDescriptor = classroomPositionDescriptor;
            IdOption = id;
            EndDateOption = endDate;
            HighlyQualifiedTeacherOption = highlyQualifiedTeacher;
            PercentageContributionOption = percentageContribution;
            TeacherStudentDataLinkExclusionOption = teacherStudentDataLinkExclusion;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Month, day, and year of a teacher&#39;s assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Month, day, and year of a teacher&#39;s assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets SectionReference
        /// </summary>
        [JsonPropertyName("sectionReference")]
        public EdFiSectionReference SectionReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [JsonPropertyName("staffReference")]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// The type of position the staff member holds in the specific class/section.
        /// </summary>
        /// <value>The type of position the staff member holds in the specific class/section.</value>
        [JsonPropertyName("classroomPositionDescriptor")]
        public string ClassroomPositionDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// Month, day, and year of the last day of a staff member&#39;s assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Month, day, and year of the last day of a staff member&#39;s assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of HighlyQualifiedTeacher
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HighlyQualifiedTeacherOption { get; private set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.
        /// </summary>
        /// <value>An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.</value>
        [JsonPropertyName("highlyQualifiedTeacher")]
        public bool? HighlyQualifiedTeacher { get { return this.HighlyQualifiedTeacherOption; } set { this.HighlyQualifiedTeacherOption = new(value); } }

        /// <summary>
        /// Used to track the state of PercentageContribution
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PercentageContributionOption { get; private set; }

        /// <summary>
        /// Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.
        /// </summary>
        /// <value>Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.</value>
        [JsonPropertyName("percentageContribution")]
        public double? PercentageContribution { get { return this.PercentageContributionOption; } set { this.PercentageContributionOption = new(value); } }

        /// <summary>
        /// Used to track the state of TeacherStudentDataLinkExclusion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TeacherStudentDataLinkExclusionOption { get; private set; }

        /// <summary>
        /// Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.
        /// </summary>
        /// <value>Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.</value>
        [JsonPropertyName("teacherStudentDataLinkExclusion")]
        public bool? TeacherStudentDataLinkExclusion { get { return this.TeacherStudentDataLinkExclusionOption; } set { this.TeacherStudentDataLinkExclusionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StaffSectionAssociation entity.
        /// </summary>
        /// <value>Extensions to the StaffSectionAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStaffSectionAssociation {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  SectionReference: ").Append(SectionReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  ClassroomPositionDescriptor: ").Append(ClassroomPositionDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  HighlyQualifiedTeacher: ").Append(HighlyQualifiedTeacher).Append("\n");
            sb.Append("  PercentageContribution: ").Append(PercentageContribution).Append("\n");
            sb.Append("  TeacherStudentDataLinkExclusion: ").Append(TeacherStudentDataLinkExclusion).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClassroomPositionDescriptor (string) maxLength
            if (this.ClassroomPositionDescriptor != null && this.ClassroomPositionDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ClassroomPositionDescriptor, length must be less than 306.", new [] { "ClassroomPositionDescriptor" });
            }

            // PercentageContribution (double) maximum
            if (this.PercentageContributionOption.IsSet && this.PercentageContributionOption.Value > (double)9.9999)
            {
                yield return new ValidationResult("Invalid value for PercentageContribution, must be a value less than or equal to 9.9999.", new [] { "PercentageContribution" });
            }

            // PercentageContribution (double) minimum
            if (this.PercentageContributionOption.IsSet && this.PercentageContributionOption.Value < (double)-9.9999)
            {
                yield return new ValidationResult("Invalid value for PercentageContribution, must be a value greater than or equal to -9.9999.", new [] { "PercentageContribution" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStaffSectionAssociation" />
    /// </summary>
    public class EdFiStaffSectionAssociationJsonConverter : JsonConverter<EdFiStaffSectionAssociation>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStaffSectionAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStaffSectionAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> beginDate = default;
            Option<EdFiSectionReference?> sectionReference = default;
            Option<EdFiStaffReference?> staffReference = default;
            Option<string?> classroomPositionDescriptor = default;
            Option<string?> id = default;
            Option<DateOnly?> endDate = default;
            Option<bool?> highlyQualifiedTeacher = default;
            Option<double?> percentageContribution = default;
            Option<bool?> teacherStudentDataLinkExclusion = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sectionReference":
                            sectionReference = new Option<EdFiSectionReference?>(JsonSerializer.Deserialize<EdFiSectionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "staffReference":
                            staffReference = new Option<EdFiStaffReference?>(JsonSerializer.Deserialize<EdFiStaffReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "classroomPositionDescriptor":
                            classroomPositionDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "highlyQualifiedTeacher":
                            highlyQualifiedTeacher = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "percentageContribution":
                            percentageContribution = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "teacherStudentDataLinkExclusion":
                            teacherStudentDataLinkExclusion = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffSectionAssociation.", nameof(beginDate));

            if (!sectionReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffSectionAssociation.", nameof(sectionReference));

            if (!staffReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffSectionAssociation.", nameof(staffReference));

            if (!classroomPositionDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStaffSectionAssociation.", nameof(classroomPositionDescriptor));

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiStaffSectionAssociation.");

            if (sectionReference.IsSet && sectionReference.Value == null)
                throw new ArgumentNullException(nameof(sectionReference), "Property is not nullable for class EdFiStaffSectionAssociation.");

            if (staffReference.IsSet && staffReference.Value == null)
                throw new ArgumentNullException(nameof(staffReference), "Property is not nullable for class EdFiStaffSectionAssociation.");

            if (classroomPositionDescriptor.IsSet && classroomPositionDescriptor.Value == null)
                throw new ArgumentNullException(nameof(classroomPositionDescriptor), "Property is not nullable for class EdFiStaffSectionAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStaffSectionAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStaffSectionAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStaffSectionAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStaffSectionAssociation.");

            return new EdFiStaffSectionAssociation(beginDate.Value!.Value!, sectionReference.Value!, staffReference.Value!, classroomPositionDescriptor.Value!, id, endDate, highlyQualifiedTeacher, percentageContribution, teacherStudentDataLinkExclusion, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStaffSectionAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffSectionAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStaffSectionAssociation edFiStaffSectionAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStaffSectionAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStaffSectionAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStaffSectionAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStaffSectionAssociation edFiStaffSectionAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStaffSectionAssociation.SectionReference == null)
                throw new ArgumentNullException(nameof(edFiStaffSectionAssociation.SectionReference), "Property is required for class EdFiStaffSectionAssociation.");

            if (edFiStaffSectionAssociation.StaffReference == null)
                throw new ArgumentNullException(nameof(edFiStaffSectionAssociation.StaffReference), "Property is required for class EdFiStaffSectionAssociation.");

            if (edFiStaffSectionAssociation.ClassroomPositionDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStaffSectionAssociation.ClassroomPositionDescriptor), "Property is required for class EdFiStaffSectionAssociation.");

            if (edFiStaffSectionAssociation.IdOption.IsSet && edFiStaffSectionAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStaffSectionAssociation.Id), "Property is required for class EdFiStaffSectionAssociation.");

            if (edFiStaffSectionAssociation.EtagOption.IsSet && edFiStaffSectionAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStaffSectionAssociation.Etag), "Property is required for class EdFiStaffSectionAssociation.");

            if (edFiStaffSectionAssociation.ExtOption.IsSet && edFiStaffSectionAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStaffSectionAssociation.Ext), "Property is required for class EdFiStaffSectionAssociation.");

            writer.WriteString("beginDate", edFiStaffSectionAssociation.BeginDate.ToString(BeginDateFormat));

            writer.WritePropertyName("sectionReference");
            JsonSerializer.Serialize(writer, edFiStaffSectionAssociation.SectionReference, jsonSerializerOptions);
            writer.WritePropertyName("staffReference");
            JsonSerializer.Serialize(writer, edFiStaffSectionAssociation.StaffReference, jsonSerializerOptions);
            writer.WriteString("classroomPositionDescriptor", edFiStaffSectionAssociation.ClassroomPositionDescriptor);

            if (edFiStaffSectionAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStaffSectionAssociation.Id);

            if (edFiStaffSectionAssociation.EndDateOption.IsSet)
                if (edFiStaffSectionAssociation.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiStaffSectionAssociation.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiStaffSectionAssociation.HighlyQualifiedTeacherOption.IsSet)
                if (edFiStaffSectionAssociation.HighlyQualifiedTeacherOption.Value != null)
                    writer.WriteBoolean("highlyQualifiedTeacher", edFiStaffSectionAssociation.HighlyQualifiedTeacherOption.Value!.Value);
                else
                    writer.WriteNull("highlyQualifiedTeacher");

            if (edFiStaffSectionAssociation.PercentageContributionOption.IsSet)
                if (edFiStaffSectionAssociation.PercentageContributionOption.Value != null)
                    writer.WriteNumber("percentageContribution", edFiStaffSectionAssociation.PercentageContributionOption.Value!.Value);
                else
                    writer.WriteNull("percentageContribution");

            if (edFiStaffSectionAssociation.TeacherStudentDataLinkExclusionOption.IsSet)
                if (edFiStaffSectionAssociation.TeacherStudentDataLinkExclusionOption.Value != null)
                    writer.WriteBoolean("teacherStudentDataLinkExclusion", edFiStaffSectionAssociation.TeacherStudentDataLinkExclusionOption.Value!.Value);
                else
                    writer.WriteNull("teacherStudentDataLinkExclusion");

            if (edFiStaffSectionAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStaffSectionAssociation.Etag);

            if (edFiStaffSectionAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStaffSectionAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStaffSectionAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStaffSectionAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
