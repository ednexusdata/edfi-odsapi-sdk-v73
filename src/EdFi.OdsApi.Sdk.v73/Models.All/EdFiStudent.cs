// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudent
    /// </summary>
    public partial class EdFiStudent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudent" /> class.
        /// </summary>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student.</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born.</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</param>
        /// <param name="lastSurname">The name borne in common by members of a family.</param>
        /// <param name="id">id</param>
        /// <param name="personReference">personReference</param>
        /// <param name="birthCity">The city the student was born in.</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born.</param>
        /// <param name="birthSexDescriptor">A person&#39;s sex at birth.</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen.</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S.</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</param>
        /// <param name="identificationDocuments">An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship.</param>
        /// <param name="maidenName">The individual&#39;s maiden name.</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony.</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)</param>
        /// <param name="otherNames">An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual.</param>
        /// <param name="preferredFirstName">The first name the individual prefers, if different from their legal first name</param>
        /// <param name="preferredLastSurname">The last name the individual prefers, if different from their legal last name</param>
        /// <param name="visas">An unordered collection of studentVisas. An indicator of a non-US citizen&#39;s Visa type.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Student entity.</param>
        [JsonConstructor]
        public EdFiStudent(string studentUniqueId, DateOnly birthDate, string firstName, string lastSurname, Option<string?> id = default, Option<EdFiPersonReference?> personReference = default, Option<string?> birthCity = default, Option<string?> birthCountryDescriptor = default, Option<string?> birthInternationalProvince = default, Option<string?> birthSexDescriptor = default, Option<string?> birthStateAbbreviationDescriptor = default, Option<string?> citizenshipStatusDescriptor = default, Option<DateOnly?> dateEnteredUS = default, Option<string?> generationCodeSuffix = default, Option<List<EdFiStudentIdentificationDocument>?> identificationDocuments = default, Option<string?> maidenName = default, Option<string?> middleName = default, Option<bool?> multipleBirthStatus = default, Option<List<EdFiStudentOtherName>?> otherNames = default, Option<List<EdFiStudentPersonalIdentificationDocument>?> personalIdentificationDocuments = default, Option<string?> personalTitlePrefix = default, Option<string?> preferredFirstName = default, Option<string?> preferredLastSurname = default, Option<List<EdFiStudentVisa>?> visas = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            StudentUniqueId = studentUniqueId;
            BirthDate = birthDate;
            FirstName = firstName;
            LastSurname = lastSurname;
            IdOption = id;
            PersonReferenceOption = personReference;
            BirthCityOption = birthCity;
            BirthCountryDescriptorOption = birthCountryDescriptor;
            BirthInternationalProvinceOption = birthInternationalProvince;
            BirthSexDescriptorOption = birthSexDescriptor;
            BirthStateAbbreviationDescriptorOption = birthStateAbbreviationDescriptor;
            CitizenshipStatusDescriptorOption = citizenshipStatusDescriptor;
            DateEnteredUSOption = dateEnteredUS;
            GenerationCodeSuffixOption = generationCodeSuffix;
            IdentificationDocumentsOption = identificationDocuments;
            MaidenNameOption = maidenName;
            MiddleNameOption = middleName;
            MultipleBirthStatusOption = multipleBirthStatus;
            OtherNamesOption = otherNames;
            PersonalIdentificationDocumentsOption = personalIdentificationDocuments;
            PersonalTitlePrefixOption = personalTitlePrefix;
            PreferredFirstNameOption = preferredFirstName;
            PreferredLastSurnameOption = preferredLastSurname;
            VisasOption = visas;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [JsonPropertyName("studentUniqueId")]
        public string StudentUniqueId { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [JsonPropertyName("birthDate")]
        public DateOnly BirthDate { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [JsonPropertyName("lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiPersonReference?> PersonReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [JsonPropertyName("personReference")]
        public EdFiPersonReference? PersonReference { get { return this.PersonReferenceOption; } set { this.PersonReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of BirthCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BirthCityOption { get; private set; }

        /// <summary>
        /// The city the student was born in.
        /// </summary>
        /// <value>The city the student was born in.</value>
        [JsonPropertyName("birthCity")]
        public string? BirthCity { get { return this.BirthCityOption; } set { this.BirthCityOption = new(value); } }

        /// <summary>
        /// Used to track the state of BirthCountryDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BirthCountryDescriptorOption { get; private set; }

        /// <summary>
        /// The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        /// <value>The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.</value>
        [JsonPropertyName("birthCountryDescriptor")]
        public string? BirthCountryDescriptor { get { return this.BirthCountryDescriptorOption; } set { this.BirthCountryDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of BirthInternationalProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BirthInternationalProvinceOption { get; private set; }

        /// <summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        /// </summary>
        /// <value>For students born outside of the U.S., the Province or jurisdiction in which an individual is born.</value>
        [JsonPropertyName("birthInternationalProvince")]
        public string? BirthInternationalProvince { get { return this.BirthInternationalProvinceOption; } set { this.BirthInternationalProvinceOption = new(value); } }

        /// <summary>
        /// Used to track the state of BirthSexDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BirthSexDescriptorOption { get; private set; }

        /// <summary>
        /// A person&#39;s sex at birth.
        /// </summary>
        /// <value>A person&#39;s sex at birth.</value>
        [JsonPropertyName("birthSexDescriptor")]
        public string? BirthSexDescriptor { get { return this.BirthSexDescriptorOption; } set { this.BirthSexDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of BirthStateAbbreviationDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BirthStateAbbreviationDescriptorOption { get; private set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        /// </summary>
        /// <value>The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.</value>
        [JsonPropertyName("birthStateAbbreviationDescriptor")]
        public string? BirthStateAbbreviationDescriptor { get { return this.BirthStateAbbreviationDescriptorOption; } set { this.BirthStateAbbreviationDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CitizenshipStatusDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CitizenshipStatusDescriptorOption { get; private set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        /// <value>An indicator of whether or not the person is a U.S. citizen.</value>
        [JsonPropertyName("citizenshipStatusDescriptor")]
        public string? CitizenshipStatusDescriptor { get { return this.CitizenshipStatusDescriptorOption; } set { this.CitizenshipStatusDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateEnteredUS
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DateEnteredUSOption { get; private set; }

        /// <summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        /// </summary>
        /// <value>For students born outside of the U.S., the date the student entered the U.S.</value>
        [JsonPropertyName("dateEnteredUS")]
        public DateOnly? DateEnteredUS { get { return this.DateEnteredUSOption; } set { this.DateEnteredUSOption = new(value); } }

        /// <summary>
        /// Used to track the state of GenerationCodeSuffix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GenerationCodeSuffixOption { get; private set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [JsonPropertyName("generationCodeSuffix")]
        public string? GenerationCodeSuffix { get { return this.GenerationCodeSuffixOption; } set { this.GenerationCodeSuffixOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdentificationDocuments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentIdentificationDocument>?> IdentificationDocumentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship.
        /// </summary>
        /// <value>An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship.</value>
        [JsonPropertyName("identificationDocuments")]
        public List<EdFiStudentIdentificationDocument>? IdentificationDocuments { get { return this.IdentificationDocumentsOption; } set { this.IdentificationDocumentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaidenName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MaidenNameOption { get; private set; }

        /// <summary>
        /// The individual&#39;s maiden name.
        /// </summary>
        /// <value>The individual&#39;s maiden name.</value>
        [JsonPropertyName("maidenName")]
        public string? MaidenName { get { return this.MaidenNameOption; } set { this.MaidenNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of MiddleName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MiddleNameOption { get; private set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [JsonPropertyName("middleName")]
        public string? MiddleName { get { return this.MiddleNameOption; } set { this.MiddleNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of MultipleBirthStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MultipleBirthStatusOption { get; private set; }

        /// <summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        /// </summary>
        /// <value>Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)</value>
        [JsonPropertyName("multipleBirthStatus")]
        public bool? MultipleBirthStatus { get { return this.MultipleBirthStatusOption; } set { this.MultipleBirthStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of OtherNames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentOtherName>?> OtherNamesOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
        /// </summary>
        /// <value>An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</value>
        [JsonPropertyName("otherNames")]
        public List<EdFiStudentOtherName>? OtherNames { get { return this.OtherNamesOption; } set { this.OtherNamesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonalIdentificationDocuments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentPersonalIdentificationDocument>?> PersonalIdentificationDocumentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [JsonPropertyName("personalIdentificationDocuments")]
        public List<EdFiStudentPersonalIdentificationDocument>? PersonalIdentificationDocuments { get { return this.PersonalIdentificationDocumentsOption; } set { this.PersonalIdentificationDocumentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonalTitlePrefix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PersonalTitlePrefixOption { get; private set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the individual.</value>
        [JsonPropertyName("personalTitlePrefix")]
        public string? PersonalTitlePrefix { get { return this.PersonalTitlePrefixOption; } set { this.PersonalTitlePrefixOption = new(value); } }

        /// <summary>
        /// Used to track the state of PreferredFirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreferredFirstNameOption { get; private set; }

        /// <summary>
        /// The first name the individual prefers, if different from their legal first name
        /// </summary>
        /// <value>The first name the individual prefers, if different from their legal first name</value>
        [JsonPropertyName("preferredFirstName")]
        public string? PreferredFirstName { get { return this.PreferredFirstNameOption; } set { this.PreferredFirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of PreferredLastSurname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreferredLastSurnameOption { get; private set; }

        /// <summary>
        /// The last name the individual prefers, if different from their legal last name
        /// </summary>
        /// <value>The last name the individual prefers, if different from their legal last name</value>
        [JsonPropertyName("preferredLastSurname")]
        public string? PreferredLastSurname { get { return this.PreferredLastSurnameOption; } set { this.PreferredLastSurnameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Visas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentVisa>?> VisasOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentVisas. An indicator of a non-US citizen&#39;s Visa type.
        /// </summary>
        /// <value>An unordered collection of studentVisas. An indicator of a non-US citizen&#39;s Visa type.</value>
        [JsonPropertyName("visas")]
        public List<EdFiStudentVisa>? Visas { get { return this.VisasOption; } set { this.VisasOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Student entity.
        /// </summary>
        /// <value>Extensions to the Student entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudent {\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  BirthCity: ").Append(BirthCity).Append("\n");
            sb.Append("  BirthCountryDescriptor: ").Append(BirthCountryDescriptor).Append("\n");
            sb.Append("  BirthInternationalProvince: ").Append(BirthInternationalProvince).Append("\n");
            sb.Append("  BirthSexDescriptor: ").Append(BirthSexDescriptor).Append("\n");
            sb.Append("  BirthStateAbbreviationDescriptor: ").Append(BirthStateAbbreviationDescriptor).Append("\n");
            sb.Append("  CitizenshipStatusDescriptor: ").Append(CitizenshipStatusDescriptor).Append("\n");
            sb.Append("  DateEnteredUS: ").Append(DateEnteredUS).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  IdentificationDocuments: ").Append(IdentificationDocuments).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  MultipleBirthStatus: ").Append(MultipleBirthStatus).Append("\n");
            sb.Append("  OtherNames: ").Append(OtherNames).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  PreferredFirstName: ").Append(PreferredFirstName).Append("\n");
            sb.Append("  PreferredLastSurname: ").Append(PreferredLastSurname).Append("\n");
            sb.Append("  Visas: ").Append(Visas).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // LastSurname (string) maxLength
            if (this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // BirthCity (string) maxLength
            if (this.BirthCity != null && this.BirthCity.Length > 30)
            {
                yield return new ValidationResult("Invalid value for BirthCity, length must be less than 30.", new [] { "BirthCity" });
            }

            // BirthCity (string) minLength
            if (this.BirthCity != null && this.BirthCity.Length < 2)
            {
                yield return new ValidationResult("Invalid value for BirthCity, length must be greater than 2.", new [] { "BirthCity" });
            }

            // BirthCountryDescriptor (string) maxLength
            if (this.BirthCountryDescriptor != null && this.BirthCountryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for BirthCountryDescriptor, length must be less than 306.", new [] { "BirthCountryDescriptor" });
            }

            // BirthInternationalProvince (string) maxLength
            if (this.BirthInternationalProvince != null && this.BirthInternationalProvince.Length > 150)
            {
                yield return new ValidationResult("Invalid value for BirthInternationalProvince, length must be less than 150.", new [] { "BirthInternationalProvince" });
            }

            // BirthSexDescriptor (string) maxLength
            if (this.BirthSexDescriptor != null && this.BirthSexDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for BirthSexDescriptor, length must be less than 306.", new [] { "BirthSexDescriptor" });
            }

            // BirthStateAbbreviationDescriptor (string) maxLength
            if (this.BirthStateAbbreviationDescriptor != null && this.BirthStateAbbreviationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for BirthStateAbbreviationDescriptor, length must be less than 306.", new [] { "BirthStateAbbreviationDescriptor" });
            }

            // CitizenshipStatusDescriptor (string) maxLength
            if (this.CitizenshipStatusDescriptor != null && this.CitizenshipStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CitizenshipStatusDescriptor, length must be less than 306.", new [] { "CitizenshipStatusDescriptor" });
            }

            // GenerationCodeSuffix (string) maxLength
            if (this.GenerationCodeSuffix != null && this.GenerationCodeSuffix.Length > 10)
            {
                yield return new ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new [] { "GenerationCodeSuffix" });
            }

            // MaidenName (string) maxLength
            if (this.MaidenName != null && this.MaidenName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MaidenName, length must be less than 75.", new [] { "MaidenName" });
            }

            // MiddleName (string) maxLength
            if (this.MiddleName != null && this.MiddleName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MiddleName, length must be less than 75.", new [] { "MiddleName" });
            }

            // PersonalTitlePrefix (string) maxLength
            if (this.PersonalTitlePrefix != null && this.PersonalTitlePrefix.Length > 30)
            {
                yield return new ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new [] { "PersonalTitlePrefix" });
            }

            // PreferredFirstName (string) maxLength
            if (this.PreferredFirstName != null && this.PreferredFirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for PreferredFirstName, length must be less than 75.", new [] { "PreferredFirstName" });
            }

            // PreferredLastSurname (string) maxLength
            if (this.PreferredLastSurname != null && this.PreferredLastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for PreferredLastSurname, length must be less than 75.", new [] { "PreferredLastSurname" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudent" />
    /// </summary>
    public class EdFiStudentJsonConverter : JsonConverter<EdFiStudent>
    {
        /// <summary>
        /// The format to use to serialize BirthDate
        /// </summary>
        public static string BirthDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize DateEnteredUS
        /// </summary>
        public static string DateEnteredUSFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> studentUniqueId = default;
            Option<DateOnly?> birthDate = default;
            Option<string?> firstName = default;
            Option<string?> lastSurname = default;
            Option<string?> id = default;
            Option<EdFiPersonReference?> personReference = default;
            Option<string?> birthCity = default;
            Option<string?> birthCountryDescriptor = default;
            Option<string?> birthInternationalProvince = default;
            Option<string?> birthSexDescriptor = default;
            Option<string?> birthStateAbbreviationDescriptor = default;
            Option<string?> citizenshipStatusDescriptor = default;
            Option<DateOnly?> dateEnteredUS = default;
            Option<string?> generationCodeSuffix = default;
            Option<List<EdFiStudentIdentificationDocument>?> identificationDocuments = default;
            Option<string?> maidenName = default;
            Option<string?> middleName = default;
            Option<bool?> multipleBirthStatus = default;
            Option<List<EdFiStudentOtherName>?> otherNames = default;
            Option<List<EdFiStudentPersonalIdentificationDocument>?> personalIdentificationDocuments = default;
            Option<string?> personalTitlePrefix = default;
            Option<string?> preferredFirstName = default;
            Option<string?> preferredLastSurname = default;
            Option<List<EdFiStudentVisa>?> visas = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "studentUniqueId":
                            studentUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "birthDate":
                            birthDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastSurname":
                            lastSurname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "personReference":
                            personReference = new Option<EdFiPersonReference?>(JsonSerializer.Deserialize<EdFiPersonReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "birthCity":
                            birthCity = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "birthCountryDescriptor":
                            birthCountryDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "birthInternationalProvince":
                            birthInternationalProvince = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "birthSexDescriptor":
                            birthSexDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "birthStateAbbreviationDescriptor":
                            birthStateAbbreviationDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "citizenshipStatusDescriptor":
                            citizenshipStatusDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dateEnteredUS":
                            dateEnteredUS = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "generationCodeSuffix":
                            generationCodeSuffix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "identificationDocuments":
                            identificationDocuments = new Option<List<EdFiStudentIdentificationDocument>?>(JsonSerializer.Deserialize<List<EdFiStudentIdentificationDocument>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "maidenName":
                            maidenName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "middleName":
                            middleName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "multipleBirthStatus":
                            multipleBirthStatus = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "otherNames":
                            otherNames = new Option<List<EdFiStudentOtherName>?>(JsonSerializer.Deserialize<List<EdFiStudentOtherName>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "personalIdentificationDocuments":
                            personalIdentificationDocuments = new Option<List<EdFiStudentPersonalIdentificationDocument>?>(JsonSerializer.Deserialize<List<EdFiStudentPersonalIdentificationDocument>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "personalTitlePrefix":
                            personalTitlePrefix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "preferredFirstName":
                            preferredFirstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "preferredLastSurname":
                            preferredLastSurname = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "visas":
                            visas = new Option<List<EdFiStudentVisa>?>(JsonSerializer.Deserialize<List<EdFiStudentVisa>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!studentUniqueId.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudent.", nameof(studentUniqueId));

            if (!birthDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudent.", nameof(birthDate));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudent.", nameof(firstName));

            if (!lastSurname.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudent.", nameof(lastSurname));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId), "Property is not nullable for class EdFiStudent.");

            if (birthDate.IsSet && birthDate.Value == null)
                throw new ArgumentNullException(nameof(birthDate), "Property is not nullable for class EdFiStudent.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class EdFiStudent.");

            if (lastSurname.IsSet && lastSurname.Value == null)
                throw new ArgumentNullException(nameof(lastSurname), "Property is not nullable for class EdFiStudent.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudent.");

            if (personReference.IsSet && personReference.Value == null)
                throw new ArgumentNullException(nameof(personReference), "Property is not nullable for class EdFiStudent.");

            if (identificationDocuments.IsSet && identificationDocuments.Value == null)
                throw new ArgumentNullException(nameof(identificationDocuments), "Property is not nullable for class EdFiStudent.");

            if (otherNames.IsSet && otherNames.Value == null)
                throw new ArgumentNullException(nameof(otherNames), "Property is not nullable for class EdFiStudent.");

            if (personalIdentificationDocuments.IsSet && personalIdentificationDocuments.Value == null)
                throw new ArgumentNullException(nameof(personalIdentificationDocuments), "Property is not nullable for class EdFiStudent.");

            if (visas.IsSet && visas.Value == null)
                throw new ArgumentNullException(nameof(visas), "Property is not nullable for class EdFiStudent.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudent.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudent.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudent.");

            return new EdFiStudent(studentUniqueId.Value!, birthDate.Value!.Value!, firstName.Value!, lastSurname.Value!, id, personReference, birthCity, birthCountryDescriptor, birthInternationalProvince, birthSexDescriptor, birthStateAbbreviationDescriptor, citizenshipStatusDescriptor, dateEnteredUS, generationCodeSuffix, identificationDocuments, maidenName, middleName, multipleBirthStatus, otherNames, personalIdentificationDocuments, personalTitlePrefix, preferredFirstName, preferredLastSurname, visas, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudent edFiStudent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudent edFiStudent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudent.StudentUniqueId == null)
                throw new ArgumentNullException(nameof(edFiStudent.StudentUniqueId), "Property is required for class EdFiStudent.");

            if (edFiStudent.FirstName == null)
                throw new ArgumentNullException(nameof(edFiStudent.FirstName), "Property is required for class EdFiStudent.");

            if (edFiStudent.LastSurname == null)
                throw new ArgumentNullException(nameof(edFiStudent.LastSurname), "Property is required for class EdFiStudent.");

            if (edFiStudent.IdOption.IsSet && edFiStudent.Id == null)
                throw new ArgumentNullException(nameof(edFiStudent.Id), "Property is required for class EdFiStudent.");

            if (edFiStudent.PersonReferenceOption.IsSet && edFiStudent.PersonReference == null)
                throw new ArgumentNullException(nameof(edFiStudent.PersonReference), "Property is required for class EdFiStudent.");

            if (edFiStudent.IdentificationDocumentsOption.IsSet && edFiStudent.IdentificationDocuments == null)
                throw new ArgumentNullException(nameof(edFiStudent.IdentificationDocuments), "Property is required for class EdFiStudent.");

            if (edFiStudent.OtherNamesOption.IsSet && edFiStudent.OtherNames == null)
                throw new ArgumentNullException(nameof(edFiStudent.OtherNames), "Property is required for class EdFiStudent.");

            if (edFiStudent.PersonalIdentificationDocumentsOption.IsSet && edFiStudent.PersonalIdentificationDocuments == null)
                throw new ArgumentNullException(nameof(edFiStudent.PersonalIdentificationDocuments), "Property is required for class EdFiStudent.");

            if (edFiStudent.VisasOption.IsSet && edFiStudent.Visas == null)
                throw new ArgumentNullException(nameof(edFiStudent.Visas), "Property is required for class EdFiStudent.");

            if (edFiStudent.EtagOption.IsSet && edFiStudent.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudent.Etag), "Property is required for class EdFiStudent.");

            if (edFiStudent.ExtOption.IsSet && edFiStudent.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudent.Ext), "Property is required for class EdFiStudent.");

            writer.WriteString("studentUniqueId", edFiStudent.StudentUniqueId);

            writer.WriteString("birthDate", edFiStudent.BirthDate.ToString(BirthDateFormat));

            writer.WriteString("firstName", edFiStudent.FirstName);

            writer.WriteString("lastSurname", edFiStudent.LastSurname);

            if (edFiStudent.IdOption.IsSet)
                writer.WriteString("id", edFiStudent.Id);

            if (edFiStudent.PersonReferenceOption.IsSet)
            {
                writer.WritePropertyName("personReference");
                JsonSerializer.Serialize(writer, edFiStudent.PersonReference, jsonSerializerOptions);
            }
            if (edFiStudent.BirthCityOption.IsSet)
                if (edFiStudent.BirthCityOption.Value != null)
                    writer.WriteString("birthCity", edFiStudent.BirthCity);
                else
                    writer.WriteNull("birthCity");

            if (edFiStudent.BirthCountryDescriptorOption.IsSet)
                if (edFiStudent.BirthCountryDescriptorOption.Value != null)
                    writer.WriteString("birthCountryDescriptor", edFiStudent.BirthCountryDescriptor);
                else
                    writer.WriteNull("birthCountryDescriptor");

            if (edFiStudent.BirthInternationalProvinceOption.IsSet)
                if (edFiStudent.BirthInternationalProvinceOption.Value != null)
                    writer.WriteString("birthInternationalProvince", edFiStudent.BirthInternationalProvince);
                else
                    writer.WriteNull("birthInternationalProvince");

            if (edFiStudent.BirthSexDescriptorOption.IsSet)
                if (edFiStudent.BirthSexDescriptorOption.Value != null)
                    writer.WriteString("birthSexDescriptor", edFiStudent.BirthSexDescriptor);
                else
                    writer.WriteNull("birthSexDescriptor");

            if (edFiStudent.BirthStateAbbreviationDescriptorOption.IsSet)
                if (edFiStudent.BirthStateAbbreviationDescriptorOption.Value != null)
                    writer.WriteString("birthStateAbbreviationDescriptor", edFiStudent.BirthStateAbbreviationDescriptor);
                else
                    writer.WriteNull("birthStateAbbreviationDescriptor");

            if (edFiStudent.CitizenshipStatusDescriptorOption.IsSet)
                if (edFiStudent.CitizenshipStatusDescriptorOption.Value != null)
                    writer.WriteString("citizenshipStatusDescriptor", edFiStudent.CitizenshipStatusDescriptor);
                else
                    writer.WriteNull("citizenshipStatusDescriptor");

            if (edFiStudent.DateEnteredUSOption.IsSet)
                if (edFiStudent.DateEnteredUSOption.Value != null)
                    writer.WriteString("dateEnteredUS", edFiStudent.DateEnteredUSOption.Value!.Value.ToString(DateEnteredUSFormat));
                else
                    writer.WriteNull("dateEnteredUS");

            if (edFiStudent.GenerationCodeSuffixOption.IsSet)
                if (edFiStudent.GenerationCodeSuffixOption.Value != null)
                    writer.WriteString("generationCodeSuffix", edFiStudent.GenerationCodeSuffix);
                else
                    writer.WriteNull("generationCodeSuffix");

            if (edFiStudent.IdentificationDocumentsOption.IsSet)
            {
                writer.WritePropertyName("identificationDocuments");
                JsonSerializer.Serialize(writer, edFiStudent.IdentificationDocuments, jsonSerializerOptions);
            }
            if (edFiStudent.MaidenNameOption.IsSet)
                if (edFiStudent.MaidenNameOption.Value != null)
                    writer.WriteString("maidenName", edFiStudent.MaidenName);
                else
                    writer.WriteNull("maidenName");

            if (edFiStudent.MiddleNameOption.IsSet)
                if (edFiStudent.MiddleNameOption.Value != null)
                    writer.WriteString("middleName", edFiStudent.MiddleName);
                else
                    writer.WriteNull("middleName");

            if (edFiStudent.MultipleBirthStatusOption.IsSet)
                if (edFiStudent.MultipleBirthStatusOption.Value != null)
                    writer.WriteBoolean("multipleBirthStatus", edFiStudent.MultipleBirthStatusOption.Value!.Value);
                else
                    writer.WriteNull("multipleBirthStatus");

            if (edFiStudent.OtherNamesOption.IsSet)
            {
                writer.WritePropertyName("otherNames");
                JsonSerializer.Serialize(writer, edFiStudent.OtherNames, jsonSerializerOptions);
            }
            if (edFiStudent.PersonalIdentificationDocumentsOption.IsSet)
            {
                writer.WritePropertyName("personalIdentificationDocuments");
                JsonSerializer.Serialize(writer, edFiStudent.PersonalIdentificationDocuments, jsonSerializerOptions);
            }
            if (edFiStudent.PersonalTitlePrefixOption.IsSet)
                if (edFiStudent.PersonalTitlePrefixOption.Value != null)
                    writer.WriteString("personalTitlePrefix", edFiStudent.PersonalTitlePrefix);
                else
                    writer.WriteNull("personalTitlePrefix");

            if (edFiStudent.PreferredFirstNameOption.IsSet)
                if (edFiStudent.PreferredFirstNameOption.Value != null)
                    writer.WriteString("preferredFirstName", edFiStudent.PreferredFirstName);
                else
                    writer.WriteNull("preferredFirstName");

            if (edFiStudent.PreferredLastSurnameOption.IsSet)
                if (edFiStudent.PreferredLastSurnameOption.Value != null)
                    writer.WriteString("preferredLastSurname", edFiStudent.PreferredLastSurname);
                else
                    writer.WriteNull("preferredLastSurname");

            if (edFiStudent.VisasOption.IsSet)
            {
                writer.WritePropertyName("visas");
                JsonSerializer.Serialize(writer, edFiStudent.Visas, jsonSerializerOptions);
            }
            if (edFiStudent.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudent.Etag);

            if (edFiStudent.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudent.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudent.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudent.Ext, jsonSerializerOptions);
            }
        }
    }
}
