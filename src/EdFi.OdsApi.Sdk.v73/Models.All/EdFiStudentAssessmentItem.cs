// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentAssessmentItem
    /// </summary>
    public partial class EdFiStudentAssessmentItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentItem" /> class.
        /// </summary>
        /// <param name="assessmentItemResultDescriptor">The analyzed result of a student&#39;s response to an assessment item.</param>
        /// <param name="assessmentItemReference">assessmentItemReference</param>
        /// <param name="responseIndicatorDescriptor">Indicator of the response.</param>
        /// <param name="assessmentResponse">A student&#39;s response to a stimulus on a test.</param>
        /// <param name="descriptiveFeedback">The formative descriptive feedback that was given to a student in response to the results from a scored/evaluated assessment item.</param>
        /// <param name="itemNumber">The test question number for this student&#39;s test item.</param>
        /// <param name="rawScoreResult">A meaningful raw score of the performance of a student on an assessment item.</param>
        /// <param name="timeAssessed">The overall time that a student actually spent on the assessment item expressed in minutes.</param>
        /// <param name="ext">Extensions to the StudentAssessmentItem entity.</param>
        [JsonConstructor]
        public EdFiStudentAssessmentItem(string assessmentItemResultDescriptor, EdFiAssessmentItemReference assessmentItemReference, Option<string?> responseIndicatorDescriptor = default, Option<string?> assessmentResponse = default, Option<string?> descriptiveFeedback = default, Option<int?> itemNumber = default, Option<double?> rawScoreResult = default, Option<string?> timeAssessed = default, Option<Object?> ext = default)
        {
            AssessmentItemResultDescriptor = assessmentItemResultDescriptor;
            AssessmentItemReference = assessmentItemReference;
            ResponseIndicatorDescriptorOption = responseIndicatorDescriptor;
            AssessmentResponseOption = assessmentResponse;
            DescriptiveFeedbackOption = descriptiveFeedback;
            ItemNumberOption = itemNumber;
            RawScoreResultOption = rawScoreResult;
            TimeAssessedOption = timeAssessed;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The analyzed result of a student&#39;s response to an assessment item.
        /// </summary>
        /// <value>The analyzed result of a student&#39;s response to an assessment item.</value>
        [JsonPropertyName("assessmentItemResultDescriptor")]
        public string AssessmentItemResultDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentItemReference
        /// </summary>
        [JsonPropertyName("assessmentItemReference")]
        public EdFiAssessmentItemReference AssessmentItemReference { get; set; }

        /// <summary>
        /// Used to track the state of ResponseIndicatorDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResponseIndicatorDescriptorOption { get; private set; }

        /// <summary>
        /// Indicator of the response.
        /// </summary>
        /// <value>Indicator of the response.</value>
        [JsonPropertyName("responseIndicatorDescriptor")]
        public string? ResponseIndicatorDescriptor { get { return this.ResponseIndicatorDescriptorOption; } set { this.ResponseIndicatorDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssessmentResponseOption { get; private set; }

        /// <summary>
        /// A student&#39;s response to a stimulus on a test.
        /// </summary>
        /// <value>A student&#39;s response to a stimulus on a test.</value>
        [JsonPropertyName("assessmentResponse")]
        public string? AssessmentResponse { get { return this.AssessmentResponseOption; } set { this.AssessmentResponseOption = new(value); } }

        /// <summary>
        /// Used to track the state of DescriptiveFeedback
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptiveFeedbackOption { get; private set; }

        /// <summary>
        /// The formative descriptive feedback that was given to a student in response to the results from a scored/evaluated assessment item.
        /// </summary>
        /// <value>The formative descriptive feedback that was given to a student in response to the results from a scored/evaluated assessment item.</value>
        [JsonPropertyName("descriptiveFeedback")]
        public string? DescriptiveFeedback { get { return this.DescriptiveFeedbackOption; } set { this.DescriptiveFeedbackOption = new(value); } }

        /// <summary>
        /// Used to track the state of ItemNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ItemNumberOption { get; private set; }

        /// <summary>
        /// The test question number for this student&#39;s test item.
        /// </summary>
        /// <value>The test question number for this student&#39;s test item.</value>
        [JsonPropertyName("itemNumber")]
        public int? ItemNumber { get { return this.ItemNumberOption; } set { this.ItemNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of RawScoreResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> RawScoreResultOption { get; private set; }

        /// <summary>
        /// A meaningful raw score of the performance of a student on an assessment item.
        /// </summary>
        /// <value>A meaningful raw score of the performance of a student on an assessment item.</value>
        [JsonPropertyName("rawScoreResult")]
        public double? RawScoreResult { get { return this.RawScoreResultOption; } set { this.RawScoreResultOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeAssessed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TimeAssessedOption { get; private set; }

        /// <summary>
        /// The overall time that a student actually spent on the assessment item expressed in minutes.
        /// </summary>
        /// <value>The overall time that a student actually spent on the assessment item expressed in minutes.</value>
        [JsonPropertyName("timeAssessed")]
        public string? TimeAssessed { get { return this.TimeAssessedOption; } set { this.TimeAssessedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentAssessmentItem entity.
        /// </summary>
        /// <value>Extensions to the StudentAssessmentItem entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentAssessmentItem {\n");
            sb.Append("  AssessmentItemResultDescriptor: ").Append(AssessmentItemResultDescriptor).Append("\n");
            sb.Append("  AssessmentItemReference: ").Append(AssessmentItemReference).Append("\n");
            sb.Append("  ResponseIndicatorDescriptor: ").Append(ResponseIndicatorDescriptor).Append("\n");
            sb.Append("  AssessmentResponse: ").Append(AssessmentResponse).Append("\n");
            sb.Append("  DescriptiveFeedback: ").Append(DescriptiveFeedback).Append("\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  RawScoreResult: ").Append(RawScoreResult).Append("\n");
            sb.Append("  TimeAssessed: ").Append(TimeAssessed).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssessmentItemResultDescriptor (string) maxLength
            if (this.AssessmentItemResultDescriptor != null && this.AssessmentItemResultDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssessmentItemResultDescriptor, length must be less than 306.", new [] { "AssessmentItemResultDescriptor" });
            }

            // ResponseIndicatorDescriptor (string) maxLength
            if (this.ResponseIndicatorDescriptor != null && this.ResponseIndicatorDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ResponseIndicatorDescriptor, length must be less than 306.", new [] { "ResponseIndicatorDescriptor" });
            }

            // AssessmentResponse (string) maxLength
            if (this.AssessmentResponse != null && this.AssessmentResponse.Length > 255)
            {
                yield return new ValidationResult("Invalid value for AssessmentResponse, length must be less than 255.", new [] { "AssessmentResponse" });
            }

            // DescriptiveFeedback (string) maxLength
            if (this.DescriptiveFeedback != null && this.DescriptiveFeedback.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for DescriptiveFeedback, length must be less than 1024.", new [] { "DescriptiveFeedback" });
            }

            // RawScoreResult (double) maximum
            if (this.RawScoreResultOption.IsSet && this.RawScoreResultOption.Value > (double)9999999999.99999)
            {
                yield return new ValidationResult("Invalid value for RawScoreResult, must be a value less than or equal to 9999999999.99999.", new [] { "RawScoreResult" });
            }

            // RawScoreResult (double) minimum
            if (this.RawScoreResultOption.IsSet && this.RawScoreResultOption.Value < (double)-9999999999.99999)
            {
                yield return new ValidationResult("Invalid value for RawScoreResult, must be a value greater than or equal to -9999999999.99999.", new [] { "RawScoreResult" });
            }

            // TimeAssessed (string) maxLength
            if (this.TimeAssessed != null && this.TimeAssessed.Length > 30)
            {
                yield return new ValidationResult("Invalid value for TimeAssessed, length must be less than 30.", new [] { "TimeAssessed" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentAssessmentItem" />
    /// </summary>
    public class EdFiStudentAssessmentItemJsonConverter : JsonConverter<EdFiStudentAssessmentItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentAssessmentItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentAssessmentItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> assessmentItemResultDescriptor = default;
            Option<EdFiAssessmentItemReference?> assessmentItemReference = default;
            Option<string?> responseIndicatorDescriptor = default;
            Option<string?> assessmentResponse = default;
            Option<string?> descriptiveFeedback = default;
            Option<int?> itemNumber = default;
            Option<double?> rawScoreResult = default;
            Option<string?> timeAssessed = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assessmentItemResultDescriptor":
                            assessmentItemResultDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assessmentItemReference":
                            assessmentItemReference = new Option<EdFiAssessmentItemReference?>(JsonSerializer.Deserialize<EdFiAssessmentItemReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "responseIndicatorDescriptor":
                            responseIndicatorDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "assessmentResponse":
                            assessmentResponse = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "descriptiveFeedback":
                            descriptiveFeedback = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "itemNumber":
                            itemNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "rawScoreResult":
                            rawScoreResult = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "timeAssessed":
                            timeAssessed = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assessmentItemResultDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessmentItem.", nameof(assessmentItemResultDescriptor));

            if (!assessmentItemReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessmentItem.", nameof(assessmentItemReference));

            if (assessmentItemResultDescriptor.IsSet && assessmentItemResultDescriptor.Value == null)
                throw new ArgumentNullException(nameof(assessmentItemResultDescriptor), "Property is not nullable for class EdFiStudentAssessmentItem.");

            if (assessmentItemReference.IsSet && assessmentItemReference.Value == null)
                throw new ArgumentNullException(nameof(assessmentItemReference), "Property is not nullable for class EdFiStudentAssessmentItem.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentAssessmentItem.");

            return new EdFiStudentAssessmentItem(assessmentItemResultDescriptor.Value!, assessmentItemReference.Value!, responseIndicatorDescriptor, assessmentResponse, descriptiveFeedback, itemNumber, rawScoreResult, timeAssessed, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentAssessmentItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAssessmentItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentAssessmentItem edFiStudentAssessmentItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentAssessmentItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentAssessmentItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAssessmentItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentAssessmentItem edFiStudentAssessmentItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentAssessmentItem.AssessmentItemResultDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentItem.AssessmentItemResultDescriptor), "Property is required for class EdFiStudentAssessmentItem.");

            if (edFiStudentAssessmentItem.AssessmentItemReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentItem.AssessmentItemReference), "Property is required for class EdFiStudentAssessmentItem.");

            if (edFiStudentAssessmentItem.ExtOption.IsSet && edFiStudentAssessmentItem.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentItem.Ext), "Property is required for class EdFiStudentAssessmentItem.");

            writer.WriteString("assessmentItemResultDescriptor", edFiStudentAssessmentItem.AssessmentItemResultDescriptor);

            writer.WritePropertyName("assessmentItemReference");
            JsonSerializer.Serialize(writer, edFiStudentAssessmentItem.AssessmentItemReference, jsonSerializerOptions);
            if (edFiStudentAssessmentItem.ResponseIndicatorDescriptorOption.IsSet)
                if (edFiStudentAssessmentItem.ResponseIndicatorDescriptorOption.Value != null)
                    writer.WriteString("responseIndicatorDescriptor", edFiStudentAssessmentItem.ResponseIndicatorDescriptor);
                else
                    writer.WriteNull("responseIndicatorDescriptor");

            if (edFiStudentAssessmentItem.AssessmentResponseOption.IsSet)
                if (edFiStudentAssessmentItem.AssessmentResponseOption.Value != null)
                    writer.WriteString("assessmentResponse", edFiStudentAssessmentItem.AssessmentResponse);
                else
                    writer.WriteNull("assessmentResponse");

            if (edFiStudentAssessmentItem.DescriptiveFeedbackOption.IsSet)
                if (edFiStudentAssessmentItem.DescriptiveFeedbackOption.Value != null)
                    writer.WriteString("descriptiveFeedback", edFiStudentAssessmentItem.DescriptiveFeedback);
                else
                    writer.WriteNull("descriptiveFeedback");

            if (edFiStudentAssessmentItem.ItemNumberOption.IsSet)
                if (edFiStudentAssessmentItem.ItemNumberOption.Value != null)
                    writer.WriteNumber("itemNumber", edFiStudentAssessmentItem.ItemNumberOption.Value!.Value);
                else
                    writer.WriteNull("itemNumber");

            if (edFiStudentAssessmentItem.RawScoreResultOption.IsSet)
                if (edFiStudentAssessmentItem.RawScoreResultOption.Value != null)
                    writer.WriteNumber("rawScoreResult", edFiStudentAssessmentItem.RawScoreResultOption.Value!.Value);
                else
                    writer.WriteNull("rawScoreResult");

            if (edFiStudentAssessmentItem.TimeAssessedOption.IsSet)
                if (edFiStudentAssessmentItem.TimeAssessedOption.Value != null)
                    writer.WriteString("timeAssessed", edFiStudentAssessmentItem.TimeAssessed);
                else
                    writer.WriteNull("timeAssessed");

            if (edFiStudentAssessmentItem.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentAssessmentItem.Ext, jsonSerializerOptions);
            }
        }
    }
}
