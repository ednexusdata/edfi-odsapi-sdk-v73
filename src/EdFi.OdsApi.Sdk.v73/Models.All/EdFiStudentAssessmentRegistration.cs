// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentAssessmentRegistration
    /// </summary>
    public partial class EdFiStudentAssessmentRegistration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentRegistration" /> class.
        /// </summary>
        /// <param name="assessmentAdministrationReference">assessmentAdministrationReference</param>
        /// <param name="studentEducationOrganizationAssociationReference">studentEducationOrganizationAssociationReference</param>
        /// <param name="studentSchoolAssociationReference">studentSchoolAssociationReference</param>
        /// <param name="id">id</param>
        /// <param name="reportingEducationOrganizationReference">reportingEducationOrganizationReference</param>
        /// <param name="scheduledStudentEducationOrganizationAssessmentAccommodationReference">scheduledStudentEducationOrganizationAssessmentAccommodationReference</param>
        /// <param name="testingEducationOrganizationReference">testingEducationOrganizationReference</param>
        /// <param name="assessmentAccommodations">An unordered collection of studentAssessmentRegistrationAssessmentAccommodations. The special variation(s) to be used in how assessments (in general) are presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.</param>
        /// <param name="assessmentCustomizations">An unordered collection of studentAssessmentRegistrationAssessmentCustomizations. Key/value pairs which may be used to facilitate customization of an assessment or to support vendor reporting/analysis.</param>
        /// <param name="assessmentGradeLevelDescriptor">The grade level or primary instructional level at which the student is to be assessed.</param>
        /// <param name="platformTypeDescriptor">The environment or format in which the assessment is expected to be administered.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentAssessmentRegistration entity.</param>
        [JsonConstructor]
        public EdFiStudentAssessmentRegistration(EdFiAssessmentAdministrationReference assessmentAdministrationReference, EdFiStudentEducationOrganizationAssociationReference studentEducationOrganizationAssociationReference, EdFiStudentSchoolAssociationReference studentSchoolAssociationReference, Option<string?> id = default, Option<EdFiEducationOrganizationReference?> reportingEducationOrganizationReference = default, Option<EdFiStudentEducationOrganizationAssessmentAccommodationReference?> scheduledStudentEducationOrganizationAssessmentAccommodationReference = default, Option<EdFiEducationOrganizationReference?> testingEducationOrganizationReference = default, Option<List<EdFiStudentAssessmentRegistrationAssessmentAccommodation>?> assessmentAccommodations = default, Option<List<EdFiStudentAssessmentRegistrationAssessmentCustomization>?> assessmentCustomizations = default, Option<string?> assessmentGradeLevelDescriptor = default, Option<string?> platformTypeDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            AssessmentAdministrationReference = assessmentAdministrationReference;
            StudentEducationOrganizationAssociationReference = studentEducationOrganizationAssociationReference;
            StudentSchoolAssociationReference = studentSchoolAssociationReference;
            IdOption = id;
            ReportingEducationOrganizationReferenceOption = reportingEducationOrganizationReference;
            ScheduledStudentEducationOrganizationAssessmentAccommodationReferenceOption = scheduledStudentEducationOrganizationAssessmentAccommodationReference;
            TestingEducationOrganizationReferenceOption = testingEducationOrganizationReference;
            AssessmentAccommodationsOption = assessmentAccommodations;
            AssessmentCustomizationsOption = assessmentCustomizations;
            AssessmentGradeLevelDescriptorOption = assessmentGradeLevelDescriptor;
            PlatformTypeDescriptorOption = platformTypeDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AssessmentAdministrationReference
        /// </summary>
        [JsonPropertyName("assessmentAdministrationReference")]
        public EdFiAssessmentAdministrationReference AssessmentAdministrationReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentEducationOrganizationAssociationReference
        /// </summary>
        [JsonPropertyName("studentEducationOrganizationAssociationReference")]
        public EdFiStudentEducationOrganizationAssociationReference StudentEducationOrganizationAssociationReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentSchoolAssociationReference
        /// </summary>
        [JsonPropertyName("studentSchoolAssociationReference")]
        public EdFiStudentSchoolAssociationReference StudentSchoolAssociationReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReportingEducationOrganizationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiEducationOrganizationReference?> ReportingEducationOrganizationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReportingEducationOrganizationReference
        /// </summary>
        [JsonPropertyName("reportingEducationOrganizationReference")]
        public EdFiEducationOrganizationReference? ReportingEducationOrganizationReference { get { return this.ReportingEducationOrganizationReferenceOption; } set { this.ReportingEducationOrganizationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScheduledStudentEducationOrganizationAssessmentAccommodationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiStudentEducationOrganizationAssessmentAccommodationReference?> ScheduledStudentEducationOrganizationAssessmentAccommodationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ScheduledStudentEducationOrganizationAssessmentAccommodationReference
        /// </summary>
        [JsonPropertyName("scheduledStudentEducationOrganizationAssessmentAccommodationReference")]
        public EdFiStudentEducationOrganizationAssessmentAccommodationReference? ScheduledStudentEducationOrganizationAssessmentAccommodationReference { get { return this.ScheduledStudentEducationOrganizationAssessmentAccommodationReferenceOption; } set { this.ScheduledStudentEducationOrganizationAssessmentAccommodationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of TestingEducationOrganizationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiEducationOrganizationReference?> TestingEducationOrganizationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TestingEducationOrganizationReference
        /// </summary>
        [JsonPropertyName("testingEducationOrganizationReference")]
        public EdFiEducationOrganizationReference? TestingEducationOrganizationReference { get { return this.TestingEducationOrganizationReferenceOption; } set { this.TestingEducationOrganizationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentAccommodations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAssessmentRegistrationAssessmentAccommodation>?> AssessmentAccommodationsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAssessmentRegistrationAssessmentAccommodations. The special variation(s) to be used in how assessments (in general) are presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentRegistrationAssessmentAccommodations. The special variation(s) to be used in how assessments (in general) are presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.</value>
        [JsonPropertyName("assessmentAccommodations")]
        public List<EdFiStudentAssessmentRegistrationAssessmentAccommodation>? AssessmentAccommodations { get { return this.AssessmentAccommodationsOption; } set { this.AssessmentAccommodationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentCustomizations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAssessmentRegistrationAssessmentCustomization>?> AssessmentCustomizationsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAssessmentRegistrationAssessmentCustomizations. Key/value pairs which may be used to facilitate customization of an assessment or to support vendor reporting/analysis.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentRegistrationAssessmentCustomizations. Key/value pairs which may be used to facilitate customization of an assessment or to support vendor reporting/analysis.</value>
        [JsonPropertyName("assessmentCustomizations")]
        public List<EdFiStudentAssessmentRegistrationAssessmentCustomization>? AssessmentCustomizations { get { return this.AssessmentCustomizationsOption; } set { this.AssessmentCustomizationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentGradeLevelDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssessmentGradeLevelDescriptorOption { get; private set; }

        /// <summary>
        /// The grade level or primary instructional level at which the student is to be assessed.
        /// </summary>
        /// <value>The grade level or primary instructional level at which the student is to be assessed.</value>
        [JsonPropertyName("assessmentGradeLevelDescriptor")]
        public string? AssessmentGradeLevelDescriptor { get { return this.AssessmentGradeLevelDescriptorOption; } set { this.AssessmentGradeLevelDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of PlatformTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PlatformTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The environment or format in which the assessment is expected to be administered.
        /// </summary>
        /// <value>The environment or format in which the assessment is expected to be administered.</value>
        [JsonPropertyName("platformTypeDescriptor")]
        public string? PlatformTypeDescriptor { get { return this.PlatformTypeDescriptorOption; } set { this.PlatformTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentAssessmentRegistration entity.
        /// </summary>
        /// <value>Extensions to the StudentAssessmentRegistration entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentAssessmentRegistration {\n");
            sb.Append("  AssessmentAdministrationReference: ").Append(AssessmentAdministrationReference).Append("\n");
            sb.Append("  StudentEducationOrganizationAssociationReference: ").Append(StudentEducationOrganizationAssociationReference).Append("\n");
            sb.Append("  StudentSchoolAssociationReference: ").Append(StudentSchoolAssociationReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReportingEducationOrganizationReference: ").Append(ReportingEducationOrganizationReference).Append("\n");
            sb.Append("  ScheduledStudentEducationOrganizationAssessmentAccommodationReference: ").Append(ScheduledStudentEducationOrganizationAssessmentAccommodationReference).Append("\n");
            sb.Append("  TestingEducationOrganizationReference: ").Append(TestingEducationOrganizationReference).Append("\n");
            sb.Append("  AssessmentAccommodations: ").Append(AssessmentAccommodations).Append("\n");
            sb.Append("  AssessmentCustomizations: ").Append(AssessmentCustomizations).Append("\n");
            sb.Append("  AssessmentGradeLevelDescriptor: ").Append(AssessmentGradeLevelDescriptor).Append("\n");
            sb.Append("  PlatformTypeDescriptor: ").Append(PlatformTypeDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssessmentGradeLevelDescriptor (string) maxLength
            if (this.AssessmentGradeLevelDescriptor != null && this.AssessmentGradeLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssessmentGradeLevelDescriptor, length must be less than 306.", new [] { "AssessmentGradeLevelDescriptor" });
            }

            // PlatformTypeDescriptor (string) maxLength
            if (this.PlatformTypeDescriptor != null && this.PlatformTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PlatformTypeDescriptor, length must be less than 306.", new [] { "PlatformTypeDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentAssessmentRegistration" />
    /// </summary>
    public class EdFiStudentAssessmentRegistrationJsonConverter : JsonConverter<EdFiStudentAssessmentRegistration>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentAssessmentRegistration" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentAssessmentRegistration Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiAssessmentAdministrationReference?> assessmentAdministrationReference = default;
            Option<EdFiStudentEducationOrganizationAssociationReference?> studentEducationOrganizationAssociationReference = default;
            Option<EdFiStudentSchoolAssociationReference?> studentSchoolAssociationReference = default;
            Option<string?> id = default;
            Option<EdFiEducationOrganizationReference?> reportingEducationOrganizationReference = default;
            Option<EdFiStudentEducationOrganizationAssessmentAccommodationReference?> scheduledStudentEducationOrganizationAssessmentAccommodationReference = default;
            Option<EdFiEducationOrganizationReference?> testingEducationOrganizationReference = default;
            Option<List<EdFiStudentAssessmentRegistrationAssessmentAccommodation>?> assessmentAccommodations = default;
            Option<List<EdFiStudentAssessmentRegistrationAssessmentCustomization>?> assessmentCustomizations = default;
            Option<string?> assessmentGradeLevelDescriptor = default;
            Option<string?> platformTypeDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assessmentAdministrationReference":
                            assessmentAdministrationReference = new Option<EdFiAssessmentAdministrationReference?>(JsonSerializer.Deserialize<EdFiAssessmentAdministrationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentEducationOrganizationAssociationReference":
                            studentEducationOrganizationAssociationReference = new Option<EdFiStudentEducationOrganizationAssociationReference?>(JsonSerializer.Deserialize<EdFiStudentEducationOrganizationAssociationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentSchoolAssociationReference":
                            studentSchoolAssociationReference = new Option<EdFiStudentSchoolAssociationReference?>(JsonSerializer.Deserialize<EdFiStudentSchoolAssociationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reportingEducationOrganizationReference":
                            reportingEducationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "scheduledStudentEducationOrganizationAssessmentAccommodationReference":
                            scheduledStudentEducationOrganizationAssessmentAccommodationReference = new Option<EdFiStudentEducationOrganizationAssessmentAccommodationReference?>(JsonSerializer.Deserialize<EdFiStudentEducationOrganizationAssessmentAccommodationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "testingEducationOrganizationReference":
                            testingEducationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assessmentAccommodations":
                            assessmentAccommodations = new Option<List<EdFiStudentAssessmentRegistrationAssessmentAccommodation>?>(JsonSerializer.Deserialize<List<EdFiStudentAssessmentRegistrationAssessmentAccommodation>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assessmentCustomizations":
                            assessmentCustomizations = new Option<List<EdFiStudentAssessmentRegistrationAssessmentCustomization>?>(JsonSerializer.Deserialize<List<EdFiStudentAssessmentRegistrationAssessmentCustomization>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assessmentGradeLevelDescriptor":
                            assessmentGradeLevelDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "platformTypeDescriptor":
                            platformTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assessmentAdministrationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessmentRegistration.", nameof(assessmentAdministrationReference));

            if (!studentEducationOrganizationAssociationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessmentRegistration.", nameof(studentEducationOrganizationAssociationReference));

            if (!studentSchoolAssociationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessmentRegistration.", nameof(studentSchoolAssociationReference));

            if (assessmentAdministrationReference.IsSet && assessmentAdministrationReference.Value == null)
                throw new ArgumentNullException(nameof(assessmentAdministrationReference), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            if (studentEducationOrganizationAssociationReference.IsSet && studentEducationOrganizationAssociationReference.Value == null)
                throw new ArgumentNullException(nameof(studentEducationOrganizationAssociationReference), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            if (studentSchoolAssociationReference.IsSet && studentSchoolAssociationReference.Value == null)
                throw new ArgumentNullException(nameof(studentSchoolAssociationReference), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            if (reportingEducationOrganizationReference.IsSet && reportingEducationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(reportingEducationOrganizationReference), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            if (scheduledStudentEducationOrganizationAssessmentAccommodationReference.IsSet && scheduledStudentEducationOrganizationAssessmentAccommodationReference.Value == null)
                throw new ArgumentNullException(nameof(scheduledStudentEducationOrganizationAssessmentAccommodationReference), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            if (testingEducationOrganizationReference.IsSet && testingEducationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(testingEducationOrganizationReference), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            if (assessmentAccommodations.IsSet && assessmentAccommodations.Value == null)
                throw new ArgumentNullException(nameof(assessmentAccommodations), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            if (assessmentCustomizations.IsSet && assessmentCustomizations.Value == null)
                throw new ArgumentNullException(nameof(assessmentCustomizations), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentAssessmentRegistration.");

            return new EdFiStudentAssessmentRegistration(assessmentAdministrationReference.Value!, studentEducationOrganizationAssociationReference.Value!, studentSchoolAssociationReference.Value!, id, reportingEducationOrganizationReference, scheduledStudentEducationOrganizationAssessmentAccommodationReference, testingEducationOrganizationReference, assessmentAccommodations, assessmentCustomizations, assessmentGradeLevelDescriptor, platformTypeDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentAssessmentRegistration" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAssessmentRegistration"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentAssessmentRegistration edFiStudentAssessmentRegistration, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentAssessmentRegistration, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentAssessmentRegistration" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAssessmentRegistration"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentAssessmentRegistration edFiStudentAssessmentRegistration, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentAssessmentRegistration.AssessmentAdministrationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentRegistration.AssessmentAdministrationReference), "Property is required for class EdFiStudentAssessmentRegistration.");

            if (edFiStudentAssessmentRegistration.StudentEducationOrganizationAssociationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentRegistration.StudentEducationOrganizationAssociationReference), "Property is required for class EdFiStudentAssessmentRegistration.");

            if (edFiStudentAssessmentRegistration.StudentSchoolAssociationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentRegistration.StudentSchoolAssociationReference), "Property is required for class EdFiStudentAssessmentRegistration.");

            if (edFiStudentAssessmentRegistration.IdOption.IsSet && edFiStudentAssessmentRegistration.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentRegistration.Id), "Property is required for class EdFiStudentAssessmentRegistration.");

            if (edFiStudentAssessmentRegistration.ReportingEducationOrganizationReferenceOption.IsSet && edFiStudentAssessmentRegistration.ReportingEducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentRegistration.ReportingEducationOrganizationReference), "Property is required for class EdFiStudentAssessmentRegistration.");

            if (edFiStudentAssessmentRegistration.ScheduledStudentEducationOrganizationAssessmentAccommodationReferenceOption.IsSet && edFiStudentAssessmentRegistration.ScheduledStudentEducationOrganizationAssessmentAccommodationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentRegistration.ScheduledStudentEducationOrganizationAssessmentAccommodationReference), "Property is required for class EdFiStudentAssessmentRegistration.");

            if (edFiStudentAssessmentRegistration.TestingEducationOrganizationReferenceOption.IsSet && edFiStudentAssessmentRegistration.TestingEducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentRegistration.TestingEducationOrganizationReference), "Property is required for class EdFiStudentAssessmentRegistration.");

            if (edFiStudentAssessmentRegistration.AssessmentAccommodationsOption.IsSet && edFiStudentAssessmentRegistration.AssessmentAccommodations == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentRegistration.AssessmentAccommodations), "Property is required for class EdFiStudentAssessmentRegistration.");

            if (edFiStudentAssessmentRegistration.AssessmentCustomizationsOption.IsSet && edFiStudentAssessmentRegistration.AssessmentCustomizations == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentRegistration.AssessmentCustomizations), "Property is required for class EdFiStudentAssessmentRegistration.");

            if (edFiStudentAssessmentRegistration.EtagOption.IsSet && edFiStudentAssessmentRegistration.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentRegistration.Etag), "Property is required for class EdFiStudentAssessmentRegistration.");

            if (edFiStudentAssessmentRegistration.ExtOption.IsSet && edFiStudentAssessmentRegistration.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentRegistration.Ext), "Property is required for class EdFiStudentAssessmentRegistration.");

            writer.WritePropertyName("assessmentAdministrationReference");
            JsonSerializer.Serialize(writer, edFiStudentAssessmentRegistration.AssessmentAdministrationReference, jsonSerializerOptions);
            writer.WritePropertyName("studentEducationOrganizationAssociationReference");
            JsonSerializer.Serialize(writer, edFiStudentAssessmentRegistration.StudentEducationOrganizationAssociationReference, jsonSerializerOptions);
            writer.WritePropertyName("studentSchoolAssociationReference");
            JsonSerializer.Serialize(writer, edFiStudentAssessmentRegistration.StudentSchoolAssociationReference, jsonSerializerOptions);
            if (edFiStudentAssessmentRegistration.IdOption.IsSet)
                writer.WriteString("id", edFiStudentAssessmentRegistration.Id);

            if (edFiStudentAssessmentRegistration.ReportingEducationOrganizationReferenceOption.IsSet)
            {
                writer.WritePropertyName("reportingEducationOrganizationReference");
                JsonSerializer.Serialize(writer, edFiStudentAssessmentRegistration.ReportingEducationOrganizationReference, jsonSerializerOptions);
            }
            if (edFiStudentAssessmentRegistration.ScheduledStudentEducationOrganizationAssessmentAccommodationReferenceOption.IsSet)
            {
                writer.WritePropertyName("scheduledStudentEducationOrganizationAssessmentAccommodationReference");
                JsonSerializer.Serialize(writer, edFiStudentAssessmentRegistration.ScheduledStudentEducationOrganizationAssessmentAccommodationReference, jsonSerializerOptions);
            }
            if (edFiStudentAssessmentRegistration.TestingEducationOrganizationReferenceOption.IsSet)
            {
                writer.WritePropertyName("testingEducationOrganizationReference");
                JsonSerializer.Serialize(writer, edFiStudentAssessmentRegistration.TestingEducationOrganizationReference, jsonSerializerOptions);
            }
            if (edFiStudentAssessmentRegistration.AssessmentAccommodationsOption.IsSet)
            {
                writer.WritePropertyName("assessmentAccommodations");
                JsonSerializer.Serialize(writer, edFiStudentAssessmentRegistration.AssessmentAccommodations, jsonSerializerOptions);
            }
            if (edFiStudentAssessmentRegistration.AssessmentCustomizationsOption.IsSet)
            {
                writer.WritePropertyName("assessmentCustomizations");
                JsonSerializer.Serialize(writer, edFiStudentAssessmentRegistration.AssessmentCustomizations, jsonSerializerOptions);
            }
            if (edFiStudentAssessmentRegistration.AssessmentGradeLevelDescriptorOption.IsSet)
                if (edFiStudentAssessmentRegistration.AssessmentGradeLevelDescriptorOption.Value != null)
                    writer.WriteString("assessmentGradeLevelDescriptor", edFiStudentAssessmentRegistration.AssessmentGradeLevelDescriptor);
                else
                    writer.WriteNull("assessmentGradeLevelDescriptor");

            if (edFiStudentAssessmentRegistration.PlatformTypeDescriptorOption.IsSet)
                if (edFiStudentAssessmentRegistration.PlatformTypeDescriptorOption.Value != null)
                    writer.WriteString("platformTypeDescriptor", edFiStudentAssessmentRegistration.PlatformTypeDescriptor);
                else
                    writer.WriteNull("platformTypeDescriptor");

            if (edFiStudentAssessmentRegistration.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentAssessmentRegistration.Etag);

            if (edFiStudentAssessmentRegistration.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentAssessmentRegistration.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentAssessmentRegistration.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentAssessmentRegistration.Ext, jsonSerializerOptions);
            }
        }
    }
}
