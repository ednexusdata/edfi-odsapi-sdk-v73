// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentAssessmentStudentObjectiveAssessment
    /// </summary>
    public partial class EdFiStudentAssessmentStudentObjectiveAssessment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentStudentObjectiveAssessment" /> class.
        /// </summary>
        /// <param name="objectiveAssessmentReference">objectiveAssessmentReference</param>
        /// <param name="administrationDate">The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.</param>
        /// <param name="administrationEndDate">The date and time an assessment administration ended.</param>
        /// <param name="assessedMinutes">Reported time student was assessed in minutes.</param>
        /// <param name="performanceLevels">An unordered collection of studentAssessmentStudentObjectiveAssessmentPerformanceLevels. The performance level(s) achieved for the objective assessment.</param>
        /// <param name="scoreResults">An unordered collection of studentAssessmentStudentObjectiveAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.</param>
        /// <param name="ext">Extensions to the StudentAssessmentStudentObjectiveAssessment entity.</param>
        [JsonConstructor]
        public EdFiStudentAssessmentStudentObjectiveAssessment(EdFiObjectiveAssessmentReference objectiveAssessmentReference, Option<DateTime?> administrationDate = default, Option<DateTime?> administrationEndDate = default, Option<int?> assessedMinutes = default, Option<List<EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel>?> performanceLevels = default, Option<List<EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult>?> scoreResults = default, Option<Object?> ext = default)
        {
            ObjectiveAssessmentReference = objectiveAssessmentReference;
            AdministrationDateOption = administrationDate;
            AdministrationEndDateOption = administrationEndDate;
            AssessedMinutesOption = assessedMinutes;
            PerformanceLevelsOption = performanceLevels;
            ScoreResultsOption = scoreResults;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ObjectiveAssessmentReference
        /// </summary>
        [JsonPropertyName("objectiveAssessmentReference")]
        public EdFiObjectiveAssessmentReference ObjectiveAssessmentReference { get; set; }

        /// <summary>
        /// Used to track the state of AdministrationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> AdministrationDateOption { get; private set; }

        /// <summary>
        /// The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
        /// </summary>
        /// <value>The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.</value>
        [JsonPropertyName("administrationDate")]
        public DateTime? AdministrationDate { get { return this.AdministrationDateOption; } set { this.AdministrationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of AdministrationEndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> AdministrationEndDateOption { get; private set; }

        /// <summary>
        /// The date and time an assessment administration ended.
        /// </summary>
        /// <value>The date and time an assessment administration ended.</value>
        [JsonPropertyName("administrationEndDate")]
        public DateTime? AdministrationEndDate { get { return this.AdministrationEndDateOption; } set { this.AdministrationEndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessedMinutes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AssessedMinutesOption { get; private set; }

        /// <summary>
        /// Reported time student was assessed in minutes.
        /// </summary>
        /// <value>Reported time student was assessed in minutes.</value>
        [JsonPropertyName("assessedMinutes")]
        public int? AssessedMinutes { get { return this.AssessedMinutesOption; } set { this.AssessedMinutesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PerformanceLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel>?> PerformanceLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAssessmentStudentObjectiveAssessmentPerformanceLevels. The performance level(s) achieved for the objective assessment.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentStudentObjectiveAssessmentPerformanceLevels. The performance level(s) achieved for the objective assessment.</value>
        [JsonPropertyName("performanceLevels")]
        public List<EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel>? PerformanceLevels { get { return this.PerformanceLevelsOption; } set { this.PerformanceLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScoreResults
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult>?> ScoreResultsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAssessmentStudentObjectiveAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        /// <value>An unordered collection of studentAssessmentStudentObjectiveAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.</value>
        [JsonPropertyName("scoreResults")]
        public List<EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult>? ScoreResults { get { return this.ScoreResultsOption; } set { this.ScoreResultsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentAssessmentStudentObjectiveAssessment entity.
        /// </summary>
        /// <value>Extensions to the StudentAssessmentStudentObjectiveAssessment entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentAssessmentStudentObjectiveAssessment {\n");
            sb.Append("  ObjectiveAssessmentReference: ").Append(ObjectiveAssessmentReference).Append("\n");
            sb.Append("  AdministrationDate: ").Append(AdministrationDate).Append("\n");
            sb.Append("  AdministrationEndDate: ").Append(AdministrationEndDate).Append("\n");
            sb.Append("  AssessedMinutes: ").Append(AssessedMinutes).Append("\n");
            sb.Append("  PerformanceLevels: ").Append(PerformanceLevels).Append("\n");
            sb.Append("  ScoreResults: ").Append(ScoreResults).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentAssessmentStudentObjectiveAssessment" />
    /// </summary>
    public class EdFiStudentAssessmentStudentObjectiveAssessmentJsonConverter : JsonConverter<EdFiStudentAssessmentStudentObjectiveAssessment>
    {
        /// <summary>
        /// The format to use to serialize AdministrationDate
        /// </summary>
        public static string AdministrationDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize AdministrationEndDate
        /// </summary>
        public static string AdministrationEndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentAssessmentStudentObjectiveAssessment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentAssessmentStudentObjectiveAssessment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiObjectiveAssessmentReference?> objectiveAssessmentReference = default;
            Option<DateTime?> administrationDate = default;
            Option<DateTime?> administrationEndDate = default;
            Option<int?> assessedMinutes = default;
            Option<List<EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel>?> performanceLevels = default;
            Option<List<EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult>?> scoreResults = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "objectiveAssessmentReference":
                            objectiveAssessmentReference = new Option<EdFiObjectiveAssessmentReference?>(JsonSerializer.Deserialize<EdFiObjectiveAssessmentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "administrationDate":
                            administrationDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "administrationEndDate":
                            administrationEndDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "assessedMinutes":
                            assessedMinutes = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "performanceLevels":
                            performanceLevels = new Option<List<EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel>?>(JsonSerializer.Deserialize<List<EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "scoreResults":
                            scoreResults = new Option<List<EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult>?>(JsonSerializer.Deserialize<List<EdFiStudentAssessmentStudentObjectiveAssessmentScoreResult>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!objectiveAssessmentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessmentStudentObjectiveAssessment.", nameof(objectiveAssessmentReference));

            if (objectiveAssessmentReference.IsSet && objectiveAssessmentReference.Value == null)
                throw new ArgumentNullException(nameof(objectiveAssessmentReference), "Property is not nullable for class EdFiStudentAssessmentStudentObjectiveAssessment.");

            if (performanceLevels.IsSet && performanceLevels.Value == null)
                throw new ArgumentNullException(nameof(performanceLevels), "Property is not nullable for class EdFiStudentAssessmentStudentObjectiveAssessment.");

            if (scoreResults.IsSet && scoreResults.Value == null)
                throw new ArgumentNullException(nameof(scoreResults), "Property is not nullable for class EdFiStudentAssessmentStudentObjectiveAssessment.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentAssessmentStudentObjectiveAssessment.");

            return new EdFiStudentAssessmentStudentObjectiveAssessment(objectiveAssessmentReference.Value!, administrationDate, administrationEndDate, assessedMinutes, performanceLevels, scoreResults, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentAssessmentStudentObjectiveAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAssessmentStudentObjectiveAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentAssessmentStudentObjectiveAssessment edFiStudentAssessmentStudentObjectiveAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentAssessmentStudentObjectiveAssessment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentAssessmentStudentObjectiveAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAssessmentStudentObjectiveAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentAssessmentStudentObjectiveAssessment edFiStudentAssessmentStudentObjectiveAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentAssessmentStudentObjectiveAssessment.ObjectiveAssessmentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentStudentObjectiveAssessment.ObjectiveAssessmentReference), "Property is required for class EdFiStudentAssessmentStudentObjectiveAssessment.");

            if (edFiStudentAssessmentStudentObjectiveAssessment.PerformanceLevelsOption.IsSet && edFiStudentAssessmentStudentObjectiveAssessment.PerformanceLevels == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentStudentObjectiveAssessment.PerformanceLevels), "Property is required for class EdFiStudentAssessmentStudentObjectiveAssessment.");

            if (edFiStudentAssessmentStudentObjectiveAssessment.ScoreResultsOption.IsSet && edFiStudentAssessmentStudentObjectiveAssessment.ScoreResults == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentStudentObjectiveAssessment.ScoreResults), "Property is required for class EdFiStudentAssessmentStudentObjectiveAssessment.");

            if (edFiStudentAssessmentStudentObjectiveAssessment.ExtOption.IsSet && edFiStudentAssessmentStudentObjectiveAssessment.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentStudentObjectiveAssessment.Ext), "Property is required for class EdFiStudentAssessmentStudentObjectiveAssessment.");

            writer.WritePropertyName("objectiveAssessmentReference");
            JsonSerializer.Serialize(writer, edFiStudentAssessmentStudentObjectiveAssessment.ObjectiveAssessmentReference, jsonSerializerOptions);
            if (edFiStudentAssessmentStudentObjectiveAssessment.AdministrationDateOption.IsSet)
                if (edFiStudentAssessmentStudentObjectiveAssessment.AdministrationDateOption.Value != null)
                    writer.WriteString("administrationDate", edFiStudentAssessmentStudentObjectiveAssessment.AdministrationDateOption.Value!.Value.ToString(AdministrationDateFormat));
                else
                    writer.WriteNull("administrationDate");

            if (edFiStudentAssessmentStudentObjectiveAssessment.AdministrationEndDateOption.IsSet)
                if (edFiStudentAssessmentStudentObjectiveAssessment.AdministrationEndDateOption.Value != null)
                    writer.WriteString("administrationEndDate", edFiStudentAssessmentStudentObjectiveAssessment.AdministrationEndDateOption.Value!.Value.ToString(AdministrationEndDateFormat));
                else
                    writer.WriteNull("administrationEndDate");

            if (edFiStudentAssessmentStudentObjectiveAssessment.AssessedMinutesOption.IsSet)
                if (edFiStudentAssessmentStudentObjectiveAssessment.AssessedMinutesOption.Value != null)
                    writer.WriteNumber("assessedMinutes", edFiStudentAssessmentStudentObjectiveAssessment.AssessedMinutesOption.Value!.Value);
                else
                    writer.WriteNull("assessedMinutes");

            if (edFiStudentAssessmentStudentObjectiveAssessment.PerformanceLevelsOption.IsSet)
            {
                writer.WritePropertyName("performanceLevels");
                JsonSerializer.Serialize(writer, edFiStudentAssessmentStudentObjectiveAssessment.PerformanceLevels, jsonSerializerOptions);
            }
            if (edFiStudentAssessmentStudentObjectiveAssessment.ScoreResultsOption.IsSet)
            {
                writer.WritePropertyName("scoreResults");
                JsonSerializer.Serialize(writer, edFiStudentAssessmentStudentObjectiveAssessment.ScoreResults, jsonSerializerOptions);
            }
            if (edFiStudentAssessmentStudentObjectiveAssessment.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentAssessmentStudentObjectiveAssessment.Ext, jsonSerializerOptions);
            }
        }
    }
}
