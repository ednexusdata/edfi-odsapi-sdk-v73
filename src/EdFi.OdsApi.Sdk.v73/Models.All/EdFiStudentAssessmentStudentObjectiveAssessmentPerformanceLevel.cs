// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel
    /// </summary>
    public partial class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel" /> class.
        /// </summary>
        /// <param name="assessmentReportingMethodDescriptor">The method that the instructor of the class uses to report the performance and achievement. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.</param>
        /// <param name="performanceLevelDescriptor">A specification of which performance level value describes the student proficiency.</param>
        /// <param name="performanceLevelIndicatorName">The name of the indicator being measured for a collection of performance level values.</param>
        /// <param name="ext">Extensions to the StudentAssessmentStudentObjectiveAssessmentPerformanceLevel entity.</param>
        [JsonConstructor]
        public EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel(string assessmentReportingMethodDescriptor, string performanceLevelDescriptor, Option<string?> performanceLevelIndicatorName = default, Option<Object?> ext = default)
        {
            AssessmentReportingMethodDescriptor = assessmentReportingMethodDescriptor;
            PerformanceLevelDescriptor = performanceLevelDescriptor;
            PerformanceLevelIndicatorNameOption = performanceLevelIndicatorName;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The method that the instructor of the class uses to report the performance and achievement. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        /// </summary>
        /// <value>The method that the instructor of the class uses to report the performance and achievement. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.</value>
        [JsonPropertyName("assessmentReportingMethodDescriptor")]
        public string AssessmentReportingMethodDescriptor { get; set; }

        /// <summary>
        /// A specification of which performance level value describes the student proficiency.
        /// </summary>
        /// <value>A specification of which performance level value describes the student proficiency.</value>
        [JsonPropertyName("performanceLevelDescriptor")]
        public string PerformanceLevelDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of PerformanceLevelIndicatorName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PerformanceLevelIndicatorNameOption { get; private set; }

        /// <summary>
        /// The name of the indicator being measured for a collection of performance level values.
        /// </summary>
        /// <value>The name of the indicator being measured for a collection of performance level values.</value>
        [JsonPropertyName("performanceLevelIndicatorName")]
        public string? PerformanceLevelIndicatorName { get { return this.PerformanceLevelIndicatorNameOption; } set { this.PerformanceLevelIndicatorNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentAssessmentStudentObjectiveAssessmentPerformanceLevel entity.
        /// </summary>
        /// <value>Extensions to the StudentAssessmentStudentObjectiveAssessmentPerformanceLevel entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel {\n");
            sb.Append("  AssessmentReportingMethodDescriptor: ").Append(AssessmentReportingMethodDescriptor).Append("\n");
            sb.Append("  PerformanceLevelDescriptor: ").Append(PerformanceLevelDescriptor).Append("\n");
            sb.Append("  PerformanceLevelIndicatorName: ").Append(PerformanceLevelIndicatorName).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssessmentReportingMethodDescriptor (string) maxLength
            if (this.AssessmentReportingMethodDescriptor != null && this.AssessmentReportingMethodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssessmentReportingMethodDescriptor, length must be less than 306.", new [] { "AssessmentReportingMethodDescriptor" });
            }

            // PerformanceLevelDescriptor (string) maxLength
            if (this.PerformanceLevelDescriptor != null && this.PerformanceLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PerformanceLevelDescriptor, length must be less than 306.", new [] { "PerformanceLevelDescriptor" });
            }

            // PerformanceLevelIndicatorName (string) maxLength
            if (this.PerformanceLevelIndicatorName != null && this.PerformanceLevelIndicatorName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for PerformanceLevelIndicatorName, length must be less than 60.", new [] { "PerformanceLevelIndicatorName" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel" />
    /// </summary>
    public class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevelJsonConverter : JsonConverter<EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> assessmentReportingMethodDescriptor = default;
            Option<string?> performanceLevelDescriptor = default;
            Option<string?> performanceLevelIndicatorName = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assessmentReportingMethodDescriptor":
                            assessmentReportingMethodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "performanceLevelDescriptor":
                            performanceLevelDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "performanceLevelIndicatorName":
                            performanceLevelIndicatorName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assessmentReportingMethodDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.", nameof(assessmentReportingMethodDescriptor));

            if (!performanceLevelDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.", nameof(performanceLevelDescriptor));

            if (assessmentReportingMethodDescriptor.IsSet && assessmentReportingMethodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(assessmentReportingMethodDescriptor), "Property is not nullable for class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.");

            if (performanceLevelDescriptor.IsSet && performanceLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(performanceLevelDescriptor), "Property is not nullable for class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.");

            return new EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel(assessmentReportingMethodDescriptor.Value!, performanceLevelDescriptor.Value!, performanceLevelIndicatorName, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.AssessmentReportingMethodDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.AssessmentReportingMethodDescriptor), "Property is required for class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.");

            if (edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.PerformanceLevelDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.PerformanceLevelDescriptor), "Property is required for class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.");

            if (edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.ExtOption.IsSet && edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.Ext), "Property is required for class EdFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.");

            writer.WriteString("assessmentReportingMethodDescriptor", edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.AssessmentReportingMethodDescriptor);

            writer.WriteString("performanceLevelDescriptor", edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.PerformanceLevelDescriptor);

            if (edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.PerformanceLevelIndicatorNameOption.IsSet)
                if (edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.PerformanceLevelIndicatorNameOption.Value != null)
                    writer.WriteString("performanceLevelIndicatorName", edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.PerformanceLevelIndicatorName);
                else
                    writer.WriteNull("performanceLevelIndicatorName");

            if (edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentAssessmentStudentObjectiveAssessmentPerformanceLevel.Ext, jsonSerializerOptions);
            }
        }
    }
}
