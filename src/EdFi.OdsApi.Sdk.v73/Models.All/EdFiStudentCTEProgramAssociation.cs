// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentCTEProgramAssociation
    /// </summary>
    public partial class EdFiStudentCTEProgramAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentCTEProgramAssociation" /> class.
        /// </summary>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="programReference">programReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="cteProgramServices">An unordered collection of studentCTEProgramAssociationCTEProgramServices. Indicates the service(s) being provided to the student by the CTE program.</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="nonTraditionalGenderStatus">Indicator that student is from a gender group that comprises less than 25% of the individuals employed in an occupation or field of work.</param>
        /// <param name="privateCTEProgram">Indicator that student participated in career and technical education at private agencies or institutions that are reported by the state for purposes of the Elementary and Secondary Education Act (ESEA). Students in private institutions which do not receive Perkins funding are reported only in the state file.</param>
        /// <param name="programParticipationStatuses">An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district.</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions.</param>
        /// <param name="technicalSkillsAssessmentDescriptor">Results of technical skills assessment aligned with industry recognized standards.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentCTEProgramAssociation entity.</param>
        [JsonConstructor]
        public EdFiStudentCTEProgramAssociation(DateOnly beginDate, EdFiEducationOrganizationReference educationOrganizationReference, EdFiProgramReference programReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<List<EdFiStudentCTEProgramAssociationCTEProgramService>?> cteProgramServices = default, Option<DateOnly?> endDate = default, Option<bool?> nonTraditionalGenderStatus = default, Option<bool?> privateCTEProgram = default, Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> programParticipationStatuses = default, Option<string?> reasonExitedDescriptor = default, Option<bool?> servedOutsideOfRegularSession = default, Option<string?> technicalSkillsAssessmentDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            BeginDate = beginDate;
            EducationOrganizationReference = educationOrganizationReference;
            ProgramReference = programReference;
            StudentReference = studentReference;
            IdOption = id;
            CteProgramServicesOption = cteProgramServices;
            EndDateOption = endDate;
            NonTraditionalGenderStatusOption = nonTraditionalGenderStatus;
            PrivateCTEProgramOption = privateCTEProgram;
            ProgramParticipationStatusesOption = programParticipationStatuses;
            ReasonExitedDescriptorOption = reasonExitedDescriptor;
            ServedOutsideOfRegularSessionOption = servedOutsideOfRegularSession;
            TechnicalSkillsAssessmentDescriptorOption = technicalSkillsAssessmentDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets ProgramReference
        /// </summary>
        [JsonPropertyName("programReference")]
        public EdFiProgramReference ProgramReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CteProgramServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentCTEProgramAssociationCTEProgramService>?> CteProgramServicesOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentCTEProgramAssociationCTEProgramServices. Indicates the service(s) being provided to the student by the CTE program.
        /// </summary>
        /// <value>An unordered collection of studentCTEProgramAssociationCTEProgramServices. Indicates the service(s) being provided to the student by the CTE program.</value>
        [JsonPropertyName("cteProgramServices")]
        public List<EdFiStudentCTEProgramAssociationCTEProgramService>? CteProgramServices { get { return this.CteProgramServicesOption; } set { this.CteProgramServicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of NonTraditionalGenderStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NonTraditionalGenderStatusOption { get; private set; }

        /// <summary>
        /// Indicator that student is from a gender group that comprises less than 25% of the individuals employed in an occupation or field of work.
        /// </summary>
        /// <value>Indicator that student is from a gender group that comprises less than 25% of the individuals employed in an occupation or field of work.</value>
        [JsonPropertyName("nonTraditionalGenderStatus")]
        public bool? NonTraditionalGenderStatus { get { return this.NonTraditionalGenderStatusOption; } set { this.NonTraditionalGenderStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrivateCTEProgram
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrivateCTEProgramOption { get; private set; }

        /// <summary>
        /// Indicator that student participated in career and technical education at private agencies or institutions that are reported by the state for purposes of the Elementary and Secondary Education Act (ESEA). Students in private institutions which do not receive Perkins funding are reported only in the state file.
        /// </summary>
        /// <value>Indicator that student participated in career and technical education at private agencies or institutions that are reported by the state for purposes of the Elementary and Secondary Education Act (ESEA). Students in private institutions which do not receive Perkins funding are reported only in the state file.</value>
        [JsonPropertyName("privateCTEProgram")]
        public bool? PrivateCTEProgram { get { return this.PrivateCTEProgramOption; } set { this.PrivateCTEProgramOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramParticipationStatuses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> ProgramParticipationStatusesOption { get; private set; }

        /// <summary>
        /// An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.
        /// </summary>
        /// <value>An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.</value>
        [JsonPropertyName("programParticipationStatuses")]
        public List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>? ProgramParticipationStatuses { get { return this.ProgramParticipationStatusesOption; } set { this.ProgramParticipationStatusesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReasonExitedDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonExitedDescriptorOption { get; private set; }

        /// <summary>
        /// The reason the student left the program within a school or district.
        /// </summary>
        /// <value>The reason the student left the program within a school or district.</value>
        [JsonPropertyName("reasonExitedDescriptor")]
        public string? ReasonExitedDescriptor { get { return this.ReasonExitedDescriptorOption; } set { this.ReasonExitedDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServedOutsideOfRegularSession
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ServedOutsideOfRegularSessionOption { get; private set; }

        /// <summary>
        /// Indicates whether the student received services during the summer session or between sessions.
        /// </summary>
        /// <value>Indicates whether the student received services during the summer session or between sessions.</value>
        [JsonPropertyName("servedOutsideOfRegularSession")]
        public bool? ServedOutsideOfRegularSession { get { return this.ServedOutsideOfRegularSessionOption; } set { this.ServedOutsideOfRegularSessionOption = new(value); } }

        /// <summary>
        /// Used to track the state of TechnicalSkillsAssessmentDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TechnicalSkillsAssessmentDescriptorOption { get; private set; }

        /// <summary>
        /// Results of technical skills assessment aligned with industry recognized standards.
        /// </summary>
        /// <value>Results of technical skills assessment aligned with industry recognized standards.</value>
        [JsonPropertyName("technicalSkillsAssessmentDescriptor")]
        public string? TechnicalSkillsAssessmentDescriptor { get { return this.TechnicalSkillsAssessmentDescriptorOption; } set { this.TechnicalSkillsAssessmentDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentCTEProgramAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentCTEProgramAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentCTEProgramAssociation {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  ProgramReference: ").Append(ProgramReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CteProgramServices: ").Append(CteProgramServices).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  NonTraditionalGenderStatus: ").Append(NonTraditionalGenderStatus).Append("\n");
            sb.Append("  PrivateCTEProgram: ").Append(PrivateCTEProgram).Append("\n");
            sb.Append("  ProgramParticipationStatuses: ").Append(ProgramParticipationStatuses).Append("\n");
            sb.Append("  ReasonExitedDescriptor: ").Append(ReasonExitedDescriptor).Append("\n");
            sb.Append("  ServedOutsideOfRegularSession: ").Append(ServedOutsideOfRegularSession).Append("\n");
            sb.Append("  TechnicalSkillsAssessmentDescriptor: ").Append(TechnicalSkillsAssessmentDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReasonExitedDescriptor (string) maxLength
            if (this.ReasonExitedDescriptor != null && this.ReasonExitedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ReasonExitedDescriptor, length must be less than 306.", new [] { "ReasonExitedDescriptor" });
            }

            // TechnicalSkillsAssessmentDescriptor (string) maxLength
            if (this.TechnicalSkillsAssessmentDescriptor != null && this.TechnicalSkillsAssessmentDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for TechnicalSkillsAssessmentDescriptor, length must be less than 306.", new [] { "TechnicalSkillsAssessmentDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentCTEProgramAssociation" />
    /// </summary>
    public class EdFiStudentCTEProgramAssociationJsonConverter : JsonConverter<EdFiStudentCTEProgramAssociation>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentCTEProgramAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentCTEProgramAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> beginDate = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiProgramReference?> programReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<List<EdFiStudentCTEProgramAssociationCTEProgramService>?> cteProgramServices = default;
            Option<DateOnly?> endDate = default;
            Option<bool?> nonTraditionalGenderStatus = default;
            Option<bool?> privateCTEProgram = default;
            Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> programParticipationStatuses = default;
            Option<string?> reasonExitedDescriptor = default;
            Option<bool?> servedOutsideOfRegularSession = default;
            Option<string?> technicalSkillsAssessmentDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programReference":
                            programReference = new Option<EdFiProgramReference?>(JsonSerializer.Deserialize<EdFiProgramReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cteProgramServices":
                            cteProgramServices = new Option<List<EdFiStudentCTEProgramAssociationCTEProgramService>?>(JsonSerializer.Deserialize<List<EdFiStudentCTEProgramAssociationCTEProgramService>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "nonTraditionalGenderStatus":
                            nonTraditionalGenderStatus = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "privateCTEProgram":
                            privateCTEProgram = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "programParticipationStatuses":
                            programParticipationStatuses = new Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?>(JsonSerializer.Deserialize<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reasonExitedDescriptor":
                            reasonExitedDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "servedOutsideOfRegularSession":
                            servedOutsideOfRegularSession = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "technicalSkillsAssessmentDescriptor":
                            technicalSkillsAssessmentDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentCTEProgramAssociation.", nameof(beginDate));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentCTEProgramAssociation.", nameof(educationOrganizationReference));

            if (!programReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentCTEProgramAssociation.", nameof(programReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentCTEProgramAssociation.", nameof(studentReference));

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiStudentCTEProgramAssociation.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStudentCTEProgramAssociation.");

            if (programReference.IsSet && programReference.Value == null)
                throw new ArgumentNullException(nameof(programReference), "Property is not nullable for class EdFiStudentCTEProgramAssociation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentCTEProgramAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentCTEProgramAssociation.");

            if (cteProgramServices.IsSet && cteProgramServices.Value == null)
                throw new ArgumentNullException(nameof(cteProgramServices), "Property is not nullable for class EdFiStudentCTEProgramAssociation.");

            if (programParticipationStatuses.IsSet && programParticipationStatuses.Value == null)
                throw new ArgumentNullException(nameof(programParticipationStatuses), "Property is not nullable for class EdFiStudentCTEProgramAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentCTEProgramAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentCTEProgramAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentCTEProgramAssociation.");

            return new EdFiStudentCTEProgramAssociation(beginDate.Value!.Value!, educationOrganizationReference.Value!, programReference.Value!, studentReference.Value!, id, cteProgramServices, endDate, nonTraditionalGenderStatus, privateCTEProgram, programParticipationStatuses, reasonExitedDescriptor, servedOutsideOfRegularSession, technicalSkillsAssessmentDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentCTEProgramAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentCTEProgramAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentCTEProgramAssociation edFiStudentCTEProgramAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentCTEProgramAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentCTEProgramAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentCTEProgramAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentCTEProgramAssociation edFiStudentCTEProgramAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentCTEProgramAssociation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentCTEProgramAssociation.EducationOrganizationReference), "Property is required for class EdFiStudentCTEProgramAssociation.");

            if (edFiStudentCTEProgramAssociation.ProgramReference == null)
                throw new ArgumentNullException(nameof(edFiStudentCTEProgramAssociation.ProgramReference), "Property is required for class EdFiStudentCTEProgramAssociation.");

            if (edFiStudentCTEProgramAssociation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentCTEProgramAssociation.StudentReference), "Property is required for class EdFiStudentCTEProgramAssociation.");

            if (edFiStudentCTEProgramAssociation.IdOption.IsSet && edFiStudentCTEProgramAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentCTEProgramAssociation.Id), "Property is required for class EdFiStudentCTEProgramAssociation.");

            if (edFiStudentCTEProgramAssociation.CteProgramServicesOption.IsSet && edFiStudentCTEProgramAssociation.CteProgramServices == null)
                throw new ArgumentNullException(nameof(edFiStudentCTEProgramAssociation.CteProgramServices), "Property is required for class EdFiStudentCTEProgramAssociation.");

            if (edFiStudentCTEProgramAssociation.ProgramParticipationStatusesOption.IsSet && edFiStudentCTEProgramAssociation.ProgramParticipationStatuses == null)
                throw new ArgumentNullException(nameof(edFiStudentCTEProgramAssociation.ProgramParticipationStatuses), "Property is required for class EdFiStudentCTEProgramAssociation.");

            if (edFiStudentCTEProgramAssociation.EtagOption.IsSet && edFiStudentCTEProgramAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentCTEProgramAssociation.Etag), "Property is required for class EdFiStudentCTEProgramAssociation.");

            if (edFiStudentCTEProgramAssociation.ExtOption.IsSet && edFiStudentCTEProgramAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentCTEProgramAssociation.Ext), "Property is required for class EdFiStudentCTEProgramAssociation.");

            writer.WriteString("beginDate", edFiStudentCTEProgramAssociation.BeginDate.ToString(BeginDateFormat));

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStudentCTEProgramAssociation.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("programReference");
            JsonSerializer.Serialize(writer, edFiStudentCTEProgramAssociation.ProgramReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentCTEProgramAssociation.StudentReference, jsonSerializerOptions);
            if (edFiStudentCTEProgramAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentCTEProgramAssociation.Id);

            if (edFiStudentCTEProgramAssociation.CteProgramServicesOption.IsSet)
            {
                writer.WritePropertyName("cteProgramServices");
                JsonSerializer.Serialize(writer, edFiStudentCTEProgramAssociation.CteProgramServices, jsonSerializerOptions);
            }
            if (edFiStudentCTEProgramAssociation.EndDateOption.IsSet)
                if (edFiStudentCTEProgramAssociation.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiStudentCTEProgramAssociation.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiStudentCTEProgramAssociation.NonTraditionalGenderStatusOption.IsSet)
                if (edFiStudentCTEProgramAssociation.NonTraditionalGenderStatusOption.Value != null)
                    writer.WriteBoolean("nonTraditionalGenderStatus", edFiStudentCTEProgramAssociation.NonTraditionalGenderStatusOption.Value!.Value);
                else
                    writer.WriteNull("nonTraditionalGenderStatus");

            if (edFiStudentCTEProgramAssociation.PrivateCTEProgramOption.IsSet)
                if (edFiStudentCTEProgramAssociation.PrivateCTEProgramOption.Value != null)
                    writer.WriteBoolean("privateCTEProgram", edFiStudentCTEProgramAssociation.PrivateCTEProgramOption.Value!.Value);
                else
                    writer.WriteNull("privateCTEProgram");

            if (edFiStudentCTEProgramAssociation.ProgramParticipationStatusesOption.IsSet)
            {
                writer.WritePropertyName("programParticipationStatuses");
                JsonSerializer.Serialize(writer, edFiStudentCTEProgramAssociation.ProgramParticipationStatuses, jsonSerializerOptions);
            }
            if (edFiStudentCTEProgramAssociation.ReasonExitedDescriptorOption.IsSet)
                if (edFiStudentCTEProgramAssociation.ReasonExitedDescriptorOption.Value != null)
                    writer.WriteString("reasonExitedDescriptor", edFiStudentCTEProgramAssociation.ReasonExitedDescriptor);
                else
                    writer.WriteNull("reasonExitedDescriptor");

            if (edFiStudentCTEProgramAssociation.ServedOutsideOfRegularSessionOption.IsSet)
                if (edFiStudentCTEProgramAssociation.ServedOutsideOfRegularSessionOption.Value != null)
                    writer.WriteBoolean("servedOutsideOfRegularSession", edFiStudentCTEProgramAssociation.ServedOutsideOfRegularSessionOption.Value!.Value);
                else
                    writer.WriteNull("servedOutsideOfRegularSession");

            if (edFiStudentCTEProgramAssociation.TechnicalSkillsAssessmentDescriptorOption.IsSet)
                if (edFiStudentCTEProgramAssociation.TechnicalSkillsAssessmentDescriptorOption.Value != null)
                    writer.WriteString("technicalSkillsAssessmentDescriptor", edFiStudentCTEProgramAssociation.TechnicalSkillsAssessmentDescriptor);
                else
                    writer.WriteNull("technicalSkillsAssessmentDescriptor");

            if (edFiStudentCTEProgramAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentCTEProgramAssociation.Etag);

            if (edFiStudentCTEProgramAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentCTEProgramAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentCTEProgramAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentCTEProgramAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
