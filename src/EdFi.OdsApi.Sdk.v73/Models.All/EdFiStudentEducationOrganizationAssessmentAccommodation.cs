// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentEducationOrganizationAssessmentAccommodation
    /// </summary>
    public partial class EdFiStudentEducationOrganizationAssessmentAccommodation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssessmentAccommodation" /> class.
        /// </summary>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="generalAccommodations">An unordered collection of studentEducationOrganizationAssessmentAccommodationGeneralAccommodations. The special variation(s) to be used in how assessments (in general) are presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentEducationOrganizationAssessmentAccommodation entity.</param>
        [JsonConstructor]
        public EdFiStudentEducationOrganizationAssessmentAccommodation(EdFiEducationOrganizationReference educationOrganizationReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<List<EdFiStudentEducationOrganizationAssessmentAccommodationGeneralAccommodation>?> generalAccommodations = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            EducationOrganizationReference = educationOrganizationReference;
            StudentReference = studentReference;
            IdOption = id;
            GeneralAccommodationsOption = generalAccommodations;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of GeneralAccommodations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentEducationOrganizationAssessmentAccommodationGeneralAccommodation>?> GeneralAccommodationsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssessmentAccommodationGeneralAccommodations. The special variation(s) to be used in how assessments (in general) are presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssessmentAccommodationGeneralAccommodations. The special variation(s) to be used in how assessments (in general) are presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.</value>
        [JsonPropertyName("generalAccommodations")]
        public List<EdFiStudentEducationOrganizationAssessmentAccommodationGeneralAccommodation>? GeneralAccommodations { get { return this.GeneralAccommodationsOption; } set { this.GeneralAccommodationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentEducationOrganizationAssessmentAccommodation entity.
        /// </summary>
        /// <value>Extensions to the StudentEducationOrganizationAssessmentAccommodation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentEducationOrganizationAssessmentAccommodation {\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GeneralAccommodations: ").Append(GeneralAccommodations).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentEducationOrganizationAssessmentAccommodation" />
    /// </summary>
    public class EdFiStudentEducationOrganizationAssessmentAccommodationJsonConverter : JsonConverter<EdFiStudentEducationOrganizationAssessmentAccommodation>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentEducationOrganizationAssessmentAccommodation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentEducationOrganizationAssessmentAccommodation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<List<EdFiStudentEducationOrganizationAssessmentAccommodationGeneralAccommodation>?> generalAccommodations = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "generalAccommodations":
                            generalAccommodations = new Option<List<EdFiStudentEducationOrganizationAssessmentAccommodationGeneralAccommodation>?>(JsonSerializer.Deserialize<List<EdFiStudentEducationOrganizationAssessmentAccommodationGeneralAccommodation>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentEducationOrganizationAssessmentAccommodation.", nameof(educationOrganizationReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentEducationOrganizationAssessmentAccommodation.", nameof(studentReference));

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            if (generalAccommodations.IsSet && generalAccommodations.Value == null)
                throw new ArgumentNullException(nameof(generalAccommodations), "Property is not nullable for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            return new EdFiStudentEducationOrganizationAssessmentAccommodation(educationOrganizationReference.Value!, studentReference.Value!, id, generalAccommodations, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentEducationOrganizationAssessmentAccommodation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentEducationOrganizationAssessmentAccommodation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentEducationOrganizationAssessmentAccommodation edFiStudentEducationOrganizationAssessmentAccommodation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentEducationOrganizationAssessmentAccommodation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentEducationOrganizationAssessmentAccommodation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentEducationOrganizationAssessmentAccommodation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentEducationOrganizationAssessmentAccommodation edFiStudentEducationOrganizationAssessmentAccommodation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentEducationOrganizationAssessmentAccommodation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssessmentAccommodation.EducationOrganizationReference), "Property is required for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            if (edFiStudentEducationOrganizationAssessmentAccommodation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssessmentAccommodation.StudentReference), "Property is required for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            if (edFiStudentEducationOrganizationAssessmentAccommodation.IdOption.IsSet && edFiStudentEducationOrganizationAssessmentAccommodation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssessmentAccommodation.Id), "Property is required for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            if (edFiStudentEducationOrganizationAssessmentAccommodation.GeneralAccommodationsOption.IsSet && edFiStudentEducationOrganizationAssessmentAccommodation.GeneralAccommodations == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssessmentAccommodation.GeneralAccommodations), "Property is required for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            if (edFiStudentEducationOrganizationAssessmentAccommodation.EtagOption.IsSet && edFiStudentEducationOrganizationAssessmentAccommodation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssessmentAccommodation.Etag), "Property is required for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            if (edFiStudentEducationOrganizationAssessmentAccommodation.ExtOption.IsSet && edFiStudentEducationOrganizationAssessmentAccommodation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssessmentAccommodation.Ext), "Property is required for class EdFiStudentEducationOrganizationAssessmentAccommodation.");

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStudentEducationOrganizationAssessmentAccommodation.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentEducationOrganizationAssessmentAccommodation.StudentReference, jsonSerializerOptions);
            if (edFiStudentEducationOrganizationAssessmentAccommodation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentEducationOrganizationAssessmentAccommodation.Id);

            if (edFiStudentEducationOrganizationAssessmentAccommodation.GeneralAccommodationsOption.IsSet)
            {
                writer.WritePropertyName("generalAccommodations");
                JsonSerializer.Serialize(writer, edFiStudentEducationOrganizationAssessmentAccommodation.GeneralAccommodations, jsonSerializerOptions);
            }
            if (edFiStudentEducationOrganizationAssessmentAccommodation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentEducationOrganizationAssessmentAccommodation.Etag);

            if (edFiStudentEducationOrganizationAssessmentAccommodation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentEducationOrganizationAssessmentAccommodation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentEducationOrganizationAssessmentAccommodation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentEducationOrganizationAssessmentAccommodation.Ext, jsonSerializerOptions);
            }
        }
    }
}
