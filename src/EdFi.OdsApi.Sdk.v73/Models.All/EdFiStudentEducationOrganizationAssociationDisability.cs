// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentEducationOrganizationAssociationDisability
    /// </summary>
    public partial class EdFiStudentEducationOrganizationAssociationDisability : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociationDisability" /> class.
        /// </summary>
        /// <param name="disabilityDescriptor">A disability category that describes a individual&#39;s impairment.</param>
        /// <param name="disabilityDeterminationSourceTypeDescriptor">The source that provided the disability determination.</param>
        /// <param name="disabilityDiagnosis">A description of the disability diagnosis.</param>
        /// <param name="orderOfDisability">The order by severity of individual&#39;s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.</param>
        /// <param name="designations">An unordered collection of studentEducationOrganizationAssociationDisabilityDesignations. Whether the disability is IDEA, Section 504, or other disability designation.</param>
        /// <param name="ext">Extensions to the StudentEducationOrganizationAssociationDisability entity.</param>
        [JsonConstructor]
        public EdFiStudentEducationOrganizationAssociationDisability(string disabilityDescriptor, Option<string?> disabilityDeterminationSourceTypeDescriptor = default, Option<string?> disabilityDiagnosis = default, Option<int?> orderOfDisability = default, Option<List<EdFiStudentEducationOrganizationAssociationDisabilityDesignation>?> designations = default, Option<Object?> ext = default)
        {
            DisabilityDescriptor = disabilityDescriptor;
            DisabilityDeterminationSourceTypeDescriptorOption = disabilityDeterminationSourceTypeDescriptor;
            DisabilityDiagnosisOption = disabilityDiagnosis;
            OrderOfDisabilityOption = orderOfDisability;
            DesignationsOption = designations;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A disability category that describes a individual&#39;s impairment.
        /// </summary>
        /// <value>A disability category that describes a individual&#39;s impairment.</value>
        [JsonPropertyName("disabilityDescriptor")]
        public string DisabilityDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of DisabilityDeterminationSourceTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisabilityDeterminationSourceTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The source that provided the disability determination.
        /// </summary>
        /// <value>The source that provided the disability determination.</value>
        [JsonPropertyName("disabilityDeterminationSourceTypeDescriptor")]
        public string? DisabilityDeterminationSourceTypeDescriptor { get { return this.DisabilityDeterminationSourceTypeDescriptorOption; } set { this.DisabilityDeterminationSourceTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisabilityDiagnosis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisabilityDiagnosisOption { get; private set; }

        /// <summary>
        /// A description of the disability diagnosis.
        /// </summary>
        /// <value>A description of the disability diagnosis.</value>
        [JsonPropertyName("disabilityDiagnosis")]
        public string? DisabilityDiagnosis { get { return this.DisabilityDiagnosisOption; } set { this.DisabilityDiagnosisOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrderOfDisability
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOfDisabilityOption { get; private set; }

        /// <summary>
        /// The order by severity of individual&#39;s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.
        /// </summary>
        /// <value>The order by severity of individual&#39;s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.</value>
        [JsonPropertyName("orderOfDisability")]
        public int? OrderOfDisability { get { return this.OrderOfDisabilityOption; } set { this.OrderOfDisabilityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Designations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentEducationOrganizationAssociationDisabilityDesignation>?> DesignationsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationDisabilityDesignations. Whether the disability is IDEA, Section 504, or other disability designation.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationDisabilityDesignations. Whether the disability is IDEA, Section 504, or other disability designation.</value>
        [JsonPropertyName("designations")]
        public List<EdFiStudentEducationOrganizationAssociationDisabilityDesignation>? Designations { get { return this.DesignationsOption; } set { this.DesignationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentEducationOrganizationAssociationDisability entity.
        /// </summary>
        /// <value>Extensions to the StudentEducationOrganizationAssociationDisability entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentEducationOrganizationAssociationDisability {\n");
            sb.Append("  DisabilityDescriptor: ").Append(DisabilityDescriptor).Append("\n");
            sb.Append("  DisabilityDeterminationSourceTypeDescriptor: ").Append(DisabilityDeterminationSourceTypeDescriptor).Append("\n");
            sb.Append("  DisabilityDiagnosis: ").Append(DisabilityDiagnosis).Append("\n");
            sb.Append("  OrderOfDisability: ").Append(OrderOfDisability).Append("\n");
            sb.Append("  Designations: ").Append(Designations).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisabilityDescriptor (string) maxLength
            if (this.DisabilityDescriptor != null && this.DisabilityDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DisabilityDescriptor, length must be less than 306.", new [] { "DisabilityDescriptor" });
            }

            // DisabilityDeterminationSourceTypeDescriptor (string) maxLength
            if (this.DisabilityDeterminationSourceTypeDescriptor != null && this.DisabilityDeterminationSourceTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DisabilityDeterminationSourceTypeDescriptor, length must be less than 306.", new [] { "DisabilityDeterminationSourceTypeDescriptor" });
            }

            // DisabilityDiagnosis (string) maxLength
            if (this.DisabilityDiagnosis != null && this.DisabilityDiagnosis.Length > 80)
            {
                yield return new ValidationResult("Invalid value for DisabilityDiagnosis, length must be less than 80.", new [] { "DisabilityDiagnosis" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentEducationOrganizationAssociationDisability" />
    /// </summary>
    public class EdFiStudentEducationOrganizationAssociationDisabilityJsonConverter : JsonConverter<EdFiStudentEducationOrganizationAssociationDisability>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentEducationOrganizationAssociationDisability" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentEducationOrganizationAssociationDisability Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> disabilityDescriptor = default;
            Option<string?> disabilityDeterminationSourceTypeDescriptor = default;
            Option<string?> disabilityDiagnosis = default;
            Option<int?> orderOfDisability = default;
            Option<List<EdFiStudentEducationOrganizationAssociationDisabilityDesignation>?> designations = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "disabilityDescriptor":
                            disabilityDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "disabilityDeterminationSourceTypeDescriptor":
                            disabilityDeterminationSourceTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "disabilityDiagnosis":
                            disabilityDiagnosis = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "orderOfDisability":
                            orderOfDisability = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "designations":
                            designations = new Option<List<EdFiStudentEducationOrganizationAssociationDisabilityDesignation>?>(JsonSerializer.Deserialize<List<EdFiStudentEducationOrganizationAssociationDisabilityDesignation>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!disabilityDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentEducationOrganizationAssociationDisability.", nameof(disabilityDescriptor));

            if (disabilityDescriptor.IsSet && disabilityDescriptor.Value == null)
                throw new ArgumentNullException(nameof(disabilityDescriptor), "Property is not nullable for class EdFiStudentEducationOrganizationAssociationDisability.");

            if (designations.IsSet && designations.Value == null)
                throw new ArgumentNullException(nameof(designations), "Property is not nullable for class EdFiStudentEducationOrganizationAssociationDisability.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentEducationOrganizationAssociationDisability.");

            return new EdFiStudentEducationOrganizationAssociationDisability(disabilityDescriptor.Value!, disabilityDeterminationSourceTypeDescriptor, disabilityDiagnosis, orderOfDisability, designations, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentEducationOrganizationAssociationDisability" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentEducationOrganizationAssociationDisability"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentEducationOrganizationAssociationDisability edFiStudentEducationOrganizationAssociationDisability, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentEducationOrganizationAssociationDisability, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentEducationOrganizationAssociationDisability" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentEducationOrganizationAssociationDisability"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentEducationOrganizationAssociationDisability edFiStudentEducationOrganizationAssociationDisability, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentEducationOrganizationAssociationDisability.DisabilityDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociationDisability.DisabilityDescriptor), "Property is required for class EdFiStudentEducationOrganizationAssociationDisability.");

            if (edFiStudentEducationOrganizationAssociationDisability.DesignationsOption.IsSet && edFiStudentEducationOrganizationAssociationDisability.Designations == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociationDisability.Designations), "Property is required for class EdFiStudentEducationOrganizationAssociationDisability.");

            if (edFiStudentEducationOrganizationAssociationDisability.ExtOption.IsSet && edFiStudentEducationOrganizationAssociationDisability.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociationDisability.Ext), "Property is required for class EdFiStudentEducationOrganizationAssociationDisability.");

            writer.WriteString("disabilityDescriptor", edFiStudentEducationOrganizationAssociationDisability.DisabilityDescriptor);

            if (edFiStudentEducationOrganizationAssociationDisability.DisabilityDeterminationSourceTypeDescriptorOption.IsSet)
                if (edFiStudentEducationOrganizationAssociationDisability.DisabilityDeterminationSourceTypeDescriptorOption.Value != null)
                    writer.WriteString("disabilityDeterminationSourceTypeDescriptor", edFiStudentEducationOrganizationAssociationDisability.DisabilityDeterminationSourceTypeDescriptor);
                else
                    writer.WriteNull("disabilityDeterminationSourceTypeDescriptor");

            if (edFiStudentEducationOrganizationAssociationDisability.DisabilityDiagnosisOption.IsSet)
                if (edFiStudentEducationOrganizationAssociationDisability.DisabilityDiagnosisOption.Value != null)
                    writer.WriteString("disabilityDiagnosis", edFiStudentEducationOrganizationAssociationDisability.DisabilityDiagnosis);
                else
                    writer.WriteNull("disabilityDiagnosis");

            if (edFiStudentEducationOrganizationAssociationDisability.OrderOfDisabilityOption.IsSet)
                if (edFiStudentEducationOrganizationAssociationDisability.OrderOfDisabilityOption.Value != null)
                    writer.WriteNumber("orderOfDisability", edFiStudentEducationOrganizationAssociationDisability.OrderOfDisabilityOption.Value!.Value);
                else
                    writer.WriteNull("orderOfDisability");

            if (edFiStudentEducationOrganizationAssociationDisability.DesignationsOption.IsSet)
            {
                writer.WritePropertyName("designations");
                JsonSerializer.Serialize(writer, edFiStudentEducationOrganizationAssociationDisability.Designations, jsonSerializerOptions);
            }
            if (edFiStudentEducationOrganizationAssociationDisability.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentEducationOrganizationAssociationDisability.Ext, jsonSerializerOptions);
            }
        }
    }
}
