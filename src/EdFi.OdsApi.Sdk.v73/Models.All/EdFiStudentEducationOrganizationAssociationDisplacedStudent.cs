// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentEducationOrganizationAssociationDisplacedStudent
    /// </summary>
    public partial class EdFiStudentEducationOrganizationAssociationDisplacedStudent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociationDisplacedStudent" /> class.
        /// </summary>
        /// <param name="displacedStudentStatusDescriptor">Indicates whether a student has been displaced as a result of a crisis event.</param>
        /// <param name="crisisEventReference">crisisEventReference</param>
        /// <param name="crisisHomelessnessIndicator">Any student considered homeless (defined by the McKinney-Vento Homeless Education Assistance Act as lacking a fixed, regular, and adequate nighttime residence) as a result of the crisis event.</param>
        /// <param name="displacedStudentEndDate">The date marking the end of the period during which a student is considered displaced due to a crisis event.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="displacedStudentStartDate">The date on which a student is officially identified as displaced due to a crisis event.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="ext">Extensions to the StudentEducationOrganizationAssociationDisplacedStudent entity.</param>
        [JsonConstructor]
        public EdFiStudentEducationOrganizationAssociationDisplacedStudent(string displacedStudentStatusDescriptor, EdFiCrisisEventReference crisisEventReference, Option<bool?> crisisHomelessnessIndicator = default, Option<DateOnly?> displacedStudentEndDate = default, Option<DateOnly?> displacedStudentStartDate = default, Option<Object?> ext = default)
        {
            DisplacedStudentStatusDescriptor = displacedStudentStatusDescriptor;
            CrisisEventReference = crisisEventReference;
            CrisisHomelessnessIndicatorOption = crisisHomelessnessIndicator;
            DisplacedStudentEndDateOption = displacedStudentEndDate;
            DisplacedStudentStartDateOption = displacedStudentStartDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Indicates whether a student has been displaced as a result of a crisis event.
        /// </summary>
        /// <value>Indicates whether a student has been displaced as a result of a crisis event.</value>
        [JsonPropertyName("displacedStudentStatusDescriptor")]
        public string DisplacedStudentStatusDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets CrisisEventReference
        /// </summary>
        [JsonPropertyName("crisisEventReference")]
        public EdFiCrisisEventReference CrisisEventReference { get; set; }

        /// <summary>
        /// Used to track the state of CrisisHomelessnessIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CrisisHomelessnessIndicatorOption { get; private set; }

        /// <summary>
        /// Any student considered homeless (defined by the McKinney-Vento Homeless Education Assistance Act as lacking a fixed, regular, and adequate nighttime residence) as a result of the crisis event.
        /// </summary>
        /// <value>Any student considered homeless (defined by the McKinney-Vento Homeless Education Assistance Act as lacking a fixed, regular, and adequate nighttime residence) as a result of the crisis event.</value>
        [JsonPropertyName("crisisHomelessnessIndicator")]
        public bool? CrisisHomelessnessIndicator { get { return this.CrisisHomelessnessIndicatorOption; } set { this.CrisisHomelessnessIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplacedStudentEndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DisplacedStudentEndDateOption { get; private set; }

        /// <summary>
        /// The date marking the end of the period during which a student is considered displaced due to a crisis event.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The date marking the end of the period during which a student is considered displaced due to a crisis event.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("displacedStudentEndDate")]
        public DateOnly? DisplacedStudentEndDate { get { return this.DisplacedStudentEndDateOption; } set { this.DisplacedStudentEndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplacedStudentStartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DisplacedStudentStartDateOption { get; private set; }

        /// <summary>
        /// The date on which a student is officially identified as displaced due to a crisis event.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The date on which a student is officially identified as displaced due to a crisis event.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("displacedStudentStartDate")]
        public DateOnly? DisplacedStudentStartDate { get { return this.DisplacedStudentStartDateOption; } set { this.DisplacedStudentStartDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentEducationOrganizationAssociationDisplacedStudent entity.
        /// </summary>
        /// <value>Extensions to the StudentEducationOrganizationAssociationDisplacedStudent entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentEducationOrganizationAssociationDisplacedStudent {\n");
            sb.Append("  DisplacedStudentStatusDescriptor: ").Append(DisplacedStudentStatusDescriptor).Append("\n");
            sb.Append("  CrisisEventReference: ").Append(CrisisEventReference).Append("\n");
            sb.Append("  CrisisHomelessnessIndicator: ").Append(CrisisHomelessnessIndicator).Append("\n");
            sb.Append("  DisplacedStudentEndDate: ").Append(DisplacedStudentEndDate).Append("\n");
            sb.Append("  DisplacedStudentStartDate: ").Append(DisplacedStudentStartDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplacedStudentStatusDescriptor (string) maxLength
            if (this.DisplacedStudentStatusDescriptor != null && this.DisplacedStudentStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DisplacedStudentStatusDescriptor, length must be less than 306.", new [] { "DisplacedStudentStatusDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentEducationOrganizationAssociationDisplacedStudent" />
    /// </summary>
    public class EdFiStudentEducationOrganizationAssociationDisplacedStudentJsonConverter : JsonConverter<EdFiStudentEducationOrganizationAssociationDisplacedStudent>
    {
        /// <summary>
        /// The format to use to serialize DisplacedStudentEndDate
        /// </summary>
        public static string DisplacedStudentEndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize DisplacedStudentStartDate
        /// </summary>
        public static string DisplacedStudentStartDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentEducationOrganizationAssociationDisplacedStudent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentEducationOrganizationAssociationDisplacedStudent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> displacedStudentStatusDescriptor = default;
            Option<EdFiCrisisEventReference?> crisisEventReference = default;
            Option<bool?> crisisHomelessnessIndicator = default;
            Option<DateOnly?> displacedStudentEndDate = default;
            Option<DateOnly?> displacedStudentStartDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "displacedStudentStatusDescriptor":
                            displacedStudentStatusDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "crisisEventReference":
                            crisisEventReference = new Option<EdFiCrisisEventReference?>(JsonSerializer.Deserialize<EdFiCrisisEventReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "crisisHomelessnessIndicator":
                            crisisHomelessnessIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "displacedStudentEndDate":
                            displacedStudentEndDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "displacedStudentStartDate":
                            displacedStudentStartDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!displacedStudentStatusDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentEducationOrganizationAssociationDisplacedStudent.", nameof(displacedStudentStatusDescriptor));

            if (!crisisEventReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentEducationOrganizationAssociationDisplacedStudent.", nameof(crisisEventReference));

            if (displacedStudentStatusDescriptor.IsSet && displacedStudentStatusDescriptor.Value == null)
                throw new ArgumentNullException(nameof(displacedStudentStatusDescriptor), "Property is not nullable for class EdFiStudentEducationOrganizationAssociationDisplacedStudent.");

            if (crisisEventReference.IsSet && crisisEventReference.Value == null)
                throw new ArgumentNullException(nameof(crisisEventReference), "Property is not nullable for class EdFiStudentEducationOrganizationAssociationDisplacedStudent.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentEducationOrganizationAssociationDisplacedStudent.");

            return new EdFiStudentEducationOrganizationAssociationDisplacedStudent(displacedStudentStatusDescriptor.Value!, crisisEventReference.Value!, crisisHomelessnessIndicator, displacedStudentEndDate, displacedStudentStartDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentEducationOrganizationAssociationDisplacedStudent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentEducationOrganizationAssociationDisplacedStudent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentEducationOrganizationAssociationDisplacedStudent edFiStudentEducationOrganizationAssociationDisplacedStudent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentEducationOrganizationAssociationDisplacedStudent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentEducationOrganizationAssociationDisplacedStudent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentEducationOrganizationAssociationDisplacedStudent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentEducationOrganizationAssociationDisplacedStudent edFiStudentEducationOrganizationAssociationDisplacedStudent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentEducationOrganizationAssociationDisplacedStudent.DisplacedStudentStatusDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociationDisplacedStudent.DisplacedStudentStatusDescriptor), "Property is required for class EdFiStudentEducationOrganizationAssociationDisplacedStudent.");

            if (edFiStudentEducationOrganizationAssociationDisplacedStudent.CrisisEventReference == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociationDisplacedStudent.CrisisEventReference), "Property is required for class EdFiStudentEducationOrganizationAssociationDisplacedStudent.");

            if (edFiStudentEducationOrganizationAssociationDisplacedStudent.ExtOption.IsSet && edFiStudentEducationOrganizationAssociationDisplacedStudent.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociationDisplacedStudent.Ext), "Property is required for class EdFiStudentEducationOrganizationAssociationDisplacedStudent.");

            writer.WriteString("displacedStudentStatusDescriptor", edFiStudentEducationOrganizationAssociationDisplacedStudent.DisplacedStudentStatusDescriptor);

            writer.WritePropertyName("crisisEventReference");
            JsonSerializer.Serialize(writer, edFiStudentEducationOrganizationAssociationDisplacedStudent.CrisisEventReference, jsonSerializerOptions);
            if (edFiStudentEducationOrganizationAssociationDisplacedStudent.CrisisHomelessnessIndicatorOption.IsSet)
                if (edFiStudentEducationOrganizationAssociationDisplacedStudent.CrisisHomelessnessIndicatorOption.Value != null)
                    writer.WriteBoolean("crisisHomelessnessIndicator", edFiStudentEducationOrganizationAssociationDisplacedStudent.CrisisHomelessnessIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("crisisHomelessnessIndicator");

            if (edFiStudentEducationOrganizationAssociationDisplacedStudent.DisplacedStudentEndDateOption.IsSet)
                if (edFiStudentEducationOrganizationAssociationDisplacedStudent.DisplacedStudentEndDateOption.Value != null)
                    writer.WriteString("displacedStudentEndDate", edFiStudentEducationOrganizationAssociationDisplacedStudent.DisplacedStudentEndDateOption.Value!.Value.ToString(DisplacedStudentEndDateFormat));
                else
                    writer.WriteNull("displacedStudentEndDate");

            if (edFiStudentEducationOrganizationAssociationDisplacedStudent.DisplacedStudentStartDateOption.IsSet)
                if (edFiStudentEducationOrganizationAssociationDisplacedStudent.DisplacedStudentStartDateOption.Value != null)
                    writer.WriteString("displacedStudentStartDate", edFiStudentEducationOrganizationAssociationDisplacedStudent.DisplacedStudentStartDateOption.Value!.Value.ToString(DisplacedStudentStartDateFormat));
                else
                    writer.WriteNull("displacedStudentStartDate");

            if (edFiStudentEducationOrganizationAssociationDisplacedStudent.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentEducationOrganizationAssociationDisplacedStudent.Ext, jsonSerializerOptions);
            }
        }
    }
}
