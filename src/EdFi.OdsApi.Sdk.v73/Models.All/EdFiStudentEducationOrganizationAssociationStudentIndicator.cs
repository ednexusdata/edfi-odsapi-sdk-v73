// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentEducationOrganizationAssociationStudentIndicator
    /// </summary>
    public partial class EdFiStudentEducationOrganizationAssociationStudentIndicator : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentEducationOrganizationAssociationStudentIndicator" /> class.
        /// </summary>
        /// <param name="indicatorName">The name of the indicator or metric.</param>
        /// <param name="indicator">The value of the indicator or metric.</param>
        /// <param name="designatedBy">The person, organization, or department that designated the program association.</param>
        /// <param name="indicatorGroup">The name for a group of indicators.</param>
        /// <param name="periods">An unordered collection of studentEducationOrganizationAssociationStudentIndicatorPeriods. The time periods for which the indicator was effective.</param>
        /// <param name="ext">Extensions to the StudentEducationOrganizationAssociationStudentIndicator entity.</param>
        [JsonConstructor]
        public EdFiStudentEducationOrganizationAssociationStudentIndicator(string indicatorName, string indicator, Option<string?> designatedBy = default, Option<string?> indicatorGroup = default, Option<List<EdFiStudentEducationOrganizationAssociationStudentIndicatorPeriod>?> periods = default, Option<Object?> ext = default)
        {
            IndicatorName = indicatorName;
            Indicator = indicator;
            DesignatedByOption = designatedBy;
            IndicatorGroupOption = indicatorGroup;
            PeriodsOption = periods;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name of the indicator or metric.
        /// </summary>
        /// <value>The name of the indicator or metric.</value>
        [JsonPropertyName("indicatorName")]
        public string IndicatorName { get; set; }

        /// <summary>
        /// The value of the indicator or metric.
        /// </summary>
        /// <value>The value of the indicator or metric.</value>
        [JsonPropertyName("indicator")]
        public string Indicator { get; set; }

        /// <summary>
        /// Used to track the state of DesignatedBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DesignatedByOption { get; private set; }

        /// <summary>
        /// The person, organization, or department that designated the program association.
        /// </summary>
        /// <value>The person, organization, or department that designated the program association.</value>
        [JsonPropertyName("designatedBy")]
        public string? DesignatedBy { get { return this.DesignatedByOption; } set { this.DesignatedByOption = new(value); } }

        /// <summary>
        /// Used to track the state of IndicatorGroup
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndicatorGroupOption { get; private set; }

        /// <summary>
        /// The name for a group of indicators.
        /// </summary>
        /// <value>The name for a group of indicators.</value>
        [JsonPropertyName("indicatorGroup")]
        public string? IndicatorGroup { get { return this.IndicatorGroupOption; } set { this.IndicatorGroupOption = new(value); } }

        /// <summary>
        /// Used to track the state of Periods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentEducationOrganizationAssociationStudentIndicatorPeriod>?> PeriodsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationStudentIndicatorPeriods. The time periods for which the indicator was effective.
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationStudentIndicatorPeriods. The time periods for which the indicator was effective.</value>
        [JsonPropertyName("periods")]
        public List<EdFiStudentEducationOrganizationAssociationStudentIndicatorPeriod>? Periods { get { return this.PeriodsOption; } set { this.PeriodsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentEducationOrganizationAssociationStudentIndicator entity.
        /// </summary>
        /// <value>Extensions to the StudentEducationOrganizationAssociationStudentIndicator entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentEducationOrganizationAssociationStudentIndicator {\n");
            sb.Append("  IndicatorName: ").Append(IndicatorName).Append("\n");
            sb.Append("  Indicator: ").Append(Indicator).Append("\n");
            sb.Append("  DesignatedBy: ").Append(DesignatedBy).Append("\n");
            sb.Append("  IndicatorGroup: ").Append(IndicatorGroup).Append("\n");
            sb.Append("  Periods: ").Append(Periods).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IndicatorName (string) maxLength
            if (this.IndicatorName != null && this.IndicatorName.Length > 200)
            {
                yield return new ValidationResult("Invalid value for IndicatorName, length must be less than 200.", new [] { "IndicatorName" });
            }

            // Indicator (string) maxLength
            if (this.Indicator != null && this.Indicator.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Indicator, length must be less than 60.", new [] { "Indicator" });
            }

            // DesignatedBy (string) maxLength
            if (this.DesignatedBy != null && this.DesignatedBy.Length > 60)
            {
                yield return new ValidationResult("Invalid value for DesignatedBy, length must be less than 60.", new [] { "DesignatedBy" });
            }

            // IndicatorGroup (string) maxLength
            if (this.IndicatorGroup != null && this.IndicatorGroup.Length > 200)
            {
                yield return new ValidationResult("Invalid value for IndicatorGroup, length must be less than 200.", new [] { "IndicatorGroup" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentEducationOrganizationAssociationStudentIndicator" />
    /// </summary>
    public class EdFiStudentEducationOrganizationAssociationStudentIndicatorJsonConverter : JsonConverter<EdFiStudentEducationOrganizationAssociationStudentIndicator>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentEducationOrganizationAssociationStudentIndicator" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentEducationOrganizationAssociationStudentIndicator Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> indicatorName = default;
            Option<string?> indicator = default;
            Option<string?> designatedBy = default;
            Option<string?> indicatorGroup = default;
            Option<List<EdFiStudentEducationOrganizationAssociationStudentIndicatorPeriod>?> periods = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "indicatorName":
                            indicatorName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "indicator":
                            indicator = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "designatedBy":
                            designatedBy = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "indicatorGroup":
                            indicatorGroup = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "periods":
                            periods = new Option<List<EdFiStudentEducationOrganizationAssociationStudentIndicatorPeriod>?>(JsonSerializer.Deserialize<List<EdFiStudentEducationOrganizationAssociationStudentIndicatorPeriod>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!indicatorName.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentEducationOrganizationAssociationStudentIndicator.", nameof(indicatorName));

            if (!indicator.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentEducationOrganizationAssociationStudentIndicator.", nameof(indicator));

            if (indicatorName.IsSet && indicatorName.Value == null)
                throw new ArgumentNullException(nameof(indicatorName), "Property is not nullable for class EdFiStudentEducationOrganizationAssociationStudentIndicator.");

            if (indicator.IsSet && indicator.Value == null)
                throw new ArgumentNullException(nameof(indicator), "Property is not nullable for class EdFiStudentEducationOrganizationAssociationStudentIndicator.");

            if (periods.IsSet && periods.Value == null)
                throw new ArgumentNullException(nameof(periods), "Property is not nullable for class EdFiStudentEducationOrganizationAssociationStudentIndicator.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentEducationOrganizationAssociationStudentIndicator.");

            return new EdFiStudentEducationOrganizationAssociationStudentIndicator(indicatorName.Value!, indicator.Value!, designatedBy, indicatorGroup, periods, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentEducationOrganizationAssociationStudentIndicator" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentEducationOrganizationAssociationStudentIndicator"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentEducationOrganizationAssociationStudentIndicator edFiStudentEducationOrganizationAssociationStudentIndicator, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentEducationOrganizationAssociationStudentIndicator, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentEducationOrganizationAssociationStudentIndicator" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentEducationOrganizationAssociationStudentIndicator"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentEducationOrganizationAssociationStudentIndicator edFiStudentEducationOrganizationAssociationStudentIndicator, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentEducationOrganizationAssociationStudentIndicator.IndicatorName == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociationStudentIndicator.IndicatorName), "Property is required for class EdFiStudentEducationOrganizationAssociationStudentIndicator.");

            if (edFiStudentEducationOrganizationAssociationStudentIndicator.Indicator == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociationStudentIndicator.Indicator), "Property is required for class EdFiStudentEducationOrganizationAssociationStudentIndicator.");

            if (edFiStudentEducationOrganizationAssociationStudentIndicator.PeriodsOption.IsSet && edFiStudentEducationOrganizationAssociationStudentIndicator.Periods == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociationStudentIndicator.Periods), "Property is required for class EdFiStudentEducationOrganizationAssociationStudentIndicator.");

            if (edFiStudentEducationOrganizationAssociationStudentIndicator.ExtOption.IsSet && edFiStudentEducationOrganizationAssociationStudentIndicator.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentEducationOrganizationAssociationStudentIndicator.Ext), "Property is required for class EdFiStudentEducationOrganizationAssociationStudentIndicator.");

            writer.WriteString("indicatorName", edFiStudentEducationOrganizationAssociationStudentIndicator.IndicatorName);

            writer.WriteString("indicator", edFiStudentEducationOrganizationAssociationStudentIndicator.Indicator);

            if (edFiStudentEducationOrganizationAssociationStudentIndicator.DesignatedByOption.IsSet)
                if (edFiStudentEducationOrganizationAssociationStudentIndicator.DesignatedByOption.Value != null)
                    writer.WriteString("designatedBy", edFiStudentEducationOrganizationAssociationStudentIndicator.DesignatedBy);
                else
                    writer.WriteNull("designatedBy");

            if (edFiStudentEducationOrganizationAssociationStudentIndicator.IndicatorGroupOption.IsSet)
                if (edFiStudentEducationOrganizationAssociationStudentIndicator.IndicatorGroupOption.Value != null)
                    writer.WriteString("indicatorGroup", edFiStudentEducationOrganizationAssociationStudentIndicator.IndicatorGroup);
                else
                    writer.WriteNull("indicatorGroup");

            if (edFiStudentEducationOrganizationAssociationStudentIndicator.PeriodsOption.IsSet)
            {
                writer.WritePropertyName("periods");
                JsonSerializer.Serialize(writer, edFiStudentEducationOrganizationAssociationStudentIndicator.Periods, jsonSerializerOptions);
            }
            if (edFiStudentEducationOrganizationAssociationStudentIndicator.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentEducationOrganizationAssociationStudentIndicator.Ext, jsonSerializerOptions);
            }
        }
    }
}
