// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentGradebookEntry
    /// </summary>
    public partial class EdFiStudentGradebookEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentGradebookEntry" /> class.
        /// </summary>
        /// <param name="gradebookEntryReference">gradebookEntryReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="assignmentLateStatusDescriptor">Status of whether the assignment was submitted after the due date and/or marked as.</param>
        /// <param name="competencyLevelDescriptor">The competency level assessed for the student for the referenced learning objective.</param>
        /// <param name="dateFulfilled">The date an assignment was turned in or the date of an assessment.</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score.</param>
        /// <param name="letterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</param>
        /// <param name="numericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</param>
        /// <param name="pointsEarned">The points earned for the submission. With extra credit, the points earned may exceed the max points.</param>
        /// <param name="submissionStatusDescriptor">The status of the student&#39;s submission.</param>
        /// <param name="timeFulfilled">The time an assignment was turned in on the date fulfilled.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentGradebookEntry entity.</param>
        [JsonConstructor]
        public EdFiStudentGradebookEntry(EdFiGradebookEntryReference gradebookEntryReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<string?> assignmentLateStatusDescriptor = default, Option<string?> competencyLevelDescriptor = default, Option<DateOnly?> dateFulfilled = default, Option<string?> diagnosticStatement = default, Option<string?> letterGradeEarned = default, Option<double?> numericGradeEarned = default, Option<double?> pointsEarned = default, Option<string?> submissionStatusDescriptor = default, Option<string?> timeFulfilled = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            GradebookEntryReference = gradebookEntryReference;
            StudentReference = studentReference;
            IdOption = id;
            AssignmentLateStatusDescriptorOption = assignmentLateStatusDescriptor;
            CompetencyLevelDescriptorOption = competencyLevelDescriptor;
            DateFulfilledOption = dateFulfilled;
            DiagnosticStatementOption = diagnosticStatement;
            LetterGradeEarnedOption = letterGradeEarned;
            NumericGradeEarnedOption = numericGradeEarned;
            PointsEarnedOption = pointsEarned;
            SubmissionStatusDescriptorOption = submissionStatusDescriptor;
            TimeFulfilledOption = timeFulfilled;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets GradebookEntryReference
        /// </summary>
        [JsonPropertyName("gradebookEntryReference")]
        public EdFiGradebookEntryReference GradebookEntryReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssignmentLateStatusDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssignmentLateStatusDescriptorOption { get; private set; }

        /// <summary>
        /// Status of whether the assignment was submitted after the due date and/or marked as.
        /// </summary>
        /// <value>Status of whether the assignment was submitted after the due date and/or marked as.</value>
        [JsonPropertyName("assignmentLateStatusDescriptor")]
        public string? AssignmentLateStatusDescriptor { get { return this.AssignmentLateStatusDescriptorOption; } set { this.AssignmentLateStatusDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CompetencyLevelDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CompetencyLevelDescriptorOption { get; private set; }

        /// <summary>
        /// The competency level assessed for the student for the referenced learning objective.
        /// </summary>
        /// <value>The competency level assessed for the student for the referenced learning objective.</value>
        [JsonPropertyName("competencyLevelDescriptor")]
        public string? CompetencyLevelDescriptor { get { return this.CompetencyLevelDescriptorOption; } set { this.CompetencyLevelDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateFulfilled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DateFulfilledOption { get; private set; }

        /// <summary>
        /// The date an assignment was turned in or the date of an assessment.
        /// </summary>
        /// <value>The date an assignment was turned in or the date of an assessment.</value>
        [JsonPropertyName("dateFulfilled")]
        public DateOnly? DateFulfilled { get { return this.DateFulfilledOption; } set { this.DateFulfilledOption = new(value); } }

        /// <summary>
        /// Used to track the state of DiagnosticStatement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DiagnosticStatementOption { get; private set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        /// <value>A statement provided by the teacher that provides information in addition to the grade or assessment score.</value>
        [JsonPropertyName("diagnosticStatement")]
        public string? DiagnosticStatement { get { return this.DiagnosticStatementOption; } set { this.DiagnosticStatementOption = new(value); } }

        /// <summary>
        /// Used to track the state of LetterGradeEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LetterGradeEarnedOption { get; private set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [JsonPropertyName("letterGradeEarned")]
        public string? LetterGradeEarned { get { return this.LetterGradeEarnedOption; } set { this.LetterGradeEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumericGradeEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NumericGradeEarnedOption { get; private set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [JsonPropertyName("numericGradeEarned")]
        public double? NumericGradeEarned { get { return this.NumericGradeEarnedOption; } set { this.NumericGradeEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of PointsEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PointsEarnedOption { get; private set; }

        /// <summary>
        /// The points earned for the submission. With extra credit, the points earned may exceed the max points.
        /// </summary>
        /// <value>The points earned for the submission. With extra credit, the points earned may exceed the max points.</value>
        [JsonPropertyName("pointsEarned")]
        public double? PointsEarned { get { return this.PointsEarnedOption; } set { this.PointsEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubmissionStatusDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubmissionStatusDescriptorOption { get; private set; }

        /// <summary>
        /// The status of the student&#39;s submission.
        /// </summary>
        /// <value>The status of the student&#39;s submission.</value>
        [JsonPropertyName("submissionStatusDescriptor")]
        public string? SubmissionStatusDescriptor { get { return this.SubmissionStatusDescriptorOption; } set { this.SubmissionStatusDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeFulfilled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TimeFulfilledOption { get; private set; }

        /// <summary>
        /// The time an assignment was turned in on the date fulfilled.
        /// </summary>
        /// <value>The time an assignment was turned in on the date fulfilled.</value>
        [JsonPropertyName("timeFulfilled")]
        public string? TimeFulfilled { get { return this.TimeFulfilledOption; } set { this.TimeFulfilledOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentGradebookEntry entity.
        /// </summary>
        /// <value>Extensions to the StudentGradebookEntry entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentGradebookEntry {\n");
            sb.Append("  GradebookEntryReference: ").Append(GradebookEntryReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssignmentLateStatusDescriptor: ").Append(AssignmentLateStatusDescriptor).Append("\n");
            sb.Append("  CompetencyLevelDescriptor: ").Append(CompetencyLevelDescriptor).Append("\n");
            sb.Append("  DateFulfilled: ").Append(DateFulfilled).Append("\n");
            sb.Append("  DiagnosticStatement: ").Append(DiagnosticStatement).Append("\n");
            sb.Append("  LetterGradeEarned: ").Append(LetterGradeEarned).Append("\n");
            sb.Append("  NumericGradeEarned: ").Append(NumericGradeEarned).Append("\n");
            sb.Append("  PointsEarned: ").Append(PointsEarned).Append("\n");
            sb.Append("  SubmissionStatusDescriptor: ").Append(SubmissionStatusDescriptor).Append("\n");
            sb.Append("  TimeFulfilled: ").Append(TimeFulfilled).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssignmentLateStatusDescriptor (string) maxLength
            if (this.AssignmentLateStatusDescriptor != null && this.AssignmentLateStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AssignmentLateStatusDescriptor, length must be less than 306.", new [] { "AssignmentLateStatusDescriptor" });
            }

            // CompetencyLevelDescriptor (string) maxLength
            if (this.CompetencyLevelDescriptor != null && this.CompetencyLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CompetencyLevelDescriptor, length must be less than 306.", new [] { "CompetencyLevelDescriptor" });
            }

            // DiagnosticStatement (string) maxLength
            if (this.DiagnosticStatement != null && this.DiagnosticStatement.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for DiagnosticStatement, length must be less than 1024.", new [] { "DiagnosticStatement" });
            }

            // LetterGradeEarned (string) maxLength
            if (this.LetterGradeEarned != null && this.LetterGradeEarned.Length > 20)
            {
                yield return new ValidationResult("Invalid value for LetterGradeEarned, length must be less than 20.", new [] { "LetterGradeEarned" });
            }

            // NumericGradeEarned (double) maximum
            if (this.NumericGradeEarnedOption.IsSet && this.NumericGradeEarnedOption.Value > (double)9999999.99)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, must be a value less than or equal to 9999999.99.", new [] { "NumericGradeEarned" });
            }

            // NumericGradeEarned (double) minimum
            if (this.NumericGradeEarnedOption.IsSet && this.NumericGradeEarnedOption.Value < (double)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for NumericGradeEarned, must be a value greater than or equal to -9999999.99.", new [] { "NumericGradeEarned" });
            }

            // PointsEarned (double) maximum
            if (this.PointsEarnedOption.IsSet && this.PointsEarnedOption.Value > (double)9999999.99)
            {
                yield return new ValidationResult("Invalid value for PointsEarned, must be a value less than or equal to 9999999.99.", new [] { "PointsEarned" });
            }

            // PointsEarned (double) minimum
            if (this.PointsEarnedOption.IsSet && this.PointsEarnedOption.Value < (double)-9999999.99)
            {
                yield return new ValidationResult("Invalid value for PointsEarned, must be a value greater than or equal to -9999999.99.", new [] { "PointsEarned" });
            }

            // SubmissionStatusDescriptor (string) maxLength
            if (this.SubmissionStatusDescriptor != null && this.SubmissionStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SubmissionStatusDescriptor, length must be less than 306.", new [] { "SubmissionStatusDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentGradebookEntry" />
    /// </summary>
    public class EdFiStudentGradebookEntryJsonConverter : JsonConverter<EdFiStudentGradebookEntry>
    {
        /// <summary>
        /// The format to use to serialize DateFulfilled
        /// </summary>
        public static string DateFulfilledFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentGradebookEntry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentGradebookEntry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiGradebookEntryReference?> gradebookEntryReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<string?> assignmentLateStatusDescriptor = default;
            Option<string?> competencyLevelDescriptor = default;
            Option<DateOnly?> dateFulfilled = default;
            Option<string?> diagnosticStatement = default;
            Option<string?> letterGradeEarned = default;
            Option<double?> numericGradeEarned = default;
            Option<double?> pointsEarned = default;
            Option<string?> submissionStatusDescriptor = default;
            Option<string?> timeFulfilled = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gradebookEntryReference":
                            gradebookEntryReference = new Option<EdFiGradebookEntryReference?>(JsonSerializer.Deserialize<EdFiGradebookEntryReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assignmentLateStatusDescriptor":
                            assignmentLateStatusDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "competencyLevelDescriptor":
                            competencyLevelDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dateFulfilled":
                            dateFulfilled = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "diagnosticStatement":
                            diagnosticStatement = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "letterGradeEarned":
                            letterGradeEarned = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "numericGradeEarned":
                            numericGradeEarned = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "pointsEarned":
                            pointsEarned = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "submissionStatusDescriptor":
                            submissionStatusDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timeFulfilled":
                            timeFulfilled = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!gradebookEntryReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentGradebookEntry.", nameof(gradebookEntryReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentGradebookEntry.", nameof(studentReference));

            if (gradebookEntryReference.IsSet && gradebookEntryReference.Value == null)
                throw new ArgumentNullException(nameof(gradebookEntryReference), "Property is not nullable for class EdFiStudentGradebookEntry.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentGradebookEntry.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentGradebookEntry.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentGradebookEntry.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentGradebookEntry.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentGradebookEntry.");

            return new EdFiStudentGradebookEntry(gradebookEntryReference.Value!, studentReference.Value!, id, assignmentLateStatusDescriptor, competencyLevelDescriptor, dateFulfilled, diagnosticStatement, letterGradeEarned, numericGradeEarned, pointsEarned, submissionStatusDescriptor, timeFulfilled, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentGradebookEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentGradebookEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentGradebookEntry edFiStudentGradebookEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentGradebookEntry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentGradebookEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentGradebookEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentGradebookEntry edFiStudentGradebookEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentGradebookEntry.GradebookEntryReference == null)
                throw new ArgumentNullException(nameof(edFiStudentGradebookEntry.GradebookEntryReference), "Property is required for class EdFiStudentGradebookEntry.");

            if (edFiStudentGradebookEntry.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentGradebookEntry.StudentReference), "Property is required for class EdFiStudentGradebookEntry.");

            if (edFiStudentGradebookEntry.IdOption.IsSet && edFiStudentGradebookEntry.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentGradebookEntry.Id), "Property is required for class EdFiStudentGradebookEntry.");

            if (edFiStudentGradebookEntry.EtagOption.IsSet && edFiStudentGradebookEntry.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentGradebookEntry.Etag), "Property is required for class EdFiStudentGradebookEntry.");

            if (edFiStudentGradebookEntry.ExtOption.IsSet && edFiStudentGradebookEntry.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentGradebookEntry.Ext), "Property is required for class EdFiStudentGradebookEntry.");

            writer.WritePropertyName("gradebookEntryReference");
            JsonSerializer.Serialize(writer, edFiStudentGradebookEntry.GradebookEntryReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentGradebookEntry.StudentReference, jsonSerializerOptions);
            if (edFiStudentGradebookEntry.IdOption.IsSet)
                writer.WriteString("id", edFiStudentGradebookEntry.Id);

            if (edFiStudentGradebookEntry.AssignmentLateStatusDescriptorOption.IsSet)
                if (edFiStudentGradebookEntry.AssignmentLateStatusDescriptorOption.Value != null)
                    writer.WriteString("assignmentLateStatusDescriptor", edFiStudentGradebookEntry.AssignmentLateStatusDescriptor);
                else
                    writer.WriteNull("assignmentLateStatusDescriptor");

            if (edFiStudentGradebookEntry.CompetencyLevelDescriptorOption.IsSet)
                if (edFiStudentGradebookEntry.CompetencyLevelDescriptorOption.Value != null)
                    writer.WriteString("competencyLevelDescriptor", edFiStudentGradebookEntry.CompetencyLevelDescriptor);
                else
                    writer.WriteNull("competencyLevelDescriptor");

            if (edFiStudentGradebookEntry.DateFulfilledOption.IsSet)
                if (edFiStudentGradebookEntry.DateFulfilledOption.Value != null)
                    writer.WriteString("dateFulfilled", edFiStudentGradebookEntry.DateFulfilledOption.Value!.Value.ToString(DateFulfilledFormat));
                else
                    writer.WriteNull("dateFulfilled");

            if (edFiStudentGradebookEntry.DiagnosticStatementOption.IsSet)
                if (edFiStudentGradebookEntry.DiagnosticStatementOption.Value != null)
                    writer.WriteString("diagnosticStatement", edFiStudentGradebookEntry.DiagnosticStatement);
                else
                    writer.WriteNull("diagnosticStatement");

            if (edFiStudentGradebookEntry.LetterGradeEarnedOption.IsSet)
                if (edFiStudentGradebookEntry.LetterGradeEarnedOption.Value != null)
                    writer.WriteString("letterGradeEarned", edFiStudentGradebookEntry.LetterGradeEarned);
                else
                    writer.WriteNull("letterGradeEarned");

            if (edFiStudentGradebookEntry.NumericGradeEarnedOption.IsSet)
                if (edFiStudentGradebookEntry.NumericGradeEarnedOption.Value != null)
                    writer.WriteNumber("numericGradeEarned", edFiStudentGradebookEntry.NumericGradeEarnedOption.Value!.Value);
                else
                    writer.WriteNull("numericGradeEarned");

            if (edFiStudentGradebookEntry.PointsEarnedOption.IsSet)
                if (edFiStudentGradebookEntry.PointsEarnedOption.Value != null)
                    writer.WriteNumber("pointsEarned", edFiStudentGradebookEntry.PointsEarnedOption.Value!.Value);
                else
                    writer.WriteNull("pointsEarned");

            if (edFiStudentGradebookEntry.SubmissionStatusDescriptorOption.IsSet)
                if (edFiStudentGradebookEntry.SubmissionStatusDescriptorOption.Value != null)
                    writer.WriteString("submissionStatusDescriptor", edFiStudentGradebookEntry.SubmissionStatusDescriptor);
                else
                    writer.WriteNull("submissionStatusDescriptor");

            if (edFiStudentGradebookEntry.TimeFulfilledOption.IsSet)
                if (edFiStudentGradebookEntry.TimeFulfilledOption.Value != null)
                    writer.WriteString("timeFulfilled", edFiStudentGradebookEntry.TimeFulfilled);
                else
                    writer.WriteNull("timeFulfilled");

            if (edFiStudentGradebookEntry.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentGradebookEntry.Etag);

            if (edFiStudentGradebookEntry.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentGradebookEntry.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentGradebookEntry.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentGradebookEntry.Ext, jsonSerializerOptions);
            }
        }
    }
}
