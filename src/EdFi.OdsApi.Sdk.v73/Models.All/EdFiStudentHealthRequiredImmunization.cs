// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentHealthRequiredImmunization
    /// </summary>
    public partial class EdFiStudentHealthRequiredImmunization : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentHealthRequiredImmunization" /> class.
        /// </summary>
        /// <param name="immunizationTypeDescriptor">An indication of the type of immunization that the student has received.</param>
        /// <param name="medicalExemption">The medical condition identified by a physician that contraindicates the vaccine.</param>
        /// <param name="medicalExemptionDate">The year, month, and day of the medical exemption by a physician.</param>
        /// <param name="dates">An unordered collection of studentHealthRequiredImmunizationDates. The year, month and day of the related required immunization.</param>
        /// <param name="ext">Extensions to the StudentHealthRequiredImmunization entity.</param>
        [JsonConstructor]
        public EdFiStudentHealthRequiredImmunization(string immunizationTypeDescriptor, Option<string?> medicalExemption = default, Option<DateOnly?> medicalExemptionDate = default, Option<List<EdFiStudentHealthRequiredImmunizationDate>?> dates = default, Option<Object?> ext = default)
        {
            ImmunizationTypeDescriptor = immunizationTypeDescriptor;
            MedicalExemptionOption = medicalExemption;
            MedicalExemptionDateOption = medicalExemptionDate;
            DatesOption = dates;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An indication of the type of immunization that the student has received.
        /// </summary>
        /// <value>An indication of the type of immunization that the student has received.</value>
        [JsonPropertyName("immunizationTypeDescriptor")]
        public string ImmunizationTypeDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of MedicalExemption
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MedicalExemptionOption { get; private set; }

        /// <summary>
        /// The medical condition identified by a physician that contraindicates the vaccine.
        /// </summary>
        /// <value>The medical condition identified by a physician that contraindicates the vaccine.</value>
        [JsonPropertyName("medicalExemption")]
        public string? MedicalExemption { get { return this.MedicalExemptionOption; } set { this.MedicalExemptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of MedicalExemptionDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> MedicalExemptionDateOption { get; private set; }

        /// <summary>
        /// The year, month, and day of the medical exemption by a physician.
        /// </summary>
        /// <value>The year, month, and day of the medical exemption by a physician.</value>
        [JsonPropertyName("medicalExemptionDate")]
        public DateOnly? MedicalExemptionDate { get { return this.MedicalExemptionDateOption; } set { this.MedicalExemptionDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dates
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentHealthRequiredImmunizationDate>?> DatesOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentHealthRequiredImmunizationDates. The year, month and day of the related required immunization.
        /// </summary>
        /// <value>An unordered collection of studentHealthRequiredImmunizationDates. The year, month and day of the related required immunization.</value>
        [JsonPropertyName("dates")]
        public List<EdFiStudentHealthRequiredImmunizationDate>? Dates { get { return this.DatesOption; } set { this.DatesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentHealthRequiredImmunization entity.
        /// </summary>
        /// <value>Extensions to the StudentHealthRequiredImmunization entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentHealthRequiredImmunization {\n");
            sb.Append("  ImmunizationTypeDescriptor: ").Append(ImmunizationTypeDescriptor).Append("\n");
            sb.Append("  MedicalExemption: ").Append(MedicalExemption).Append("\n");
            sb.Append("  MedicalExemptionDate: ").Append(MedicalExemptionDate).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ImmunizationTypeDescriptor (string) maxLength
            if (this.ImmunizationTypeDescriptor != null && this.ImmunizationTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ImmunizationTypeDescriptor, length must be less than 306.", new [] { "ImmunizationTypeDescriptor" });
            }

            // MedicalExemption (string) maxLength
            if (this.MedicalExemption != null && this.MedicalExemption.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for MedicalExemption, length must be less than 1024.", new [] { "MedicalExemption" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentHealthRequiredImmunization" />
    /// </summary>
    public class EdFiStudentHealthRequiredImmunizationJsonConverter : JsonConverter<EdFiStudentHealthRequiredImmunization>
    {
        /// <summary>
        /// The format to use to serialize MedicalExemptionDate
        /// </summary>
        public static string MedicalExemptionDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentHealthRequiredImmunization" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentHealthRequiredImmunization Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> immunizationTypeDescriptor = default;
            Option<string?> medicalExemption = default;
            Option<DateOnly?> medicalExemptionDate = default;
            Option<List<EdFiStudentHealthRequiredImmunizationDate>?> dates = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "immunizationTypeDescriptor":
                            immunizationTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "medicalExemption":
                            medicalExemption = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "medicalExemptionDate":
                            medicalExemptionDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dates":
                            dates = new Option<List<EdFiStudentHealthRequiredImmunizationDate>?>(JsonSerializer.Deserialize<List<EdFiStudentHealthRequiredImmunizationDate>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!immunizationTypeDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentHealthRequiredImmunization.", nameof(immunizationTypeDescriptor));

            if (immunizationTypeDescriptor.IsSet && immunizationTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(immunizationTypeDescriptor), "Property is not nullable for class EdFiStudentHealthRequiredImmunization.");

            if (dates.IsSet && dates.Value == null)
                throw new ArgumentNullException(nameof(dates), "Property is not nullable for class EdFiStudentHealthRequiredImmunization.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentHealthRequiredImmunization.");

            return new EdFiStudentHealthRequiredImmunization(immunizationTypeDescriptor.Value!, medicalExemption, medicalExemptionDate, dates, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentHealthRequiredImmunization" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentHealthRequiredImmunization"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentHealthRequiredImmunization edFiStudentHealthRequiredImmunization, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentHealthRequiredImmunization, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentHealthRequiredImmunization" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentHealthRequiredImmunization"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentHealthRequiredImmunization edFiStudentHealthRequiredImmunization, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentHealthRequiredImmunization.ImmunizationTypeDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentHealthRequiredImmunization.ImmunizationTypeDescriptor), "Property is required for class EdFiStudentHealthRequiredImmunization.");

            if (edFiStudentHealthRequiredImmunization.DatesOption.IsSet && edFiStudentHealthRequiredImmunization.Dates == null)
                throw new ArgumentNullException(nameof(edFiStudentHealthRequiredImmunization.Dates), "Property is required for class EdFiStudentHealthRequiredImmunization.");

            if (edFiStudentHealthRequiredImmunization.ExtOption.IsSet && edFiStudentHealthRequiredImmunization.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentHealthRequiredImmunization.Ext), "Property is required for class EdFiStudentHealthRequiredImmunization.");

            writer.WriteString("immunizationTypeDescriptor", edFiStudentHealthRequiredImmunization.ImmunizationTypeDescriptor);

            if (edFiStudentHealthRequiredImmunization.MedicalExemptionOption.IsSet)
                if (edFiStudentHealthRequiredImmunization.MedicalExemptionOption.Value != null)
                    writer.WriteString("medicalExemption", edFiStudentHealthRequiredImmunization.MedicalExemption);
                else
                    writer.WriteNull("medicalExemption");

            if (edFiStudentHealthRequiredImmunization.MedicalExemptionDateOption.IsSet)
                if (edFiStudentHealthRequiredImmunization.MedicalExemptionDateOption.Value != null)
                    writer.WriteString("medicalExemptionDate", edFiStudentHealthRequiredImmunization.MedicalExemptionDateOption.Value!.Value.ToString(MedicalExemptionDateFormat));
                else
                    writer.WriteNull("medicalExemptionDate");

            if (edFiStudentHealthRequiredImmunization.DatesOption.IsSet)
            {
                writer.WritePropertyName("dates");
                JsonSerializer.Serialize(writer, edFiStudentHealthRequiredImmunization.Dates, jsonSerializerOptions);
            }
            if (edFiStudentHealthRequiredImmunization.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentHealthRequiredImmunization.Ext, jsonSerializerOptions);
            }
        }
    }
}
