// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentHomelessProgramAssociation
    /// </summary>
    public partial class EdFiStudentHomelessProgramAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentHomelessProgramAssociation" /> class.
        /// </summary>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="programReference">programReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="awaitingFosterCare">State defined definition for awaiting foster care.</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="homelessPrimaryNighttimeResidenceDescriptor">The primary nighttime residence of the student at the time the student is identified as homeless.</param>
        /// <param name="homelessProgramServices">An unordered collection of studentHomelessProgramAssociationHomelessProgramServices. Indicates the service(s) being provided to the student by the homeless program.</param>
        /// <param name="homelessUnaccompaniedYouth">A homeless unaccompanied youth is a youth who is not in the physical custody of a parent or guardian and who fits the McKinney-Vento definition of homeless. Students must be both unaccompanied and homeless to be included as an unaccompanied homeless youth.</param>
        /// <param name="programParticipationStatuses">An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district.</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentHomelessProgramAssociation entity.</param>
        [JsonConstructor]
        public EdFiStudentHomelessProgramAssociation(DateOnly beginDate, EdFiEducationOrganizationReference educationOrganizationReference, EdFiProgramReference programReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<bool?> awaitingFosterCare = default, Option<DateOnly?> endDate = default, Option<string?> homelessPrimaryNighttimeResidenceDescriptor = default, Option<List<EdFiStudentHomelessProgramAssociationHomelessProgramService>?> homelessProgramServices = default, Option<bool?> homelessUnaccompaniedYouth = default, Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> programParticipationStatuses = default, Option<string?> reasonExitedDescriptor = default, Option<bool?> servedOutsideOfRegularSession = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            BeginDate = beginDate;
            EducationOrganizationReference = educationOrganizationReference;
            ProgramReference = programReference;
            StudentReference = studentReference;
            IdOption = id;
            AwaitingFosterCareOption = awaitingFosterCare;
            EndDateOption = endDate;
            HomelessPrimaryNighttimeResidenceDescriptorOption = homelessPrimaryNighttimeResidenceDescriptor;
            HomelessProgramServicesOption = homelessProgramServices;
            HomelessUnaccompaniedYouthOption = homelessUnaccompaniedYouth;
            ProgramParticipationStatusesOption = programParticipationStatuses;
            ReasonExitedDescriptorOption = reasonExitedDescriptor;
            ServedOutsideOfRegularSessionOption = servedOutsideOfRegularSession;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets ProgramReference
        /// </summary>
        [JsonPropertyName("programReference")]
        public EdFiProgramReference ProgramReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AwaitingFosterCare
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AwaitingFosterCareOption { get; private set; }

        /// <summary>
        /// State defined definition for awaiting foster care.
        /// </summary>
        /// <value>State defined definition for awaiting foster care.</value>
        [JsonPropertyName("awaitingFosterCare")]
        public bool? AwaitingFosterCare { get { return this.AwaitingFosterCareOption; } set { this.AwaitingFosterCareOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of HomelessPrimaryNighttimeResidenceDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HomelessPrimaryNighttimeResidenceDescriptorOption { get; private set; }

        /// <summary>
        /// The primary nighttime residence of the student at the time the student is identified as homeless.
        /// </summary>
        /// <value>The primary nighttime residence of the student at the time the student is identified as homeless.</value>
        [JsonPropertyName("homelessPrimaryNighttimeResidenceDescriptor")]
        public string? HomelessPrimaryNighttimeResidenceDescriptor { get { return this.HomelessPrimaryNighttimeResidenceDescriptorOption; } set { this.HomelessPrimaryNighttimeResidenceDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of HomelessProgramServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentHomelessProgramAssociationHomelessProgramService>?> HomelessProgramServicesOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentHomelessProgramAssociationHomelessProgramServices. Indicates the service(s) being provided to the student by the homeless program.
        /// </summary>
        /// <value>An unordered collection of studentHomelessProgramAssociationHomelessProgramServices. Indicates the service(s) being provided to the student by the homeless program.</value>
        [JsonPropertyName("homelessProgramServices")]
        public List<EdFiStudentHomelessProgramAssociationHomelessProgramService>? HomelessProgramServices { get { return this.HomelessProgramServicesOption; } set { this.HomelessProgramServicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of HomelessUnaccompaniedYouth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HomelessUnaccompaniedYouthOption { get; private set; }

        /// <summary>
        /// A homeless unaccompanied youth is a youth who is not in the physical custody of a parent or guardian and who fits the McKinney-Vento definition of homeless. Students must be both unaccompanied and homeless to be included as an unaccompanied homeless youth.
        /// </summary>
        /// <value>A homeless unaccompanied youth is a youth who is not in the physical custody of a parent or guardian and who fits the McKinney-Vento definition of homeless. Students must be both unaccompanied and homeless to be included as an unaccompanied homeless youth.</value>
        [JsonPropertyName("homelessUnaccompaniedYouth")]
        public bool? HomelessUnaccompaniedYouth { get { return this.HomelessUnaccompaniedYouthOption; } set { this.HomelessUnaccompaniedYouthOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramParticipationStatuses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> ProgramParticipationStatusesOption { get; private set; }

        /// <summary>
        /// An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.
        /// </summary>
        /// <value>An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.</value>
        [JsonPropertyName("programParticipationStatuses")]
        public List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>? ProgramParticipationStatuses { get { return this.ProgramParticipationStatusesOption; } set { this.ProgramParticipationStatusesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReasonExitedDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonExitedDescriptorOption { get; private set; }

        /// <summary>
        /// The reason the student left the program within a school or district.
        /// </summary>
        /// <value>The reason the student left the program within a school or district.</value>
        [JsonPropertyName("reasonExitedDescriptor")]
        public string? ReasonExitedDescriptor { get { return this.ReasonExitedDescriptorOption; } set { this.ReasonExitedDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServedOutsideOfRegularSession
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ServedOutsideOfRegularSessionOption { get; private set; }

        /// <summary>
        /// Indicates whether the student received services during the summer session or between sessions.
        /// </summary>
        /// <value>Indicates whether the student received services during the summer session or between sessions.</value>
        [JsonPropertyName("servedOutsideOfRegularSession")]
        public bool? ServedOutsideOfRegularSession { get { return this.ServedOutsideOfRegularSessionOption; } set { this.ServedOutsideOfRegularSessionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentHomelessProgramAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentHomelessProgramAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentHomelessProgramAssociation {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  ProgramReference: ").Append(ProgramReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AwaitingFosterCare: ").Append(AwaitingFosterCare).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  HomelessPrimaryNighttimeResidenceDescriptor: ").Append(HomelessPrimaryNighttimeResidenceDescriptor).Append("\n");
            sb.Append("  HomelessProgramServices: ").Append(HomelessProgramServices).Append("\n");
            sb.Append("  HomelessUnaccompaniedYouth: ").Append(HomelessUnaccompaniedYouth).Append("\n");
            sb.Append("  ProgramParticipationStatuses: ").Append(ProgramParticipationStatuses).Append("\n");
            sb.Append("  ReasonExitedDescriptor: ").Append(ReasonExitedDescriptor).Append("\n");
            sb.Append("  ServedOutsideOfRegularSession: ").Append(ServedOutsideOfRegularSession).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // HomelessPrimaryNighttimeResidenceDescriptor (string) maxLength
            if (this.HomelessPrimaryNighttimeResidenceDescriptor != null && this.HomelessPrimaryNighttimeResidenceDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for HomelessPrimaryNighttimeResidenceDescriptor, length must be less than 306.", new [] { "HomelessPrimaryNighttimeResidenceDescriptor" });
            }

            // ReasonExitedDescriptor (string) maxLength
            if (this.ReasonExitedDescriptor != null && this.ReasonExitedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ReasonExitedDescriptor, length must be less than 306.", new [] { "ReasonExitedDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentHomelessProgramAssociation" />
    /// </summary>
    public class EdFiStudentHomelessProgramAssociationJsonConverter : JsonConverter<EdFiStudentHomelessProgramAssociation>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentHomelessProgramAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentHomelessProgramAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> beginDate = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiProgramReference?> programReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<bool?> awaitingFosterCare = default;
            Option<DateOnly?> endDate = default;
            Option<string?> homelessPrimaryNighttimeResidenceDescriptor = default;
            Option<List<EdFiStudentHomelessProgramAssociationHomelessProgramService>?> homelessProgramServices = default;
            Option<bool?> homelessUnaccompaniedYouth = default;
            Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> programParticipationStatuses = default;
            Option<string?> reasonExitedDescriptor = default;
            Option<bool?> servedOutsideOfRegularSession = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programReference":
                            programReference = new Option<EdFiProgramReference?>(JsonSerializer.Deserialize<EdFiProgramReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "awaitingFosterCare":
                            awaitingFosterCare = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "homelessPrimaryNighttimeResidenceDescriptor":
                            homelessPrimaryNighttimeResidenceDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "homelessProgramServices":
                            homelessProgramServices = new Option<List<EdFiStudentHomelessProgramAssociationHomelessProgramService>?>(JsonSerializer.Deserialize<List<EdFiStudentHomelessProgramAssociationHomelessProgramService>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "homelessUnaccompaniedYouth":
                            homelessUnaccompaniedYouth = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "programParticipationStatuses":
                            programParticipationStatuses = new Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?>(JsonSerializer.Deserialize<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reasonExitedDescriptor":
                            reasonExitedDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "servedOutsideOfRegularSession":
                            servedOutsideOfRegularSession = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentHomelessProgramAssociation.", nameof(beginDate));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentHomelessProgramAssociation.", nameof(educationOrganizationReference));

            if (!programReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentHomelessProgramAssociation.", nameof(programReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentHomelessProgramAssociation.", nameof(studentReference));

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiStudentHomelessProgramAssociation.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStudentHomelessProgramAssociation.");

            if (programReference.IsSet && programReference.Value == null)
                throw new ArgumentNullException(nameof(programReference), "Property is not nullable for class EdFiStudentHomelessProgramAssociation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentHomelessProgramAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentHomelessProgramAssociation.");

            if (homelessProgramServices.IsSet && homelessProgramServices.Value == null)
                throw new ArgumentNullException(nameof(homelessProgramServices), "Property is not nullable for class EdFiStudentHomelessProgramAssociation.");

            if (programParticipationStatuses.IsSet && programParticipationStatuses.Value == null)
                throw new ArgumentNullException(nameof(programParticipationStatuses), "Property is not nullable for class EdFiStudentHomelessProgramAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentHomelessProgramAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentHomelessProgramAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentHomelessProgramAssociation.");

            return new EdFiStudentHomelessProgramAssociation(beginDate.Value!.Value!, educationOrganizationReference.Value!, programReference.Value!, studentReference.Value!, id, awaitingFosterCare, endDate, homelessPrimaryNighttimeResidenceDescriptor, homelessProgramServices, homelessUnaccompaniedYouth, programParticipationStatuses, reasonExitedDescriptor, servedOutsideOfRegularSession, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentHomelessProgramAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentHomelessProgramAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentHomelessProgramAssociation edFiStudentHomelessProgramAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentHomelessProgramAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentHomelessProgramAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentHomelessProgramAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentHomelessProgramAssociation edFiStudentHomelessProgramAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentHomelessProgramAssociation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentHomelessProgramAssociation.EducationOrganizationReference), "Property is required for class EdFiStudentHomelessProgramAssociation.");

            if (edFiStudentHomelessProgramAssociation.ProgramReference == null)
                throw new ArgumentNullException(nameof(edFiStudentHomelessProgramAssociation.ProgramReference), "Property is required for class EdFiStudentHomelessProgramAssociation.");

            if (edFiStudentHomelessProgramAssociation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentHomelessProgramAssociation.StudentReference), "Property is required for class EdFiStudentHomelessProgramAssociation.");

            if (edFiStudentHomelessProgramAssociation.IdOption.IsSet && edFiStudentHomelessProgramAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentHomelessProgramAssociation.Id), "Property is required for class EdFiStudentHomelessProgramAssociation.");

            if (edFiStudentHomelessProgramAssociation.HomelessProgramServicesOption.IsSet && edFiStudentHomelessProgramAssociation.HomelessProgramServices == null)
                throw new ArgumentNullException(nameof(edFiStudentHomelessProgramAssociation.HomelessProgramServices), "Property is required for class EdFiStudentHomelessProgramAssociation.");

            if (edFiStudentHomelessProgramAssociation.ProgramParticipationStatusesOption.IsSet && edFiStudentHomelessProgramAssociation.ProgramParticipationStatuses == null)
                throw new ArgumentNullException(nameof(edFiStudentHomelessProgramAssociation.ProgramParticipationStatuses), "Property is required for class EdFiStudentHomelessProgramAssociation.");

            if (edFiStudentHomelessProgramAssociation.EtagOption.IsSet && edFiStudentHomelessProgramAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentHomelessProgramAssociation.Etag), "Property is required for class EdFiStudentHomelessProgramAssociation.");

            if (edFiStudentHomelessProgramAssociation.ExtOption.IsSet && edFiStudentHomelessProgramAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentHomelessProgramAssociation.Ext), "Property is required for class EdFiStudentHomelessProgramAssociation.");

            writer.WriteString("beginDate", edFiStudentHomelessProgramAssociation.BeginDate.ToString(BeginDateFormat));

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStudentHomelessProgramAssociation.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("programReference");
            JsonSerializer.Serialize(writer, edFiStudentHomelessProgramAssociation.ProgramReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentHomelessProgramAssociation.StudentReference, jsonSerializerOptions);
            if (edFiStudentHomelessProgramAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentHomelessProgramAssociation.Id);

            if (edFiStudentHomelessProgramAssociation.AwaitingFosterCareOption.IsSet)
                if (edFiStudentHomelessProgramAssociation.AwaitingFosterCareOption.Value != null)
                    writer.WriteBoolean("awaitingFosterCare", edFiStudentHomelessProgramAssociation.AwaitingFosterCareOption.Value!.Value);
                else
                    writer.WriteNull("awaitingFosterCare");

            if (edFiStudentHomelessProgramAssociation.EndDateOption.IsSet)
                if (edFiStudentHomelessProgramAssociation.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiStudentHomelessProgramAssociation.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiStudentHomelessProgramAssociation.HomelessPrimaryNighttimeResidenceDescriptorOption.IsSet)
                if (edFiStudentHomelessProgramAssociation.HomelessPrimaryNighttimeResidenceDescriptorOption.Value != null)
                    writer.WriteString("homelessPrimaryNighttimeResidenceDescriptor", edFiStudentHomelessProgramAssociation.HomelessPrimaryNighttimeResidenceDescriptor);
                else
                    writer.WriteNull("homelessPrimaryNighttimeResidenceDescriptor");

            if (edFiStudentHomelessProgramAssociation.HomelessProgramServicesOption.IsSet)
            {
                writer.WritePropertyName("homelessProgramServices");
                JsonSerializer.Serialize(writer, edFiStudentHomelessProgramAssociation.HomelessProgramServices, jsonSerializerOptions);
            }
            if (edFiStudentHomelessProgramAssociation.HomelessUnaccompaniedYouthOption.IsSet)
                if (edFiStudentHomelessProgramAssociation.HomelessUnaccompaniedYouthOption.Value != null)
                    writer.WriteBoolean("homelessUnaccompaniedYouth", edFiStudentHomelessProgramAssociation.HomelessUnaccompaniedYouthOption.Value!.Value);
                else
                    writer.WriteNull("homelessUnaccompaniedYouth");

            if (edFiStudentHomelessProgramAssociation.ProgramParticipationStatusesOption.IsSet)
            {
                writer.WritePropertyName("programParticipationStatuses");
                JsonSerializer.Serialize(writer, edFiStudentHomelessProgramAssociation.ProgramParticipationStatuses, jsonSerializerOptions);
            }
            if (edFiStudentHomelessProgramAssociation.ReasonExitedDescriptorOption.IsSet)
                if (edFiStudentHomelessProgramAssociation.ReasonExitedDescriptorOption.Value != null)
                    writer.WriteString("reasonExitedDescriptor", edFiStudentHomelessProgramAssociation.ReasonExitedDescriptor);
                else
                    writer.WriteNull("reasonExitedDescriptor");

            if (edFiStudentHomelessProgramAssociation.ServedOutsideOfRegularSessionOption.IsSet)
                if (edFiStudentHomelessProgramAssociation.ServedOutsideOfRegularSessionOption.Value != null)
                    writer.WriteBoolean("servedOutsideOfRegularSession", edFiStudentHomelessProgramAssociation.ServedOutsideOfRegularSessionOption.Value!.Value);
                else
                    writer.WriteNull("servedOutsideOfRegularSession");

            if (edFiStudentHomelessProgramAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentHomelessProgramAssociation.Etag);

            if (edFiStudentHomelessProgramAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentHomelessProgramAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentHomelessProgramAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentHomelessProgramAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
