// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentInterventionAssociation
    /// </summary>
    public partial class EdFiStudentInterventionAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentInterventionAssociation" /> class.
        /// </summary>
        /// <param name="interventionReference">interventionReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="cohortReference">cohortReference</param>
        /// <param name="diagnosticStatement">A statement provided by the assigner that provides information regarding why the student was assigned to this intervention.</param>
        /// <param name="dosage">The duration of time in minutes for which the student was assigned to participate in the intervention.</param>
        /// <param name="interventionEffectivenesses">An unordered collection of studentInterventionAssociationInterventionEffectivenesses. A measure of the effects of an intervention in each outcome domain. The rating of effectiveness takes into account four factors: the quality of the research on the intervention, the statistical significance of the research findings, the size of the differences between participants in the intervention and comparison groups and the consistency in results.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentInterventionAssociation entity.</param>
        [JsonConstructor]
        public EdFiStudentInterventionAssociation(EdFiInterventionReference interventionReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<EdFiCohortReference?> cohortReference = default, Option<string?> diagnosticStatement = default, Option<int?> dosage = default, Option<List<EdFiStudentInterventionAssociationInterventionEffectiveness>?> interventionEffectivenesses = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            InterventionReference = interventionReference;
            StudentReference = studentReference;
            IdOption = id;
            CohortReferenceOption = cohortReference;
            DiagnosticStatementOption = diagnosticStatement;
            DosageOption = dosage;
            InterventionEffectivenessesOption = interventionEffectivenesses;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets InterventionReference
        /// </summary>
        [JsonPropertyName("interventionReference")]
        public EdFiInterventionReference InterventionReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CohortReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiCohortReference?> CohortReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets CohortReference
        /// </summary>
        [JsonPropertyName("cohortReference")]
        public EdFiCohortReference? CohortReference { get { return this.CohortReferenceOption; } set { this.CohortReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of DiagnosticStatement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DiagnosticStatementOption { get; private set; }

        /// <summary>
        /// A statement provided by the assigner that provides information regarding why the student was assigned to this intervention.
        /// </summary>
        /// <value>A statement provided by the assigner that provides information regarding why the student was assigned to this intervention.</value>
        [JsonPropertyName("diagnosticStatement")]
        public string? DiagnosticStatement { get { return this.DiagnosticStatementOption; } set { this.DiagnosticStatementOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dosage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DosageOption { get; private set; }

        /// <summary>
        /// The duration of time in minutes for which the student was assigned to participate in the intervention.
        /// </summary>
        /// <value>The duration of time in minutes for which the student was assigned to participate in the intervention.</value>
        [JsonPropertyName("dosage")]
        public int? Dosage { get { return this.DosageOption; } set { this.DosageOption = new(value); } }

        /// <summary>
        /// Used to track the state of InterventionEffectivenesses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentInterventionAssociationInterventionEffectiveness>?> InterventionEffectivenessesOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentInterventionAssociationInterventionEffectivenesses. A measure of the effects of an intervention in each outcome domain. The rating of effectiveness takes into account four factors: the quality of the research on the intervention, the statistical significance of the research findings, the size of the differences between participants in the intervention and comparison groups and the consistency in results.
        /// </summary>
        /// <value>An unordered collection of studentInterventionAssociationInterventionEffectivenesses. A measure of the effects of an intervention in each outcome domain. The rating of effectiveness takes into account four factors: the quality of the research on the intervention, the statistical significance of the research findings, the size of the differences between participants in the intervention and comparison groups and the consistency in results.</value>
        [JsonPropertyName("interventionEffectivenesses")]
        public List<EdFiStudentInterventionAssociationInterventionEffectiveness>? InterventionEffectivenesses { get { return this.InterventionEffectivenessesOption; } set { this.InterventionEffectivenessesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentInterventionAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentInterventionAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentInterventionAssociation {\n");
            sb.Append("  InterventionReference: ").Append(InterventionReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CohortReference: ").Append(CohortReference).Append("\n");
            sb.Append("  DiagnosticStatement: ").Append(DiagnosticStatement).Append("\n");
            sb.Append("  Dosage: ").Append(Dosage).Append("\n");
            sb.Append("  InterventionEffectivenesses: ").Append(InterventionEffectivenesses).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DiagnosticStatement (string) maxLength
            if (this.DiagnosticStatement != null && this.DiagnosticStatement.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for DiagnosticStatement, length must be less than 1024.", new [] { "DiagnosticStatement" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentInterventionAssociation" />
    /// </summary>
    public class EdFiStudentInterventionAssociationJsonConverter : JsonConverter<EdFiStudentInterventionAssociation>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentInterventionAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentInterventionAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiInterventionReference?> interventionReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<EdFiCohortReference?> cohortReference = default;
            Option<string?> diagnosticStatement = default;
            Option<int?> dosage = default;
            Option<List<EdFiStudentInterventionAssociationInterventionEffectiveness>?> interventionEffectivenesses = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "interventionReference":
                            interventionReference = new Option<EdFiInterventionReference?>(JsonSerializer.Deserialize<EdFiInterventionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cohortReference":
                            cohortReference = new Option<EdFiCohortReference?>(JsonSerializer.Deserialize<EdFiCohortReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "diagnosticStatement":
                            diagnosticStatement = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dosage":
                            dosage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "interventionEffectivenesses":
                            interventionEffectivenesses = new Option<List<EdFiStudentInterventionAssociationInterventionEffectiveness>?>(JsonSerializer.Deserialize<List<EdFiStudentInterventionAssociationInterventionEffectiveness>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!interventionReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentInterventionAssociation.", nameof(interventionReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentInterventionAssociation.", nameof(studentReference));

            if (interventionReference.IsSet && interventionReference.Value == null)
                throw new ArgumentNullException(nameof(interventionReference), "Property is not nullable for class EdFiStudentInterventionAssociation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentInterventionAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentInterventionAssociation.");

            if (cohortReference.IsSet && cohortReference.Value == null)
                throw new ArgumentNullException(nameof(cohortReference), "Property is not nullable for class EdFiStudentInterventionAssociation.");

            if (interventionEffectivenesses.IsSet && interventionEffectivenesses.Value == null)
                throw new ArgumentNullException(nameof(interventionEffectivenesses), "Property is not nullable for class EdFiStudentInterventionAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentInterventionAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentInterventionAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentInterventionAssociation.");

            return new EdFiStudentInterventionAssociation(interventionReference.Value!, studentReference.Value!, id, cohortReference, diagnosticStatement, dosage, interventionEffectivenesses, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentInterventionAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentInterventionAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentInterventionAssociation edFiStudentInterventionAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentInterventionAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentInterventionAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentInterventionAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentInterventionAssociation edFiStudentInterventionAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentInterventionAssociation.InterventionReference == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociation.InterventionReference), "Property is required for class EdFiStudentInterventionAssociation.");

            if (edFiStudentInterventionAssociation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociation.StudentReference), "Property is required for class EdFiStudentInterventionAssociation.");

            if (edFiStudentInterventionAssociation.IdOption.IsSet && edFiStudentInterventionAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociation.Id), "Property is required for class EdFiStudentInterventionAssociation.");

            if (edFiStudentInterventionAssociation.CohortReferenceOption.IsSet && edFiStudentInterventionAssociation.CohortReference == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociation.CohortReference), "Property is required for class EdFiStudentInterventionAssociation.");

            if (edFiStudentInterventionAssociation.InterventionEffectivenessesOption.IsSet && edFiStudentInterventionAssociation.InterventionEffectivenesses == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociation.InterventionEffectivenesses), "Property is required for class EdFiStudentInterventionAssociation.");

            if (edFiStudentInterventionAssociation.EtagOption.IsSet && edFiStudentInterventionAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociation.Etag), "Property is required for class EdFiStudentInterventionAssociation.");

            if (edFiStudentInterventionAssociation.ExtOption.IsSet && edFiStudentInterventionAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociation.Ext), "Property is required for class EdFiStudentInterventionAssociation.");

            writer.WritePropertyName("interventionReference");
            JsonSerializer.Serialize(writer, edFiStudentInterventionAssociation.InterventionReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentInterventionAssociation.StudentReference, jsonSerializerOptions);
            if (edFiStudentInterventionAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentInterventionAssociation.Id);

            if (edFiStudentInterventionAssociation.CohortReferenceOption.IsSet)
            {
                writer.WritePropertyName("cohortReference");
                JsonSerializer.Serialize(writer, edFiStudentInterventionAssociation.CohortReference, jsonSerializerOptions);
            }
            if (edFiStudentInterventionAssociation.DiagnosticStatementOption.IsSet)
                if (edFiStudentInterventionAssociation.DiagnosticStatementOption.Value != null)
                    writer.WriteString("diagnosticStatement", edFiStudentInterventionAssociation.DiagnosticStatement);
                else
                    writer.WriteNull("diagnosticStatement");

            if (edFiStudentInterventionAssociation.DosageOption.IsSet)
                if (edFiStudentInterventionAssociation.DosageOption.Value != null)
                    writer.WriteNumber("dosage", edFiStudentInterventionAssociation.DosageOption.Value!.Value);
                else
                    writer.WriteNull("dosage");

            if (edFiStudentInterventionAssociation.InterventionEffectivenessesOption.IsSet)
            {
                writer.WritePropertyName("interventionEffectivenesses");
                JsonSerializer.Serialize(writer, edFiStudentInterventionAssociation.InterventionEffectivenesses, jsonSerializerOptions);
            }
            if (edFiStudentInterventionAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentInterventionAssociation.Etag);

            if (edFiStudentInterventionAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentInterventionAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentInterventionAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentInterventionAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
