// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentInterventionAssociationInterventionEffectiveness
    /// </summary>
    public partial class EdFiStudentInterventionAssociationInterventionEffectiveness : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentInterventionAssociationInterventionEffectiveness" /> class.
        /// </summary>
        /// <param name="diagnosisDescriptor">Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.</param>
        /// <param name="gradeLevelDescriptor">Grade level for which effectiveness is measured.</param>
        /// <param name="populationServedDescriptor">Population for which effectiveness is measured.</param>
        /// <param name="interventionEffectivenessRatingDescriptor">An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.</param>
        /// <param name="improvementIndex">Along a percentile distribution of students, the improvement index represents the change in an average student&#39;s percentile rank that is considered to be due to the intervention.</param>
        /// <param name="ext">Extensions to the StudentInterventionAssociationInterventionEffectiveness entity.</param>
        [JsonConstructor]
        public EdFiStudentInterventionAssociationInterventionEffectiveness(string diagnosisDescriptor, string gradeLevelDescriptor, string populationServedDescriptor, string interventionEffectivenessRatingDescriptor, Option<int?> improvementIndex = default, Option<Object?> ext = default)
        {
            DiagnosisDescriptor = diagnosisDescriptor;
            GradeLevelDescriptor = gradeLevelDescriptor;
            PopulationServedDescriptor = populationServedDescriptor;
            InterventionEffectivenessRatingDescriptor = interventionEffectivenessRatingDescriptor;
            ImprovementIndexOption = improvementIndex;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.
        /// </summary>
        /// <value>Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.</value>
        [JsonPropertyName("diagnosisDescriptor")]
        public string DiagnosisDescriptor { get; set; }

        /// <summary>
        /// Grade level for which effectiveness is measured.
        /// </summary>
        /// <value>Grade level for which effectiveness is measured.</value>
        [JsonPropertyName("gradeLevelDescriptor")]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// Population for which effectiveness is measured.
        /// </summary>
        /// <value>Population for which effectiveness is measured.</value>
        [JsonPropertyName("populationServedDescriptor")]
        public string PopulationServedDescriptor { get; set; }

        /// <summary>
        /// An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.
        /// </summary>
        /// <value>An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.</value>
        [JsonPropertyName("interventionEffectivenessRatingDescriptor")]
        public string InterventionEffectivenessRatingDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of ImprovementIndex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ImprovementIndexOption { get; private set; }

        /// <summary>
        /// Along a percentile distribution of students, the improvement index represents the change in an average student&#39;s percentile rank that is considered to be due to the intervention.
        /// </summary>
        /// <value>Along a percentile distribution of students, the improvement index represents the change in an average student&#39;s percentile rank that is considered to be due to the intervention.</value>
        [JsonPropertyName("improvementIndex")]
        public int? ImprovementIndex { get { return this.ImprovementIndexOption; } set { this.ImprovementIndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentInterventionAssociationInterventionEffectiveness entity.
        /// </summary>
        /// <value>Extensions to the StudentInterventionAssociationInterventionEffectiveness entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentInterventionAssociationInterventionEffectiveness {\n");
            sb.Append("  DiagnosisDescriptor: ").Append(DiagnosisDescriptor).Append("\n");
            sb.Append("  GradeLevelDescriptor: ").Append(GradeLevelDescriptor).Append("\n");
            sb.Append("  PopulationServedDescriptor: ").Append(PopulationServedDescriptor).Append("\n");
            sb.Append("  InterventionEffectivenessRatingDescriptor: ").Append(InterventionEffectivenessRatingDescriptor).Append("\n");
            sb.Append("  ImprovementIndex: ").Append(ImprovementIndex).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DiagnosisDescriptor (string) maxLength
            if (this.DiagnosisDescriptor != null && this.DiagnosisDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DiagnosisDescriptor, length must be less than 306.", new [] { "DiagnosisDescriptor" });
            }

            // GradeLevelDescriptor (string) maxLength
            if (this.GradeLevelDescriptor != null && this.GradeLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradeLevelDescriptor, length must be less than 306.", new [] { "GradeLevelDescriptor" });
            }

            // PopulationServedDescriptor (string) maxLength
            if (this.PopulationServedDescriptor != null && this.PopulationServedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PopulationServedDescriptor, length must be less than 306.", new [] { "PopulationServedDescriptor" });
            }

            // InterventionEffectivenessRatingDescriptor (string) maxLength
            if (this.InterventionEffectivenessRatingDescriptor != null && this.InterventionEffectivenessRatingDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for InterventionEffectivenessRatingDescriptor, length must be less than 306.", new [] { "InterventionEffectivenessRatingDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentInterventionAssociationInterventionEffectiveness" />
    /// </summary>
    public class EdFiStudentInterventionAssociationInterventionEffectivenessJsonConverter : JsonConverter<EdFiStudentInterventionAssociationInterventionEffectiveness>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentInterventionAssociationInterventionEffectiveness" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentInterventionAssociationInterventionEffectiveness Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> diagnosisDescriptor = default;
            Option<string?> gradeLevelDescriptor = default;
            Option<string?> populationServedDescriptor = default;
            Option<string?> interventionEffectivenessRatingDescriptor = default;
            Option<int?> improvementIndex = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "diagnosisDescriptor":
                            diagnosisDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradeLevelDescriptor":
                            gradeLevelDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "populationServedDescriptor":
                            populationServedDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "interventionEffectivenessRatingDescriptor":
                            interventionEffectivenessRatingDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "improvementIndex":
                            improvementIndex = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!diagnosisDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentInterventionAssociationInterventionEffectiveness.", nameof(diagnosisDescriptor));

            if (!gradeLevelDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentInterventionAssociationInterventionEffectiveness.", nameof(gradeLevelDescriptor));

            if (!populationServedDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentInterventionAssociationInterventionEffectiveness.", nameof(populationServedDescriptor));

            if (!interventionEffectivenessRatingDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentInterventionAssociationInterventionEffectiveness.", nameof(interventionEffectivenessRatingDescriptor));

            if (diagnosisDescriptor.IsSet && diagnosisDescriptor.Value == null)
                throw new ArgumentNullException(nameof(diagnosisDescriptor), "Property is not nullable for class EdFiStudentInterventionAssociationInterventionEffectiveness.");

            if (gradeLevelDescriptor.IsSet && gradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradeLevelDescriptor), "Property is not nullable for class EdFiStudentInterventionAssociationInterventionEffectiveness.");

            if (populationServedDescriptor.IsSet && populationServedDescriptor.Value == null)
                throw new ArgumentNullException(nameof(populationServedDescriptor), "Property is not nullable for class EdFiStudentInterventionAssociationInterventionEffectiveness.");

            if (interventionEffectivenessRatingDescriptor.IsSet && interventionEffectivenessRatingDescriptor.Value == null)
                throw new ArgumentNullException(nameof(interventionEffectivenessRatingDescriptor), "Property is not nullable for class EdFiStudentInterventionAssociationInterventionEffectiveness.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentInterventionAssociationInterventionEffectiveness.");

            return new EdFiStudentInterventionAssociationInterventionEffectiveness(diagnosisDescriptor.Value!, gradeLevelDescriptor.Value!, populationServedDescriptor.Value!, interventionEffectivenessRatingDescriptor.Value!, improvementIndex, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentInterventionAssociationInterventionEffectiveness" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentInterventionAssociationInterventionEffectiveness"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentInterventionAssociationInterventionEffectiveness edFiStudentInterventionAssociationInterventionEffectiveness, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentInterventionAssociationInterventionEffectiveness, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentInterventionAssociationInterventionEffectiveness" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentInterventionAssociationInterventionEffectiveness"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentInterventionAssociationInterventionEffectiveness edFiStudentInterventionAssociationInterventionEffectiveness, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentInterventionAssociationInterventionEffectiveness.DiagnosisDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociationInterventionEffectiveness.DiagnosisDescriptor), "Property is required for class EdFiStudentInterventionAssociationInterventionEffectiveness.");

            if (edFiStudentInterventionAssociationInterventionEffectiveness.GradeLevelDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociationInterventionEffectiveness.GradeLevelDescriptor), "Property is required for class EdFiStudentInterventionAssociationInterventionEffectiveness.");

            if (edFiStudentInterventionAssociationInterventionEffectiveness.PopulationServedDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociationInterventionEffectiveness.PopulationServedDescriptor), "Property is required for class EdFiStudentInterventionAssociationInterventionEffectiveness.");

            if (edFiStudentInterventionAssociationInterventionEffectiveness.InterventionEffectivenessRatingDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociationInterventionEffectiveness.InterventionEffectivenessRatingDescriptor), "Property is required for class EdFiStudentInterventionAssociationInterventionEffectiveness.");

            if (edFiStudentInterventionAssociationInterventionEffectiveness.ExtOption.IsSet && edFiStudentInterventionAssociationInterventionEffectiveness.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentInterventionAssociationInterventionEffectiveness.Ext), "Property is required for class EdFiStudentInterventionAssociationInterventionEffectiveness.");

            writer.WriteString("diagnosisDescriptor", edFiStudentInterventionAssociationInterventionEffectiveness.DiagnosisDescriptor);

            writer.WriteString("gradeLevelDescriptor", edFiStudentInterventionAssociationInterventionEffectiveness.GradeLevelDescriptor);

            writer.WriteString("populationServedDescriptor", edFiStudentInterventionAssociationInterventionEffectiveness.PopulationServedDescriptor);

            writer.WriteString("interventionEffectivenessRatingDescriptor", edFiStudentInterventionAssociationInterventionEffectiveness.InterventionEffectivenessRatingDescriptor);

            if (edFiStudentInterventionAssociationInterventionEffectiveness.ImprovementIndexOption.IsSet)
                if (edFiStudentInterventionAssociationInterventionEffectiveness.ImprovementIndexOption.Value != null)
                    writer.WriteNumber("improvementIndex", edFiStudentInterventionAssociationInterventionEffectiveness.ImprovementIndexOption.Value!.Value);
                else
                    writer.WriteNull("improvementIndex");

            if (edFiStudentInterventionAssociationInterventionEffectiveness.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentInterventionAssociationInterventionEffectiveness.Ext, jsonSerializerOptions);
            }
        }
    }
}
