// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment
    /// </summary>
    public partial class EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment" /> class.
        /// </summary>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference</param>
        /// <param name="monitoredDescriptor">Student is monitored on content achievement who are no longer receiving services.</param>
        /// <param name="participationDescriptor">Field indicating the participation in the yearly English language assessment.</param>
        /// <param name="proficiencyDescriptor">The proficiency level for the yearly English language assessment.</param>
        /// <param name="progressDescriptor">The yearly progress or growth from last year&#39;s assessment.</param>
        /// <param name="ext">Extensions to the StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment entity.</param>
        [JsonConstructor]
        public EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment(EdFiSchoolYearTypeReference schoolYearTypeReference, Option<string?> monitoredDescriptor = default, Option<string?> participationDescriptor = default, Option<string?> proficiencyDescriptor = default, Option<string?> progressDescriptor = default, Option<Object?> ext = default)
        {
            SchoolYearTypeReference = schoolYearTypeReference;
            MonitoredDescriptorOption = monitoredDescriptor;
            ParticipationDescriptorOption = participationDescriptor;
            ProficiencyDescriptorOption = proficiencyDescriptor;
            ProgressDescriptorOption = progressDescriptor;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [JsonPropertyName("schoolYearTypeReference")]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Used to track the state of MonitoredDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MonitoredDescriptorOption { get; private set; }

        /// <summary>
        /// Student is monitored on content achievement who are no longer receiving services.
        /// </summary>
        /// <value>Student is monitored on content achievement who are no longer receiving services.</value>
        [JsonPropertyName("monitoredDescriptor")]
        public string? MonitoredDescriptor { get { return this.MonitoredDescriptorOption; } set { this.MonitoredDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParticipationDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParticipationDescriptorOption { get; private set; }

        /// <summary>
        /// Field indicating the participation in the yearly English language assessment.
        /// </summary>
        /// <value>Field indicating the participation in the yearly English language assessment.</value>
        [JsonPropertyName("participationDescriptor")]
        public string? ParticipationDescriptor { get { return this.ParticipationDescriptorOption; } set { this.ParticipationDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProficiencyDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProficiencyDescriptorOption { get; private set; }

        /// <summary>
        /// The proficiency level for the yearly English language assessment.
        /// </summary>
        /// <value>The proficiency level for the yearly English language assessment.</value>
        [JsonPropertyName("proficiencyDescriptor")]
        public string? ProficiencyDescriptor { get { return this.ProficiencyDescriptorOption; } set { this.ProficiencyDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgressDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgressDescriptorOption { get; private set; }

        /// <summary>
        /// The yearly progress or growth from last year&#39;s assessment.
        /// </summary>
        /// <value>The yearly progress or growth from last year&#39;s assessment.</value>
        [JsonPropertyName("progressDescriptor")]
        public string? ProgressDescriptor { get { return this.ProgressDescriptorOption; } set { this.ProgressDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment entity.
        /// </summary>
        /// <value>Extensions to the StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment {\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  MonitoredDescriptor: ").Append(MonitoredDescriptor).Append("\n");
            sb.Append("  ParticipationDescriptor: ").Append(ParticipationDescriptor).Append("\n");
            sb.Append("  ProficiencyDescriptor: ").Append(ProficiencyDescriptor).Append("\n");
            sb.Append("  ProgressDescriptor: ").Append(ProgressDescriptor).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MonitoredDescriptor (string) maxLength
            if (this.MonitoredDescriptor != null && this.MonitoredDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for MonitoredDescriptor, length must be less than 306.", new [] { "MonitoredDescriptor" });
            }

            // ParticipationDescriptor (string) maxLength
            if (this.ParticipationDescriptor != null && this.ParticipationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ParticipationDescriptor, length must be less than 306.", new [] { "ParticipationDescriptor" });
            }

            // ProficiencyDescriptor (string) maxLength
            if (this.ProficiencyDescriptor != null && this.ProficiencyDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProficiencyDescriptor, length must be less than 306.", new [] { "ProficiencyDescriptor" });
            }

            // ProgressDescriptor (string) maxLength
            if (this.ProgressDescriptor != null && this.ProgressDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgressDescriptor, length must be less than 306.", new [] { "ProgressDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment" />
    /// </summary>
    public class EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentJsonConverter : JsonConverter<EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default;
            Option<string?> monitoredDescriptor = default;
            Option<string?> participationDescriptor = default;
            Option<string?> proficiencyDescriptor = default;
            Option<string?> progressDescriptor = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "schoolYearTypeReference":
                            schoolYearTypeReference = new Option<EdFiSchoolYearTypeReference?>(JsonSerializer.Deserialize<EdFiSchoolYearTypeReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "monitoredDescriptor":
                            monitoredDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "participationDescriptor":
                            participationDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "proficiencyDescriptor":
                            proficiencyDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "progressDescriptor":
                            progressDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!schoolYearTypeReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.", nameof(schoolYearTypeReference));

            if (schoolYearTypeReference.IsSet && schoolYearTypeReference.Value == null)
                throw new ArgumentNullException(nameof(schoolYearTypeReference), "Property is not nullable for class EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.");

            return new EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment(schoolYearTypeReference.Value!, monitoredDescriptor, participationDescriptor, proficiencyDescriptor, progressDescriptor, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.SchoolYearTypeReference == null)
                throw new ArgumentNullException(nameof(edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.SchoolYearTypeReference), "Property is required for class EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.");

            if (edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.ExtOption.IsSet && edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.Ext), "Property is required for class EdFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.");

            writer.WritePropertyName("schoolYearTypeReference");
            JsonSerializer.Serialize(writer, edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.SchoolYearTypeReference, jsonSerializerOptions);
            if (edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.MonitoredDescriptorOption.IsSet)
                if (edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.MonitoredDescriptorOption.Value != null)
                    writer.WriteString("monitoredDescriptor", edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.MonitoredDescriptor);
                else
                    writer.WriteNull("monitoredDescriptor");

            if (edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.ParticipationDescriptorOption.IsSet)
                if (edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.ParticipationDescriptorOption.Value != null)
                    writer.WriteString("participationDescriptor", edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.ParticipationDescriptor);
                else
                    writer.WriteNull("participationDescriptor");

            if (edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.ProficiencyDescriptorOption.IsSet)
                if (edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.ProficiencyDescriptorOption.Value != null)
                    writer.WriteString("proficiencyDescriptor", edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.ProficiencyDescriptor);
                else
                    writer.WriteNull("proficiencyDescriptor");

            if (edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.ProgressDescriptorOption.IsSet)
                if (edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.ProgressDescriptorOption.Value != null)
                    writer.WriteString("progressDescriptor", edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.ProgressDescriptor);
                else
                    writer.WriteNull("progressDescriptor");

            if (edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.Ext, jsonSerializerOptions);
            }
        }
    }
}
