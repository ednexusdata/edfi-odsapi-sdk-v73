// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService
    /// </summary>
    public partial class EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService" /> class.
        /// </summary>
        /// <param name="languageInstructionProgramServiceDescriptor">Indicates the service being provided to the student by the language instruction program.</param>
        /// <param name="primaryIndicator">True if service is a primary service.</param>
        /// <param name="serviceBeginDate">First date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="serviceEndDate">Last date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="ext">Extensions to the StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService entity.</param>
        [JsonConstructor]
        public EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService(string languageInstructionProgramServiceDescriptor, Option<bool?> primaryIndicator = default, Option<DateOnly?> serviceBeginDate = default, Option<DateOnly?> serviceEndDate = default, Option<Object?> ext = default)
        {
            LanguageInstructionProgramServiceDescriptor = languageInstructionProgramServiceDescriptor;
            PrimaryIndicatorOption = primaryIndicator;
            ServiceBeginDateOption = serviceBeginDate;
            ServiceEndDateOption = serviceEndDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Indicates the service being provided to the student by the language instruction program.
        /// </summary>
        /// <value>Indicates the service being provided to the student by the language instruction program.</value>
        [JsonPropertyName("languageInstructionProgramServiceDescriptor")]
        public string LanguageInstructionProgramServiceDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of PrimaryIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrimaryIndicatorOption { get; private set; }

        /// <summary>
        /// True if service is a primary service.
        /// </summary>
        /// <value>True if service is a primary service.</value>
        [JsonPropertyName("primaryIndicator")]
        public bool? PrimaryIndicator { get { return this.PrimaryIndicatorOption; } set { this.PrimaryIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServiceBeginDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ServiceBeginDateOption { get; private set; }

        /// <summary>
        /// First date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>First date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("serviceBeginDate")]
        public DateOnly? ServiceBeginDate { get { return this.ServiceBeginDateOption; } set { this.ServiceBeginDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServiceEndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ServiceEndDateOption { get; private set; }

        /// <summary>
        /// Last date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Last date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("serviceEndDate")]
        public DateOnly? ServiceEndDate { get { return this.ServiceEndDateOption; } set { this.ServiceEndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService entity.
        /// </summary>
        /// <value>Extensions to the StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService {\n");
            sb.Append("  LanguageInstructionProgramServiceDescriptor: ").Append(LanguageInstructionProgramServiceDescriptor).Append("\n");
            sb.Append("  PrimaryIndicator: ").Append(PrimaryIndicator).Append("\n");
            sb.Append("  ServiceBeginDate: ").Append(ServiceBeginDate).Append("\n");
            sb.Append("  ServiceEndDate: ").Append(ServiceEndDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LanguageInstructionProgramServiceDescriptor (string) maxLength
            if (this.LanguageInstructionProgramServiceDescriptor != null && this.LanguageInstructionProgramServiceDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for LanguageInstructionProgramServiceDescriptor, length must be less than 306.", new [] { "LanguageInstructionProgramServiceDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService" />
    /// </summary>
    public class EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceJsonConverter : JsonConverter<EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService>
    {
        /// <summary>
        /// The format to use to serialize ServiceBeginDate
        /// </summary>
        public static string ServiceBeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize ServiceEndDate
        /// </summary>
        public static string ServiceEndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> languageInstructionProgramServiceDescriptor = default;
            Option<bool?> primaryIndicator = default;
            Option<DateOnly?> serviceBeginDate = default;
            Option<DateOnly?> serviceEndDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "languageInstructionProgramServiceDescriptor":
                            languageInstructionProgramServiceDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primaryIndicator":
                            primaryIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "serviceBeginDate":
                            serviceBeginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "serviceEndDate":
                            serviceEndDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!languageInstructionProgramServiceDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.", nameof(languageInstructionProgramServiceDescriptor));

            if (languageInstructionProgramServiceDescriptor.IsSet && languageInstructionProgramServiceDescriptor.Value == null)
                throw new ArgumentNullException(nameof(languageInstructionProgramServiceDescriptor), "Property is not nullable for class EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.");

            return new EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService(languageInstructionProgramServiceDescriptor.Value!, primaryIndicator, serviceBeginDate, serviceEndDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.LanguageInstructionProgramServiceDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.LanguageInstructionProgramServiceDescriptor), "Property is required for class EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.");

            if (edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.ExtOption.IsSet && edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.Ext), "Property is required for class EdFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.");

            writer.WriteString("languageInstructionProgramServiceDescriptor", edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.LanguageInstructionProgramServiceDescriptor);

            if (edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.PrimaryIndicatorOption.IsSet)
                if (edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.PrimaryIndicatorOption.Value != null)
                    writer.WriteBoolean("primaryIndicator", edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.PrimaryIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("primaryIndicator");

            if (edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.ServiceBeginDateOption.IsSet)
                if (edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.ServiceBeginDateOption.Value != null)
                    writer.WriteString("serviceBeginDate", edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.ServiceBeginDateOption.Value!.Value.ToString(ServiceBeginDateFormat));
                else
                    writer.WriteNull("serviceBeginDate");

            if (edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.ServiceEndDateOption.IsSet)
                if (edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.ServiceEndDateOption.Value != null)
                    writer.WriteString("serviceEndDate", edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.ServiceEndDateOption.Value!.Value.ToString(ServiceEndDateFormat));
                else
                    writer.WriteNull("serviceEndDate");

            if (edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.Ext, jsonSerializerOptions);
            }
        }
    }
}
