// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentMigrantEducationProgramAssociation
    /// </summary>
    public partial class EdFiStudentMigrantEducationProgramAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentMigrantEducationProgramAssociation" /> class.
        /// </summary>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="programReference">programReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="lastQualifyingMove">Date the last qualifying move occurred; used to compute MEP status.</param>
        /// <param name="priorityForServices">Report migratory children who are classified as having \&quot;priority for services\&quot; because they are failing, or most at risk of failing to meet the state&#39;s challenging state academic content standards and challenging state student academic achievement standards, and their education has been interrupted during the regular school year.</param>
        /// <param name="id">id</param>
        /// <param name="continuationOfServicesReasonDescriptor">The \&quot;continuation of services\&quot; provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service).</param>
        /// <param name="eligibilityExpirationDate">The eligibility expiration date is used to determine end of eligibility and to account for a child&#39;s eligibility expiring earlier than 36 months from the child&#39;s QAD. A child&#39;s eligibility would end earlier than 36 months from the child&#39;s QAD, if the child is no longer entitled to a free public education (e.g., graduated with a high school diploma, obtained a high school equivalency diploma (HSED), or for other reasons as determined by states&#39; requirements), or if the child passes away.</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="migrantEducationProgramServices">An unordered collection of studentMigrantEducationProgramAssociationMigrantEducationProgramServices. Indicates the service(s) being provided to the student by the migrant education program.</param>
        /// <param name="programParticipationStatuses">An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.</param>
        /// <param name="qualifyingArrivalDate">The qualifying arrival date (QAD) is the date the child joins the worker who has already moved, or the date when the worker joins the child who has already moved. The QAD is the date that the child&#39;s eligibility for the MEP begins. The QAD is not affected by subsequent non-qualifying moves.</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district.</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions.</param>
        /// <param name="stateResidencyDate">The verified state residency for the student.</param>
        /// <param name="usInitialEntry">The month, day, and year on which the student first entered the U.S.</param>
        /// <param name="usInitialSchoolEntry">The month, day, and year on which the student first entered a U.S. school.</param>
        /// <param name="usMostRecentEntry">The month, day, and year of the student&#39;s most recent entry into the U.S.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentMigrantEducationProgramAssociation entity.</param>
        [JsonConstructor]
        public EdFiStudentMigrantEducationProgramAssociation(DateOnly beginDate, EdFiEducationOrganizationReference educationOrganizationReference, EdFiProgramReference programReference, EdFiStudentReference studentReference, DateOnly lastQualifyingMove, bool priorityForServices, Option<string?> id = default, Option<string?> continuationOfServicesReasonDescriptor = default, Option<DateOnly?> eligibilityExpirationDate = default, Option<DateOnly?> endDate = default, Option<List<EdFiStudentMigrantEducationProgramAssociationMigrantEducationProgramService>?> migrantEducationProgramServices = default, Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> programParticipationStatuses = default, Option<DateOnly?> qualifyingArrivalDate = default, Option<string?> reasonExitedDescriptor = default, Option<bool?> servedOutsideOfRegularSession = default, Option<DateOnly?> stateResidencyDate = default, Option<DateOnly?> usInitialEntry = default, Option<DateOnly?> usInitialSchoolEntry = default, Option<DateOnly?> usMostRecentEntry = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            BeginDate = beginDate;
            EducationOrganizationReference = educationOrganizationReference;
            ProgramReference = programReference;
            StudentReference = studentReference;
            LastQualifyingMove = lastQualifyingMove;
            PriorityForServices = priorityForServices;
            IdOption = id;
            ContinuationOfServicesReasonDescriptorOption = continuationOfServicesReasonDescriptor;
            EligibilityExpirationDateOption = eligibilityExpirationDate;
            EndDateOption = endDate;
            MigrantEducationProgramServicesOption = migrantEducationProgramServices;
            ProgramParticipationStatusesOption = programParticipationStatuses;
            QualifyingArrivalDateOption = qualifyingArrivalDate;
            ReasonExitedDescriptorOption = reasonExitedDescriptor;
            ServedOutsideOfRegularSessionOption = servedOutsideOfRegularSession;
            StateResidencyDateOption = stateResidencyDate;
            UsInitialEntryOption = usInitialEntry;
            UsInitialSchoolEntryOption = usInitialSchoolEntry;
            UsMostRecentEntryOption = usMostRecentEntry;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets ProgramReference
        /// </summary>
        [JsonPropertyName("programReference")]
        public EdFiProgramReference ProgramReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Date the last qualifying move occurred; used to compute MEP status.
        /// </summary>
        /// <value>Date the last qualifying move occurred; used to compute MEP status.</value>
        [JsonPropertyName("lastQualifyingMove")]
        public DateOnly LastQualifyingMove { get; set; }

        /// <summary>
        /// Report migratory children who are classified as having \&quot;priority for services\&quot; because they are failing, or most at risk of failing to meet the state&#39;s challenging state academic content standards and challenging state student academic achievement standards, and their education has been interrupted during the regular school year.
        /// </summary>
        /// <value>Report migratory children who are classified as having \&quot;priority for services\&quot; because they are failing, or most at risk of failing to meet the state&#39;s challenging state academic content standards and challenging state student academic achievement standards, and their education has been interrupted during the regular school year.</value>
        [JsonPropertyName("priorityForServices")]
        public bool PriorityForServices { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContinuationOfServicesReasonDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContinuationOfServicesReasonDescriptorOption { get; private set; }

        /// <summary>
        /// The \&quot;continuation of services\&quot; provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service).
        /// </summary>
        /// <value>The \&quot;continuation of services\&quot; provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service).</value>
        [JsonPropertyName("continuationOfServicesReasonDescriptor")]
        public string? ContinuationOfServicesReasonDescriptor { get { return this.ContinuationOfServicesReasonDescriptorOption; } set { this.ContinuationOfServicesReasonDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EligibilityExpirationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EligibilityExpirationDateOption { get; private set; }

        /// <summary>
        /// The eligibility expiration date is used to determine end of eligibility and to account for a child&#39;s eligibility expiring earlier than 36 months from the child&#39;s QAD. A child&#39;s eligibility would end earlier than 36 months from the child&#39;s QAD, if the child is no longer entitled to a free public education (e.g., graduated with a high school diploma, obtained a high school equivalency diploma (HSED), or for other reasons as determined by states&#39; requirements), or if the child passes away.
        /// </summary>
        /// <value>The eligibility expiration date is used to determine end of eligibility and to account for a child&#39;s eligibility expiring earlier than 36 months from the child&#39;s QAD. A child&#39;s eligibility would end earlier than 36 months from the child&#39;s QAD, if the child is no longer entitled to a free public education (e.g., graduated with a high school diploma, obtained a high school equivalency diploma (HSED), or for other reasons as determined by states&#39; requirements), or if the child passes away.</value>
        [JsonPropertyName("eligibilityExpirationDate")]
        public DateOnly? EligibilityExpirationDate { get { return this.EligibilityExpirationDateOption; } set { this.EligibilityExpirationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of MigrantEducationProgramServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentMigrantEducationProgramAssociationMigrantEducationProgramService>?> MigrantEducationProgramServicesOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentMigrantEducationProgramAssociationMigrantEducationProgramServices. Indicates the service(s) being provided to the student by the migrant education program.
        /// </summary>
        /// <value>An unordered collection of studentMigrantEducationProgramAssociationMigrantEducationProgramServices. Indicates the service(s) being provided to the student by the migrant education program.</value>
        [JsonPropertyName("migrantEducationProgramServices")]
        public List<EdFiStudentMigrantEducationProgramAssociationMigrantEducationProgramService>? MigrantEducationProgramServices { get { return this.MigrantEducationProgramServicesOption; } set { this.MigrantEducationProgramServicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramParticipationStatuses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> ProgramParticipationStatusesOption { get; private set; }

        /// <summary>
        /// An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.
        /// </summary>
        /// <value>An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.</value>
        [JsonPropertyName("programParticipationStatuses")]
        public List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>? ProgramParticipationStatuses { get { return this.ProgramParticipationStatusesOption; } set { this.ProgramParticipationStatusesOption = new(value); } }

        /// <summary>
        /// Used to track the state of QualifyingArrivalDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> QualifyingArrivalDateOption { get; private set; }

        /// <summary>
        /// The qualifying arrival date (QAD) is the date the child joins the worker who has already moved, or the date when the worker joins the child who has already moved. The QAD is the date that the child&#39;s eligibility for the MEP begins. The QAD is not affected by subsequent non-qualifying moves.
        /// </summary>
        /// <value>The qualifying arrival date (QAD) is the date the child joins the worker who has already moved, or the date when the worker joins the child who has already moved. The QAD is the date that the child&#39;s eligibility for the MEP begins. The QAD is not affected by subsequent non-qualifying moves.</value>
        [JsonPropertyName("qualifyingArrivalDate")]
        public DateOnly? QualifyingArrivalDate { get { return this.QualifyingArrivalDateOption; } set { this.QualifyingArrivalDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReasonExitedDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonExitedDescriptorOption { get; private set; }

        /// <summary>
        /// The reason the student left the program within a school or district.
        /// </summary>
        /// <value>The reason the student left the program within a school or district.</value>
        [JsonPropertyName("reasonExitedDescriptor")]
        public string? ReasonExitedDescriptor { get { return this.ReasonExitedDescriptorOption; } set { this.ReasonExitedDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServedOutsideOfRegularSession
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ServedOutsideOfRegularSessionOption { get; private set; }

        /// <summary>
        /// Indicates whether the student received services during the summer session or between sessions.
        /// </summary>
        /// <value>Indicates whether the student received services during the summer session or between sessions.</value>
        [JsonPropertyName("servedOutsideOfRegularSession")]
        public bool? ServedOutsideOfRegularSession { get { return this.ServedOutsideOfRegularSessionOption; } set { this.ServedOutsideOfRegularSessionOption = new(value); } }

        /// <summary>
        /// Used to track the state of StateResidencyDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> StateResidencyDateOption { get; private set; }

        /// <summary>
        /// The verified state residency for the student.
        /// </summary>
        /// <value>The verified state residency for the student.</value>
        [JsonPropertyName("stateResidencyDate")]
        public DateOnly? StateResidencyDate { get { return this.StateResidencyDateOption; } set { this.StateResidencyDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of UsInitialEntry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> UsInitialEntryOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which the student first entered the U.S.
        /// </summary>
        /// <value>The month, day, and year on which the student first entered the U.S.</value>
        [JsonPropertyName("usInitialEntry")]
        public DateOnly? UsInitialEntry { get { return this.UsInitialEntryOption; } set { this.UsInitialEntryOption = new(value); } }

        /// <summary>
        /// Used to track the state of UsInitialSchoolEntry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> UsInitialSchoolEntryOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which the student first entered a U.S. school.
        /// </summary>
        /// <value>The month, day, and year on which the student first entered a U.S. school.</value>
        [JsonPropertyName("usInitialSchoolEntry")]
        public DateOnly? UsInitialSchoolEntry { get { return this.UsInitialSchoolEntryOption; } set { this.UsInitialSchoolEntryOption = new(value); } }

        /// <summary>
        /// Used to track the state of UsMostRecentEntry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> UsMostRecentEntryOption { get; private set; }

        /// <summary>
        /// The month, day, and year of the student&#39;s most recent entry into the U.S.
        /// </summary>
        /// <value>The month, day, and year of the student&#39;s most recent entry into the U.S.</value>
        [JsonPropertyName("usMostRecentEntry")]
        public DateOnly? UsMostRecentEntry { get { return this.UsMostRecentEntryOption; } set { this.UsMostRecentEntryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentMigrantEducationProgramAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentMigrantEducationProgramAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentMigrantEducationProgramAssociation {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  ProgramReference: ").Append(ProgramReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  LastQualifyingMove: ").Append(LastQualifyingMove).Append("\n");
            sb.Append("  PriorityForServices: ").Append(PriorityForServices).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContinuationOfServicesReasonDescriptor: ").Append(ContinuationOfServicesReasonDescriptor).Append("\n");
            sb.Append("  EligibilityExpirationDate: ").Append(EligibilityExpirationDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  MigrantEducationProgramServices: ").Append(MigrantEducationProgramServices).Append("\n");
            sb.Append("  ProgramParticipationStatuses: ").Append(ProgramParticipationStatuses).Append("\n");
            sb.Append("  QualifyingArrivalDate: ").Append(QualifyingArrivalDate).Append("\n");
            sb.Append("  ReasonExitedDescriptor: ").Append(ReasonExitedDescriptor).Append("\n");
            sb.Append("  ServedOutsideOfRegularSession: ").Append(ServedOutsideOfRegularSession).Append("\n");
            sb.Append("  StateResidencyDate: ").Append(StateResidencyDate).Append("\n");
            sb.Append("  UsInitialEntry: ").Append(UsInitialEntry).Append("\n");
            sb.Append("  UsInitialSchoolEntry: ").Append(UsInitialSchoolEntry).Append("\n");
            sb.Append("  UsMostRecentEntry: ").Append(UsMostRecentEntry).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContinuationOfServicesReasonDescriptor (string) maxLength
            if (this.ContinuationOfServicesReasonDescriptor != null && this.ContinuationOfServicesReasonDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ContinuationOfServicesReasonDescriptor, length must be less than 306.", new [] { "ContinuationOfServicesReasonDescriptor" });
            }

            // ReasonExitedDescriptor (string) maxLength
            if (this.ReasonExitedDescriptor != null && this.ReasonExitedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ReasonExitedDescriptor, length must be less than 306.", new [] { "ReasonExitedDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentMigrantEducationProgramAssociation" />
    /// </summary>
    public class EdFiStudentMigrantEducationProgramAssociationJsonConverter : JsonConverter<EdFiStudentMigrantEducationProgramAssociation>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastQualifyingMove
        /// </summary>
        public static string LastQualifyingMoveFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EligibilityExpirationDate
        /// </summary>
        public static string EligibilityExpirationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize QualifyingArrivalDate
        /// </summary>
        public static string QualifyingArrivalDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize StateResidencyDate
        /// </summary>
        public static string StateResidencyDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize UsInitialEntry
        /// </summary>
        public static string UsInitialEntryFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize UsInitialSchoolEntry
        /// </summary>
        public static string UsInitialSchoolEntryFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize UsMostRecentEntry
        /// </summary>
        public static string UsMostRecentEntryFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentMigrantEducationProgramAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentMigrantEducationProgramAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> beginDate = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiProgramReference?> programReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<DateOnly?> lastQualifyingMove = default;
            Option<bool?> priorityForServices = default;
            Option<string?> id = default;
            Option<string?> continuationOfServicesReasonDescriptor = default;
            Option<DateOnly?> eligibilityExpirationDate = default;
            Option<DateOnly?> endDate = default;
            Option<List<EdFiStudentMigrantEducationProgramAssociationMigrantEducationProgramService>?> migrantEducationProgramServices = default;
            Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> programParticipationStatuses = default;
            Option<DateOnly?> qualifyingArrivalDate = default;
            Option<string?> reasonExitedDescriptor = default;
            Option<bool?> servedOutsideOfRegularSession = default;
            Option<DateOnly?> stateResidencyDate = default;
            Option<DateOnly?> usInitialEntry = default;
            Option<DateOnly?> usInitialSchoolEntry = default;
            Option<DateOnly?> usMostRecentEntry = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programReference":
                            programReference = new Option<EdFiProgramReference?>(JsonSerializer.Deserialize<EdFiProgramReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "lastQualifyingMove":
                            lastQualifyingMove = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "priorityForServices":
                            priorityForServices = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "continuationOfServicesReasonDescriptor":
                            continuationOfServicesReasonDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "eligibilityExpirationDate":
                            eligibilityExpirationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "migrantEducationProgramServices":
                            migrantEducationProgramServices = new Option<List<EdFiStudentMigrantEducationProgramAssociationMigrantEducationProgramService>?>(JsonSerializer.Deserialize<List<EdFiStudentMigrantEducationProgramAssociationMigrantEducationProgramService>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programParticipationStatuses":
                            programParticipationStatuses = new Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?>(JsonSerializer.Deserialize<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "qualifyingArrivalDate":
                            qualifyingArrivalDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "reasonExitedDescriptor":
                            reasonExitedDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "servedOutsideOfRegularSession":
                            servedOutsideOfRegularSession = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "stateResidencyDate":
                            stateResidencyDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "usInitialEntry":
                            usInitialEntry = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "usInitialSchoolEntry":
                            usInitialSchoolEntry = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "usMostRecentEntry":
                            usMostRecentEntry = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentMigrantEducationProgramAssociation.", nameof(beginDate));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentMigrantEducationProgramAssociation.", nameof(educationOrganizationReference));

            if (!programReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentMigrantEducationProgramAssociation.", nameof(programReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentMigrantEducationProgramAssociation.", nameof(studentReference));

            if (!lastQualifyingMove.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentMigrantEducationProgramAssociation.", nameof(lastQualifyingMove));

            if (!priorityForServices.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentMigrantEducationProgramAssociation.", nameof(priorityForServices));

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            if (programReference.IsSet && programReference.Value == null)
                throw new ArgumentNullException(nameof(programReference), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            if (lastQualifyingMove.IsSet && lastQualifyingMove.Value == null)
                throw new ArgumentNullException(nameof(lastQualifyingMove), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            if (priorityForServices.IsSet && priorityForServices.Value == null)
                throw new ArgumentNullException(nameof(priorityForServices), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            if (migrantEducationProgramServices.IsSet && migrantEducationProgramServices.Value == null)
                throw new ArgumentNullException(nameof(migrantEducationProgramServices), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            if (programParticipationStatuses.IsSet && programParticipationStatuses.Value == null)
                throw new ArgumentNullException(nameof(programParticipationStatuses), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentMigrantEducationProgramAssociation.");

            return new EdFiStudentMigrantEducationProgramAssociation(beginDate.Value!.Value!, educationOrganizationReference.Value!, programReference.Value!, studentReference.Value!, lastQualifyingMove.Value!.Value!, priorityForServices.Value!.Value!, id, continuationOfServicesReasonDescriptor, eligibilityExpirationDate, endDate, migrantEducationProgramServices, programParticipationStatuses, qualifyingArrivalDate, reasonExitedDescriptor, servedOutsideOfRegularSession, stateResidencyDate, usInitialEntry, usInitialSchoolEntry, usMostRecentEntry, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentMigrantEducationProgramAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentMigrantEducationProgramAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentMigrantEducationProgramAssociation edFiStudentMigrantEducationProgramAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentMigrantEducationProgramAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentMigrantEducationProgramAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentMigrantEducationProgramAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentMigrantEducationProgramAssociation edFiStudentMigrantEducationProgramAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentMigrantEducationProgramAssociation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentMigrantEducationProgramAssociation.EducationOrganizationReference), "Property is required for class EdFiStudentMigrantEducationProgramAssociation.");

            if (edFiStudentMigrantEducationProgramAssociation.ProgramReference == null)
                throw new ArgumentNullException(nameof(edFiStudentMigrantEducationProgramAssociation.ProgramReference), "Property is required for class EdFiStudentMigrantEducationProgramAssociation.");

            if (edFiStudentMigrantEducationProgramAssociation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentMigrantEducationProgramAssociation.StudentReference), "Property is required for class EdFiStudentMigrantEducationProgramAssociation.");

            if (edFiStudentMigrantEducationProgramAssociation.IdOption.IsSet && edFiStudentMigrantEducationProgramAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentMigrantEducationProgramAssociation.Id), "Property is required for class EdFiStudentMigrantEducationProgramAssociation.");

            if (edFiStudentMigrantEducationProgramAssociation.MigrantEducationProgramServicesOption.IsSet && edFiStudentMigrantEducationProgramAssociation.MigrantEducationProgramServices == null)
                throw new ArgumentNullException(nameof(edFiStudentMigrantEducationProgramAssociation.MigrantEducationProgramServices), "Property is required for class EdFiStudentMigrantEducationProgramAssociation.");

            if (edFiStudentMigrantEducationProgramAssociation.ProgramParticipationStatusesOption.IsSet && edFiStudentMigrantEducationProgramAssociation.ProgramParticipationStatuses == null)
                throw new ArgumentNullException(nameof(edFiStudentMigrantEducationProgramAssociation.ProgramParticipationStatuses), "Property is required for class EdFiStudentMigrantEducationProgramAssociation.");

            if (edFiStudentMigrantEducationProgramAssociation.EtagOption.IsSet && edFiStudentMigrantEducationProgramAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentMigrantEducationProgramAssociation.Etag), "Property is required for class EdFiStudentMigrantEducationProgramAssociation.");

            if (edFiStudentMigrantEducationProgramAssociation.ExtOption.IsSet && edFiStudentMigrantEducationProgramAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentMigrantEducationProgramAssociation.Ext), "Property is required for class EdFiStudentMigrantEducationProgramAssociation.");

            writer.WriteString("beginDate", edFiStudentMigrantEducationProgramAssociation.BeginDate.ToString(BeginDateFormat));

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStudentMigrantEducationProgramAssociation.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("programReference");
            JsonSerializer.Serialize(writer, edFiStudentMigrantEducationProgramAssociation.ProgramReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentMigrantEducationProgramAssociation.StudentReference, jsonSerializerOptions);
            writer.WriteString("lastQualifyingMove", edFiStudentMigrantEducationProgramAssociation.LastQualifyingMove.ToString(LastQualifyingMoveFormat));

            writer.WriteBoolean("priorityForServices", edFiStudentMigrantEducationProgramAssociation.PriorityForServices);

            if (edFiStudentMigrantEducationProgramAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentMigrantEducationProgramAssociation.Id);

            if (edFiStudentMigrantEducationProgramAssociation.ContinuationOfServicesReasonDescriptorOption.IsSet)
                if (edFiStudentMigrantEducationProgramAssociation.ContinuationOfServicesReasonDescriptorOption.Value != null)
                    writer.WriteString("continuationOfServicesReasonDescriptor", edFiStudentMigrantEducationProgramAssociation.ContinuationOfServicesReasonDescriptor);
                else
                    writer.WriteNull("continuationOfServicesReasonDescriptor");

            if (edFiStudentMigrantEducationProgramAssociation.EligibilityExpirationDateOption.IsSet)
                if (edFiStudentMigrantEducationProgramAssociation.EligibilityExpirationDateOption.Value != null)
                    writer.WriteString("eligibilityExpirationDate", edFiStudentMigrantEducationProgramAssociation.EligibilityExpirationDateOption.Value!.Value.ToString(EligibilityExpirationDateFormat));
                else
                    writer.WriteNull("eligibilityExpirationDate");

            if (edFiStudentMigrantEducationProgramAssociation.EndDateOption.IsSet)
                if (edFiStudentMigrantEducationProgramAssociation.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiStudentMigrantEducationProgramAssociation.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiStudentMigrantEducationProgramAssociation.MigrantEducationProgramServicesOption.IsSet)
            {
                writer.WritePropertyName("migrantEducationProgramServices");
                JsonSerializer.Serialize(writer, edFiStudentMigrantEducationProgramAssociation.MigrantEducationProgramServices, jsonSerializerOptions);
            }
            if (edFiStudentMigrantEducationProgramAssociation.ProgramParticipationStatusesOption.IsSet)
            {
                writer.WritePropertyName("programParticipationStatuses");
                JsonSerializer.Serialize(writer, edFiStudentMigrantEducationProgramAssociation.ProgramParticipationStatuses, jsonSerializerOptions);
            }
            if (edFiStudentMigrantEducationProgramAssociation.QualifyingArrivalDateOption.IsSet)
                if (edFiStudentMigrantEducationProgramAssociation.QualifyingArrivalDateOption.Value != null)
                    writer.WriteString("qualifyingArrivalDate", edFiStudentMigrantEducationProgramAssociation.QualifyingArrivalDateOption.Value!.Value.ToString(QualifyingArrivalDateFormat));
                else
                    writer.WriteNull("qualifyingArrivalDate");

            if (edFiStudentMigrantEducationProgramAssociation.ReasonExitedDescriptorOption.IsSet)
                if (edFiStudentMigrantEducationProgramAssociation.ReasonExitedDescriptorOption.Value != null)
                    writer.WriteString("reasonExitedDescriptor", edFiStudentMigrantEducationProgramAssociation.ReasonExitedDescriptor);
                else
                    writer.WriteNull("reasonExitedDescriptor");

            if (edFiStudentMigrantEducationProgramAssociation.ServedOutsideOfRegularSessionOption.IsSet)
                if (edFiStudentMigrantEducationProgramAssociation.ServedOutsideOfRegularSessionOption.Value != null)
                    writer.WriteBoolean("servedOutsideOfRegularSession", edFiStudentMigrantEducationProgramAssociation.ServedOutsideOfRegularSessionOption.Value!.Value);
                else
                    writer.WriteNull("servedOutsideOfRegularSession");

            if (edFiStudentMigrantEducationProgramAssociation.StateResidencyDateOption.IsSet)
                if (edFiStudentMigrantEducationProgramAssociation.StateResidencyDateOption.Value != null)
                    writer.WriteString("stateResidencyDate", edFiStudentMigrantEducationProgramAssociation.StateResidencyDateOption.Value!.Value.ToString(StateResidencyDateFormat));
                else
                    writer.WriteNull("stateResidencyDate");

            if (edFiStudentMigrantEducationProgramAssociation.UsInitialEntryOption.IsSet)
                if (edFiStudentMigrantEducationProgramAssociation.UsInitialEntryOption.Value != null)
                    writer.WriteString("usInitialEntry", edFiStudentMigrantEducationProgramAssociation.UsInitialEntryOption.Value!.Value.ToString(UsInitialEntryFormat));
                else
                    writer.WriteNull("usInitialEntry");

            if (edFiStudentMigrantEducationProgramAssociation.UsInitialSchoolEntryOption.IsSet)
                if (edFiStudentMigrantEducationProgramAssociation.UsInitialSchoolEntryOption.Value != null)
                    writer.WriteString("usInitialSchoolEntry", edFiStudentMigrantEducationProgramAssociation.UsInitialSchoolEntryOption.Value!.Value.ToString(UsInitialSchoolEntryFormat));
                else
                    writer.WriteNull("usInitialSchoolEntry");

            if (edFiStudentMigrantEducationProgramAssociation.UsMostRecentEntryOption.IsSet)
                if (edFiStudentMigrantEducationProgramAssociation.UsMostRecentEntryOption.Value != null)
                    writer.WriteString("usMostRecentEntry", edFiStudentMigrantEducationProgramAssociation.UsMostRecentEntryOption.Value!.Value.ToString(UsMostRecentEntryFormat));
                else
                    writer.WriteNull("usMostRecentEntry");

            if (edFiStudentMigrantEducationProgramAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentMigrantEducationProgramAssociation.Etag);

            if (edFiStudentMigrantEducationProgramAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentMigrantEducationProgramAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentMigrantEducationProgramAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentMigrantEducationProgramAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
