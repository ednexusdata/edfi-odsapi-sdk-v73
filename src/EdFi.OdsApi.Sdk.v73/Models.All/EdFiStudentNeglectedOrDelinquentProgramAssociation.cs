// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentNeglectedOrDelinquentProgramAssociation
    /// </summary>
    public partial class EdFiStudentNeglectedOrDelinquentProgramAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentNeglectedOrDelinquentProgramAssociation" /> class.
        /// </summary>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="programReference">programReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="elaProgressLevelDescriptor">The progress measured from pre- to post- test for ELA.</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="mathematicsProgressLevelDescriptor">The progress measured from pre- to post-test for Mathematics.</param>
        /// <param name="neglectedOrDelinquentProgramDescriptor">The type of program under ESEA Title I, Part D, Subpart 1 (state programs) or Subpart 2 (LEA).</param>
        /// <param name="neglectedOrDelinquentProgramServices">An unordered collection of studentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices. Indicates the service(s) being provided to the student by the neglected or delinquent program.</param>
        /// <param name="programParticipationStatuses">An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district.</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentNeglectedOrDelinquentProgramAssociation entity.</param>
        [JsonConstructor]
        public EdFiStudentNeglectedOrDelinquentProgramAssociation(DateOnly beginDate, EdFiEducationOrganizationReference educationOrganizationReference, EdFiProgramReference programReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<string?> elaProgressLevelDescriptor = default, Option<DateOnly?> endDate = default, Option<string?> mathematicsProgressLevelDescriptor = default, Option<string?> neglectedOrDelinquentProgramDescriptor = default, Option<List<EdFiStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService>?> neglectedOrDelinquentProgramServices = default, Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> programParticipationStatuses = default, Option<string?> reasonExitedDescriptor = default, Option<bool?> servedOutsideOfRegularSession = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            BeginDate = beginDate;
            EducationOrganizationReference = educationOrganizationReference;
            ProgramReference = programReference;
            StudentReference = studentReference;
            IdOption = id;
            ElaProgressLevelDescriptorOption = elaProgressLevelDescriptor;
            EndDateOption = endDate;
            MathematicsProgressLevelDescriptorOption = mathematicsProgressLevelDescriptor;
            NeglectedOrDelinquentProgramDescriptorOption = neglectedOrDelinquentProgramDescriptor;
            NeglectedOrDelinquentProgramServicesOption = neglectedOrDelinquentProgramServices;
            ProgramParticipationStatusesOption = programParticipationStatuses;
            ReasonExitedDescriptorOption = reasonExitedDescriptor;
            ServedOutsideOfRegularSessionOption = servedOutsideOfRegularSession;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets ProgramReference
        /// </summary>
        [JsonPropertyName("programReference")]
        public EdFiProgramReference ProgramReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ElaProgressLevelDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ElaProgressLevelDescriptorOption { get; private set; }

        /// <summary>
        /// The progress measured from pre- to post- test for ELA.
        /// </summary>
        /// <value>The progress measured from pre- to post- test for ELA.</value>
        [JsonPropertyName("elaProgressLevelDescriptor")]
        public string? ElaProgressLevelDescriptor { get { return this.ElaProgressLevelDescriptorOption; } set { this.ElaProgressLevelDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of MathematicsProgressLevelDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MathematicsProgressLevelDescriptorOption { get; private set; }

        /// <summary>
        /// The progress measured from pre- to post-test for Mathematics.
        /// </summary>
        /// <value>The progress measured from pre- to post-test for Mathematics.</value>
        [JsonPropertyName("mathematicsProgressLevelDescriptor")]
        public string? MathematicsProgressLevelDescriptor { get { return this.MathematicsProgressLevelDescriptorOption; } set { this.MathematicsProgressLevelDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of NeglectedOrDelinquentProgramDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NeglectedOrDelinquentProgramDescriptorOption { get; private set; }

        /// <summary>
        /// The type of program under ESEA Title I, Part D, Subpart 1 (state programs) or Subpart 2 (LEA).
        /// </summary>
        /// <value>The type of program under ESEA Title I, Part D, Subpart 1 (state programs) or Subpart 2 (LEA).</value>
        [JsonPropertyName("neglectedOrDelinquentProgramDescriptor")]
        public string? NeglectedOrDelinquentProgramDescriptor { get { return this.NeglectedOrDelinquentProgramDescriptorOption; } set { this.NeglectedOrDelinquentProgramDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of NeglectedOrDelinquentProgramServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService>?> NeglectedOrDelinquentProgramServicesOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices. Indicates the service(s) being provided to the student by the neglected or delinquent program.
        /// </summary>
        /// <value>An unordered collection of studentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices. Indicates the service(s) being provided to the student by the neglected or delinquent program.</value>
        [JsonPropertyName("neglectedOrDelinquentProgramServices")]
        public List<EdFiStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService>? NeglectedOrDelinquentProgramServices { get { return this.NeglectedOrDelinquentProgramServicesOption; } set { this.NeglectedOrDelinquentProgramServicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramParticipationStatuses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> ProgramParticipationStatusesOption { get; private set; }

        /// <summary>
        /// An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.
        /// </summary>
        /// <value>An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.</value>
        [JsonPropertyName("programParticipationStatuses")]
        public List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>? ProgramParticipationStatuses { get { return this.ProgramParticipationStatusesOption; } set { this.ProgramParticipationStatusesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReasonExitedDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonExitedDescriptorOption { get; private set; }

        /// <summary>
        /// The reason the student left the program within a school or district.
        /// </summary>
        /// <value>The reason the student left the program within a school or district.</value>
        [JsonPropertyName("reasonExitedDescriptor")]
        public string? ReasonExitedDescriptor { get { return this.ReasonExitedDescriptorOption; } set { this.ReasonExitedDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServedOutsideOfRegularSession
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ServedOutsideOfRegularSessionOption { get; private set; }

        /// <summary>
        /// Indicates whether the student received services during the summer session or between sessions.
        /// </summary>
        /// <value>Indicates whether the student received services during the summer session or between sessions.</value>
        [JsonPropertyName("servedOutsideOfRegularSession")]
        public bool? ServedOutsideOfRegularSession { get { return this.ServedOutsideOfRegularSessionOption; } set { this.ServedOutsideOfRegularSessionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentNeglectedOrDelinquentProgramAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentNeglectedOrDelinquentProgramAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentNeglectedOrDelinquentProgramAssociation {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  ProgramReference: ").Append(ProgramReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ElaProgressLevelDescriptor: ").Append(ElaProgressLevelDescriptor).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  MathematicsProgressLevelDescriptor: ").Append(MathematicsProgressLevelDescriptor).Append("\n");
            sb.Append("  NeglectedOrDelinquentProgramDescriptor: ").Append(NeglectedOrDelinquentProgramDescriptor).Append("\n");
            sb.Append("  NeglectedOrDelinquentProgramServices: ").Append(NeglectedOrDelinquentProgramServices).Append("\n");
            sb.Append("  ProgramParticipationStatuses: ").Append(ProgramParticipationStatuses).Append("\n");
            sb.Append("  ReasonExitedDescriptor: ").Append(ReasonExitedDescriptor).Append("\n");
            sb.Append("  ServedOutsideOfRegularSession: ").Append(ServedOutsideOfRegularSession).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ElaProgressLevelDescriptor (string) maxLength
            if (this.ElaProgressLevelDescriptor != null && this.ElaProgressLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ElaProgressLevelDescriptor, length must be less than 306.", new [] { "ElaProgressLevelDescriptor" });
            }

            // MathematicsProgressLevelDescriptor (string) maxLength
            if (this.MathematicsProgressLevelDescriptor != null && this.MathematicsProgressLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for MathematicsProgressLevelDescriptor, length must be less than 306.", new [] { "MathematicsProgressLevelDescriptor" });
            }

            // NeglectedOrDelinquentProgramDescriptor (string) maxLength
            if (this.NeglectedOrDelinquentProgramDescriptor != null && this.NeglectedOrDelinquentProgramDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for NeglectedOrDelinquentProgramDescriptor, length must be less than 306.", new [] { "NeglectedOrDelinquentProgramDescriptor" });
            }

            // ReasonExitedDescriptor (string) maxLength
            if (this.ReasonExitedDescriptor != null && this.ReasonExitedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ReasonExitedDescriptor, length must be less than 306.", new [] { "ReasonExitedDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentNeglectedOrDelinquentProgramAssociation" />
    /// </summary>
    public class EdFiStudentNeglectedOrDelinquentProgramAssociationJsonConverter : JsonConverter<EdFiStudentNeglectedOrDelinquentProgramAssociation>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentNeglectedOrDelinquentProgramAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentNeglectedOrDelinquentProgramAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> beginDate = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiProgramReference?> programReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<string?> elaProgressLevelDescriptor = default;
            Option<DateOnly?> endDate = default;
            Option<string?> mathematicsProgressLevelDescriptor = default;
            Option<string?> neglectedOrDelinquentProgramDescriptor = default;
            Option<List<EdFiStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService>?> neglectedOrDelinquentProgramServices = default;
            Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> programParticipationStatuses = default;
            Option<string?> reasonExitedDescriptor = default;
            Option<bool?> servedOutsideOfRegularSession = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programReference":
                            programReference = new Option<EdFiProgramReference?>(JsonSerializer.Deserialize<EdFiProgramReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "elaProgressLevelDescriptor":
                            elaProgressLevelDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mathematicsProgressLevelDescriptor":
                            mathematicsProgressLevelDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "neglectedOrDelinquentProgramDescriptor":
                            neglectedOrDelinquentProgramDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "neglectedOrDelinquentProgramServices":
                            neglectedOrDelinquentProgramServices = new Option<List<EdFiStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService>?>(JsonSerializer.Deserialize<List<EdFiStudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programParticipationStatuses":
                            programParticipationStatuses = new Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?>(JsonSerializer.Deserialize<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reasonExitedDescriptor":
                            reasonExitedDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "servedOutsideOfRegularSession":
                            servedOutsideOfRegularSession = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.", nameof(beginDate));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.", nameof(educationOrganizationReference));

            if (!programReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.", nameof(programReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.", nameof(studentReference));

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (programReference.IsSet && programReference.Value == null)
                throw new ArgumentNullException(nameof(programReference), "Property is not nullable for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (neglectedOrDelinquentProgramServices.IsSet && neglectedOrDelinquentProgramServices.Value == null)
                throw new ArgumentNullException(nameof(neglectedOrDelinquentProgramServices), "Property is not nullable for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (programParticipationStatuses.IsSet && programParticipationStatuses.Value == null)
                throw new ArgumentNullException(nameof(programParticipationStatuses), "Property is not nullable for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            return new EdFiStudentNeglectedOrDelinquentProgramAssociation(beginDate.Value!.Value!, educationOrganizationReference.Value!, programReference.Value!, studentReference.Value!, id, elaProgressLevelDescriptor, endDate, mathematicsProgressLevelDescriptor, neglectedOrDelinquentProgramDescriptor, neglectedOrDelinquentProgramServices, programParticipationStatuses, reasonExitedDescriptor, servedOutsideOfRegularSession, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentNeglectedOrDelinquentProgramAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentNeglectedOrDelinquentProgramAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentNeglectedOrDelinquentProgramAssociation edFiStudentNeglectedOrDelinquentProgramAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentNeglectedOrDelinquentProgramAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentNeglectedOrDelinquentProgramAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentNeglectedOrDelinquentProgramAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentNeglectedOrDelinquentProgramAssociation edFiStudentNeglectedOrDelinquentProgramAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentNeglectedOrDelinquentProgramAssociation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentNeglectedOrDelinquentProgramAssociation.EducationOrganizationReference), "Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.ProgramReference == null)
                throw new ArgumentNullException(nameof(edFiStudentNeglectedOrDelinquentProgramAssociation.ProgramReference), "Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentNeglectedOrDelinquentProgramAssociation.StudentReference), "Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.IdOption.IsSet && edFiStudentNeglectedOrDelinquentProgramAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentNeglectedOrDelinquentProgramAssociation.Id), "Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.NeglectedOrDelinquentProgramServicesOption.IsSet && edFiStudentNeglectedOrDelinquentProgramAssociation.NeglectedOrDelinquentProgramServices == null)
                throw new ArgumentNullException(nameof(edFiStudentNeglectedOrDelinquentProgramAssociation.NeglectedOrDelinquentProgramServices), "Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.ProgramParticipationStatusesOption.IsSet && edFiStudentNeglectedOrDelinquentProgramAssociation.ProgramParticipationStatuses == null)
                throw new ArgumentNullException(nameof(edFiStudentNeglectedOrDelinquentProgramAssociation.ProgramParticipationStatuses), "Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.EtagOption.IsSet && edFiStudentNeglectedOrDelinquentProgramAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentNeglectedOrDelinquentProgramAssociation.Etag), "Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.ExtOption.IsSet && edFiStudentNeglectedOrDelinquentProgramAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentNeglectedOrDelinquentProgramAssociation.Ext), "Property is required for class EdFiStudentNeglectedOrDelinquentProgramAssociation.");

            writer.WriteString("beginDate", edFiStudentNeglectedOrDelinquentProgramAssociation.BeginDate.ToString(BeginDateFormat));

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStudentNeglectedOrDelinquentProgramAssociation.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("programReference");
            JsonSerializer.Serialize(writer, edFiStudentNeglectedOrDelinquentProgramAssociation.ProgramReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentNeglectedOrDelinquentProgramAssociation.StudentReference, jsonSerializerOptions);
            if (edFiStudentNeglectedOrDelinquentProgramAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentNeglectedOrDelinquentProgramAssociation.Id);

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.ElaProgressLevelDescriptorOption.IsSet)
                if (edFiStudentNeglectedOrDelinquentProgramAssociation.ElaProgressLevelDescriptorOption.Value != null)
                    writer.WriteString("elaProgressLevelDescriptor", edFiStudentNeglectedOrDelinquentProgramAssociation.ElaProgressLevelDescriptor);
                else
                    writer.WriteNull("elaProgressLevelDescriptor");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.EndDateOption.IsSet)
                if (edFiStudentNeglectedOrDelinquentProgramAssociation.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiStudentNeglectedOrDelinquentProgramAssociation.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.MathematicsProgressLevelDescriptorOption.IsSet)
                if (edFiStudentNeglectedOrDelinquentProgramAssociation.MathematicsProgressLevelDescriptorOption.Value != null)
                    writer.WriteString("mathematicsProgressLevelDescriptor", edFiStudentNeglectedOrDelinquentProgramAssociation.MathematicsProgressLevelDescriptor);
                else
                    writer.WriteNull("mathematicsProgressLevelDescriptor");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.NeglectedOrDelinquentProgramDescriptorOption.IsSet)
                if (edFiStudentNeglectedOrDelinquentProgramAssociation.NeglectedOrDelinquentProgramDescriptorOption.Value != null)
                    writer.WriteString("neglectedOrDelinquentProgramDescriptor", edFiStudentNeglectedOrDelinquentProgramAssociation.NeglectedOrDelinquentProgramDescriptor);
                else
                    writer.WriteNull("neglectedOrDelinquentProgramDescriptor");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.NeglectedOrDelinquentProgramServicesOption.IsSet)
            {
                writer.WritePropertyName("neglectedOrDelinquentProgramServices");
                JsonSerializer.Serialize(writer, edFiStudentNeglectedOrDelinquentProgramAssociation.NeglectedOrDelinquentProgramServices, jsonSerializerOptions);
            }
            if (edFiStudentNeglectedOrDelinquentProgramAssociation.ProgramParticipationStatusesOption.IsSet)
            {
                writer.WritePropertyName("programParticipationStatuses");
                JsonSerializer.Serialize(writer, edFiStudentNeglectedOrDelinquentProgramAssociation.ProgramParticipationStatuses, jsonSerializerOptions);
            }
            if (edFiStudentNeglectedOrDelinquentProgramAssociation.ReasonExitedDescriptorOption.IsSet)
                if (edFiStudentNeglectedOrDelinquentProgramAssociation.ReasonExitedDescriptorOption.Value != null)
                    writer.WriteString("reasonExitedDescriptor", edFiStudentNeglectedOrDelinquentProgramAssociation.ReasonExitedDescriptor);
                else
                    writer.WriteNull("reasonExitedDescriptor");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.ServedOutsideOfRegularSessionOption.IsSet)
                if (edFiStudentNeglectedOrDelinquentProgramAssociation.ServedOutsideOfRegularSessionOption.Value != null)
                    writer.WriteBoolean("servedOutsideOfRegularSession", edFiStudentNeglectedOrDelinquentProgramAssociation.ServedOutsideOfRegularSessionOption.Value!.Value);
                else
                    writer.WriteNull("servedOutsideOfRegularSession");

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentNeglectedOrDelinquentProgramAssociation.Etag);

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentNeglectedOrDelinquentProgramAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentNeglectedOrDelinquentProgramAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentNeglectedOrDelinquentProgramAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
