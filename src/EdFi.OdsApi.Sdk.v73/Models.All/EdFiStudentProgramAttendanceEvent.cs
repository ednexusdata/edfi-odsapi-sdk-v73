// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentProgramAttendanceEvent
    /// </summary>
    public partial class EdFiStudentProgramAttendanceEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentProgramAttendanceEvent" /> class.
        /// </summary>
        /// <param name="attendanceEventCategoryDescriptor">A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy.</param>
        /// <param name="eventDate">Date for this attendance event.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="programReference">programReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="attendanceEventReason">The reported reason for a student&#39;s absence.</param>
        /// <param name="educationalEnvironmentDescriptor">The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.</param>
        /// <param name="eventDuration">The amount of time in days for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33.</param>
        /// <param name="programAttendanceDuration">The duration in minutes of the program attendance event.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentProgramAttendanceEvent entity.</param>
        [JsonConstructor]
        public EdFiStudentProgramAttendanceEvent(string attendanceEventCategoryDescriptor, DateOnly eventDate, EdFiEducationOrganizationReference educationOrganizationReference, EdFiProgramReference programReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<string?> attendanceEventReason = default, Option<string?> educationalEnvironmentDescriptor = default, Option<double?> eventDuration = default, Option<int?> programAttendanceDuration = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            AttendanceEventCategoryDescriptor = attendanceEventCategoryDescriptor;
            EventDate = eventDate;
            EducationOrganizationReference = educationOrganizationReference;
            ProgramReference = programReference;
            StudentReference = studentReference;
            IdOption = id;
            AttendanceEventReasonOption = attendanceEventReason;
            EducationalEnvironmentDescriptorOption = educationalEnvironmentDescriptor;
            EventDurationOption = eventDuration;
            ProgramAttendanceDurationOption = programAttendanceDuration;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy.
        /// </summary>
        /// <value>A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy.</value>
        [JsonPropertyName("attendanceEventCategoryDescriptor")]
        public string AttendanceEventCategoryDescriptor { get; set; }

        /// <summary>
        /// Date for this attendance event.
        /// </summary>
        /// <value>Date for this attendance event.</value>
        [JsonPropertyName("eventDate")]
        public DateOnly EventDate { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets ProgramReference
        /// </summary>
        [JsonPropertyName("programReference")]
        public EdFiProgramReference ProgramReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttendanceEventReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AttendanceEventReasonOption { get; private set; }

        /// <summary>
        /// The reported reason for a student&#39;s absence.
        /// </summary>
        /// <value>The reported reason for a student&#39;s absence.</value>
        [JsonPropertyName("attendanceEventReason")]
        public string? AttendanceEventReason { get { return this.AttendanceEventReasonOption; } set { this.AttendanceEventReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationalEnvironmentDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EducationalEnvironmentDescriptorOption { get; private set; }

        /// <summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        /// </summary>
        /// <value>The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.</value>
        [JsonPropertyName("educationalEnvironmentDescriptor")]
        public string? EducationalEnvironmentDescriptor { get { return this.EducationalEnvironmentDescriptorOption; } set { this.EducationalEnvironmentDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EventDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> EventDurationOption { get; private set; }

        /// <summary>
        /// The amount of time in days for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33.
        /// </summary>
        /// <value>The amount of time in days for the event as recognized by the school: 1 day &#x3D; 1, 1/2 day &#x3D; 0.5, 1/3 day &#x3D; 0.33.</value>
        [JsonPropertyName("eventDuration")]
        public double? EventDuration { get { return this.EventDurationOption; } set { this.EventDurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramAttendanceDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProgramAttendanceDurationOption { get; private set; }

        /// <summary>
        /// The duration in minutes of the program attendance event.
        /// </summary>
        /// <value>The duration in minutes of the program attendance event.</value>
        [JsonPropertyName("programAttendanceDuration")]
        public int? ProgramAttendanceDuration { get { return this.ProgramAttendanceDurationOption; } set { this.ProgramAttendanceDurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentProgramAttendanceEvent entity.
        /// </summary>
        /// <value>Extensions to the StudentProgramAttendanceEvent entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentProgramAttendanceEvent {\n");
            sb.Append("  AttendanceEventCategoryDescriptor: ").Append(AttendanceEventCategoryDescriptor).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  ProgramReference: ").Append(ProgramReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AttendanceEventReason: ").Append(AttendanceEventReason).Append("\n");
            sb.Append("  EducationalEnvironmentDescriptor: ").Append(EducationalEnvironmentDescriptor).Append("\n");
            sb.Append("  EventDuration: ").Append(EventDuration).Append("\n");
            sb.Append("  ProgramAttendanceDuration: ").Append(ProgramAttendanceDuration).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AttendanceEventCategoryDescriptor (string) maxLength
            if (this.AttendanceEventCategoryDescriptor != null && this.AttendanceEventCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AttendanceEventCategoryDescriptor, length must be less than 306.", new [] { "AttendanceEventCategoryDescriptor" });
            }

            // AttendanceEventReason (string) maxLength
            if (this.AttendanceEventReason != null && this.AttendanceEventReason.Length > 255)
            {
                yield return new ValidationResult("Invalid value for AttendanceEventReason, length must be less than 255.", new [] { "AttendanceEventReason" });
            }

            // EducationalEnvironmentDescriptor (string) maxLength
            if (this.EducationalEnvironmentDescriptor != null && this.EducationalEnvironmentDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EducationalEnvironmentDescriptor, length must be less than 306.", new [] { "EducationalEnvironmentDescriptor" });
            }

            // EventDuration (double) maximum
            if (this.EventDurationOption.IsSet && this.EventDurationOption.Value > (double)1.0)
            {
                yield return new ValidationResult("Invalid value for EventDuration, must be a value less than or equal to 1.0.", new [] { "EventDuration" });
            }

            // EventDuration (double) minimum
            if (this.EventDurationOption.IsSet && this.EventDurationOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for EventDuration, must be a value greater than or equal to 0.0.", new [] { "EventDuration" });
            }

            // ProgramAttendanceDuration (int) maximum
            if (this.ProgramAttendanceDurationOption.IsSet && this.ProgramAttendanceDurationOption.Value > (int)1440)
            {
                yield return new ValidationResult("Invalid value for ProgramAttendanceDuration, must be a value less than or equal to 1440.", new [] { "ProgramAttendanceDuration" });
            }

            // ProgramAttendanceDuration (int) minimum
            if (this.ProgramAttendanceDurationOption.IsSet && this.ProgramAttendanceDurationOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for ProgramAttendanceDuration, must be a value greater than or equal to 0.", new [] { "ProgramAttendanceDuration" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentProgramAttendanceEvent" />
    /// </summary>
    public class EdFiStudentProgramAttendanceEventJsonConverter : JsonConverter<EdFiStudentProgramAttendanceEvent>
    {
        /// <summary>
        /// The format to use to serialize EventDate
        /// </summary>
        public static string EventDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentProgramAttendanceEvent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentProgramAttendanceEvent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> attendanceEventCategoryDescriptor = default;
            Option<DateOnly?> eventDate = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiProgramReference?> programReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<string?> attendanceEventReason = default;
            Option<string?> educationalEnvironmentDescriptor = default;
            Option<double?> eventDuration = default;
            Option<int?> programAttendanceDuration = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attendanceEventCategoryDescriptor":
                            attendanceEventCategoryDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eventDate":
                            eventDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programReference":
                            programReference = new Option<EdFiProgramReference?>(JsonSerializer.Deserialize<EdFiProgramReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attendanceEventReason":
                            attendanceEventReason = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "educationalEnvironmentDescriptor":
                            educationalEnvironmentDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "eventDuration":
                            eventDuration = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "programAttendanceDuration":
                            programAttendanceDuration = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!attendanceEventCategoryDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentProgramAttendanceEvent.", nameof(attendanceEventCategoryDescriptor));

            if (!eventDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentProgramAttendanceEvent.", nameof(eventDate));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentProgramAttendanceEvent.", nameof(educationOrganizationReference));

            if (!programReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentProgramAttendanceEvent.", nameof(programReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentProgramAttendanceEvent.", nameof(studentReference));

            if (attendanceEventCategoryDescriptor.IsSet && attendanceEventCategoryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(attendanceEventCategoryDescriptor), "Property is not nullable for class EdFiStudentProgramAttendanceEvent.");

            if (eventDate.IsSet && eventDate.Value == null)
                throw new ArgumentNullException(nameof(eventDate), "Property is not nullable for class EdFiStudentProgramAttendanceEvent.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStudentProgramAttendanceEvent.");

            if (programReference.IsSet && programReference.Value == null)
                throw new ArgumentNullException(nameof(programReference), "Property is not nullable for class EdFiStudentProgramAttendanceEvent.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentProgramAttendanceEvent.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentProgramAttendanceEvent.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentProgramAttendanceEvent.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentProgramAttendanceEvent.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentProgramAttendanceEvent.");

            return new EdFiStudentProgramAttendanceEvent(attendanceEventCategoryDescriptor.Value!, eventDate.Value!.Value!, educationOrganizationReference.Value!, programReference.Value!, studentReference.Value!, id, attendanceEventReason, educationalEnvironmentDescriptor, eventDuration, programAttendanceDuration, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentProgramAttendanceEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentProgramAttendanceEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentProgramAttendanceEvent edFiStudentProgramAttendanceEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentProgramAttendanceEvent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentProgramAttendanceEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentProgramAttendanceEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentProgramAttendanceEvent edFiStudentProgramAttendanceEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentProgramAttendanceEvent.AttendanceEventCategoryDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramAttendanceEvent.AttendanceEventCategoryDescriptor), "Property is required for class EdFiStudentProgramAttendanceEvent.");

            if (edFiStudentProgramAttendanceEvent.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramAttendanceEvent.EducationOrganizationReference), "Property is required for class EdFiStudentProgramAttendanceEvent.");

            if (edFiStudentProgramAttendanceEvent.ProgramReference == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramAttendanceEvent.ProgramReference), "Property is required for class EdFiStudentProgramAttendanceEvent.");

            if (edFiStudentProgramAttendanceEvent.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramAttendanceEvent.StudentReference), "Property is required for class EdFiStudentProgramAttendanceEvent.");

            if (edFiStudentProgramAttendanceEvent.IdOption.IsSet && edFiStudentProgramAttendanceEvent.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramAttendanceEvent.Id), "Property is required for class EdFiStudentProgramAttendanceEvent.");

            if (edFiStudentProgramAttendanceEvent.EtagOption.IsSet && edFiStudentProgramAttendanceEvent.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramAttendanceEvent.Etag), "Property is required for class EdFiStudentProgramAttendanceEvent.");

            if (edFiStudentProgramAttendanceEvent.ExtOption.IsSet && edFiStudentProgramAttendanceEvent.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramAttendanceEvent.Ext), "Property is required for class EdFiStudentProgramAttendanceEvent.");

            writer.WriteString("attendanceEventCategoryDescriptor", edFiStudentProgramAttendanceEvent.AttendanceEventCategoryDescriptor);

            writer.WriteString("eventDate", edFiStudentProgramAttendanceEvent.EventDate.ToString(EventDateFormat));

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStudentProgramAttendanceEvent.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("programReference");
            JsonSerializer.Serialize(writer, edFiStudentProgramAttendanceEvent.ProgramReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentProgramAttendanceEvent.StudentReference, jsonSerializerOptions);
            if (edFiStudentProgramAttendanceEvent.IdOption.IsSet)
                writer.WriteString("id", edFiStudentProgramAttendanceEvent.Id);

            if (edFiStudentProgramAttendanceEvent.AttendanceEventReasonOption.IsSet)
                if (edFiStudentProgramAttendanceEvent.AttendanceEventReasonOption.Value != null)
                    writer.WriteString("attendanceEventReason", edFiStudentProgramAttendanceEvent.AttendanceEventReason);
                else
                    writer.WriteNull("attendanceEventReason");

            if (edFiStudentProgramAttendanceEvent.EducationalEnvironmentDescriptorOption.IsSet)
                if (edFiStudentProgramAttendanceEvent.EducationalEnvironmentDescriptorOption.Value != null)
                    writer.WriteString("educationalEnvironmentDescriptor", edFiStudentProgramAttendanceEvent.EducationalEnvironmentDescriptor);
                else
                    writer.WriteNull("educationalEnvironmentDescriptor");

            if (edFiStudentProgramAttendanceEvent.EventDurationOption.IsSet)
                if (edFiStudentProgramAttendanceEvent.EventDurationOption.Value != null)
                    writer.WriteNumber("eventDuration", edFiStudentProgramAttendanceEvent.EventDurationOption.Value!.Value);
                else
                    writer.WriteNull("eventDuration");

            if (edFiStudentProgramAttendanceEvent.ProgramAttendanceDurationOption.IsSet)
                if (edFiStudentProgramAttendanceEvent.ProgramAttendanceDurationOption.Value != null)
                    writer.WriteNumber("programAttendanceDuration", edFiStudentProgramAttendanceEvent.ProgramAttendanceDurationOption.Value!.Value);
                else
                    writer.WriteNull("programAttendanceDuration");

            if (edFiStudentProgramAttendanceEvent.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentProgramAttendanceEvent.Etag);

            if (edFiStudentProgramAttendanceEvent.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentProgramAttendanceEvent.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentProgramAttendanceEvent.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentProgramAttendanceEvent.Ext, jsonSerializerOptions);
            }
        }
    }
}
