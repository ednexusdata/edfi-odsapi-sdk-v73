// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentProgramEvaluation
    /// </summary>
    public partial class EdFiStudentProgramEvaluation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentProgramEvaluation" /> class.
        /// </summary>
        /// <param name="evaluationDate">The month, day, and year on which the evaluation was conducted.</param>
        /// <param name="programEvaluationReference">programEvaluationReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="staffEvaluatorStaffReference">staffEvaluatorStaffReference</param>
        /// <param name="evaluationDuration">The actual number of minutes to conduct the evaluation.</param>
        /// <param name="externalEvaluators">An unordered collection of studentProgramEvaluationExternalEvaluators. The external person(s) - not staff - that conducted the evaluation.</param>
        /// <param name="studentEvaluationElements">An unordered collection of studentProgramEvaluationStudentEvaluationElements. The student&#39;s rating and/or rating levels earned for a program evaluation element.</param>
        /// <param name="studentEvaluationObjectives">An unordered collection of studentProgramEvaluationStudentEvaluationObjectives. The student&#39;s rating and/or rating levels earned for a program evaluation objective.</param>
        /// <param name="summaryEvaluationComment">Any comments about the summary evaluation to be captured.</param>
        /// <param name="summaryEvaluationNumericRating">The numerical summary rating or score for the evaluation.</param>
        /// <param name="summaryEvaluationRatingLevelDescriptor">The summary rating level achieved based upon the rating or score.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentProgramEvaluation entity.</param>
        [JsonConstructor]
        public EdFiStudentProgramEvaluation(DateOnly evaluationDate, EdFiProgramEvaluationReference programEvaluationReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default, Option<EdFiStaffReference?> staffEvaluatorStaffReference = default, Option<int?> evaluationDuration = default, Option<List<EdFiStudentProgramEvaluationExternalEvaluator>?> externalEvaluators = default, Option<List<EdFiStudentProgramEvaluationStudentEvaluationElement>?> studentEvaluationElements = default, Option<List<EdFiStudentProgramEvaluationStudentEvaluationObjective>?> studentEvaluationObjectives = default, Option<string?> summaryEvaluationComment = default, Option<double?> summaryEvaluationNumericRating = default, Option<string?> summaryEvaluationRatingLevelDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            EvaluationDate = evaluationDate;
            ProgramEvaluationReference = programEvaluationReference;
            StudentReference = studentReference;
            IdOption = id;
            EducationOrganizationReferenceOption = educationOrganizationReference;
            StaffEvaluatorStaffReferenceOption = staffEvaluatorStaffReference;
            EvaluationDurationOption = evaluationDuration;
            ExternalEvaluatorsOption = externalEvaluators;
            StudentEvaluationElementsOption = studentEvaluationElements;
            StudentEvaluationObjectivesOption = studentEvaluationObjectives;
            SummaryEvaluationCommentOption = summaryEvaluationComment;
            SummaryEvaluationNumericRatingOption = summaryEvaluationNumericRating;
            SummaryEvaluationRatingLevelDescriptorOption = summaryEvaluationRatingLevelDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The month, day, and year on which the evaluation was conducted.
        /// </summary>
        /// <value>The month, day, and year on which the evaluation was conducted.</value>
        [JsonPropertyName("evaluationDate")]
        public DateOnly EvaluationDate { get; set; }

        /// <summary>
        /// Gets or Sets ProgramEvaluationReference
        /// </summary>
        [JsonPropertyName("programEvaluationReference")]
        public EdFiProgramEvaluationReference ProgramEvaluationReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationOrganizationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiEducationOrganizationReference?> EducationOrganizationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference? EducationOrganizationReference { get { return this.EducationOrganizationReferenceOption; } set { this.EducationOrganizationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of StaffEvaluatorStaffReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiStaffReference?> StaffEvaluatorStaffReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets StaffEvaluatorStaffReference
        /// </summary>
        [JsonPropertyName("staffEvaluatorStaffReference")]
        public EdFiStaffReference? StaffEvaluatorStaffReference { get { return this.StaffEvaluatorStaffReferenceOption; } set { this.StaffEvaluatorStaffReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of EvaluationDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EvaluationDurationOption { get; private set; }

        /// <summary>
        /// The actual number of minutes to conduct the evaluation.
        /// </summary>
        /// <value>The actual number of minutes to conduct the evaluation.</value>
        [JsonPropertyName("evaluationDuration")]
        public int? EvaluationDuration { get { return this.EvaluationDurationOption; } set { this.EvaluationDurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalEvaluators
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentProgramEvaluationExternalEvaluator>?> ExternalEvaluatorsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentProgramEvaluationExternalEvaluators. The external person(s) - not staff - that conducted the evaluation.
        /// </summary>
        /// <value>An unordered collection of studentProgramEvaluationExternalEvaluators. The external person(s) - not staff - that conducted the evaluation.</value>
        [JsonPropertyName("externalEvaluators")]
        public List<EdFiStudentProgramEvaluationExternalEvaluator>? ExternalEvaluators { get { return this.ExternalEvaluatorsOption; } set { this.ExternalEvaluatorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentEvaluationElements
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentProgramEvaluationStudentEvaluationElement>?> StudentEvaluationElementsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentProgramEvaluationStudentEvaluationElements. The student&#39;s rating and/or rating levels earned for a program evaluation element.
        /// </summary>
        /// <value>An unordered collection of studentProgramEvaluationStudentEvaluationElements. The student&#39;s rating and/or rating levels earned for a program evaluation element.</value>
        [JsonPropertyName("studentEvaluationElements")]
        public List<EdFiStudentProgramEvaluationStudentEvaluationElement>? StudentEvaluationElements { get { return this.StudentEvaluationElementsOption; } set { this.StudentEvaluationElementsOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentEvaluationObjectives
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentProgramEvaluationStudentEvaluationObjective>?> StudentEvaluationObjectivesOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentProgramEvaluationStudentEvaluationObjectives. The student&#39;s rating and/or rating levels earned for a program evaluation objective.
        /// </summary>
        /// <value>An unordered collection of studentProgramEvaluationStudentEvaluationObjectives. The student&#39;s rating and/or rating levels earned for a program evaluation objective.</value>
        [JsonPropertyName("studentEvaluationObjectives")]
        public List<EdFiStudentProgramEvaluationStudentEvaluationObjective>? StudentEvaluationObjectives { get { return this.StudentEvaluationObjectivesOption; } set { this.StudentEvaluationObjectivesOption = new(value); } }

        /// <summary>
        /// Used to track the state of SummaryEvaluationComment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SummaryEvaluationCommentOption { get; private set; }

        /// <summary>
        /// Any comments about the summary evaluation to be captured.
        /// </summary>
        /// <value>Any comments about the summary evaluation to be captured.</value>
        [JsonPropertyName("summaryEvaluationComment")]
        public string? SummaryEvaluationComment { get { return this.SummaryEvaluationCommentOption; } set { this.SummaryEvaluationCommentOption = new(value); } }

        /// <summary>
        /// Used to track the state of SummaryEvaluationNumericRating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SummaryEvaluationNumericRatingOption { get; private set; }

        /// <summary>
        /// The numerical summary rating or score for the evaluation.
        /// </summary>
        /// <value>The numerical summary rating or score for the evaluation.</value>
        [JsonPropertyName("summaryEvaluationNumericRating")]
        public double? SummaryEvaluationNumericRating { get { return this.SummaryEvaluationNumericRatingOption; } set { this.SummaryEvaluationNumericRatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of SummaryEvaluationRatingLevelDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SummaryEvaluationRatingLevelDescriptorOption { get; private set; }

        /// <summary>
        /// The summary rating level achieved based upon the rating or score.
        /// </summary>
        /// <value>The summary rating level achieved based upon the rating or score.</value>
        [JsonPropertyName("summaryEvaluationRatingLevelDescriptor")]
        public string? SummaryEvaluationRatingLevelDescriptor { get { return this.SummaryEvaluationRatingLevelDescriptorOption; } set { this.SummaryEvaluationRatingLevelDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentProgramEvaluation entity.
        /// </summary>
        /// <value>Extensions to the StudentProgramEvaluation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentProgramEvaluation {\n");
            sb.Append("  EvaluationDate: ").Append(EvaluationDate).Append("\n");
            sb.Append("  ProgramEvaluationReference: ").Append(ProgramEvaluationReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  StaffEvaluatorStaffReference: ").Append(StaffEvaluatorStaffReference).Append("\n");
            sb.Append("  EvaluationDuration: ").Append(EvaluationDuration).Append("\n");
            sb.Append("  ExternalEvaluators: ").Append(ExternalEvaluators).Append("\n");
            sb.Append("  StudentEvaluationElements: ").Append(StudentEvaluationElements).Append("\n");
            sb.Append("  StudentEvaluationObjectives: ").Append(StudentEvaluationObjectives).Append("\n");
            sb.Append("  SummaryEvaluationComment: ").Append(SummaryEvaluationComment).Append("\n");
            sb.Append("  SummaryEvaluationNumericRating: ").Append(SummaryEvaluationNumericRating).Append("\n");
            sb.Append("  SummaryEvaluationRatingLevelDescriptor: ").Append(SummaryEvaluationRatingLevelDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EvaluationDuration (int) minimum
            if (this.EvaluationDurationOption.IsSet && this.EvaluationDurationOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for EvaluationDuration, must be a value greater than or equal to 1.", new [] { "EvaluationDuration" });
            }

            // SummaryEvaluationComment (string) maxLength
            if (this.SummaryEvaluationComment != null && this.SummaryEvaluationComment.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for SummaryEvaluationComment, length must be less than 1024.", new [] { "SummaryEvaluationComment" });
            }

            // SummaryEvaluationNumericRating (double) maximum
            if (this.SummaryEvaluationNumericRatingOption.IsSet && this.SummaryEvaluationNumericRatingOption.Value > (double)999.999)
            {
                yield return new ValidationResult("Invalid value for SummaryEvaluationNumericRating, must be a value less than or equal to 999.999.", new [] { "SummaryEvaluationNumericRating" });
            }

            // SummaryEvaluationNumericRating (double) minimum
            if (this.SummaryEvaluationNumericRatingOption.IsSet && this.SummaryEvaluationNumericRatingOption.Value < (double)-999.999)
            {
                yield return new ValidationResult("Invalid value for SummaryEvaluationNumericRating, must be a value greater than or equal to -999.999.", new [] { "SummaryEvaluationNumericRating" });
            }

            // SummaryEvaluationRatingLevelDescriptor (string) maxLength
            if (this.SummaryEvaluationRatingLevelDescriptor != null && this.SummaryEvaluationRatingLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SummaryEvaluationRatingLevelDescriptor, length must be less than 306.", new [] { "SummaryEvaluationRatingLevelDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentProgramEvaluation" />
    /// </summary>
    public class EdFiStudentProgramEvaluationJsonConverter : JsonConverter<EdFiStudentProgramEvaluation>
    {
        /// <summary>
        /// The format to use to serialize EvaluationDate
        /// </summary>
        public static string EvaluationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentProgramEvaluation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentProgramEvaluation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> evaluationDate = default;
            Option<EdFiProgramEvaluationReference?> programEvaluationReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiStaffReference?> staffEvaluatorStaffReference = default;
            Option<int?> evaluationDuration = default;
            Option<List<EdFiStudentProgramEvaluationExternalEvaluator>?> externalEvaluators = default;
            Option<List<EdFiStudentProgramEvaluationStudentEvaluationElement>?> studentEvaluationElements = default;
            Option<List<EdFiStudentProgramEvaluationStudentEvaluationObjective>?> studentEvaluationObjectives = default;
            Option<string?> summaryEvaluationComment = default;
            Option<double?> summaryEvaluationNumericRating = default;
            Option<string?> summaryEvaluationRatingLevelDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "evaluationDate":
                            evaluationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "programEvaluationReference":
                            programEvaluationReference = new Option<EdFiProgramEvaluationReference?>(JsonSerializer.Deserialize<EdFiProgramEvaluationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "staffEvaluatorStaffReference":
                            staffEvaluatorStaffReference = new Option<EdFiStaffReference?>(JsonSerializer.Deserialize<EdFiStaffReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "evaluationDuration":
                            evaluationDuration = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "externalEvaluators":
                            externalEvaluators = new Option<List<EdFiStudentProgramEvaluationExternalEvaluator>?>(JsonSerializer.Deserialize<List<EdFiStudentProgramEvaluationExternalEvaluator>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentEvaluationElements":
                            studentEvaluationElements = new Option<List<EdFiStudentProgramEvaluationStudentEvaluationElement>?>(JsonSerializer.Deserialize<List<EdFiStudentProgramEvaluationStudentEvaluationElement>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentEvaluationObjectives":
                            studentEvaluationObjectives = new Option<List<EdFiStudentProgramEvaluationStudentEvaluationObjective>?>(JsonSerializer.Deserialize<List<EdFiStudentProgramEvaluationStudentEvaluationObjective>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "summaryEvaluationComment":
                            summaryEvaluationComment = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "summaryEvaluationNumericRating":
                            summaryEvaluationNumericRating = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "summaryEvaluationRatingLevelDescriptor":
                            summaryEvaluationRatingLevelDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!evaluationDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentProgramEvaluation.", nameof(evaluationDate));

            if (!programEvaluationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentProgramEvaluation.", nameof(programEvaluationReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentProgramEvaluation.", nameof(studentReference));

            if (evaluationDate.IsSet && evaluationDate.Value == null)
                throw new ArgumentNullException(nameof(evaluationDate), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            if (programEvaluationReference.IsSet && programEvaluationReference.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationReference), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            if (staffEvaluatorStaffReference.IsSet && staffEvaluatorStaffReference.Value == null)
                throw new ArgumentNullException(nameof(staffEvaluatorStaffReference), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            if (externalEvaluators.IsSet && externalEvaluators.Value == null)
                throw new ArgumentNullException(nameof(externalEvaluators), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            if (studentEvaluationElements.IsSet && studentEvaluationElements.Value == null)
                throw new ArgumentNullException(nameof(studentEvaluationElements), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            if (studentEvaluationObjectives.IsSet && studentEvaluationObjectives.Value == null)
                throw new ArgumentNullException(nameof(studentEvaluationObjectives), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentProgramEvaluation.");

            return new EdFiStudentProgramEvaluation(evaluationDate.Value!.Value!, programEvaluationReference.Value!, studentReference.Value!, id, educationOrganizationReference, staffEvaluatorStaffReference, evaluationDuration, externalEvaluators, studentEvaluationElements, studentEvaluationObjectives, summaryEvaluationComment, summaryEvaluationNumericRating, summaryEvaluationRatingLevelDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentProgramEvaluation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentProgramEvaluation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentProgramEvaluation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentProgramEvaluation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentProgramEvaluation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentProgramEvaluation edFiStudentProgramEvaluation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentProgramEvaluation.ProgramEvaluationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation.ProgramEvaluationReference), "Property is required for class EdFiStudentProgramEvaluation.");

            if (edFiStudentProgramEvaluation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation.StudentReference), "Property is required for class EdFiStudentProgramEvaluation.");

            if (edFiStudentProgramEvaluation.IdOption.IsSet && edFiStudentProgramEvaluation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation.Id), "Property is required for class EdFiStudentProgramEvaluation.");

            if (edFiStudentProgramEvaluation.EducationOrganizationReferenceOption.IsSet && edFiStudentProgramEvaluation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation.EducationOrganizationReference), "Property is required for class EdFiStudentProgramEvaluation.");

            if (edFiStudentProgramEvaluation.StaffEvaluatorStaffReferenceOption.IsSet && edFiStudentProgramEvaluation.StaffEvaluatorStaffReference == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation.StaffEvaluatorStaffReference), "Property is required for class EdFiStudentProgramEvaluation.");

            if (edFiStudentProgramEvaluation.ExternalEvaluatorsOption.IsSet && edFiStudentProgramEvaluation.ExternalEvaluators == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation.ExternalEvaluators), "Property is required for class EdFiStudentProgramEvaluation.");

            if (edFiStudentProgramEvaluation.StudentEvaluationElementsOption.IsSet && edFiStudentProgramEvaluation.StudentEvaluationElements == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation.StudentEvaluationElements), "Property is required for class EdFiStudentProgramEvaluation.");

            if (edFiStudentProgramEvaluation.StudentEvaluationObjectivesOption.IsSet && edFiStudentProgramEvaluation.StudentEvaluationObjectives == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation.StudentEvaluationObjectives), "Property is required for class EdFiStudentProgramEvaluation.");

            if (edFiStudentProgramEvaluation.EtagOption.IsSet && edFiStudentProgramEvaluation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation.Etag), "Property is required for class EdFiStudentProgramEvaluation.");

            if (edFiStudentProgramEvaluation.ExtOption.IsSet && edFiStudentProgramEvaluation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentProgramEvaluation.Ext), "Property is required for class EdFiStudentProgramEvaluation.");

            writer.WriteString("evaluationDate", edFiStudentProgramEvaluation.EvaluationDate.ToString(EvaluationDateFormat));

            writer.WritePropertyName("programEvaluationReference");
            JsonSerializer.Serialize(writer, edFiStudentProgramEvaluation.ProgramEvaluationReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentProgramEvaluation.StudentReference, jsonSerializerOptions);
            if (edFiStudentProgramEvaluation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentProgramEvaluation.Id);

            if (edFiStudentProgramEvaluation.EducationOrganizationReferenceOption.IsSet)
            {
                writer.WritePropertyName("educationOrganizationReference");
                JsonSerializer.Serialize(writer, edFiStudentProgramEvaluation.EducationOrganizationReference, jsonSerializerOptions);
            }
            if (edFiStudentProgramEvaluation.StaffEvaluatorStaffReferenceOption.IsSet)
            {
                writer.WritePropertyName("staffEvaluatorStaffReference");
                JsonSerializer.Serialize(writer, edFiStudentProgramEvaluation.StaffEvaluatorStaffReference, jsonSerializerOptions);
            }
            if (edFiStudentProgramEvaluation.EvaluationDurationOption.IsSet)
                if (edFiStudentProgramEvaluation.EvaluationDurationOption.Value != null)
                    writer.WriteNumber("evaluationDuration", edFiStudentProgramEvaluation.EvaluationDurationOption.Value!.Value);
                else
                    writer.WriteNull("evaluationDuration");

            if (edFiStudentProgramEvaluation.ExternalEvaluatorsOption.IsSet)
            {
                writer.WritePropertyName("externalEvaluators");
                JsonSerializer.Serialize(writer, edFiStudentProgramEvaluation.ExternalEvaluators, jsonSerializerOptions);
            }
            if (edFiStudentProgramEvaluation.StudentEvaluationElementsOption.IsSet)
            {
                writer.WritePropertyName("studentEvaluationElements");
                JsonSerializer.Serialize(writer, edFiStudentProgramEvaluation.StudentEvaluationElements, jsonSerializerOptions);
            }
            if (edFiStudentProgramEvaluation.StudentEvaluationObjectivesOption.IsSet)
            {
                writer.WritePropertyName("studentEvaluationObjectives");
                JsonSerializer.Serialize(writer, edFiStudentProgramEvaluation.StudentEvaluationObjectives, jsonSerializerOptions);
            }
            if (edFiStudentProgramEvaluation.SummaryEvaluationCommentOption.IsSet)
                if (edFiStudentProgramEvaluation.SummaryEvaluationCommentOption.Value != null)
                    writer.WriteString("summaryEvaluationComment", edFiStudentProgramEvaluation.SummaryEvaluationComment);
                else
                    writer.WriteNull("summaryEvaluationComment");

            if (edFiStudentProgramEvaluation.SummaryEvaluationNumericRatingOption.IsSet)
                if (edFiStudentProgramEvaluation.SummaryEvaluationNumericRatingOption.Value != null)
                    writer.WriteNumber("summaryEvaluationNumericRating", edFiStudentProgramEvaluation.SummaryEvaluationNumericRatingOption.Value!.Value);
                else
                    writer.WriteNull("summaryEvaluationNumericRating");

            if (edFiStudentProgramEvaluation.SummaryEvaluationRatingLevelDescriptorOption.IsSet)
                if (edFiStudentProgramEvaluation.SummaryEvaluationRatingLevelDescriptorOption.Value != null)
                    writer.WriteString("summaryEvaluationRatingLevelDescriptor", edFiStudentProgramEvaluation.SummaryEvaluationRatingLevelDescriptor);
                else
                    writer.WriteNull("summaryEvaluationRatingLevelDescriptor");

            if (edFiStudentProgramEvaluation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentProgramEvaluation.Etag);

            if (edFiStudentProgramEvaluation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentProgramEvaluation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentProgramEvaluation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentProgramEvaluation.Ext, jsonSerializerOptions);
            }
        }
    }
}
