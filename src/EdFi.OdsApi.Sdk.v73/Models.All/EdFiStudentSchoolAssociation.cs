// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentSchoolAssociation
    /// </summary>
    public partial class EdFiStudentSchoolAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSchoolAssociation" /> class.
        /// </summary>
        /// <param name="entryDate">The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student&#39;s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="schoolReference">schoolReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="entryGradeLevelDescriptor">The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.</param>
        /// <param name="id">id</param>
        /// <param name="calendarReference">calendarReference</param>
        /// <param name="classOfSchoolYearTypeReference">classOfSchoolYearTypeReference</param>
        /// <param name="graduationPlanReference">graduationPlanReference</param>
        /// <param name="nextYearSchoolReference">nextYearSchoolReference</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference</param>
        /// <param name="alternativeGraduationPlans">An unordered collection of studentSchoolAssociationAlternativeGraduationPlans. The secondary graduation plan or plans associated with the student enrolled in the school.</param>
        /// <param name="educationPlans">An unordered collection of studentSchoolAssociationEducationPlans. The type of education plan(s) the student is following, if appropriate.</param>
        /// <param name="employedWhileEnrolled">An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.</param>
        /// <param name="enrollmentTypeDescriptor">The type of enrollment reflected by the StudentSchoolAssociation.</param>
        /// <param name="entryGradeLevelReasonDescriptor">The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.</param>
        /// <param name="entryTypeDescriptor">The process by which a student enters a school during a given academic session.</param>
        /// <param name="exitWithdrawDate">The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="exitWithdrawTypeDescriptor">The circumstances under which the student exited from membership in an educational institution.</param>
        /// <param name="fullTimeEquivalency">The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.</param>
        /// <param name="nextYearGradeLevelDescriptor">The anticipated grade level for the student for the next school year.</param>
        /// <param name="primarySchool">Indicates if a given enrollment record should be considered the primary record for a student.</param>
        /// <param name="repeatGradeIndicator">An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.</param>
        /// <param name="residencyStatusDescriptor">An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.</param>
        /// <param name="schoolChoice">An indication of whether the student enrolled in this school under the provisions for public school choice</param>
        /// <param name="schoolChoiceBasisDescriptor">The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state</param>
        /// <param name="schoolChoiceTransfer">An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.</param>
        /// <param name="termCompletionIndicator">Idicates whether or not a student completed the most recent school term.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentSchoolAssociation entity.</param>
        [JsonConstructor]
        public EdFiStudentSchoolAssociation(DateOnly entryDate, EdFiSchoolReference schoolReference, EdFiStudentReference studentReference, string entryGradeLevelDescriptor, Option<string?> id = default, Option<EdFiCalendarReference?> calendarReference = default, Option<EdFiSchoolYearTypeReference?> classOfSchoolYearTypeReference = default, Option<EdFiGraduationPlanReference?> graduationPlanReference = default, Option<EdFiSchoolReference?> nextYearSchoolReference = default, Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default, Option<List<EdFiStudentSchoolAssociationAlternativeGraduationPlan>?> alternativeGraduationPlans = default, Option<List<EdFiStudentSchoolAssociationEducationPlan>?> educationPlans = default, Option<bool?> employedWhileEnrolled = default, Option<string?> enrollmentTypeDescriptor = default, Option<string?> entryGradeLevelReasonDescriptor = default, Option<string?> entryTypeDescriptor = default, Option<DateOnly?> exitWithdrawDate = default, Option<string?> exitWithdrawTypeDescriptor = default, Option<double?> fullTimeEquivalency = default, Option<string?> nextYearGradeLevelDescriptor = default, Option<bool?> primarySchool = default, Option<bool?> repeatGradeIndicator = default, Option<string?> residencyStatusDescriptor = default, Option<bool?> schoolChoice = default, Option<string?> schoolChoiceBasisDescriptor = default, Option<bool?> schoolChoiceTransfer = default, Option<bool?> termCompletionIndicator = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            EntryDate = entryDate;
            SchoolReference = schoolReference;
            StudentReference = studentReference;
            EntryGradeLevelDescriptor = entryGradeLevelDescriptor;
            IdOption = id;
            CalendarReferenceOption = calendarReference;
            ClassOfSchoolYearTypeReferenceOption = classOfSchoolYearTypeReference;
            GraduationPlanReferenceOption = graduationPlanReference;
            NextYearSchoolReferenceOption = nextYearSchoolReference;
            SchoolYearTypeReferenceOption = schoolYearTypeReference;
            AlternativeGraduationPlansOption = alternativeGraduationPlans;
            EducationPlansOption = educationPlans;
            EmployedWhileEnrolledOption = employedWhileEnrolled;
            EnrollmentTypeDescriptorOption = enrollmentTypeDescriptor;
            EntryGradeLevelReasonDescriptorOption = entryGradeLevelReasonDescriptor;
            EntryTypeDescriptorOption = entryTypeDescriptor;
            ExitWithdrawDateOption = exitWithdrawDate;
            ExitWithdrawTypeDescriptorOption = exitWithdrawTypeDescriptor;
            FullTimeEquivalencyOption = fullTimeEquivalency;
            NextYearGradeLevelDescriptorOption = nextYearGradeLevelDescriptor;
            PrimarySchoolOption = primarySchool;
            RepeatGradeIndicatorOption = repeatGradeIndicator;
            ResidencyStatusDescriptorOption = residencyStatusDescriptor;
            SchoolChoiceOption = schoolChoice;
            SchoolChoiceBasisDescriptorOption = schoolChoiceBasisDescriptor;
            SchoolChoiceTransferOption = schoolChoiceTransfer;
            TermCompletionIndicatorOption = termCompletionIndicator;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student&#39;s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student&#39;s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("entryDate")]
        public DateOnly EntryDate { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [JsonPropertyName("schoolReference")]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.
        /// </summary>
        /// <value>The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.</value>
        [JsonPropertyName("entryGradeLevelDescriptor")]
        public string EntryGradeLevelDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CalendarReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiCalendarReference?> CalendarReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets CalendarReference
        /// </summary>
        [JsonPropertyName("calendarReference")]
        public EdFiCalendarReference? CalendarReference { get { return this.CalendarReferenceOption; } set { this.CalendarReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClassOfSchoolYearTypeReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiSchoolYearTypeReference?> ClassOfSchoolYearTypeReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClassOfSchoolYearTypeReference
        /// </summary>
        [JsonPropertyName("classOfSchoolYearTypeReference")]
        public EdFiSchoolYearTypeReference? ClassOfSchoolYearTypeReference { get { return this.ClassOfSchoolYearTypeReferenceOption; } set { this.ClassOfSchoolYearTypeReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of GraduationPlanReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiGraduationPlanReference?> GraduationPlanReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets GraduationPlanReference
        /// </summary>
        [JsonPropertyName("graduationPlanReference")]
        public EdFiGraduationPlanReference? GraduationPlanReference { get { return this.GraduationPlanReferenceOption; } set { this.GraduationPlanReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of NextYearSchoolReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiSchoolReference?> NextYearSchoolReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets NextYearSchoolReference
        /// </summary>
        [JsonPropertyName("nextYearSchoolReference")]
        public EdFiSchoolReference? NextYearSchoolReference { get { return this.NextYearSchoolReferenceOption; } set { this.NextYearSchoolReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of SchoolYearTypeReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiSchoolYearTypeReference?> SchoolYearTypeReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [JsonPropertyName("schoolYearTypeReference")]
        public EdFiSchoolYearTypeReference? SchoolYearTypeReference { get { return this.SchoolYearTypeReferenceOption; } set { this.SchoolYearTypeReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AlternativeGraduationPlans
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentSchoolAssociationAlternativeGraduationPlan>?> AlternativeGraduationPlansOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentSchoolAssociationAlternativeGraduationPlans. The secondary graduation plan or plans associated with the student enrolled in the school.
        /// </summary>
        /// <value>An unordered collection of studentSchoolAssociationAlternativeGraduationPlans. The secondary graduation plan or plans associated with the student enrolled in the school.</value>
        [JsonPropertyName("alternativeGraduationPlans")]
        public List<EdFiStudentSchoolAssociationAlternativeGraduationPlan>? AlternativeGraduationPlans { get { return this.AlternativeGraduationPlansOption; } set { this.AlternativeGraduationPlansOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationPlans
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentSchoolAssociationEducationPlan>?> EducationPlansOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentSchoolAssociationEducationPlans. The type of education plan(s) the student is following, if appropriate.
        /// </summary>
        /// <value>An unordered collection of studentSchoolAssociationEducationPlans. The type of education plan(s) the student is following, if appropriate.</value>
        [JsonPropertyName("educationPlans")]
        public List<EdFiStudentSchoolAssociationEducationPlan>? EducationPlans { get { return this.EducationPlansOption; } set { this.EducationPlansOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmployedWhileEnrolled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmployedWhileEnrolledOption { get; private set; }

        /// <summary>
        /// An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.
        /// </summary>
        /// <value>An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.</value>
        [JsonPropertyName("employedWhileEnrolled")]
        public bool? EmployedWhileEnrolled { get { return this.EmployedWhileEnrolledOption; } set { this.EmployedWhileEnrolledOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnrollmentTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EnrollmentTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of enrollment reflected by the StudentSchoolAssociation.
        /// </summary>
        /// <value>The type of enrollment reflected by the StudentSchoolAssociation.</value>
        [JsonPropertyName("enrollmentTypeDescriptor")]
        public string? EnrollmentTypeDescriptor { get { return this.EnrollmentTypeDescriptorOption; } set { this.EnrollmentTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EntryGradeLevelReasonDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EntryGradeLevelReasonDescriptorOption { get; private set; }

        /// <summary>
        /// The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.
        /// </summary>
        /// <value>The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.</value>
        [JsonPropertyName("entryGradeLevelReasonDescriptor")]
        public string? EntryGradeLevelReasonDescriptor { get { return this.EntryGradeLevelReasonDescriptorOption; } set { this.EntryGradeLevelReasonDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EntryTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EntryTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The process by which a student enters a school during a given academic session.
        /// </summary>
        /// <value>The process by which a student enters a school during a given academic session.</value>
        [JsonPropertyName("entryTypeDescriptor")]
        public string? EntryTypeDescriptor { get { return this.EntryTypeDescriptorOption; } set { this.EntryTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExitWithdrawDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ExitWithdrawDateOption { get; private set; }

        /// <summary>
        /// The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("exitWithdrawDate")]
        public DateOnly? ExitWithdrawDate { get { return this.ExitWithdrawDateOption; } set { this.ExitWithdrawDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExitWithdrawTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExitWithdrawTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The circumstances under which the student exited from membership in an educational institution.
        /// </summary>
        /// <value>The circumstances under which the student exited from membership in an educational institution.</value>
        [JsonPropertyName("exitWithdrawTypeDescriptor")]
        public string? ExitWithdrawTypeDescriptor { get { return this.ExitWithdrawTypeDescriptorOption; } set { this.ExitWithdrawTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullTimeEquivalency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> FullTimeEquivalencyOption { get; private set; }

        /// <summary>
        /// The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.
        /// </summary>
        /// <value>The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.</value>
        [JsonPropertyName("fullTimeEquivalency")]
        public double? FullTimeEquivalency { get { return this.FullTimeEquivalencyOption; } set { this.FullTimeEquivalencyOption = new(value); } }

        /// <summary>
        /// Used to track the state of NextYearGradeLevelDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NextYearGradeLevelDescriptorOption { get; private set; }

        /// <summary>
        /// The anticipated grade level for the student for the next school year.
        /// </summary>
        /// <value>The anticipated grade level for the student for the next school year.</value>
        [JsonPropertyName("nextYearGradeLevelDescriptor")]
        public string? NextYearGradeLevelDescriptor { get { return this.NextYearGradeLevelDescriptorOption; } set { this.NextYearGradeLevelDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimarySchool
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrimarySchoolOption { get; private set; }

        /// <summary>
        /// Indicates if a given enrollment record should be considered the primary record for a student.
        /// </summary>
        /// <value>Indicates if a given enrollment record should be considered the primary record for a student.</value>
        [JsonPropertyName("primarySchool")]
        public bool? PrimarySchool { get { return this.PrimarySchoolOption; } set { this.PrimarySchoolOption = new(value); } }

        /// <summary>
        /// Used to track the state of RepeatGradeIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RepeatGradeIndicatorOption { get; private set; }

        /// <summary>
        /// An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.
        /// </summary>
        /// <value>An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.</value>
        [JsonPropertyName("repeatGradeIndicator")]
        public bool? RepeatGradeIndicator { get { return this.RepeatGradeIndicatorOption; } set { this.RepeatGradeIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResidencyStatusDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResidencyStatusDescriptorOption { get; private set; }

        /// <summary>
        /// An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
        /// </summary>
        /// <value>An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.</value>
        [JsonPropertyName("residencyStatusDescriptor")]
        public string? ResidencyStatusDescriptor { get { return this.ResidencyStatusDescriptorOption; } set { this.ResidencyStatusDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of SchoolChoice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SchoolChoiceOption { get; private set; }

        /// <summary>
        /// An indication of whether the student enrolled in this school under the provisions for public school choice
        /// </summary>
        /// <value>An indication of whether the student enrolled in this school under the provisions for public school choice</value>
        [JsonPropertyName("schoolChoice")]
        public bool? SchoolChoice { get { return this.SchoolChoiceOption; } set { this.SchoolChoiceOption = new(value); } }

        /// <summary>
        /// Used to track the state of SchoolChoiceBasisDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SchoolChoiceBasisDescriptorOption { get; private set; }

        /// <summary>
        /// The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state
        /// </summary>
        /// <value>The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state</value>
        [JsonPropertyName("schoolChoiceBasisDescriptor")]
        public string? SchoolChoiceBasisDescriptor { get { return this.SchoolChoiceBasisDescriptorOption; } set { this.SchoolChoiceBasisDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of SchoolChoiceTransfer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SchoolChoiceTransferOption { get; private set; }

        /// <summary>
        /// An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.
        /// </summary>
        /// <value>An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.</value>
        [JsonPropertyName("schoolChoiceTransfer")]
        public bool? SchoolChoiceTransfer { get { return this.SchoolChoiceTransferOption; } set { this.SchoolChoiceTransferOption = new(value); } }

        /// <summary>
        /// Used to track the state of TermCompletionIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TermCompletionIndicatorOption { get; private set; }

        /// <summary>
        /// Idicates whether or not a student completed the most recent school term.
        /// </summary>
        /// <value>Idicates whether or not a student completed the most recent school term.</value>
        [JsonPropertyName("termCompletionIndicator")]
        public bool? TermCompletionIndicator { get { return this.TermCompletionIndicatorOption; } set { this.TermCompletionIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentSchoolAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentSchoolAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentSchoolAssociation {\n");
            sb.Append("  EntryDate: ").Append(EntryDate).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  EntryGradeLevelDescriptor: ").Append(EntryGradeLevelDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CalendarReference: ").Append(CalendarReference).Append("\n");
            sb.Append("  ClassOfSchoolYearTypeReference: ").Append(ClassOfSchoolYearTypeReference).Append("\n");
            sb.Append("  GraduationPlanReference: ").Append(GraduationPlanReference).Append("\n");
            sb.Append("  NextYearSchoolReference: ").Append(NextYearSchoolReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  AlternativeGraduationPlans: ").Append(AlternativeGraduationPlans).Append("\n");
            sb.Append("  EducationPlans: ").Append(EducationPlans).Append("\n");
            sb.Append("  EmployedWhileEnrolled: ").Append(EmployedWhileEnrolled).Append("\n");
            sb.Append("  EnrollmentTypeDescriptor: ").Append(EnrollmentTypeDescriptor).Append("\n");
            sb.Append("  EntryGradeLevelReasonDescriptor: ").Append(EntryGradeLevelReasonDescriptor).Append("\n");
            sb.Append("  EntryTypeDescriptor: ").Append(EntryTypeDescriptor).Append("\n");
            sb.Append("  ExitWithdrawDate: ").Append(ExitWithdrawDate).Append("\n");
            sb.Append("  ExitWithdrawTypeDescriptor: ").Append(ExitWithdrawTypeDescriptor).Append("\n");
            sb.Append("  FullTimeEquivalency: ").Append(FullTimeEquivalency).Append("\n");
            sb.Append("  NextYearGradeLevelDescriptor: ").Append(NextYearGradeLevelDescriptor).Append("\n");
            sb.Append("  PrimarySchool: ").Append(PrimarySchool).Append("\n");
            sb.Append("  RepeatGradeIndicator: ").Append(RepeatGradeIndicator).Append("\n");
            sb.Append("  ResidencyStatusDescriptor: ").Append(ResidencyStatusDescriptor).Append("\n");
            sb.Append("  SchoolChoice: ").Append(SchoolChoice).Append("\n");
            sb.Append("  SchoolChoiceBasisDescriptor: ").Append(SchoolChoiceBasisDescriptor).Append("\n");
            sb.Append("  SchoolChoiceTransfer: ").Append(SchoolChoiceTransfer).Append("\n");
            sb.Append("  TermCompletionIndicator: ").Append(TermCompletionIndicator).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EntryGradeLevelDescriptor (string) maxLength
            if (this.EntryGradeLevelDescriptor != null && this.EntryGradeLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EntryGradeLevelDescriptor, length must be less than 306.", new [] { "EntryGradeLevelDescriptor" });
            }

            // EnrollmentTypeDescriptor (string) maxLength
            if (this.EnrollmentTypeDescriptor != null && this.EnrollmentTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EnrollmentTypeDescriptor, length must be less than 306.", new [] { "EnrollmentTypeDescriptor" });
            }

            // EntryGradeLevelReasonDescriptor (string) maxLength
            if (this.EntryGradeLevelReasonDescriptor != null && this.EntryGradeLevelReasonDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EntryGradeLevelReasonDescriptor, length must be less than 306.", new [] { "EntryGradeLevelReasonDescriptor" });
            }

            // EntryTypeDescriptor (string) maxLength
            if (this.EntryTypeDescriptor != null && this.EntryTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EntryTypeDescriptor, length must be less than 306.", new [] { "EntryTypeDescriptor" });
            }

            // ExitWithdrawTypeDescriptor (string) maxLength
            if (this.ExitWithdrawTypeDescriptor != null && this.ExitWithdrawTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ExitWithdrawTypeDescriptor, length must be less than 306.", new [] { "ExitWithdrawTypeDescriptor" });
            }

            // FullTimeEquivalency (double) maximum
            if (this.FullTimeEquivalencyOption.IsSet && this.FullTimeEquivalencyOption.Value > (double)9.9999)
            {
                yield return new ValidationResult("Invalid value for FullTimeEquivalency, must be a value less than or equal to 9.9999.", new [] { "FullTimeEquivalency" });
            }

            // FullTimeEquivalency (double) minimum
            if (this.FullTimeEquivalencyOption.IsSet && this.FullTimeEquivalencyOption.Value < (double)0.0)
            {
                yield return new ValidationResult("Invalid value for FullTimeEquivalency, must be a value greater than or equal to 0.0.", new [] { "FullTimeEquivalency" });
            }

            // NextYearGradeLevelDescriptor (string) maxLength
            if (this.NextYearGradeLevelDescriptor != null && this.NextYearGradeLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for NextYearGradeLevelDescriptor, length must be less than 306.", new [] { "NextYearGradeLevelDescriptor" });
            }

            // ResidencyStatusDescriptor (string) maxLength
            if (this.ResidencyStatusDescriptor != null && this.ResidencyStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ResidencyStatusDescriptor, length must be less than 306.", new [] { "ResidencyStatusDescriptor" });
            }

            // SchoolChoiceBasisDescriptor (string) maxLength
            if (this.SchoolChoiceBasisDescriptor != null && this.SchoolChoiceBasisDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SchoolChoiceBasisDescriptor, length must be less than 306.", new [] { "SchoolChoiceBasisDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentSchoolAssociation" />
    /// </summary>
    public class EdFiStudentSchoolAssociationJsonConverter : JsonConverter<EdFiStudentSchoolAssociation>
    {
        /// <summary>
        /// The format to use to serialize EntryDate
        /// </summary>
        public static string EntryDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize ExitWithdrawDate
        /// </summary>
        public static string ExitWithdrawDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentSchoolAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentSchoolAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> entryDate = default;
            Option<EdFiSchoolReference?> schoolReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> entryGradeLevelDescriptor = default;
            Option<string?> id = default;
            Option<EdFiCalendarReference?> calendarReference = default;
            Option<EdFiSchoolYearTypeReference?> classOfSchoolYearTypeReference = default;
            Option<EdFiGraduationPlanReference?> graduationPlanReference = default;
            Option<EdFiSchoolReference?> nextYearSchoolReference = default;
            Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default;
            Option<List<EdFiStudentSchoolAssociationAlternativeGraduationPlan>?> alternativeGraduationPlans = default;
            Option<List<EdFiStudentSchoolAssociationEducationPlan>?> educationPlans = default;
            Option<bool?> employedWhileEnrolled = default;
            Option<string?> enrollmentTypeDescriptor = default;
            Option<string?> entryGradeLevelReasonDescriptor = default;
            Option<string?> entryTypeDescriptor = default;
            Option<DateOnly?> exitWithdrawDate = default;
            Option<string?> exitWithdrawTypeDescriptor = default;
            Option<double?> fullTimeEquivalency = default;
            Option<string?> nextYearGradeLevelDescriptor = default;
            Option<bool?> primarySchool = default;
            Option<bool?> repeatGradeIndicator = default;
            Option<string?> residencyStatusDescriptor = default;
            Option<bool?> schoolChoice = default;
            Option<string?> schoolChoiceBasisDescriptor = default;
            Option<bool?> schoolChoiceTransfer = default;
            Option<bool?> termCompletionIndicator = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "entryDate":
                            entryDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "schoolReference":
                            schoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "entryGradeLevelDescriptor":
                            entryGradeLevelDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "calendarReference":
                            calendarReference = new Option<EdFiCalendarReference?>(JsonSerializer.Deserialize<EdFiCalendarReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "classOfSchoolYearTypeReference":
                            classOfSchoolYearTypeReference = new Option<EdFiSchoolYearTypeReference?>(JsonSerializer.Deserialize<EdFiSchoolYearTypeReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "graduationPlanReference":
                            graduationPlanReference = new Option<EdFiGraduationPlanReference?>(JsonSerializer.Deserialize<EdFiGraduationPlanReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "nextYearSchoolReference":
                            nextYearSchoolReference = new Option<EdFiSchoolReference?>(JsonSerializer.Deserialize<EdFiSchoolReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "schoolYearTypeReference":
                            schoolYearTypeReference = new Option<EdFiSchoolYearTypeReference?>(JsonSerializer.Deserialize<EdFiSchoolYearTypeReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "alternativeGraduationPlans":
                            alternativeGraduationPlans = new Option<List<EdFiStudentSchoolAssociationAlternativeGraduationPlan>?>(JsonSerializer.Deserialize<List<EdFiStudentSchoolAssociationAlternativeGraduationPlan>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "educationPlans":
                            educationPlans = new Option<List<EdFiStudentSchoolAssociationEducationPlan>?>(JsonSerializer.Deserialize<List<EdFiStudentSchoolAssociationEducationPlan>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "employedWhileEnrolled":
                            employedWhileEnrolled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "enrollmentTypeDescriptor":
                            enrollmentTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "entryGradeLevelReasonDescriptor":
                            entryGradeLevelReasonDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "entryTypeDescriptor":
                            entryTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "exitWithdrawDate":
                            exitWithdrawDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "exitWithdrawTypeDescriptor":
                            exitWithdrawTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fullTimeEquivalency":
                            fullTimeEquivalency = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "nextYearGradeLevelDescriptor":
                            nextYearGradeLevelDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "primarySchool":
                            primarySchool = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "repeatGradeIndicator":
                            repeatGradeIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "residencyStatusDescriptor":
                            residencyStatusDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "schoolChoice":
                            schoolChoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "schoolChoiceBasisDescriptor":
                            schoolChoiceBasisDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "schoolChoiceTransfer":
                            schoolChoiceTransfer = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "termCompletionIndicator":
                            termCompletionIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!entryDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSchoolAssociation.", nameof(entryDate));

            if (!schoolReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSchoolAssociation.", nameof(schoolReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSchoolAssociation.", nameof(studentReference));

            if (!entryGradeLevelDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSchoolAssociation.", nameof(entryGradeLevelDescriptor));

            if (entryDate.IsSet && entryDate.Value == null)
                throw new ArgumentNullException(nameof(entryDate), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (schoolReference.IsSet && schoolReference.Value == null)
                throw new ArgumentNullException(nameof(schoolReference), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (entryGradeLevelDescriptor.IsSet && entryGradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(entryGradeLevelDescriptor), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (calendarReference.IsSet && calendarReference.Value == null)
                throw new ArgumentNullException(nameof(calendarReference), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (classOfSchoolYearTypeReference.IsSet && classOfSchoolYearTypeReference.Value == null)
                throw new ArgumentNullException(nameof(classOfSchoolYearTypeReference), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (graduationPlanReference.IsSet && graduationPlanReference.Value == null)
                throw new ArgumentNullException(nameof(graduationPlanReference), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (nextYearSchoolReference.IsSet && nextYearSchoolReference.Value == null)
                throw new ArgumentNullException(nameof(nextYearSchoolReference), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (schoolYearTypeReference.IsSet && schoolYearTypeReference.Value == null)
                throw new ArgumentNullException(nameof(schoolYearTypeReference), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (alternativeGraduationPlans.IsSet && alternativeGraduationPlans.Value == null)
                throw new ArgumentNullException(nameof(alternativeGraduationPlans), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (educationPlans.IsSet && educationPlans.Value == null)
                throw new ArgumentNullException(nameof(educationPlans), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentSchoolAssociation.");

            return new EdFiStudentSchoolAssociation(entryDate.Value!.Value!, schoolReference.Value!, studentReference.Value!, entryGradeLevelDescriptor.Value!, id, calendarReference, classOfSchoolYearTypeReference, graduationPlanReference, nextYearSchoolReference, schoolYearTypeReference, alternativeGraduationPlans, educationPlans, employedWhileEnrolled, enrollmentTypeDescriptor, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawDate, exitWithdrawTypeDescriptor, fullTimeEquivalency, nextYearGradeLevelDescriptor, primarySchool, repeatGradeIndicator, residencyStatusDescriptor, schoolChoice, schoolChoiceBasisDescriptor, schoolChoiceTransfer, termCompletionIndicator, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentSchoolAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentSchoolAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentSchoolAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentSchoolAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentSchoolAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentSchoolAssociation edFiStudentSchoolAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentSchoolAssociation.SchoolReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.SchoolReference), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.StudentReference), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.EntryGradeLevelDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.EntryGradeLevelDescriptor), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.IdOption.IsSet && edFiStudentSchoolAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.Id), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.CalendarReferenceOption.IsSet && edFiStudentSchoolAssociation.CalendarReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.CalendarReference), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.ClassOfSchoolYearTypeReferenceOption.IsSet && edFiStudentSchoolAssociation.ClassOfSchoolYearTypeReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.ClassOfSchoolYearTypeReference), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.GraduationPlanReferenceOption.IsSet && edFiStudentSchoolAssociation.GraduationPlanReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.GraduationPlanReference), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.NextYearSchoolReferenceOption.IsSet && edFiStudentSchoolAssociation.NextYearSchoolReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.NextYearSchoolReference), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.SchoolYearTypeReferenceOption.IsSet && edFiStudentSchoolAssociation.SchoolYearTypeReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.SchoolYearTypeReference), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.AlternativeGraduationPlansOption.IsSet && edFiStudentSchoolAssociation.AlternativeGraduationPlans == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.AlternativeGraduationPlans), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.EducationPlansOption.IsSet && edFiStudentSchoolAssociation.EducationPlans == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.EducationPlans), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.EtagOption.IsSet && edFiStudentSchoolAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.Etag), "Property is required for class EdFiStudentSchoolAssociation.");

            if (edFiStudentSchoolAssociation.ExtOption.IsSet && edFiStudentSchoolAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentSchoolAssociation.Ext), "Property is required for class EdFiStudentSchoolAssociation.");

            writer.WriteString("entryDate", edFiStudentSchoolAssociation.EntryDate.ToString(EntryDateFormat));

            writer.WritePropertyName("schoolReference");
            JsonSerializer.Serialize(writer, edFiStudentSchoolAssociation.SchoolReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentSchoolAssociation.StudentReference, jsonSerializerOptions);
            writer.WriteString("entryGradeLevelDescriptor", edFiStudentSchoolAssociation.EntryGradeLevelDescriptor);

            if (edFiStudentSchoolAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentSchoolAssociation.Id);

            if (edFiStudentSchoolAssociation.CalendarReferenceOption.IsSet)
            {
                writer.WritePropertyName("calendarReference");
                JsonSerializer.Serialize(writer, edFiStudentSchoolAssociation.CalendarReference, jsonSerializerOptions);
            }
            if (edFiStudentSchoolAssociation.ClassOfSchoolYearTypeReferenceOption.IsSet)
            {
                writer.WritePropertyName("classOfSchoolYearTypeReference");
                JsonSerializer.Serialize(writer, edFiStudentSchoolAssociation.ClassOfSchoolYearTypeReference, jsonSerializerOptions);
            }
            if (edFiStudentSchoolAssociation.GraduationPlanReferenceOption.IsSet)
            {
                writer.WritePropertyName("graduationPlanReference");
                JsonSerializer.Serialize(writer, edFiStudentSchoolAssociation.GraduationPlanReference, jsonSerializerOptions);
            }
            if (edFiStudentSchoolAssociation.NextYearSchoolReferenceOption.IsSet)
            {
                writer.WritePropertyName("nextYearSchoolReference");
                JsonSerializer.Serialize(writer, edFiStudentSchoolAssociation.NextYearSchoolReference, jsonSerializerOptions);
            }
            if (edFiStudentSchoolAssociation.SchoolYearTypeReferenceOption.IsSet)
            {
                writer.WritePropertyName("schoolYearTypeReference");
                JsonSerializer.Serialize(writer, edFiStudentSchoolAssociation.SchoolYearTypeReference, jsonSerializerOptions);
            }
            if (edFiStudentSchoolAssociation.AlternativeGraduationPlansOption.IsSet)
            {
                writer.WritePropertyName("alternativeGraduationPlans");
                JsonSerializer.Serialize(writer, edFiStudentSchoolAssociation.AlternativeGraduationPlans, jsonSerializerOptions);
            }
            if (edFiStudentSchoolAssociation.EducationPlansOption.IsSet)
            {
                writer.WritePropertyName("educationPlans");
                JsonSerializer.Serialize(writer, edFiStudentSchoolAssociation.EducationPlans, jsonSerializerOptions);
            }
            if (edFiStudentSchoolAssociation.EmployedWhileEnrolledOption.IsSet)
                if (edFiStudentSchoolAssociation.EmployedWhileEnrolledOption.Value != null)
                    writer.WriteBoolean("employedWhileEnrolled", edFiStudentSchoolAssociation.EmployedWhileEnrolledOption.Value!.Value);
                else
                    writer.WriteNull("employedWhileEnrolled");

            if (edFiStudentSchoolAssociation.EnrollmentTypeDescriptorOption.IsSet)
                if (edFiStudentSchoolAssociation.EnrollmentTypeDescriptorOption.Value != null)
                    writer.WriteString("enrollmentTypeDescriptor", edFiStudentSchoolAssociation.EnrollmentTypeDescriptor);
                else
                    writer.WriteNull("enrollmentTypeDescriptor");

            if (edFiStudentSchoolAssociation.EntryGradeLevelReasonDescriptorOption.IsSet)
                if (edFiStudentSchoolAssociation.EntryGradeLevelReasonDescriptorOption.Value != null)
                    writer.WriteString("entryGradeLevelReasonDescriptor", edFiStudentSchoolAssociation.EntryGradeLevelReasonDescriptor);
                else
                    writer.WriteNull("entryGradeLevelReasonDescriptor");

            if (edFiStudentSchoolAssociation.EntryTypeDescriptorOption.IsSet)
                if (edFiStudentSchoolAssociation.EntryTypeDescriptorOption.Value != null)
                    writer.WriteString("entryTypeDescriptor", edFiStudentSchoolAssociation.EntryTypeDescriptor);
                else
                    writer.WriteNull("entryTypeDescriptor");

            if (edFiStudentSchoolAssociation.ExitWithdrawDateOption.IsSet)
                if (edFiStudentSchoolAssociation.ExitWithdrawDateOption.Value != null)
                    writer.WriteString("exitWithdrawDate", edFiStudentSchoolAssociation.ExitWithdrawDateOption.Value!.Value.ToString(ExitWithdrawDateFormat));
                else
                    writer.WriteNull("exitWithdrawDate");

            if (edFiStudentSchoolAssociation.ExitWithdrawTypeDescriptorOption.IsSet)
                if (edFiStudentSchoolAssociation.ExitWithdrawTypeDescriptorOption.Value != null)
                    writer.WriteString("exitWithdrawTypeDescriptor", edFiStudentSchoolAssociation.ExitWithdrawTypeDescriptor);
                else
                    writer.WriteNull("exitWithdrawTypeDescriptor");

            if (edFiStudentSchoolAssociation.FullTimeEquivalencyOption.IsSet)
                if (edFiStudentSchoolAssociation.FullTimeEquivalencyOption.Value != null)
                    writer.WriteNumber("fullTimeEquivalency", edFiStudentSchoolAssociation.FullTimeEquivalencyOption.Value!.Value);
                else
                    writer.WriteNull("fullTimeEquivalency");

            if (edFiStudentSchoolAssociation.NextYearGradeLevelDescriptorOption.IsSet)
                if (edFiStudentSchoolAssociation.NextYearGradeLevelDescriptorOption.Value != null)
                    writer.WriteString("nextYearGradeLevelDescriptor", edFiStudentSchoolAssociation.NextYearGradeLevelDescriptor);
                else
                    writer.WriteNull("nextYearGradeLevelDescriptor");

            if (edFiStudentSchoolAssociation.PrimarySchoolOption.IsSet)
                if (edFiStudentSchoolAssociation.PrimarySchoolOption.Value != null)
                    writer.WriteBoolean("primarySchool", edFiStudentSchoolAssociation.PrimarySchoolOption.Value!.Value);
                else
                    writer.WriteNull("primarySchool");

            if (edFiStudentSchoolAssociation.RepeatGradeIndicatorOption.IsSet)
                if (edFiStudentSchoolAssociation.RepeatGradeIndicatorOption.Value != null)
                    writer.WriteBoolean("repeatGradeIndicator", edFiStudentSchoolAssociation.RepeatGradeIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("repeatGradeIndicator");

            if (edFiStudentSchoolAssociation.ResidencyStatusDescriptorOption.IsSet)
                if (edFiStudentSchoolAssociation.ResidencyStatusDescriptorOption.Value != null)
                    writer.WriteString("residencyStatusDescriptor", edFiStudentSchoolAssociation.ResidencyStatusDescriptor);
                else
                    writer.WriteNull("residencyStatusDescriptor");

            if (edFiStudentSchoolAssociation.SchoolChoiceOption.IsSet)
                if (edFiStudentSchoolAssociation.SchoolChoiceOption.Value != null)
                    writer.WriteBoolean("schoolChoice", edFiStudentSchoolAssociation.SchoolChoiceOption.Value!.Value);
                else
                    writer.WriteNull("schoolChoice");

            if (edFiStudentSchoolAssociation.SchoolChoiceBasisDescriptorOption.IsSet)
                if (edFiStudentSchoolAssociation.SchoolChoiceBasisDescriptorOption.Value != null)
                    writer.WriteString("schoolChoiceBasisDescriptor", edFiStudentSchoolAssociation.SchoolChoiceBasisDescriptor);
                else
                    writer.WriteNull("schoolChoiceBasisDescriptor");

            if (edFiStudentSchoolAssociation.SchoolChoiceTransferOption.IsSet)
                if (edFiStudentSchoolAssociation.SchoolChoiceTransferOption.Value != null)
                    writer.WriteBoolean("schoolChoiceTransfer", edFiStudentSchoolAssociation.SchoolChoiceTransferOption.Value!.Value);
                else
                    writer.WriteNull("schoolChoiceTransfer");

            if (edFiStudentSchoolAssociation.TermCompletionIndicatorOption.IsSet)
                if (edFiStudentSchoolAssociation.TermCompletionIndicatorOption.Value != null)
                    writer.WriteBoolean("termCompletionIndicator", edFiStudentSchoolAssociation.TermCompletionIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("termCompletionIndicator");

            if (edFiStudentSchoolAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentSchoolAssociation.Etag);

            if (edFiStudentSchoolAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentSchoolAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentSchoolAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentSchoolAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
