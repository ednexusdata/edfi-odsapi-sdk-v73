// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentSectionAssociation
    /// </summary>
    public partial class EdFiStudentSectionAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSectionAssociation" /> class.
        /// </summary>
        /// <param name="beginDate">Month, day, and year of the student&#39;s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="sectionReference">sectionReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="dualCreditEducationOrganizationReference">dualCreditEducationOrganizationReference</param>
        /// <param name="attemptStatusDescriptor">An indication of the student&#39;s completion status for the section.</param>
        /// <param name="dualCreditIndicator">Indicates whether the student assigned to the section is to receive dual credit upon successful completion.</param>
        /// <param name="dualCreditInstitutionDescriptor">Descriptor for the postsecondary institution offering college credit. This descriptor may be used to select a postsecondary institution that is not defined as an education organization, and/or select a general type of postsecondary institution.</param>
        /// <param name="dualCreditTypeDescriptor">For a student taking a dual credit course in a college or high school setting, indicates the type of dual credit program.</param>
        /// <param name="dualHighSchoolCreditIndicator">Indicates whether successful completion of the course will result in credits toward high school graduation.</param>
        /// <param name="endDate">Month, day, and year of the withdrawal or exit of the student from the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="homeroomIndicator">Indicates the section is the student&#39;s homeroom. Homeroom period may the convention for taking daily attendance.</param>
        /// <param name="programs">An unordered collection of studentSectionAssociationPrograms. The program(s) that the student is participating in the context of the course.</param>
        /// <param name="repeatIdentifierDescriptor">An indication as to whether a student has previously taken a given course.</param>
        /// <param name="teacherStudentDataLinkExclusion">Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentSectionAssociation entity.</param>
        [JsonConstructor]
        public EdFiStudentSectionAssociation(DateOnly beginDate, EdFiSectionReference sectionReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<EdFiEducationOrganizationReference?> dualCreditEducationOrganizationReference = default, Option<string?> attemptStatusDescriptor = default, Option<bool?> dualCreditIndicator = default, Option<string?> dualCreditInstitutionDescriptor = default, Option<string?> dualCreditTypeDescriptor = default, Option<bool?> dualHighSchoolCreditIndicator = default, Option<DateOnly?> endDate = default, Option<bool?> homeroomIndicator = default, Option<List<EdFiStudentSectionAssociationProgram>?> programs = default, Option<string?> repeatIdentifierDescriptor = default, Option<bool?> teacherStudentDataLinkExclusion = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            BeginDate = beginDate;
            SectionReference = sectionReference;
            StudentReference = studentReference;
            IdOption = id;
            DualCreditEducationOrganizationReferenceOption = dualCreditEducationOrganizationReference;
            AttemptStatusDescriptorOption = attemptStatusDescriptor;
            DualCreditIndicatorOption = dualCreditIndicator;
            DualCreditInstitutionDescriptorOption = dualCreditInstitutionDescriptor;
            DualCreditTypeDescriptorOption = dualCreditTypeDescriptor;
            DualHighSchoolCreditIndicatorOption = dualHighSchoolCreditIndicator;
            EndDateOption = endDate;
            HomeroomIndicatorOption = homeroomIndicator;
            ProgramsOption = programs;
            RepeatIdentifierDescriptorOption = repeatIdentifierDescriptor;
            TeacherStudentDataLinkExclusionOption = teacherStudentDataLinkExclusion;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Month, day, and year of the student&#39;s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Month, day, and year of the student&#39;s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets SectionReference
        /// </summary>
        [JsonPropertyName("sectionReference")]
        public EdFiSectionReference SectionReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DualCreditEducationOrganizationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiEducationOrganizationReference?> DualCreditEducationOrganizationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets DualCreditEducationOrganizationReference
        /// </summary>
        [JsonPropertyName("dualCreditEducationOrganizationReference")]
        public EdFiEducationOrganizationReference? DualCreditEducationOrganizationReference { get { return this.DualCreditEducationOrganizationReferenceOption; } set { this.DualCreditEducationOrganizationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttemptStatusDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AttemptStatusDescriptorOption { get; private set; }

        /// <summary>
        /// An indication of the student&#39;s completion status for the section.
        /// </summary>
        /// <value>An indication of the student&#39;s completion status for the section.</value>
        [JsonPropertyName("attemptStatusDescriptor")]
        public string? AttemptStatusDescriptor { get { return this.AttemptStatusDescriptorOption; } set { this.AttemptStatusDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DualCreditIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DualCreditIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates whether the student assigned to the section is to receive dual credit upon successful completion.
        /// </summary>
        /// <value>Indicates whether the student assigned to the section is to receive dual credit upon successful completion.</value>
        [JsonPropertyName("dualCreditIndicator")]
        public bool? DualCreditIndicator { get { return this.DualCreditIndicatorOption; } set { this.DualCreditIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DualCreditInstitutionDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DualCreditInstitutionDescriptorOption { get; private set; }

        /// <summary>
        /// Descriptor for the postsecondary institution offering college credit. This descriptor may be used to select a postsecondary institution that is not defined as an education organization, and/or select a general type of postsecondary institution.
        /// </summary>
        /// <value>Descriptor for the postsecondary institution offering college credit. This descriptor may be used to select a postsecondary institution that is not defined as an education organization, and/or select a general type of postsecondary institution.</value>
        [JsonPropertyName("dualCreditInstitutionDescriptor")]
        public string? DualCreditInstitutionDescriptor { get { return this.DualCreditInstitutionDescriptorOption; } set { this.DualCreditInstitutionDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DualCreditTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DualCreditTypeDescriptorOption { get; private set; }

        /// <summary>
        /// For a student taking a dual credit course in a college or high school setting, indicates the type of dual credit program.
        /// </summary>
        /// <value>For a student taking a dual credit course in a college or high school setting, indicates the type of dual credit program.</value>
        [JsonPropertyName("dualCreditTypeDescriptor")]
        public string? DualCreditTypeDescriptor { get { return this.DualCreditTypeDescriptorOption; } set { this.DualCreditTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of DualHighSchoolCreditIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DualHighSchoolCreditIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates whether successful completion of the course will result in credits toward high school graduation.
        /// </summary>
        /// <value>Indicates whether successful completion of the course will result in credits toward high school graduation.</value>
        [JsonPropertyName("dualHighSchoolCreditIndicator")]
        public bool? DualHighSchoolCreditIndicator { get { return this.DualHighSchoolCreditIndicatorOption; } set { this.DualHighSchoolCreditIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// Month, day, and year of the withdrawal or exit of the student from the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Month, day, and year of the withdrawal or exit of the student from the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of HomeroomIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HomeroomIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates the section is the student&#39;s homeroom. Homeroom period may the convention for taking daily attendance.
        /// </summary>
        /// <value>Indicates the section is the student&#39;s homeroom. Homeroom period may the convention for taking daily attendance.</value>
        [JsonPropertyName("homeroomIndicator")]
        public bool? HomeroomIndicator { get { return this.HomeroomIndicatorOption; } set { this.HomeroomIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Programs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentSectionAssociationProgram>?> ProgramsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentSectionAssociationPrograms. The program(s) that the student is participating in the context of the course.
        /// </summary>
        /// <value>An unordered collection of studentSectionAssociationPrograms. The program(s) that the student is participating in the context of the course.</value>
        [JsonPropertyName("programs")]
        public List<EdFiStudentSectionAssociationProgram>? Programs { get { return this.ProgramsOption; } set { this.ProgramsOption = new(value); } }

        /// <summary>
        /// Used to track the state of RepeatIdentifierDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RepeatIdentifierDescriptorOption { get; private set; }

        /// <summary>
        /// An indication as to whether a student has previously taken a given course.
        /// </summary>
        /// <value>An indication as to whether a student has previously taken a given course.</value>
        [JsonPropertyName("repeatIdentifierDescriptor")]
        public string? RepeatIdentifierDescriptor { get { return this.RepeatIdentifierDescriptorOption; } set { this.RepeatIdentifierDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of TeacherStudentDataLinkExclusion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TeacherStudentDataLinkExclusionOption { get; private set; }

        /// <summary>
        /// Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.
        /// </summary>
        /// <value>Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.</value>
        [JsonPropertyName("teacherStudentDataLinkExclusion")]
        public bool? TeacherStudentDataLinkExclusion { get { return this.TeacherStudentDataLinkExclusionOption; } set { this.TeacherStudentDataLinkExclusionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentSectionAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentSectionAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentSectionAssociation {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  SectionReference: ").Append(SectionReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DualCreditEducationOrganizationReference: ").Append(DualCreditEducationOrganizationReference).Append("\n");
            sb.Append("  AttemptStatusDescriptor: ").Append(AttemptStatusDescriptor).Append("\n");
            sb.Append("  DualCreditIndicator: ").Append(DualCreditIndicator).Append("\n");
            sb.Append("  DualCreditInstitutionDescriptor: ").Append(DualCreditInstitutionDescriptor).Append("\n");
            sb.Append("  DualCreditTypeDescriptor: ").Append(DualCreditTypeDescriptor).Append("\n");
            sb.Append("  DualHighSchoolCreditIndicator: ").Append(DualHighSchoolCreditIndicator).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  HomeroomIndicator: ").Append(HomeroomIndicator).Append("\n");
            sb.Append("  Programs: ").Append(Programs).Append("\n");
            sb.Append("  RepeatIdentifierDescriptor: ").Append(RepeatIdentifierDescriptor).Append("\n");
            sb.Append("  TeacherStudentDataLinkExclusion: ").Append(TeacherStudentDataLinkExclusion).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AttemptStatusDescriptor (string) maxLength
            if (this.AttemptStatusDescriptor != null && this.AttemptStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AttemptStatusDescriptor, length must be less than 306.", new [] { "AttemptStatusDescriptor" });
            }

            // DualCreditInstitutionDescriptor (string) maxLength
            if (this.DualCreditInstitutionDescriptor != null && this.DualCreditInstitutionDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DualCreditInstitutionDescriptor, length must be less than 306.", new [] { "DualCreditInstitutionDescriptor" });
            }

            // DualCreditTypeDescriptor (string) maxLength
            if (this.DualCreditTypeDescriptor != null && this.DualCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for DualCreditTypeDescriptor, length must be less than 306.", new [] { "DualCreditTypeDescriptor" });
            }

            // RepeatIdentifierDescriptor (string) maxLength
            if (this.RepeatIdentifierDescriptor != null && this.RepeatIdentifierDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for RepeatIdentifierDescriptor, length must be less than 306.", new [] { "RepeatIdentifierDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentSectionAssociation" />
    /// </summary>
    public class EdFiStudentSectionAssociationJsonConverter : JsonConverter<EdFiStudentSectionAssociation>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentSectionAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentSectionAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> beginDate = default;
            Option<EdFiSectionReference?> sectionReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<EdFiEducationOrganizationReference?> dualCreditEducationOrganizationReference = default;
            Option<string?> attemptStatusDescriptor = default;
            Option<bool?> dualCreditIndicator = default;
            Option<string?> dualCreditInstitutionDescriptor = default;
            Option<string?> dualCreditTypeDescriptor = default;
            Option<bool?> dualHighSchoolCreditIndicator = default;
            Option<DateOnly?> endDate = default;
            Option<bool?> homeroomIndicator = default;
            Option<List<EdFiStudentSectionAssociationProgram>?> programs = default;
            Option<string?> repeatIdentifierDescriptor = default;
            Option<bool?> teacherStudentDataLinkExclusion = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sectionReference":
                            sectionReference = new Option<EdFiSectionReference?>(JsonSerializer.Deserialize<EdFiSectionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dualCreditEducationOrganizationReference":
                            dualCreditEducationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "attemptStatusDescriptor":
                            attemptStatusDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dualCreditIndicator":
                            dualCreditIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "dualCreditInstitutionDescriptor":
                            dualCreditInstitutionDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dualCreditTypeDescriptor":
                            dualCreditTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dualHighSchoolCreditIndicator":
                            dualHighSchoolCreditIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "homeroomIndicator":
                            homeroomIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "programs":
                            programs = new Option<List<EdFiStudentSectionAssociationProgram>?>(JsonSerializer.Deserialize<List<EdFiStudentSectionAssociationProgram>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "repeatIdentifierDescriptor":
                            repeatIdentifierDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "teacherStudentDataLinkExclusion":
                            teacherStudentDataLinkExclusion = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSectionAssociation.", nameof(beginDate));

            if (!sectionReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSectionAssociation.", nameof(sectionReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSectionAssociation.", nameof(studentReference));

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiStudentSectionAssociation.");

            if (sectionReference.IsSet && sectionReference.Value == null)
                throw new ArgumentNullException(nameof(sectionReference), "Property is not nullable for class EdFiStudentSectionAssociation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentSectionAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentSectionAssociation.");

            if (dualCreditEducationOrganizationReference.IsSet && dualCreditEducationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(dualCreditEducationOrganizationReference), "Property is not nullable for class EdFiStudentSectionAssociation.");

            if (programs.IsSet && programs.Value == null)
                throw new ArgumentNullException(nameof(programs), "Property is not nullable for class EdFiStudentSectionAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentSectionAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentSectionAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentSectionAssociation.");

            return new EdFiStudentSectionAssociation(beginDate.Value!.Value!, sectionReference.Value!, studentReference.Value!, id, dualCreditEducationOrganizationReference, attemptStatusDescriptor, dualCreditIndicator, dualCreditInstitutionDescriptor, dualCreditTypeDescriptor, dualHighSchoolCreditIndicator, endDate, homeroomIndicator, programs, repeatIdentifierDescriptor, teacherStudentDataLinkExclusion, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentSectionAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentSectionAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentSectionAssociation edFiStudentSectionAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentSectionAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentSectionAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentSectionAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentSectionAssociation edFiStudentSectionAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentSectionAssociation.SectionReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSectionAssociation.SectionReference), "Property is required for class EdFiStudentSectionAssociation.");

            if (edFiStudentSectionAssociation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSectionAssociation.StudentReference), "Property is required for class EdFiStudentSectionAssociation.");

            if (edFiStudentSectionAssociation.IdOption.IsSet && edFiStudentSectionAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentSectionAssociation.Id), "Property is required for class EdFiStudentSectionAssociation.");

            if (edFiStudentSectionAssociation.DualCreditEducationOrganizationReferenceOption.IsSet && edFiStudentSectionAssociation.DualCreditEducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSectionAssociation.DualCreditEducationOrganizationReference), "Property is required for class EdFiStudentSectionAssociation.");

            if (edFiStudentSectionAssociation.ProgramsOption.IsSet && edFiStudentSectionAssociation.Programs == null)
                throw new ArgumentNullException(nameof(edFiStudentSectionAssociation.Programs), "Property is required for class EdFiStudentSectionAssociation.");

            if (edFiStudentSectionAssociation.EtagOption.IsSet && edFiStudentSectionAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentSectionAssociation.Etag), "Property is required for class EdFiStudentSectionAssociation.");

            if (edFiStudentSectionAssociation.ExtOption.IsSet && edFiStudentSectionAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentSectionAssociation.Ext), "Property is required for class EdFiStudentSectionAssociation.");

            writer.WriteString("beginDate", edFiStudentSectionAssociation.BeginDate.ToString(BeginDateFormat));

            writer.WritePropertyName("sectionReference");
            JsonSerializer.Serialize(writer, edFiStudentSectionAssociation.SectionReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentSectionAssociation.StudentReference, jsonSerializerOptions);
            if (edFiStudentSectionAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentSectionAssociation.Id);

            if (edFiStudentSectionAssociation.DualCreditEducationOrganizationReferenceOption.IsSet)
            {
                writer.WritePropertyName("dualCreditEducationOrganizationReference");
                JsonSerializer.Serialize(writer, edFiStudentSectionAssociation.DualCreditEducationOrganizationReference, jsonSerializerOptions);
            }
            if (edFiStudentSectionAssociation.AttemptStatusDescriptorOption.IsSet)
                if (edFiStudentSectionAssociation.AttemptStatusDescriptorOption.Value != null)
                    writer.WriteString("attemptStatusDescriptor", edFiStudentSectionAssociation.AttemptStatusDescriptor);
                else
                    writer.WriteNull("attemptStatusDescriptor");

            if (edFiStudentSectionAssociation.DualCreditIndicatorOption.IsSet)
                if (edFiStudentSectionAssociation.DualCreditIndicatorOption.Value != null)
                    writer.WriteBoolean("dualCreditIndicator", edFiStudentSectionAssociation.DualCreditIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("dualCreditIndicator");

            if (edFiStudentSectionAssociation.DualCreditInstitutionDescriptorOption.IsSet)
                if (edFiStudentSectionAssociation.DualCreditInstitutionDescriptorOption.Value != null)
                    writer.WriteString("dualCreditInstitutionDescriptor", edFiStudentSectionAssociation.DualCreditInstitutionDescriptor);
                else
                    writer.WriteNull("dualCreditInstitutionDescriptor");

            if (edFiStudentSectionAssociation.DualCreditTypeDescriptorOption.IsSet)
                if (edFiStudentSectionAssociation.DualCreditTypeDescriptorOption.Value != null)
                    writer.WriteString("dualCreditTypeDescriptor", edFiStudentSectionAssociation.DualCreditTypeDescriptor);
                else
                    writer.WriteNull("dualCreditTypeDescriptor");

            if (edFiStudentSectionAssociation.DualHighSchoolCreditIndicatorOption.IsSet)
                if (edFiStudentSectionAssociation.DualHighSchoolCreditIndicatorOption.Value != null)
                    writer.WriteBoolean("dualHighSchoolCreditIndicator", edFiStudentSectionAssociation.DualHighSchoolCreditIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("dualHighSchoolCreditIndicator");

            if (edFiStudentSectionAssociation.EndDateOption.IsSet)
                if (edFiStudentSectionAssociation.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiStudentSectionAssociation.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiStudentSectionAssociation.HomeroomIndicatorOption.IsSet)
                if (edFiStudentSectionAssociation.HomeroomIndicatorOption.Value != null)
                    writer.WriteBoolean("homeroomIndicator", edFiStudentSectionAssociation.HomeroomIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("homeroomIndicator");

            if (edFiStudentSectionAssociation.ProgramsOption.IsSet)
            {
                writer.WritePropertyName("programs");
                JsonSerializer.Serialize(writer, edFiStudentSectionAssociation.Programs, jsonSerializerOptions);
            }
            if (edFiStudentSectionAssociation.RepeatIdentifierDescriptorOption.IsSet)
                if (edFiStudentSectionAssociation.RepeatIdentifierDescriptorOption.Value != null)
                    writer.WriteString("repeatIdentifierDescriptor", edFiStudentSectionAssociation.RepeatIdentifierDescriptor);
                else
                    writer.WriteNull("repeatIdentifierDescriptor");

            if (edFiStudentSectionAssociation.TeacherStudentDataLinkExclusionOption.IsSet)
                if (edFiStudentSectionAssociation.TeacherStudentDataLinkExclusionOption.Value != null)
                    writer.WriteBoolean("teacherStudentDataLinkExclusion", edFiStudentSectionAssociation.TeacherStudentDataLinkExclusionOption.Value!.Value);
                else
                    writer.WriteNull("teacherStudentDataLinkExclusion");

            if (edFiStudentSectionAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentSectionAssociation.Etag);

            if (edFiStudentSectionAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentSectionAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentSectionAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentSectionAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
