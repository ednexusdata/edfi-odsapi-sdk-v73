// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentSpecialEducationProgramAssociation
    /// </summary>
    public partial class EdFiStudentSpecialEducationProgramAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSpecialEducationProgramAssociation" /> class.
        /// </summary>
        /// <param name="beginDate">The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="programReference">programReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="disabilities">An unordered collection of studentSpecialEducationProgramAssociationDisabilities. The disability condition(s) that best describes an individual&#39;s impairment, as related to special education services received.</param>
        /// <param name="endDate">The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="ideaEligibility">Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).</param>
        /// <param name="iepBeginDate">The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="iepEndDate">The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="iepReviewDate">The date of the last IEP review.</param>
        /// <param name="lastEvaluationDate">The date of the last special education evaluation.</param>
        /// <param name="medicallyFragile">Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements.</param>
        /// <param name="multiplyDisabled">Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.</param>
        /// <param name="programParticipationStatuses">An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.</param>
        /// <param name="reasonExitedDescriptor">The reason the student left the program within a school or district.</param>
        /// <param name="reductionInHoursPerWeekComparedToPeers">Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education.</param>
        /// <param name="schoolHoursPerWeek">Indicate the total number of hours of instructional time per week for the school that the student attends.</param>
        /// <param name="servedOutsideOfRegularSession">Indicates whether the student received services during the summer session or between sessions.</param>
        /// <param name="serviceProviders">An unordered collection of studentSpecialEducationProgramAssociationServiceProviders. The staff providing special education services to the student.</param>
        /// <param name="shortenedSchoolDayIndicator">Indicator that the student&#39;s IEP requires a shortened school day.</param>
        /// <param name="specialEducationExitDate">The  month, day and year on which a person stops receiving special education services.</param>
        /// <param name="specialEducationExitExplained">Explanation on why a person stops receiving special education services.</param>
        /// <param name="specialEducationExitReasonDescriptor">The reason why a person stops receiving special education services.</param>
        /// <param name="specialEducationHoursPerWeek">The number of hours per week for special education instruction and therapy.</param>
        /// <param name="specialEducationProgramServices">An unordered collection of studentSpecialEducationProgramAssociationSpecialEducationProgramServices. Indicates the service(s) being provided to the student by the special education program.</param>
        /// <param name="specialEducationSettingDescriptor">The major instructional setting (more than 50 percent of a student&#39;s special education program).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentSpecialEducationProgramAssociation entity.</param>
        [JsonConstructor]
        public EdFiStudentSpecialEducationProgramAssociation(DateOnly beginDate, EdFiEducationOrganizationReference educationOrganizationReference, EdFiProgramReference programReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<List<EdFiStudentSpecialEducationProgramAssociationDisability>?> disabilities = default, Option<DateOnly?> endDate = default, Option<bool?> ideaEligibility = default, Option<DateOnly?> iepBeginDate = default, Option<DateOnly?> iepEndDate = default, Option<DateOnly?> iepReviewDate = default, Option<DateOnly?> lastEvaluationDate = default, Option<bool?> medicallyFragile = default, Option<bool?> multiplyDisabled = default, Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> programParticipationStatuses = default, Option<string?> reasonExitedDescriptor = default, Option<double?> reductionInHoursPerWeekComparedToPeers = default, Option<double?> schoolHoursPerWeek = default, Option<bool?> servedOutsideOfRegularSession = default, Option<List<EdFiStudentSpecialEducationProgramAssociationServiceProvider>?> serviceProviders = default, Option<bool?> shortenedSchoolDayIndicator = default, Option<DateOnly?> specialEducationExitDate = default, Option<string?> specialEducationExitExplained = default, Option<string?> specialEducationExitReasonDescriptor = default, Option<double?> specialEducationHoursPerWeek = default, Option<List<EdFiStudentSpecialEducationProgramAssociationSpecialEducationProgramService>?> specialEducationProgramServices = default, Option<string?> specialEducationSettingDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            BeginDate = beginDate;
            EducationOrganizationReference = educationOrganizationReference;
            ProgramReference = programReference;
            StudentReference = studentReference;
            IdOption = id;
            DisabilitiesOption = disabilities;
            EndDateOption = endDate;
            IdeaEligibilityOption = ideaEligibility;
            IepBeginDateOption = iepBeginDate;
            IepEndDateOption = iepEndDate;
            IepReviewDateOption = iepReviewDate;
            LastEvaluationDateOption = lastEvaluationDate;
            MedicallyFragileOption = medicallyFragile;
            MultiplyDisabledOption = multiplyDisabled;
            ProgramParticipationStatusesOption = programParticipationStatuses;
            ReasonExitedDescriptorOption = reasonExitedDescriptor;
            ReductionInHoursPerWeekComparedToPeersOption = reductionInHoursPerWeekComparedToPeers;
            SchoolHoursPerWeekOption = schoolHoursPerWeek;
            ServedOutsideOfRegularSessionOption = servedOutsideOfRegularSession;
            ServiceProvidersOption = serviceProviders;
            ShortenedSchoolDayIndicatorOption = shortenedSchoolDayIndicator;
            SpecialEducationExitDateOption = specialEducationExitDate;
            SpecialEducationExitExplainedOption = specialEducationExitExplained;
            SpecialEducationExitReasonDescriptorOption = specialEducationExitReasonDescriptor;
            SpecialEducationHoursPerWeekOption = specialEducationHoursPerWeek;
            SpecialEducationProgramServicesOption = specialEducationProgramServices;
            SpecialEducationSettingDescriptorOption = specialEducationSettingDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets ProgramReference
        /// </summary>
        [JsonPropertyName("programReference")]
        public EdFiProgramReference ProgramReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Disabilities
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentSpecialEducationProgramAssociationDisability>?> DisabilitiesOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentSpecialEducationProgramAssociationDisabilities. The disability condition(s) that best describes an individual&#39;s impairment, as related to special education services received.
        /// </summary>
        /// <value>An unordered collection of studentSpecialEducationProgramAssociationDisabilities. The disability condition(s) that best describes an individual&#39;s impairment, as related to special education services received.</value>
        [JsonPropertyName("disabilities")]
        public List<EdFiStudentSpecialEducationProgramAssociationDisability>? Disabilities { get { return this.DisabilitiesOption; } set { this.DisabilitiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdeaEligibility
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IdeaEligibilityOption { get; private set; }

        /// <summary>
        /// Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).
        /// </summary>
        /// <value>Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).</value>
        [JsonPropertyName("ideaEligibility")]
        public bool? IdeaEligibility { get { return this.IdeaEligibilityOption; } set { this.IdeaEligibilityOption = new(value); } }

        /// <summary>
        /// Used to track the state of IepBeginDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> IepBeginDateOption { get; private set; }

        /// <summary>
        /// The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("iepBeginDate")]
        public DateOnly? IepBeginDate { get { return this.IepBeginDateOption; } set { this.IepBeginDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of IepEndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> IepEndDateOption { get; private set; }

        /// <summary>
        /// The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("iepEndDate")]
        public DateOnly? IepEndDate { get { return this.IepEndDateOption; } set { this.IepEndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of IepReviewDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> IepReviewDateOption { get; private set; }

        /// <summary>
        /// The date of the last IEP review.
        /// </summary>
        /// <value>The date of the last IEP review.</value>
        [JsonPropertyName("iepReviewDate")]
        public DateOnly? IepReviewDate { get { return this.IepReviewDateOption; } set { this.IepReviewDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastEvaluationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> LastEvaluationDateOption { get; private set; }

        /// <summary>
        /// The date of the last special education evaluation.
        /// </summary>
        /// <value>The date of the last special education evaluation.</value>
        [JsonPropertyName("lastEvaluationDate")]
        public DateOnly? LastEvaluationDate { get { return this.LastEvaluationDateOption; } set { this.LastEvaluationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of MedicallyFragile
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MedicallyFragileOption { get; private set; }

        /// <summary>
        /// Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements.
        /// </summary>
        /// <value>Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements.</value>
        [JsonPropertyName("medicallyFragile")]
        public bool? MedicallyFragile { get { return this.MedicallyFragileOption; } set { this.MedicallyFragileOption = new(value); } }

        /// <summary>
        /// Used to track the state of MultiplyDisabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MultiplyDisabledOption { get; private set; }

        /// <summary>
        /// Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.
        /// </summary>
        /// <value>Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.</value>
        [JsonPropertyName("multiplyDisabled")]
        public bool? MultiplyDisabled { get { return this.MultiplyDisabledOption; } set { this.MultiplyDisabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramParticipationStatuses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> ProgramParticipationStatusesOption { get; private set; }

        /// <summary>
        /// An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.
        /// </summary>
        /// <value>An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student&#39;s program participation.</value>
        [JsonPropertyName("programParticipationStatuses")]
        public List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>? ProgramParticipationStatuses { get { return this.ProgramParticipationStatusesOption; } set { this.ProgramParticipationStatusesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReasonExitedDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonExitedDescriptorOption { get; private set; }

        /// <summary>
        /// The reason the student left the program within a school or district.
        /// </summary>
        /// <value>The reason the student left the program within a school or district.</value>
        [JsonPropertyName("reasonExitedDescriptor")]
        public string? ReasonExitedDescriptor { get { return this.ReasonExitedDescriptorOption; } set { this.ReasonExitedDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReductionInHoursPerWeekComparedToPeers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ReductionInHoursPerWeekComparedToPeersOption { get; private set; }

        /// <summary>
        /// Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education.
        /// </summary>
        /// <value>Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education.</value>
        [JsonPropertyName("reductionInHoursPerWeekComparedToPeers")]
        public double? ReductionInHoursPerWeekComparedToPeers { get { return this.ReductionInHoursPerWeekComparedToPeersOption; } set { this.ReductionInHoursPerWeekComparedToPeersOption = new(value); } }

        /// <summary>
        /// Used to track the state of SchoolHoursPerWeek
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SchoolHoursPerWeekOption { get; private set; }

        /// <summary>
        /// Indicate the total number of hours of instructional time per week for the school that the student attends.
        /// </summary>
        /// <value>Indicate the total number of hours of instructional time per week for the school that the student attends.</value>
        [JsonPropertyName("schoolHoursPerWeek")]
        public double? SchoolHoursPerWeek { get { return this.SchoolHoursPerWeekOption; } set { this.SchoolHoursPerWeekOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServedOutsideOfRegularSession
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ServedOutsideOfRegularSessionOption { get; private set; }

        /// <summary>
        /// Indicates whether the student received services during the summer session or between sessions.
        /// </summary>
        /// <value>Indicates whether the student received services during the summer session or between sessions.</value>
        [JsonPropertyName("servedOutsideOfRegularSession")]
        public bool? ServedOutsideOfRegularSession { get { return this.ServedOutsideOfRegularSessionOption; } set { this.ServedOutsideOfRegularSessionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServiceProviders
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentSpecialEducationProgramAssociationServiceProvider>?> ServiceProvidersOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentSpecialEducationProgramAssociationServiceProviders. The staff providing special education services to the student.
        /// </summary>
        /// <value>An unordered collection of studentSpecialEducationProgramAssociationServiceProviders. The staff providing special education services to the student.</value>
        [JsonPropertyName("serviceProviders")]
        public List<EdFiStudentSpecialEducationProgramAssociationServiceProvider>? ServiceProviders { get { return this.ServiceProvidersOption; } set { this.ServiceProvidersOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShortenedSchoolDayIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShortenedSchoolDayIndicatorOption { get; private set; }

        /// <summary>
        /// Indicator that the student&#39;s IEP requires a shortened school day.
        /// </summary>
        /// <value>Indicator that the student&#39;s IEP requires a shortened school day.</value>
        [JsonPropertyName("shortenedSchoolDayIndicator")]
        public bool? ShortenedSchoolDayIndicator { get { return this.ShortenedSchoolDayIndicatorOption; } set { this.ShortenedSchoolDayIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpecialEducationExitDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> SpecialEducationExitDateOption { get; private set; }

        /// <summary>
        /// The  month, day and year on which a person stops receiving special education services.
        /// </summary>
        /// <value>The  month, day and year on which a person stops receiving special education services.</value>
        [JsonPropertyName("specialEducationExitDate")]
        public DateOnly? SpecialEducationExitDate { get { return this.SpecialEducationExitDateOption; } set { this.SpecialEducationExitDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpecialEducationExitExplained
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SpecialEducationExitExplainedOption { get; private set; }

        /// <summary>
        /// Explanation on why a person stops receiving special education services.
        /// </summary>
        /// <value>Explanation on why a person stops receiving special education services.</value>
        [JsonPropertyName("specialEducationExitExplained")]
        public string? SpecialEducationExitExplained { get { return this.SpecialEducationExitExplainedOption; } set { this.SpecialEducationExitExplainedOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpecialEducationExitReasonDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SpecialEducationExitReasonDescriptorOption { get; private set; }

        /// <summary>
        /// The reason why a person stops receiving special education services.
        /// </summary>
        /// <value>The reason why a person stops receiving special education services.</value>
        [JsonPropertyName("specialEducationExitReasonDescriptor")]
        public string? SpecialEducationExitReasonDescriptor { get { return this.SpecialEducationExitReasonDescriptorOption; } set { this.SpecialEducationExitReasonDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpecialEducationHoursPerWeek
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SpecialEducationHoursPerWeekOption { get; private set; }

        /// <summary>
        /// The number of hours per week for special education instruction and therapy.
        /// </summary>
        /// <value>The number of hours per week for special education instruction and therapy.</value>
        [JsonPropertyName("specialEducationHoursPerWeek")]
        public double? SpecialEducationHoursPerWeek { get { return this.SpecialEducationHoursPerWeekOption; } set { this.SpecialEducationHoursPerWeekOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpecialEducationProgramServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentSpecialEducationProgramAssociationSpecialEducationProgramService>?> SpecialEducationProgramServicesOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentSpecialEducationProgramAssociationSpecialEducationProgramServices. Indicates the service(s) being provided to the student by the special education program.
        /// </summary>
        /// <value>An unordered collection of studentSpecialEducationProgramAssociationSpecialEducationProgramServices. Indicates the service(s) being provided to the student by the special education program.</value>
        [JsonPropertyName("specialEducationProgramServices")]
        public List<EdFiStudentSpecialEducationProgramAssociationSpecialEducationProgramService>? SpecialEducationProgramServices { get { return this.SpecialEducationProgramServicesOption; } set { this.SpecialEducationProgramServicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpecialEducationSettingDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SpecialEducationSettingDescriptorOption { get; private set; }

        /// <summary>
        /// The major instructional setting (more than 50 percent of a student&#39;s special education program).
        /// </summary>
        /// <value>The major instructional setting (more than 50 percent of a student&#39;s special education program).</value>
        [JsonPropertyName("specialEducationSettingDescriptor")]
        public string? SpecialEducationSettingDescriptor { get { return this.SpecialEducationSettingDescriptorOption; } set { this.SpecialEducationSettingDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentSpecialEducationProgramAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentSpecialEducationProgramAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentSpecialEducationProgramAssociation {\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  ProgramReference: ").Append(ProgramReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Disabilities: ").Append(Disabilities).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  IdeaEligibility: ").Append(IdeaEligibility).Append("\n");
            sb.Append("  IepBeginDate: ").Append(IepBeginDate).Append("\n");
            sb.Append("  IepEndDate: ").Append(IepEndDate).Append("\n");
            sb.Append("  IepReviewDate: ").Append(IepReviewDate).Append("\n");
            sb.Append("  LastEvaluationDate: ").Append(LastEvaluationDate).Append("\n");
            sb.Append("  MedicallyFragile: ").Append(MedicallyFragile).Append("\n");
            sb.Append("  MultiplyDisabled: ").Append(MultiplyDisabled).Append("\n");
            sb.Append("  ProgramParticipationStatuses: ").Append(ProgramParticipationStatuses).Append("\n");
            sb.Append("  ReasonExitedDescriptor: ").Append(ReasonExitedDescriptor).Append("\n");
            sb.Append("  ReductionInHoursPerWeekComparedToPeers: ").Append(ReductionInHoursPerWeekComparedToPeers).Append("\n");
            sb.Append("  SchoolHoursPerWeek: ").Append(SchoolHoursPerWeek).Append("\n");
            sb.Append("  ServedOutsideOfRegularSession: ").Append(ServedOutsideOfRegularSession).Append("\n");
            sb.Append("  ServiceProviders: ").Append(ServiceProviders).Append("\n");
            sb.Append("  ShortenedSchoolDayIndicator: ").Append(ShortenedSchoolDayIndicator).Append("\n");
            sb.Append("  SpecialEducationExitDate: ").Append(SpecialEducationExitDate).Append("\n");
            sb.Append("  SpecialEducationExitExplained: ").Append(SpecialEducationExitExplained).Append("\n");
            sb.Append("  SpecialEducationExitReasonDescriptor: ").Append(SpecialEducationExitReasonDescriptor).Append("\n");
            sb.Append("  SpecialEducationHoursPerWeek: ").Append(SpecialEducationHoursPerWeek).Append("\n");
            sb.Append("  SpecialEducationProgramServices: ").Append(SpecialEducationProgramServices).Append("\n");
            sb.Append("  SpecialEducationSettingDescriptor: ").Append(SpecialEducationSettingDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReasonExitedDescriptor (string) maxLength
            if (this.ReasonExitedDescriptor != null && this.ReasonExitedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ReasonExitedDescriptor, length must be less than 306.", new [] { "ReasonExitedDescriptor" });
            }

            // ReductionInHoursPerWeekComparedToPeers (double) maximum
            if (this.ReductionInHoursPerWeekComparedToPeersOption.IsSet && this.ReductionInHoursPerWeekComparedToPeersOption.Value > (double)999.99)
            {
                yield return new ValidationResult("Invalid value for ReductionInHoursPerWeekComparedToPeers, must be a value less than or equal to 999.99.", new [] { "ReductionInHoursPerWeekComparedToPeers" });
            }

            // ReductionInHoursPerWeekComparedToPeers (double) minimum
            if (this.ReductionInHoursPerWeekComparedToPeersOption.IsSet && this.ReductionInHoursPerWeekComparedToPeersOption.Value < (double)-999.99)
            {
                yield return new ValidationResult("Invalid value for ReductionInHoursPerWeekComparedToPeers, must be a value greater than or equal to -999.99.", new [] { "ReductionInHoursPerWeekComparedToPeers" });
            }

            // SchoolHoursPerWeek (double) maximum
            if (this.SchoolHoursPerWeekOption.IsSet && this.SchoolHoursPerWeekOption.Value > (double)999.99)
            {
                yield return new ValidationResult("Invalid value for SchoolHoursPerWeek, must be a value less than or equal to 999.99.", new [] { "SchoolHoursPerWeek" });
            }

            // SchoolHoursPerWeek (double) minimum
            if (this.SchoolHoursPerWeekOption.IsSet && this.SchoolHoursPerWeekOption.Value < (double)-999.99)
            {
                yield return new ValidationResult("Invalid value for SchoolHoursPerWeek, must be a value greater than or equal to -999.99.", new [] { "SchoolHoursPerWeek" });
            }

            // SpecialEducationExitExplained (string) maxLength
            if (this.SpecialEducationExitExplained != null && this.SpecialEducationExitExplained.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for SpecialEducationExitExplained, length must be less than 1024.", new [] { "SpecialEducationExitExplained" });
            }

            // SpecialEducationExitReasonDescriptor (string) maxLength
            if (this.SpecialEducationExitReasonDescriptor != null && this.SpecialEducationExitReasonDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SpecialEducationExitReasonDescriptor, length must be less than 306.", new [] { "SpecialEducationExitReasonDescriptor" });
            }

            // SpecialEducationHoursPerWeek (double) maximum
            if (this.SpecialEducationHoursPerWeekOption.IsSet && this.SpecialEducationHoursPerWeekOption.Value > (double)999.99)
            {
                yield return new ValidationResult("Invalid value for SpecialEducationHoursPerWeek, must be a value less than or equal to 999.99.", new [] { "SpecialEducationHoursPerWeek" });
            }

            // SpecialEducationHoursPerWeek (double) minimum
            if (this.SpecialEducationHoursPerWeekOption.IsSet && this.SpecialEducationHoursPerWeekOption.Value < (double)-999.99)
            {
                yield return new ValidationResult("Invalid value for SpecialEducationHoursPerWeek, must be a value greater than or equal to -999.99.", new [] { "SpecialEducationHoursPerWeek" });
            }

            // SpecialEducationSettingDescriptor (string) maxLength
            if (this.SpecialEducationSettingDescriptor != null && this.SpecialEducationSettingDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SpecialEducationSettingDescriptor, length must be less than 306.", new [] { "SpecialEducationSettingDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentSpecialEducationProgramAssociation" />
    /// </summary>
    public class EdFiStudentSpecialEducationProgramAssociationJsonConverter : JsonConverter<EdFiStudentSpecialEducationProgramAssociation>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize IepBeginDate
        /// </summary>
        public static string IepBeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize IepEndDate
        /// </summary>
        public static string IepEndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize IepReviewDate
        /// </summary>
        public static string IepReviewDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastEvaluationDate
        /// </summary>
        public static string LastEvaluationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize SpecialEducationExitDate
        /// </summary>
        public static string SpecialEducationExitDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentSpecialEducationProgramAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentSpecialEducationProgramAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> beginDate = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiProgramReference?> programReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<List<EdFiStudentSpecialEducationProgramAssociationDisability>?> disabilities = default;
            Option<DateOnly?> endDate = default;
            Option<bool?> ideaEligibility = default;
            Option<DateOnly?> iepBeginDate = default;
            Option<DateOnly?> iepEndDate = default;
            Option<DateOnly?> iepReviewDate = default;
            Option<DateOnly?> lastEvaluationDate = default;
            Option<bool?> medicallyFragile = default;
            Option<bool?> multiplyDisabled = default;
            Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?> programParticipationStatuses = default;
            Option<string?> reasonExitedDescriptor = default;
            Option<double?> reductionInHoursPerWeekComparedToPeers = default;
            Option<double?> schoolHoursPerWeek = default;
            Option<bool?> servedOutsideOfRegularSession = default;
            Option<List<EdFiStudentSpecialEducationProgramAssociationServiceProvider>?> serviceProviders = default;
            Option<bool?> shortenedSchoolDayIndicator = default;
            Option<DateOnly?> specialEducationExitDate = default;
            Option<string?> specialEducationExitExplained = default;
            Option<string?> specialEducationExitReasonDescriptor = default;
            Option<double?> specialEducationHoursPerWeek = default;
            Option<List<EdFiStudentSpecialEducationProgramAssociationSpecialEducationProgramService>?> specialEducationProgramServices = default;
            Option<string?> specialEducationSettingDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programReference":
                            programReference = new Option<EdFiProgramReference?>(JsonSerializer.Deserialize<EdFiProgramReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "disabilities":
                            disabilities = new Option<List<EdFiStudentSpecialEducationProgramAssociationDisability>?>(JsonSerializer.Deserialize<List<EdFiStudentSpecialEducationProgramAssociationDisability>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ideaEligibility":
                            ideaEligibility = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "iepBeginDate":
                            iepBeginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "iepEndDate":
                            iepEndDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "iepReviewDate":
                            iepReviewDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lastEvaluationDate":
                            lastEvaluationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "medicallyFragile":
                            medicallyFragile = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "multiplyDisabled":
                            multiplyDisabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "programParticipationStatuses":
                            programParticipationStatuses = new Option<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>?>(JsonSerializer.Deserialize<List<EdFiGeneralStudentProgramAssociationProgramParticipationStatus>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reasonExitedDescriptor":
                            reasonExitedDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "reductionInHoursPerWeekComparedToPeers":
                            reductionInHoursPerWeekComparedToPeers = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "schoolHoursPerWeek":
                            schoolHoursPerWeek = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "servedOutsideOfRegularSession":
                            servedOutsideOfRegularSession = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "serviceProviders":
                            serviceProviders = new Option<List<EdFiStudentSpecialEducationProgramAssociationServiceProvider>?>(JsonSerializer.Deserialize<List<EdFiStudentSpecialEducationProgramAssociationServiceProvider>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "shortenedSchoolDayIndicator":
                            shortenedSchoolDayIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "specialEducationExitDate":
                            specialEducationExitDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "specialEducationExitExplained":
                            specialEducationExitExplained = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "specialEducationExitReasonDescriptor":
                            specialEducationExitReasonDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "specialEducationHoursPerWeek":
                            specialEducationHoursPerWeek = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "specialEducationProgramServices":
                            specialEducationProgramServices = new Option<List<EdFiStudentSpecialEducationProgramAssociationSpecialEducationProgramService>?>(JsonSerializer.Deserialize<List<EdFiStudentSpecialEducationProgramAssociationSpecialEducationProgramService>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "specialEducationSettingDescriptor":
                            specialEducationSettingDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!beginDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSpecialEducationProgramAssociation.", nameof(beginDate));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSpecialEducationProgramAssociation.", nameof(educationOrganizationReference));

            if (!programReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSpecialEducationProgramAssociation.", nameof(programReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSpecialEducationProgramAssociation.", nameof(studentReference));

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            if (programReference.IsSet && programReference.Value == null)
                throw new ArgumentNullException(nameof(programReference), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            if (disabilities.IsSet && disabilities.Value == null)
                throw new ArgumentNullException(nameof(disabilities), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            if (programParticipationStatuses.IsSet && programParticipationStatuses.Value == null)
                throw new ArgumentNullException(nameof(programParticipationStatuses), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            if (serviceProviders.IsSet && serviceProviders.Value == null)
                throw new ArgumentNullException(nameof(serviceProviders), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            if (specialEducationProgramServices.IsSet && specialEducationProgramServices.Value == null)
                throw new ArgumentNullException(nameof(specialEducationProgramServices), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentSpecialEducationProgramAssociation.");

            return new EdFiStudentSpecialEducationProgramAssociation(beginDate.Value!.Value!, educationOrganizationReference.Value!, programReference.Value!, studentReference.Value!, id, disabilities, endDate, ideaEligibility, iepBeginDate, iepEndDate, iepReviewDate, lastEvaluationDate, medicallyFragile, multiplyDisabled, programParticipationStatuses, reasonExitedDescriptor, reductionInHoursPerWeekComparedToPeers, schoolHoursPerWeek, servedOutsideOfRegularSession, serviceProviders, shortenedSchoolDayIndicator, specialEducationExitDate, specialEducationExitExplained, specialEducationExitReasonDescriptor, specialEducationHoursPerWeek, specialEducationProgramServices, specialEducationSettingDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentSpecialEducationProgramAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentSpecialEducationProgramAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentSpecialEducationProgramAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentSpecialEducationProgramAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentSpecialEducationProgramAssociation edFiStudentSpecialEducationProgramAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentSpecialEducationProgramAssociation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation.EducationOrganizationReference), "Property is required for class EdFiStudentSpecialEducationProgramAssociation.");

            if (edFiStudentSpecialEducationProgramAssociation.ProgramReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation.ProgramReference), "Property is required for class EdFiStudentSpecialEducationProgramAssociation.");

            if (edFiStudentSpecialEducationProgramAssociation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation.StudentReference), "Property is required for class EdFiStudentSpecialEducationProgramAssociation.");

            if (edFiStudentSpecialEducationProgramAssociation.IdOption.IsSet && edFiStudentSpecialEducationProgramAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation.Id), "Property is required for class EdFiStudentSpecialEducationProgramAssociation.");

            if (edFiStudentSpecialEducationProgramAssociation.DisabilitiesOption.IsSet && edFiStudentSpecialEducationProgramAssociation.Disabilities == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation.Disabilities), "Property is required for class EdFiStudentSpecialEducationProgramAssociation.");

            if (edFiStudentSpecialEducationProgramAssociation.ProgramParticipationStatusesOption.IsSet && edFiStudentSpecialEducationProgramAssociation.ProgramParticipationStatuses == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation.ProgramParticipationStatuses), "Property is required for class EdFiStudentSpecialEducationProgramAssociation.");

            if (edFiStudentSpecialEducationProgramAssociation.ServiceProvidersOption.IsSet && edFiStudentSpecialEducationProgramAssociation.ServiceProviders == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation.ServiceProviders), "Property is required for class EdFiStudentSpecialEducationProgramAssociation.");

            if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationProgramServicesOption.IsSet && edFiStudentSpecialEducationProgramAssociation.SpecialEducationProgramServices == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation.SpecialEducationProgramServices), "Property is required for class EdFiStudentSpecialEducationProgramAssociation.");

            if (edFiStudentSpecialEducationProgramAssociation.EtagOption.IsSet && edFiStudentSpecialEducationProgramAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation.Etag), "Property is required for class EdFiStudentSpecialEducationProgramAssociation.");

            if (edFiStudentSpecialEducationProgramAssociation.ExtOption.IsSet && edFiStudentSpecialEducationProgramAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramAssociation.Ext), "Property is required for class EdFiStudentSpecialEducationProgramAssociation.");

            writer.WriteString("beginDate", edFiStudentSpecialEducationProgramAssociation.BeginDate.ToString(BeginDateFormat));

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramAssociation.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("programReference");
            JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramAssociation.ProgramReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramAssociation.StudentReference, jsonSerializerOptions);
            if (edFiStudentSpecialEducationProgramAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentSpecialEducationProgramAssociation.Id);

            if (edFiStudentSpecialEducationProgramAssociation.DisabilitiesOption.IsSet)
            {
                writer.WritePropertyName("disabilities");
                JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramAssociation.Disabilities, jsonSerializerOptions);
            }
            if (edFiStudentSpecialEducationProgramAssociation.EndDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiStudentSpecialEducationProgramAssociation.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiStudentSpecialEducationProgramAssociation.IdeaEligibilityOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.IdeaEligibilityOption.Value != null)
                    writer.WriteBoolean("ideaEligibility", edFiStudentSpecialEducationProgramAssociation.IdeaEligibilityOption.Value!.Value);
                else
                    writer.WriteNull("ideaEligibility");

            if (edFiStudentSpecialEducationProgramAssociation.IepBeginDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.IepBeginDateOption.Value != null)
                    writer.WriteString("iepBeginDate", edFiStudentSpecialEducationProgramAssociation.IepBeginDateOption.Value!.Value.ToString(IepBeginDateFormat));
                else
                    writer.WriteNull("iepBeginDate");

            if (edFiStudentSpecialEducationProgramAssociation.IepEndDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.IepEndDateOption.Value != null)
                    writer.WriteString("iepEndDate", edFiStudentSpecialEducationProgramAssociation.IepEndDateOption.Value!.Value.ToString(IepEndDateFormat));
                else
                    writer.WriteNull("iepEndDate");

            if (edFiStudentSpecialEducationProgramAssociation.IepReviewDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.IepReviewDateOption.Value != null)
                    writer.WriteString("iepReviewDate", edFiStudentSpecialEducationProgramAssociation.IepReviewDateOption.Value!.Value.ToString(IepReviewDateFormat));
                else
                    writer.WriteNull("iepReviewDate");

            if (edFiStudentSpecialEducationProgramAssociation.LastEvaluationDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.LastEvaluationDateOption.Value != null)
                    writer.WriteString("lastEvaluationDate", edFiStudentSpecialEducationProgramAssociation.LastEvaluationDateOption.Value!.Value.ToString(LastEvaluationDateFormat));
                else
                    writer.WriteNull("lastEvaluationDate");

            if (edFiStudentSpecialEducationProgramAssociation.MedicallyFragileOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.MedicallyFragileOption.Value != null)
                    writer.WriteBoolean("medicallyFragile", edFiStudentSpecialEducationProgramAssociation.MedicallyFragileOption.Value!.Value);
                else
                    writer.WriteNull("medicallyFragile");

            if (edFiStudentSpecialEducationProgramAssociation.MultiplyDisabledOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.MultiplyDisabledOption.Value != null)
                    writer.WriteBoolean("multiplyDisabled", edFiStudentSpecialEducationProgramAssociation.MultiplyDisabledOption.Value!.Value);
                else
                    writer.WriteNull("multiplyDisabled");

            if (edFiStudentSpecialEducationProgramAssociation.ProgramParticipationStatusesOption.IsSet)
            {
                writer.WritePropertyName("programParticipationStatuses");
                JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramAssociation.ProgramParticipationStatuses, jsonSerializerOptions);
            }
            if (edFiStudentSpecialEducationProgramAssociation.ReasonExitedDescriptorOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.ReasonExitedDescriptorOption.Value != null)
                    writer.WriteString("reasonExitedDescriptor", edFiStudentSpecialEducationProgramAssociation.ReasonExitedDescriptor);
                else
                    writer.WriteNull("reasonExitedDescriptor");

            if (edFiStudentSpecialEducationProgramAssociation.ReductionInHoursPerWeekComparedToPeersOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.ReductionInHoursPerWeekComparedToPeersOption.Value != null)
                    writer.WriteNumber("reductionInHoursPerWeekComparedToPeers", edFiStudentSpecialEducationProgramAssociation.ReductionInHoursPerWeekComparedToPeersOption.Value!.Value);
                else
                    writer.WriteNull("reductionInHoursPerWeekComparedToPeers");

            if (edFiStudentSpecialEducationProgramAssociation.SchoolHoursPerWeekOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.SchoolHoursPerWeekOption.Value != null)
                    writer.WriteNumber("schoolHoursPerWeek", edFiStudentSpecialEducationProgramAssociation.SchoolHoursPerWeekOption.Value!.Value);
                else
                    writer.WriteNull("schoolHoursPerWeek");

            if (edFiStudentSpecialEducationProgramAssociation.ServedOutsideOfRegularSessionOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.ServedOutsideOfRegularSessionOption.Value != null)
                    writer.WriteBoolean("servedOutsideOfRegularSession", edFiStudentSpecialEducationProgramAssociation.ServedOutsideOfRegularSessionOption.Value!.Value);
                else
                    writer.WriteNull("servedOutsideOfRegularSession");

            if (edFiStudentSpecialEducationProgramAssociation.ServiceProvidersOption.IsSet)
            {
                writer.WritePropertyName("serviceProviders");
                JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramAssociation.ServiceProviders, jsonSerializerOptions);
            }
            if (edFiStudentSpecialEducationProgramAssociation.ShortenedSchoolDayIndicatorOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.ShortenedSchoolDayIndicatorOption.Value != null)
                    writer.WriteBoolean("shortenedSchoolDayIndicator", edFiStudentSpecialEducationProgramAssociation.ShortenedSchoolDayIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("shortenedSchoolDayIndicator");

            if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationExitDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationExitDateOption.Value != null)
                    writer.WriteString("specialEducationExitDate", edFiStudentSpecialEducationProgramAssociation.SpecialEducationExitDateOption.Value!.Value.ToString(SpecialEducationExitDateFormat));
                else
                    writer.WriteNull("specialEducationExitDate");

            if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationExitExplainedOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationExitExplainedOption.Value != null)
                    writer.WriteString("specialEducationExitExplained", edFiStudentSpecialEducationProgramAssociation.SpecialEducationExitExplained);
                else
                    writer.WriteNull("specialEducationExitExplained");

            if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationExitReasonDescriptorOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationExitReasonDescriptorOption.Value != null)
                    writer.WriteString("specialEducationExitReasonDescriptor", edFiStudentSpecialEducationProgramAssociation.SpecialEducationExitReasonDescriptor);
                else
                    writer.WriteNull("specialEducationExitReasonDescriptor");

            if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationHoursPerWeekOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationHoursPerWeekOption.Value != null)
                    writer.WriteNumber("specialEducationHoursPerWeek", edFiStudentSpecialEducationProgramAssociation.SpecialEducationHoursPerWeekOption.Value!.Value);
                else
                    writer.WriteNull("specialEducationHoursPerWeek");

            if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationProgramServicesOption.IsSet)
            {
                writer.WritePropertyName("specialEducationProgramServices");
                JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramAssociation.SpecialEducationProgramServices, jsonSerializerOptions);
            }
            if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationSettingDescriptorOption.IsSet)
                if (edFiStudentSpecialEducationProgramAssociation.SpecialEducationSettingDescriptorOption.Value != null)
                    writer.WriteString("specialEducationSettingDescriptor", edFiStudentSpecialEducationProgramAssociation.SpecialEducationSettingDescriptor);
                else
                    writer.WriteNull("specialEducationSettingDescriptor");

            if (edFiStudentSpecialEducationProgramAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentSpecialEducationProgramAssociation.Etag);

            if (edFiStudentSpecialEducationProgramAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentSpecialEducationProgramAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentSpecialEducationProgramAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
