// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentSpecialEducationProgramEligibilityAssociation
    /// </summary>
    public partial class EdFiStudentSpecialEducationProgramEligibilityAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentSpecialEducationProgramEligibilityAssociation" /> class.
        /// </summary>
        /// <param name="consentToEvaluationReceivedDate">Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="programReference">programReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="ideaPartDescriptor">Indicates if the evaluation is done under Part B IDEA or Part C IDEA.</param>
        /// <param name="id">id</param>
        /// <param name="consentToEvaluationDate">The date on which the student&#39;s parent gave a consent (Parent Consent Date).</param>
        /// <param name="eligibilityConferenceDate">The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility.</param>
        /// <param name="eligibilityDelayReasonDescriptor">The reason why the eligibility determination was completed beyond the required timeframe.</param>
        /// <param name="eligibilityDeterminationDate">Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date.</param>
        /// <param name="eligibilityEvaluationDate">Indicates the month, day, and year when the written individual evaluation report was completed.</param>
        /// <param name="eligibilityEvaluationTypeDescriptor">Indicates if this is an initial evaluation or a reevaluation.</param>
        /// <param name="evaluationCompleteIndicator">Indicates the evaluation completed status.</param>
        /// <param name="evaluationDelayDays">Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation.</param>
        /// <param name="evaluationDelayReasonDescriptor">Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values.</param>
        /// <param name="evaluationLateReason">Refers to additional information for delay in doing the evaluation.</param>
        /// <param name="ideaIndicator">Indicates whether or not the student was determined eligible as a result of an evaluation.</param>
        /// <param name="originalECIServicesDate">The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program.</param>
        /// <param name="transitionConferenceDate">Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services.</param>
        /// <param name="transitionNotificationDate">Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the StudentSpecialEducationProgramEligibilityAssociation entity.</param>
        [JsonConstructor]
        public EdFiStudentSpecialEducationProgramEligibilityAssociation(DateOnly consentToEvaluationReceivedDate, EdFiEducationOrganizationReference educationOrganizationReference, EdFiProgramReference programReference, EdFiStudentReference studentReference, string ideaPartDescriptor, Option<string?> id = default, Option<DateOnly?> consentToEvaluationDate = default, Option<DateOnly?> eligibilityConferenceDate = default, Option<string?> eligibilityDelayReasonDescriptor = default, Option<DateOnly?> eligibilityDeterminationDate = default, Option<DateOnly?> eligibilityEvaluationDate = default, Option<string?> eligibilityEvaluationTypeDescriptor = default, Option<bool?> evaluationCompleteIndicator = default, Option<int?> evaluationDelayDays = default, Option<string?> evaluationDelayReasonDescriptor = default, Option<string?> evaluationLateReason = default, Option<bool?> ideaIndicator = default, Option<DateOnly?> originalECIServicesDate = default, Option<DateOnly?> transitionConferenceDate = default, Option<DateOnly?> transitionNotificationDate = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            ConsentToEvaluationReceivedDate = consentToEvaluationReceivedDate;
            EducationOrganizationReference = educationOrganizationReference;
            ProgramReference = programReference;
            StudentReference = studentReference;
            IdeaPartDescriptor = ideaPartDescriptor;
            IdOption = id;
            ConsentToEvaluationDateOption = consentToEvaluationDate;
            EligibilityConferenceDateOption = eligibilityConferenceDate;
            EligibilityDelayReasonDescriptorOption = eligibilityDelayReasonDescriptor;
            EligibilityDeterminationDateOption = eligibilityDeterminationDate;
            EligibilityEvaluationDateOption = eligibilityEvaluationDate;
            EligibilityEvaluationTypeDescriptorOption = eligibilityEvaluationTypeDescriptor;
            EvaluationCompleteIndicatorOption = evaluationCompleteIndicator;
            EvaluationDelayDaysOption = evaluationDelayDays;
            EvaluationDelayReasonDescriptorOption = evaluationDelayReasonDescriptor;
            EvaluationLateReasonOption = evaluationLateReason;
            IdeaIndicatorOption = ideaIndicator;
            OriginalECIServicesDateOption = originalECIServicesDate;
            TransitionConferenceDateOption = transitionConferenceDate;
            TransitionNotificationDateOption = transitionNotificationDate;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe.
        /// </summary>
        /// <value>Indicates the date on which the local education agency received written consent for the evaluation from the student&#39;s parent or guardian. This is the first day of the evaluation timeframe.</value>
        [JsonPropertyName("consentToEvaluationReceivedDate")]
        public DateOnly ConsentToEvaluationReceivedDate { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets ProgramReference
        /// </summary>
        [JsonPropertyName("programReference")]
        public EdFiProgramReference ProgramReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Indicates if the evaluation is done under Part B IDEA or Part C IDEA.
        /// </summary>
        /// <value>Indicates if the evaluation is done under Part B IDEA or Part C IDEA.</value>
        [JsonPropertyName("ideaPartDescriptor")]
        public string IdeaPartDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConsentToEvaluationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ConsentToEvaluationDateOption { get; private set; }

        /// <summary>
        /// The date on which the student&#39;s parent gave a consent (Parent Consent Date).
        /// </summary>
        /// <value>The date on which the student&#39;s parent gave a consent (Parent Consent Date).</value>
        [JsonPropertyName("consentToEvaluationDate")]
        public DateOnly? ConsentToEvaluationDate { get { return this.ConsentToEvaluationDateOption; } set { this.ConsentToEvaluationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EligibilityConferenceDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EligibilityConferenceDateOption { get; private set; }

        /// <summary>
        /// The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility.
        /// </summary>
        /// <value>The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility.</value>
        [JsonPropertyName("eligibilityConferenceDate")]
        public DateOnly? EligibilityConferenceDate { get { return this.EligibilityConferenceDateOption; } set { this.EligibilityConferenceDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EligibilityDelayReasonDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EligibilityDelayReasonDescriptorOption { get; private set; }

        /// <summary>
        /// The reason why the eligibility determination was completed beyond the required timeframe.
        /// </summary>
        /// <value>The reason why the eligibility determination was completed beyond the required timeframe.</value>
        [JsonPropertyName("eligibilityDelayReasonDescriptor")]
        public string? EligibilityDelayReasonDescriptor { get { return this.EligibilityDelayReasonDescriptorOption; } set { this.EligibilityDelayReasonDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EligibilityDeterminationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EligibilityDeterminationDateOption { get; private set; }

        /// <summary>
        /// Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date.
        /// </summary>
        /// <value>Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child&#39;s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date.</value>
        [JsonPropertyName("eligibilityDeterminationDate")]
        public DateOnly? EligibilityDeterminationDate { get { return this.EligibilityDeterminationDateOption; } set { this.EligibilityDeterminationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EligibilityEvaluationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EligibilityEvaluationDateOption { get; private set; }

        /// <summary>
        /// Indicates the month, day, and year when the written individual evaluation report was completed.
        /// </summary>
        /// <value>Indicates the month, day, and year when the written individual evaluation report was completed.</value>
        [JsonPropertyName("eligibilityEvaluationDate")]
        public DateOnly? EligibilityEvaluationDate { get { return this.EligibilityEvaluationDateOption; } set { this.EligibilityEvaluationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EligibilityEvaluationTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EligibilityEvaluationTypeDescriptorOption { get; private set; }

        /// <summary>
        /// Indicates if this is an initial evaluation or a reevaluation.
        /// </summary>
        /// <value>Indicates if this is an initial evaluation or a reevaluation.</value>
        [JsonPropertyName("eligibilityEvaluationTypeDescriptor")]
        public string? EligibilityEvaluationTypeDescriptor { get { return this.EligibilityEvaluationTypeDescriptorOption; } set { this.EligibilityEvaluationTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EvaluationCompleteIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EvaluationCompleteIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates the evaluation completed status.
        /// </summary>
        /// <value>Indicates the evaluation completed status.</value>
        [JsonPropertyName("evaluationCompleteIndicator")]
        public bool? EvaluationCompleteIndicator { get { return this.EvaluationCompleteIndicatorOption; } set { this.EvaluationCompleteIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EvaluationDelayDays
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EvaluationDelayDaysOption { get; private set; }

        /// <summary>
        /// Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation.
        /// </summary>
        /// <value>Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation.</value>
        [JsonPropertyName("evaluationDelayDays")]
        public int? EvaluationDelayDays { get { return this.EvaluationDelayDaysOption; } set { this.EvaluationDelayDaysOption = new(value); } }

        /// <summary>
        /// Used to track the state of EvaluationDelayReasonDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EvaluationDelayReasonDescriptorOption { get; private set; }

        /// <summary>
        /// Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values.
        /// </summary>
        /// <value>Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values.</value>
        [JsonPropertyName("evaluationDelayReasonDescriptor")]
        public string? EvaluationDelayReasonDescriptor { get { return this.EvaluationDelayReasonDescriptorOption; } set { this.EvaluationDelayReasonDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EvaluationLateReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EvaluationLateReasonOption { get; private set; }

        /// <summary>
        /// Refers to additional information for delay in doing the evaluation.
        /// </summary>
        /// <value>Refers to additional information for delay in doing the evaluation.</value>
        [JsonPropertyName("evaluationLateReason")]
        public string? EvaluationLateReason { get { return this.EvaluationLateReasonOption; } set { this.EvaluationLateReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdeaIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IdeaIndicatorOption { get; private set; }

        /// <summary>
        /// Indicates whether or not the student was determined eligible as a result of an evaluation.
        /// </summary>
        /// <value>Indicates whether or not the student was determined eligible as a result of an evaluation.</value>
        [JsonPropertyName("ideaIndicator")]
        public bool? IdeaIndicator { get { return this.IdeaIndicatorOption; } set { this.IdeaIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of OriginalECIServicesDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> OriginalECIServicesDateOption { get; private set; }

        /// <summary>
        /// The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program.
        /// </summary>
        /// <value>The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program.</value>
        [JsonPropertyName("originalECIServicesDate")]
        public DateOnly? OriginalECIServicesDate { get { return this.OriginalECIServicesDateOption; } set { this.OriginalECIServicesDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransitionConferenceDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> TransitionConferenceDateOption { get; private set; }

        /// <summary>
        /// Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services.
        /// </summary>
        /// <value>Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child&#39;s potential eligibility for early childhood special education (ECSE) services.</value>
        [JsonPropertyName("transitionConferenceDate")]
        public DateOnly? TransitionConferenceDate { get { return this.TransitionConferenceDateOption; } set { this.TransitionConferenceDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransitionNotificationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> TransitionNotificationDateOption { get; private set; }

        /// <summary>
        /// Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral.
        /// </summary>
        /// <value>Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral.</value>
        [JsonPropertyName("transitionNotificationDate")]
        public DateOnly? TransitionNotificationDate { get { return this.TransitionNotificationDateOption; } set { this.TransitionNotificationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentSpecialEducationProgramEligibilityAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentSpecialEducationProgramEligibilityAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentSpecialEducationProgramEligibilityAssociation {\n");
            sb.Append("  ConsentToEvaluationReceivedDate: ").Append(ConsentToEvaluationReceivedDate).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  ProgramReference: ").Append(ProgramReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  IdeaPartDescriptor: ").Append(IdeaPartDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ConsentToEvaluationDate: ").Append(ConsentToEvaluationDate).Append("\n");
            sb.Append("  EligibilityConferenceDate: ").Append(EligibilityConferenceDate).Append("\n");
            sb.Append("  EligibilityDelayReasonDescriptor: ").Append(EligibilityDelayReasonDescriptor).Append("\n");
            sb.Append("  EligibilityDeterminationDate: ").Append(EligibilityDeterminationDate).Append("\n");
            sb.Append("  EligibilityEvaluationDate: ").Append(EligibilityEvaluationDate).Append("\n");
            sb.Append("  EligibilityEvaluationTypeDescriptor: ").Append(EligibilityEvaluationTypeDescriptor).Append("\n");
            sb.Append("  EvaluationCompleteIndicator: ").Append(EvaluationCompleteIndicator).Append("\n");
            sb.Append("  EvaluationDelayDays: ").Append(EvaluationDelayDays).Append("\n");
            sb.Append("  EvaluationDelayReasonDescriptor: ").Append(EvaluationDelayReasonDescriptor).Append("\n");
            sb.Append("  EvaluationLateReason: ").Append(EvaluationLateReason).Append("\n");
            sb.Append("  IdeaIndicator: ").Append(IdeaIndicator).Append("\n");
            sb.Append("  OriginalECIServicesDate: ").Append(OriginalECIServicesDate).Append("\n");
            sb.Append("  TransitionConferenceDate: ").Append(TransitionConferenceDate).Append("\n");
            sb.Append("  TransitionNotificationDate: ").Append(TransitionNotificationDate).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IdeaPartDescriptor (string) maxLength
            if (this.IdeaPartDescriptor != null && this.IdeaPartDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for IdeaPartDescriptor, length must be less than 306.", new [] { "IdeaPartDescriptor" });
            }

            // EligibilityDelayReasonDescriptor (string) maxLength
            if (this.EligibilityDelayReasonDescriptor != null && this.EligibilityDelayReasonDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EligibilityDelayReasonDescriptor, length must be less than 306.", new [] { "EligibilityDelayReasonDescriptor" });
            }

            // EligibilityEvaluationTypeDescriptor (string) maxLength
            if (this.EligibilityEvaluationTypeDescriptor != null && this.EligibilityEvaluationTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EligibilityEvaluationTypeDescriptor, length must be less than 306.", new [] { "EligibilityEvaluationTypeDescriptor" });
            }

            // EvaluationDelayReasonDescriptor (string) maxLength
            if (this.EvaluationDelayReasonDescriptor != null && this.EvaluationDelayReasonDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EvaluationDelayReasonDescriptor, length must be less than 306.", new [] { "EvaluationDelayReasonDescriptor" });
            }

            // EvaluationLateReason (string) maxLength
            if (this.EvaluationLateReason != null && this.EvaluationLateReason.Length > 255)
            {
                yield return new ValidationResult("Invalid value for EvaluationLateReason, length must be less than 255.", new [] { "EvaluationLateReason" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentSpecialEducationProgramEligibilityAssociation" />
    /// </summary>
    public class EdFiStudentSpecialEducationProgramEligibilityAssociationJsonConverter : JsonConverter<EdFiStudentSpecialEducationProgramEligibilityAssociation>
    {
        /// <summary>
        /// The format to use to serialize ConsentToEvaluationReceivedDate
        /// </summary>
        public static string ConsentToEvaluationReceivedDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize ConsentToEvaluationDate
        /// </summary>
        public static string ConsentToEvaluationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EligibilityConferenceDate
        /// </summary>
        public static string EligibilityConferenceDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EligibilityDeterminationDate
        /// </summary>
        public static string EligibilityDeterminationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EligibilityEvaluationDate
        /// </summary>
        public static string EligibilityEvaluationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize OriginalECIServicesDate
        /// </summary>
        public static string OriginalECIServicesDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize TransitionConferenceDate
        /// </summary>
        public static string TransitionConferenceDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize TransitionNotificationDate
        /// </summary>
        public static string TransitionNotificationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentSpecialEducationProgramEligibilityAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentSpecialEducationProgramEligibilityAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> consentToEvaluationReceivedDate = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiProgramReference?> programReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> ideaPartDescriptor = default;
            Option<string?> id = default;
            Option<DateOnly?> consentToEvaluationDate = default;
            Option<DateOnly?> eligibilityConferenceDate = default;
            Option<string?> eligibilityDelayReasonDescriptor = default;
            Option<DateOnly?> eligibilityDeterminationDate = default;
            Option<DateOnly?> eligibilityEvaluationDate = default;
            Option<string?> eligibilityEvaluationTypeDescriptor = default;
            Option<bool?> evaluationCompleteIndicator = default;
            Option<int?> evaluationDelayDays = default;
            Option<string?> evaluationDelayReasonDescriptor = default;
            Option<string?> evaluationLateReason = default;
            Option<bool?> ideaIndicator = default;
            Option<DateOnly?> originalECIServicesDate = default;
            Option<DateOnly?> transitionConferenceDate = default;
            Option<DateOnly?> transitionNotificationDate = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "consentToEvaluationReceivedDate":
                            consentToEvaluationReceivedDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "programReference":
                            programReference = new Option<EdFiProgramReference?>(JsonSerializer.Deserialize<EdFiProgramReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ideaPartDescriptor":
                            ideaPartDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "consentToEvaluationDate":
                            consentToEvaluationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "eligibilityConferenceDate":
                            eligibilityConferenceDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "eligibilityDelayReasonDescriptor":
                            eligibilityDelayReasonDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "eligibilityDeterminationDate":
                            eligibilityDeterminationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "eligibilityEvaluationDate":
                            eligibilityEvaluationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "eligibilityEvaluationTypeDescriptor":
                            eligibilityEvaluationTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "evaluationCompleteIndicator":
                            evaluationCompleteIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "evaluationDelayDays":
                            evaluationDelayDays = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "evaluationDelayReasonDescriptor":
                            evaluationDelayReasonDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "evaluationLateReason":
                            evaluationLateReason = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ideaIndicator":
                            ideaIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "originalECIServicesDate":
                            originalECIServicesDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "transitionConferenceDate":
                            transitionConferenceDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "transitionNotificationDate":
                            transitionNotificationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!consentToEvaluationReceivedDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.", nameof(consentToEvaluationReceivedDate));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.", nameof(educationOrganizationReference));

            if (!programReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.", nameof(programReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.", nameof(studentReference));

            if (!ideaPartDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.", nameof(ideaPartDescriptor));

            if (consentToEvaluationReceivedDate.IsSet && consentToEvaluationReceivedDate.Value == null)
                throw new ArgumentNullException(nameof(consentToEvaluationReceivedDate), "Property is not nullable for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (programReference.IsSet && programReference.Value == null)
                throw new ArgumentNullException(nameof(programReference), "Property is not nullable for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (ideaPartDescriptor.IsSet && ideaPartDescriptor.Value == null)
                throw new ArgumentNullException(nameof(ideaPartDescriptor), "Property is not nullable for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            return new EdFiStudentSpecialEducationProgramEligibilityAssociation(consentToEvaluationReceivedDate.Value!.Value!, educationOrganizationReference.Value!, programReference.Value!, studentReference.Value!, ideaPartDescriptor.Value!, id, consentToEvaluationDate, eligibilityConferenceDate, eligibilityDelayReasonDescriptor, eligibilityDeterminationDate, eligibilityEvaluationDate, eligibilityEvaluationTypeDescriptor, evaluationCompleteIndicator, evaluationDelayDays, evaluationDelayReasonDescriptor, evaluationLateReason, ideaIndicator, originalECIServicesDate, transitionConferenceDate, transitionNotificationDate, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentSpecialEducationProgramEligibilityAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentSpecialEducationProgramEligibilityAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentSpecialEducationProgramEligibilityAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentSpecialEducationProgramEligibilityAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentSpecialEducationProgramEligibilityAssociation edFiStudentSpecialEducationProgramEligibilityAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramEligibilityAssociation.EducationOrganizationReference), "Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.ProgramReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramEligibilityAssociation.ProgramReference), "Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramEligibilityAssociation.StudentReference), "Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.IdeaPartDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramEligibilityAssociation.IdeaPartDescriptor), "Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.IdOption.IsSet && edFiStudentSpecialEducationProgramEligibilityAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramEligibilityAssociation.Id), "Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EtagOption.IsSet && edFiStudentSpecialEducationProgramEligibilityAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramEligibilityAssociation.Etag), "Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.ExtOption.IsSet && edFiStudentSpecialEducationProgramEligibilityAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentSpecialEducationProgramEligibilityAssociation.Ext), "Property is required for class EdFiStudentSpecialEducationProgramEligibilityAssociation.");

            writer.WriteString("consentToEvaluationReceivedDate", edFiStudentSpecialEducationProgramEligibilityAssociation.ConsentToEvaluationReceivedDate.ToString(ConsentToEvaluationReceivedDateFormat));

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramEligibilityAssociation.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("programReference");
            JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramEligibilityAssociation.ProgramReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramEligibilityAssociation.StudentReference, jsonSerializerOptions);
            writer.WriteString("ideaPartDescriptor", edFiStudentSpecialEducationProgramEligibilityAssociation.IdeaPartDescriptor);

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentSpecialEducationProgramEligibilityAssociation.Id);

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.ConsentToEvaluationDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.ConsentToEvaluationDateOption.Value != null)
                    writer.WriteString("consentToEvaluationDate", edFiStudentSpecialEducationProgramEligibilityAssociation.ConsentToEvaluationDateOption.Value!.Value.ToString(ConsentToEvaluationDateFormat));
                else
                    writer.WriteNull("consentToEvaluationDate");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityConferenceDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityConferenceDateOption.Value != null)
                    writer.WriteString("eligibilityConferenceDate", edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityConferenceDateOption.Value!.Value.ToString(EligibilityConferenceDateFormat));
                else
                    writer.WriteNull("eligibilityConferenceDate");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityDelayReasonDescriptorOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityDelayReasonDescriptorOption.Value != null)
                    writer.WriteString("eligibilityDelayReasonDescriptor", edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityDelayReasonDescriptor);
                else
                    writer.WriteNull("eligibilityDelayReasonDescriptor");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityDeterminationDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityDeterminationDateOption.Value != null)
                    writer.WriteString("eligibilityDeterminationDate", edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityDeterminationDateOption.Value!.Value.ToString(EligibilityDeterminationDateFormat));
                else
                    writer.WriteNull("eligibilityDeterminationDate");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityEvaluationDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityEvaluationDateOption.Value != null)
                    writer.WriteString("eligibilityEvaluationDate", edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityEvaluationDateOption.Value!.Value.ToString(EligibilityEvaluationDateFormat));
                else
                    writer.WriteNull("eligibilityEvaluationDate");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityEvaluationTypeDescriptorOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityEvaluationTypeDescriptorOption.Value != null)
                    writer.WriteString("eligibilityEvaluationTypeDescriptor", edFiStudentSpecialEducationProgramEligibilityAssociation.EligibilityEvaluationTypeDescriptor);
                else
                    writer.WriteNull("eligibilityEvaluationTypeDescriptor");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationCompleteIndicatorOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationCompleteIndicatorOption.Value != null)
                    writer.WriteBoolean("evaluationCompleteIndicator", edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationCompleteIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("evaluationCompleteIndicator");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationDelayDaysOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationDelayDaysOption.Value != null)
                    writer.WriteNumber("evaluationDelayDays", edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationDelayDaysOption.Value!.Value);
                else
                    writer.WriteNull("evaluationDelayDays");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationDelayReasonDescriptorOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationDelayReasonDescriptorOption.Value != null)
                    writer.WriteString("evaluationDelayReasonDescriptor", edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationDelayReasonDescriptor);
                else
                    writer.WriteNull("evaluationDelayReasonDescriptor");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationLateReasonOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationLateReasonOption.Value != null)
                    writer.WriteString("evaluationLateReason", edFiStudentSpecialEducationProgramEligibilityAssociation.EvaluationLateReason);
                else
                    writer.WriteNull("evaluationLateReason");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.IdeaIndicatorOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.IdeaIndicatorOption.Value != null)
                    writer.WriteBoolean("ideaIndicator", edFiStudentSpecialEducationProgramEligibilityAssociation.IdeaIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("ideaIndicator");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.OriginalECIServicesDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.OriginalECIServicesDateOption.Value != null)
                    writer.WriteString("originalECIServicesDate", edFiStudentSpecialEducationProgramEligibilityAssociation.OriginalECIServicesDateOption.Value!.Value.ToString(OriginalECIServicesDateFormat));
                else
                    writer.WriteNull("originalECIServicesDate");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.TransitionConferenceDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.TransitionConferenceDateOption.Value != null)
                    writer.WriteString("transitionConferenceDate", edFiStudentSpecialEducationProgramEligibilityAssociation.TransitionConferenceDateOption.Value!.Value.ToString(TransitionConferenceDateFormat));
                else
                    writer.WriteNull("transitionConferenceDate");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.TransitionNotificationDateOption.IsSet)
                if (edFiStudentSpecialEducationProgramEligibilityAssociation.TransitionNotificationDateOption.Value != null)
                    writer.WriteString("transitionNotificationDate", edFiStudentSpecialEducationProgramEligibilityAssociation.TransitionNotificationDateOption.Value!.Value.ToString(TransitionNotificationDateFormat));
                else
                    writer.WriteNull("transitionNotificationDate");

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentSpecialEducationProgramEligibilityAssociation.Etag);

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiStudentSpecialEducationProgramEligibilityAssociation.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiStudentSpecialEducationProgramEligibilityAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentSpecialEducationProgramEligibilityAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
