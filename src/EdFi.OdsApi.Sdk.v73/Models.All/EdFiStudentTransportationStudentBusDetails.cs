// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiStudentTransportationStudentBusDetails
    /// </summary>
    public partial class EdFiStudentTransportationStudentBusDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentTransportationStudentBusDetails" /> class.
        /// </summary>
        /// <param name="busRouteDescriptor">Identifies the specific route taken by a bus for student transportation.</param>
        /// <param name="busNumber">The unique identifier assigned to the bus used for transporting the student.</param>
        /// <param name="mileage">The distance, typically measured in miles, that a student was transported along the route of the bus during a single trip.</param>
        /// <param name="travelDayofWeeks">An unordered collection of studentTransportationStudentBusDetailsTravelDayofWeeks. Specifies the day(s) of the week on which student transportation occurs.</param>
        /// <param name="travelDirections">An unordered collection of studentTransportationStudentBusDetailsTravelDirections. Indicates the direction of travel for the student transportation route (e.g., to school, from school).</param>
        /// <param name="ext">Extensions to the StudentTransportationStudentBusDetails entity.</param>
        [JsonConstructor]
        public EdFiStudentTransportationStudentBusDetails(string busRouteDescriptor, string busNumber, Option<double?> mileage = default, Option<List<EdFiStudentTransportationStudentBusDetailsTravelDayofWeek>?> travelDayofWeeks = default, Option<List<EdFiStudentTransportationStudentBusDetailsTravelDirection>?> travelDirections = default, Option<Object?> ext = default)
        {
            BusRouteDescriptor = busRouteDescriptor;
            BusNumber = busNumber;
            MileageOption = mileage;
            TravelDayofWeeksOption = travelDayofWeeks;
            TravelDirectionsOption = travelDirections;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Identifies the specific route taken by a bus for student transportation.
        /// </summary>
        /// <value>Identifies the specific route taken by a bus for student transportation.</value>
        [JsonPropertyName("busRouteDescriptor")]
        public string BusRouteDescriptor { get; set; }

        /// <summary>
        /// The unique identifier assigned to the bus used for transporting the student.
        /// </summary>
        /// <value>The unique identifier assigned to the bus used for transporting the student.</value>
        [JsonPropertyName("busNumber")]
        public string BusNumber { get; set; }

        /// <summary>
        /// Used to track the state of Mileage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MileageOption { get; private set; }

        /// <summary>
        /// The distance, typically measured in miles, that a student was transported along the route of the bus during a single trip.
        /// </summary>
        /// <value>The distance, typically measured in miles, that a student was transported along the route of the bus during a single trip.</value>
        [JsonPropertyName("mileage")]
        public double? Mileage { get { return this.MileageOption; } set { this.MileageOption = new(value); } }

        /// <summary>
        /// Used to track the state of TravelDayofWeeks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentTransportationStudentBusDetailsTravelDayofWeek>?> TravelDayofWeeksOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentTransportationStudentBusDetailsTravelDayofWeeks. Specifies the day(s) of the week on which student transportation occurs.
        /// </summary>
        /// <value>An unordered collection of studentTransportationStudentBusDetailsTravelDayofWeeks. Specifies the day(s) of the week on which student transportation occurs.</value>
        [JsonPropertyName("travelDayofWeeks")]
        public List<EdFiStudentTransportationStudentBusDetailsTravelDayofWeek>? TravelDayofWeeks { get { return this.TravelDayofWeeksOption; } set { this.TravelDayofWeeksOption = new(value); } }

        /// <summary>
        /// Used to track the state of TravelDirections
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentTransportationStudentBusDetailsTravelDirection>?> TravelDirectionsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentTransportationStudentBusDetailsTravelDirections. Indicates the direction of travel for the student transportation route (e.g., to school, from school).
        /// </summary>
        /// <value>An unordered collection of studentTransportationStudentBusDetailsTravelDirections. Indicates the direction of travel for the student transportation route (e.g., to school, from school).</value>
        [JsonPropertyName("travelDirections")]
        public List<EdFiStudentTransportationStudentBusDetailsTravelDirection>? TravelDirections { get { return this.TravelDirectionsOption; } set { this.TravelDirectionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentTransportationStudentBusDetails entity.
        /// </summary>
        /// <value>Extensions to the StudentTransportationStudentBusDetails entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentTransportationStudentBusDetails {\n");
            sb.Append("  BusRouteDescriptor: ").Append(BusRouteDescriptor).Append("\n");
            sb.Append("  BusNumber: ").Append(BusNumber).Append("\n");
            sb.Append("  Mileage: ").Append(Mileage).Append("\n");
            sb.Append("  TravelDayofWeeks: ").Append(TravelDayofWeeks).Append("\n");
            sb.Append("  TravelDirections: ").Append(TravelDirections).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BusRouteDescriptor (string) maxLength
            if (this.BusRouteDescriptor != null && this.BusRouteDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for BusRouteDescriptor, length must be less than 306.", new [] { "BusRouteDescriptor" });
            }

            // BusNumber (string) maxLength
            if (this.BusNumber != null && this.BusNumber.Length > 36)
            {
                yield return new ValidationResult("Invalid value for BusNumber, length must be less than 36.", new [] { "BusNumber" });
            }

            // Mileage (double) maximum
            if (this.MileageOption.IsSet && this.MileageOption.Value > (double)999.99)
            {
                yield return new ValidationResult("Invalid value for Mileage, must be a value less than or equal to 999.99.", new [] { "Mileage" });
            }

            // Mileage (double) minimum
            if (this.MileageOption.IsSet && this.MileageOption.Value < (double)-999.99)
            {
                yield return new ValidationResult("Invalid value for Mileage, must be a value greater than or equal to -999.99.", new [] { "Mileage" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentTransportationStudentBusDetails" />
    /// </summary>
    public class EdFiStudentTransportationStudentBusDetailsJsonConverter : JsonConverter<EdFiStudentTransportationStudentBusDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentTransportationStudentBusDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentTransportationStudentBusDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> busRouteDescriptor = default;
            Option<string?> busNumber = default;
            Option<double?> mileage = default;
            Option<List<EdFiStudentTransportationStudentBusDetailsTravelDayofWeek>?> travelDayofWeeks = default;
            Option<List<EdFiStudentTransportationStudentBusDetailsTravelDirection>?> travelDirections = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "busRouteDescriptor":
                            busRouteDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "busNumber":
                            busNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mileage":
                            mileage = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "travelDayofWeeks":
                            travelDayofWeeks = new Option<List<EdFiStudentTransportationStudentBusDetailsTravelDayofWeek>?>(JsonSerializer.Deserialize<List<EdFiStudentTransportationStudentBusDetailsTravelDayofWeek>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "travelDirections":
                            travelDirections = new Option<List<EdFiStudentTransportationStudentBusDetailsTravelDirection>?>(JsonSerializer.Deserialize<List<EdFiStudentTransportationStudentBusDetailsTravelDirection>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!busRouteDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentTransportationStudentBusDetails.", nameof(busRouteDescriptor));

            if (!busNumber.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentTransportationStudentBusDetails.", nameof(busNumber));

            if (busRouteDescriptor.IsSet && busRouteDescriptor.Value == null)
                throw new ArgumentNullException(nameof(busRouteDescriptor), "Property is not nullable for class EdFiStudentTransportationStudentBusDetails.");

            if (busNumber.IsSet && busNumber.Value == null)
                throw new ArgumentNullException(nameof(busNumber), "Property is not nullable for class EdFiStudentTransportationStudentBusDetails.");

            if (travelDayofWeeks.IsSet && travelDayofWeeks.Value == null)
                throw new ArgumentNullException(nameof(travelDayofWeeks), "Property is not nullable for class EdFiStudentTransportationStudentBusDetails.");

            if (travelDirections.IsSet && travelDirections.Value == null)
                throw new ArgumentNullException(nameof(travelDirections), "Property is not nullable for class EdFiStudentTransportationStudentBusDetails.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentTransportationStudentBusDetails.");

            return new EdFiStudentTransportationStudentBusDetails(busRouteDescriptor.Value!, busNumber.Value!, mileage, travelDayofWeeks, travelDirections, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentTransportationStudentBusDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentTransportationStudentBusDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentTransportationStudentBusDetails edFiStudentTransportationStudentBusDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentTransportationStudentBusDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentTransportationStudentBusDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentTransportationStudentBusDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentTransportationStudentBusDetails edFiStudentTransportationStudentBusDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentTransportationStudentBusDetails.BusRouteDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentTransportationStudentBusDetails.BusRouteDescriptor), "Property is required for class EdFiStudentTransportationStudentBusDetails.");

            if (edFiStudentTransportationStudentBusDetails.BusNumber == null)
                throw new ArgumentNullException(nameof(edFiStudentTransportationStudentBusDetails.BusNumber), "Property is required for class EdFiStudentTransportationStudentBusDetails.");

            if (edFiStudentTransportationStudentBusDetails.TravelDayofWeeksOption.IsSet && edFiStudentTransportationStudentBusDetails.TravelDayofWeeks == null)
                throw new ArgumentNullException(nameof(edFiStudentTransportationStudentBusDetails.TravelDayofWeeks), "Property is required for class EdFiStudentTransportationStudentBusDetails.");

            if (edFiStudentTransportationStudentBusDetails.TravelDirectionsOption.IsSet && edFiStudentTransportationStudentBusDetails.TravelDirections == null)
                throw new ArgumentNullException(nameof(edFiStudentTransportationStudentBusDetails.TravelDirections), "Property is required for class EdFiStudentTransportationStudentBusDetails.");

            if (edFiStudentTransportationStudentBusDetails.ExtOption.IsSet && edFiStudentTransportationStudentBusDetails.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentTransportationStudentBusDetails.Ext), "Property is required for class EdFiStudentTransportationStudentBusDetails.");

            writer.WriteString("busRouteDescriptor", edFiStudentTransportationStudentBusDetails.BusRouteDescriptor);

            writer.WriteString("busNumber", edFiStudentTransportationStudentBusDetails.BusNumber);

            if (edFiStudentTransportationStudentBusDetails.MileageOption.IsSet)
                if (edFiStudentTransportationStudentBusDetails.MileageOption.Value != null)
                    writer.WriteNumber("mileage", edFiStudentTransportationStudentBusDetails.MileageOption.Value!.Value);
                else
                    writer.WriteNull("mileage");

            if (edFiStudentTransportationStudentBusDetails.TravelDayofWeeksOption.IsSet)
            {
                writer.WritePropertyName("travelDayofWeeks");
                JsonSerializer.Serialize(writer, edFiStudentTransportationStudentBusDetails.TravelDayofWeeks, jsonSerializerOptions);
            }
            if (edFiStudentTransportationStudentBusDetails.TravelDirectionsOption.IsSet)
            {
                writer.WritePropertyName("travelDirections");
                JsonSerializer.Serialize(writer, edFiStudentTransportationStudentBusDetails.TravelDirections, jsonSerializerOptions);
            }
            if (edFiStudentTransportationStudentBusDetails.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentTransportationStudentBusDetails.Ext, jsonSerializerOptions);
            }
        }
    }
}
