// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiSurvey
    /// </summary>
    public partial class EdFiSurvey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurvey" /> class.
        /// </summary>
        /// <param name="namespace">Namespace for the survey.</param>
        /// <param name="surveyIdentifier">The unique survey identifier from the survey tool.</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference</param>
        /// <param name="surveyTitle">The title of the survey.</param>
        /// <param name="id">id</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="sessionReference">sessionReference</param>
        /// <param name="numberAdministered">Number of persons to whom this survey was administered.</param>
        /// <param name="surveyCategoryDescriptor">The category or type of survey.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the Survey entity.</param>
        [JsonConstructor]
        public EdFiSurvey(string @namespace, string surveyIdentifier, EdFiSchoolYearTypeReference schoolYearTypeReference, string surveyTitle, Option<string?> id = default, Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default, Option<EdFiSessionReference?> sessionReference = default, Option<int?> numberAdministered = default, Option<string?> surveyCategoryDescriptor = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            Namespace = @namespace;
            SurveyIdentifier = surveyIdentifier;
            SchoolYearTypeReference = schoolYearTypeReference;
            SurveyTitle = surveyTitle;
            IdOption = id;
            EducationOrganizationReferenceOption = educationOrganizationReference;
            SessionReferenceOption = sessionReference;
            NumberAdministeredOption = numberAdministered;
            SurveyCategoryDescriptorOption = surveyCategoryDescriptor;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Namespace for the survey.
        /// </summary>
        /// <value>Namespace for the survey.</value>
        [JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// The unique survey identifier from the survey tool.
        /// </summary>
        /// <value>The unique survey identifier from the survey tool.</value>
        [JsonPropertyName("surveyIdentifier")]
        public string SurveyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [JsonPropertyName("schoolYearTypeReference")]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// The title of the survey.
        /// </summary>
        /// <value>The title of the survey.</value>
        [JsonPropertyName("surveyTitle")]
        public string SurveyTitle { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationOrganizationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiEducationOrganizationReference?> EducationOrganizationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference? EducationOrganizationReference { get { return this.EducationOrganizationReferenceOption; } set { this.EducationOrganizationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiSessionReference?> SessionReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets SessionReference
        /// </summary>
        [JsonPropertyName("sessionReference")]
        public EdFiSessionReference? SessionReference { get { return this.SessionReferenceOption; } set { this.SessionReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumberAdministered
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberAdministeredOption { get; private set; }

        /// <summary>
        /// Number of persons to whom this survey was administered.
        /// </summary>
        /// <value>Number of persons to whom this survey was administered.</value>
        [JsonPropertyName("numberAdministered")]
        public int? NumberAdministered { get { return this.NumberAdministeredOption; } set { this.NumberAdministeredOption = new(value); } }

        /// <summary>
        /// Used to track the state of SurveyCategoryDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SurveyCategoryDescriptorOption { get; private set; }

        /// <summary>
        /// The category or type of survey.
        /// </summary>
        /// <value>The category or type of survey.</value>
        [JsonPropertyName("surveyCategoryDescriptor")]
        public string? SurveyCategoryDescriptor { get { return this.SurveyCategoryDescriptorOption; } set { this.SurveyCategoryDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Survey entity.
        /// </summary>
        /// <value>Extensions to the Survey entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurvey {\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  SurveyIdentifier: ").Append(SurveyIdentifier).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  SurveyTitle: ").Append(SurveyTitle).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  SessionReference: ").Append(SessionReference).Append("\n");
            sb.Append("  NumberAdministered: ").Append(NumberAdministered).Append("\n");
            sb.Append("  SurveyCategoryDescriptor: ").Append(SurveyCategoryDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // SurveyIdentifier (string) maxLength
            if (this.SurveyIdentifier != null && this.SurveyIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SurveyIdentifier, length must be less than 60.", new [] { "SurveyIdentifier" });
            }

            // SurveyTitle (string) maxLength
            if (this.SurveyTitle != null && this.SurveyTitle.Length > 255)
            {
                yield return new ValidationResult("Invalid value for SurveyTitle, length must be less than 255.", new [] { "SurveyTitle" });
            }

            // SurveyCategoryDescriptor (string) maxLength
            if (this.SurveyCategoryDescriptor != null && this.SurveyCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SurveyCategoryDescriptor, length must be less than 306.", new [] { "SurveyCategoryDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiSurvey" />
    /// </summary>
    public class EdFiSurveyJsonConverter : JsonConverter<EdFiSurvey>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiSurvey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiSurvey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varNamespace = default;
            Option<string?> surveyIdentifier = default;
            Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default;
            Option<string?> surveyTitle = default;
            Option<string?> id = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiSessionReference?> sessionReference = default;
            Option<int?> numberAdministered = default;
            Option<string?> surveyCategoryDescriptor = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "surveyIdentifier":
                            surveyIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schoolYearTypeReference":
                            schoolYearTypeReference = new Option<EdFiSchoolYearTypeReference?>(JsonSerializer.Deserialize<EdFiSchoolYearTypeReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "surveyTitle":
                            surveyTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sessionReference":
                            sessionReference = new Option<EdFiSessionReference?>(JsonSerializer.Deserialize<EdFiSessionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "numberAdministered":
                            numberAdministered = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "surveyCategoryDescriptor":
                            surveyCategoryDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!varNamespace.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurvey.", nameof(varNamespace));

            if (!surveyIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurvey.", nameof(surveyIdentifier));

            if (!schoolYearTypeReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurvey.", nameof(schoolYearTypeReference));

            if (!surveyTitle.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurvey.", nameof(surveyTitle));

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class EdFiSurvey.");

            if (surveyIdentifier.IsSet && surveyIdentifier.Value == null)
                throw new ArgumentNullException(nameof(surveyIdentifier), "Property is not nullable for class EdFiSurvey.");

            if (schoolYearTypeReference.IsSet && schoolYearTypeReference.Value == null)
                throw new ArgumentNullException(nameof(schoolYearTypeReference), "Property is not nullable for class EdFiSurvey.");

            if (surveyTitle.IsSet && surveyTitle.Value == null)
                throw new ArgumentNullException(nameof(surveyTitle), "Property is not nullable for class EdFiSurvey.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiSurvey.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiSurvey.");

            if (sessionReference.IsSet && sessionReference.Value == null)
                throw new ArgumentNullException(nameof(sessionReference), "Property is not nullable for class EdFiSurvey.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiSurvey.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiSurvey.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiSurvey.");

            return new EdFiSurvey(varNamespace.Value!, surveyIdentifier.Value!, schoolYearTypeReference.Value!, surveyTitle.Value!, id, educationOrganizationReference, sessionReference, numberAdministered, surveyCategoryDescriptor, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiSurvey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurvey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiSurvey edFiSurvey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiSurvey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiSurvey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurvey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiSurvey edFiSurvey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiSurvey.Namespace == null)
                throw new ArgumentNullException(nameof(edFiSurvey.Namespace), "Property is required for class EdFiSurvey.");

            if (edFiSurvey.SurveyIdentifier == null)
                throw new ArgumentNullException(nameof(edFiSurvey.SurveyIdentifier), "Property is required for class EdFiSurvey.");

            if (edFiSurvey.SchoolYearTypeReference == null)
                throw new ArgumentNullException(nameof(edFiSurvey.SchoolYearTypeReference), "Property is required for class EdFiSurvey.");

            if (edFiSurvey.SurveyTitle == null)
                throw new ArgumentNullException(nameof(edFiSurvey.SurveyTitle), "Property is required for class EdFiSurvey.");

            if (edFiSurvey.IdOption.IsSet && edFiSurvey.Id == null)
                throw new ArgumentNullException(nameof(edFiSurvey.Id), "Property is required for class EdFiSurvey.");

            if (edFiSurvey.EducationOrganizationReferenceOption.IsSet && edFiSurvey.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiSurvey.EducationOrganizationReference), "Property is required for class EdFiSurvey.");

            if (edFiSurvey.SessionReferenceOption.IsSet && edFiSurvey.SessionReference == null)
                throw new ArgumentNullException(nameof(edFiSurvey.SessionReference), "Property is required for class EdFiSurvey.");

            if (edFiSurvey.EtagOption.IsSet && edFiSurvey.Etag == null)
                throw new ArgumentNullException(nameof(edFiSurvey.Etag), "Property is required for class EdFiSurvey.");

            if (edFiSurvey.ExtOption.IsSet && edFiSurvey.Ext == null)
                throw new ArgumentNullException(nameof(edFiSurvey.Ext), "Property is required for class EdFiSurvey.");

            writer.WriteString("namespace", edFiSurvey.Namespace);

            writer.WriteString("surveyIdentifier", edFiSurvey.SurveyIdentifier);

            writer.WritePropertyName("schoolYearTypeReference");
            JsonSerializer.Serialize(writer, edFiSurvey.SchoolYearTypeReference, jsonSerializerOptions);
            writer.WriteString("surveyTitle", edFiSurvey.SurveyTitle);

            if (edFiSurvey.IdOption.IsSet)
                writer.WriteString("id", edFiSurvey.Id);

            if (edFiSurvey.EducationOrganizationReferenceOption.IsSet)
            {
                writer.WritePropertyName("educationOrganizationReference");
                JsonSerializer.Serialize(writer, edFiSurvey.EducationOrganizationReference, jsonSerializerOptions);
            }
            if (edFiSurvey.SessionReferenceOption.IsSet)
            {
                writer.WritePropertyName("sessionReference");
                JsonSerializer.Serialize(writer, edFiSurvey.SessionReference, jsonSerializerOptions);
            }
            if (edFiSurvey.NumberAdministeredOption.IsSet)
                if (edFiSurvey.NumberAdministeredOption.Value != null)
                    writer.WriteNumber("numberAdministered", edFiSurvey.NumberAdministeredOption.Value!.Value);
                else
                    writer.WriteNull("numberAdministered");

            if (edFiSurvey.SurveyCategoryDescriptorOption.IsSet)
                if (edFiSurvey.SurveyCategoryDescriptorOption.Value != null)
                    writer.WriteString("surveyCategoryDescriptor", edFiSurvey.SurveyCategoryDescriptor);
                else
                    writer.WriteNull("surveyCategoryDescriptor");

            if (edFiSurvey.EtagOption.IsSet)
                writer.WriteString("_etag", edFiSurvey.Etag);

            if (edFiSurvey.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiSurvey.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiSurvey.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiSurvey.Ext, jsonSerializerOptions);
            }
        }
    }
}
