// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiSurveyQuestion
    /// </summary>
    public partial class EdFiSurveyQuestion : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestion" /> class.
        /// </summary>
        /// <param name="questionCode">The identifying code for the question, unique for the survey.</param>
        /// <param name="surveyReference">surveyReference</param>
        /// <param name="questionFormDescriptor">The form or type of question.</param>
        /// <param name="questionText">The text of the question.</param>
        /// <param name="id">id</param>
        /// <param name="surveySectionReference">surveySectionReference</param>
        /// <param name="matrices">An unordered collection of surveyQuestionMatrices. Information about the matrix element in the survey.</param>
        /// <param name="responseChoices">An unordered collection of surveyQuestionResponseChoices. The optional list of possible responses to a survey question.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the SurveyQuestion entity.</param>
        [JsonConstructor]
        public EdFiSurveyQuestion(string questionCode, EdFiSurveyReference surveyReference, string questionFormDescriptor, string questionText, Option<string?> id = default, Option<EdFiSurveySectionReference?> surveySectionReference = default, Option<List<EdFiSurveyQuestionMatrix>?> matrices = default, Option<List<EdFiSurveyQuestionResponseChoice>?> responseChoices = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            QuestionCode = questionCode;
            SurveyReference = surveyReference;
            QuestionFormDescriptor = questionFormDescriptor;
            QuestionText = questionText;
            IdOption = id;
            SurveySectionReferenceOption = surveySectionReference;
            MatricesOption = matrices;
            ResponseChoicesOption = responseChoices;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The identifying code for the question, unique for the survey.
        /// </summary>
        /// <value>The identifying code for the question, unique for the survey.</value>
        [JsonPropertyName("questionCode")]
        public string QuestionCode { get; set; }

        /// <summary>
        /// Gets or Sets SurveyReference
        /// </summary>
        [JsonPropertyName("surveyReference")]
        public EdFiSurveyReference SurveyReference { get; set; }

        /// <summary>
        /// The form or type of question.
        /// </summary>
        /// <value>The form or type of question.</value>
        [JsonPropertyName("questionFormDescriptor")]
        public string QuestionFormDescriptor { get; set; }

        /// <summary>
        /// The text of the question.
        /// </summary>
        /// <value>The text of the question.</value>
        [JsonPropertyName("questionText")]
        public string QuestionText { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SurveySectionReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiSurveySectionReference?> SurveySectionReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets SurveySectionReference
        /// </summary>
        [JsonPropertyName("surveySectionReference")]
        public EdFiSurveySectionReference? SurveySectionReference { get { return this.SurveySectionReferenceOption; } set { this.SurveySectionReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Matrices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiSurveyQuestionMatrix>?> MatricesOption { get; private set; }

        /// <summary>
        /// An unordered collection of surveyQuestionMatrices. Information about the matrix element in the survey.
        /// </summary>
        /// <value>An unordered collection of surveyQuestionMatrices. Information about the matrix element in the survey.</value>
        [JsonPropertyName("matrices")]
        public List<EdFiSurveyQuestionMatrix>? Matrices { get { return this.MatricesOption; } set { this.MatricesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResponseChoices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiSurveyQuestionResponseChoice>?> ResponseChoicesOption { get; private set; }

        /// <summary>
        /// An unordered collection of surveyQuestionResponseChoices. The optional list of possible responses to a survey question.
        /// </summary>
        /// <value>An unordered collection of surveyQuestionResponseChoices. The optional list of possible responses to a survey question.</value>
        [JsonPropertyName("responseChoices")]
        public List<EdFiSurveyQuestionResponseChoice>? ResponseChoices { get { return this.ResponseChoicesOption; } set { this.ResponseChoicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the SurveyQuestion entity.
        /// </summary>
        /// <value>Extensions to the SurveyQuestion entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyQuestion {\n");
            sb.Append("  QuestionCode: ").Append(QuestionCode).Append("\n");
            sb.Append("  SurveyReference: ").Append(SurveyReference).Append("\n");
            sb.Append("  QuestionFormDescriptor: ").Append(QuestionFormDescriptor).Append("\n");
            sb.Append("  QuestionText: ").Append(QuestionText).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SurveySectionReference: ").Append(SurveySectionReference).Append("\n");
            sb.Append("  Matrices: ").Append(Matrices).Append("\n");
            sb.Append("  ResponseChoices: ").Append(ResponseChoices).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // QuestionCode (string) maxLength
            if (this.QuestionCode != null && this.QuestionCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for QuestionCode, length must be less than 60.", new [] { "QuestionCode" });
            }

            // QuestionFormDescriptor (string) maxLength
            if (this.QuestionFormDescriptor != null && this.QuestionFormDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for QuestionFormDescriptor, length must be less than 306.", new [] { "QuestionFormDescriptor" });
            }

            // QuestionText (string) maxLength
            if (this.QuestionText != null && this.QuestionText.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for QuestionText, length must be less than 1024.", new [] { "QuestionText" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiSurveyQuestion" />
    /// </summary>
    public class EdFiSurveyQuestionJsonConverter : JsonConverter<EdFiSurveyQuestion>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiSurveyQuestion" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiSurveyQuestion Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> questionCode = default;
            Option<EdFiSurveyReference?> surveyReference = default;
            Option<string?> questionFormDescriptor = default;
            Option<string?> questionText = default;
            Option<string?> id = default;
            Option<EdFiSurveySectionReference?> surveySectionReference = default;
            Option<List<EdFiSurveyQuestionMatrix>?> matrices = default;
            Option<List<EdFiSurveyQuestionResponseChoice>?> responseChoices = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "questionCode":
                            questionCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "surveyReference":
                            surveyReference = new Option<EdFiSurveyReference?>(JsonSerializer.Deserialize<EdFiSurveyReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "questionFormDescriptor":
                            questionFormDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "questionText":
                            questionText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "surveySectionReference":
                            surveySectionReference = new Option<EdFiSurveySectionReference?>(JsonSerializer.Deserialize<EdFiSurveySectionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "matrices":
                            matrices = new Option<List<EdFiSurveyQuestionMatrix>?>(JsonSerializer.Deserialize<List<EdFiSurveyQuestionMatrix>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "responseChoices":
                            responseChoices = new Option<List<EdFiSurveyQuestionResponseChoice>?>(JsonSerializer.Deserialize<List<EdFiSurveyQuestionResponseChoice>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!questionCode.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveyQuestion.", nameof(questionCode));

            if (!surveyReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveyQuestion.", nameof(surveyReference));

            if (!questionFormDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveyQuestion.", nameof(questionFormDescriptor));

            if (!questionText.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveyQuestion.", nameof(questionText));

            if (questionCode.IsSet && questionCode.Value == null)
                throw new ArgumentNullException(nameof(questionCode), "Property is not nullable for class EdFiSurveyQuestion.");

            if (surveyReference.IsSet && surveyReference.Value == null)
                throw new ArgumentNullException(nameof(surveyReference), "Property is not nullable for class EdFiSurveyQuestion.");

            if (questionFormDescriptor.IsSet && questionFormDescriptor.Value == null)
                throw new ArgumentNullException(nameof(questionFormDescriptor), "Property is not nullable for class EdFiSurveyQuestion.");

            if (questionText.IsSet && questionText.Value == null)
                throw new ArgumentNullException(nameof(questionText), "Property is not nullable for class EdFiSurveyQuestion.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiSurveyQuestion.");

            if (surveySectionReference.IsSet && surveySectionReference.Value == null)
                throw new ArgumentNullException(nameof(surveySectionReference), "Property is not nullable for class EdFiSurveyQuestion.");

            if (matrices.IsSet && matrices.Value == null)
                throw new ArgumentNullException(nameof(matrices), "Property is not nullable for class EdFiSurveyQuestion.");

            if (responseChoices.IsSet && responseChoices.Value == null)
                throw new ArgumentNullException(nameof(responseChoices), "Property is not nullable for class EdFiSurveyQuestion.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiSurveyQuestion.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiSurveyQuestion.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiSurveyQuestion.");

            return new EdFiSurveyQuestion(questionCode.Value!, surveyReference.Value!, questionFormDescriptor.Value!, questionText.Value!, id, surveySectionReference, matrices, responseChoices, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiSurveyQuestion" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurveyQuestion"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiSurveyQuestion edFiSurveyQuestion, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiSurveyQuestion, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiSurveyQuestion" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurveyQuestion"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiSurveyQuestion edFiSurveyQuestion, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiSurveyQuestion.QuestionCode == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestion.QuestionCode), "Property is required for class EdFiSurveyQuestion.");

            if (edFiSurveyQuestion.SurveyReference == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestion.SurveyReference), "Property is required for class EdFiSurveyQuestion.");

            if (edFiSurveyQuestion.QuestionFormDescriptor == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestion.QuestionFormDescriptor), "Property is required for class EdFiSurveyQuestion.");

            if (edFiSurveyQuestion.QuestionText == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestion.QuestionText), "Property is required for class EdFiSurveyQuestion.");

            if (edFiSurveyQuestion.IdOption.IsSet && edFiSurveyQuestion.Id == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestion.Id), "Property is required for class EdFiSurveyQuestion.");

            if (edFiSurveyQuestion.SurveySectionReferenceOption.IsSet && edFiSurveyQuestion.SurveySectionReference == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestion.SurveySectionReference), "Property is required for class EdFiSurveyQuestion.");

            if (edFiSurveyQuestion.MatricesOption.IsSet && edFiSurveyQuestion.Matrices == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestion.Matrices), "Property is required for class EdFiSurveyQuestion.");

            if (edFiSurveyQuestion.ResponseChoicesOption.IsSet && edFiSurveyQuestion.ResponseChoices == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestion.ResponseChoices), "Property is required for class EdFiSurveyQuestion.");

            if (edFiSurveyQuestion.EtagOption.IsSet && edFiSurveyQuestion.Etag == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestion.Etag), "Property is required for class EdFiSurveyQuestion.");

            if (edFiSurveyQuestion.ExtOption.IsSet && edFiSurveyQuestion.Ext == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestion.Ext), "Property is required for class EdFiSurveyQuestion.");

            writer.WriteString("questionCode", edFiSurveyQuestion.QuestionCode);

            writer.WritePropertyName("surveyReference");
            JsonSerializer.Serialize(writer, edFiSurveyQuestion.SurveyReference, jsonSerializerOptions);
            writer.WriteString("questionFormDescriptor", edFiSurveyQuestion.QuestionFormDescriptor);

            writer.WriteString("questionText", edFiSurveyQuestion.QuestionText);

            if (edFiSurveyQuestion.IdOption.IsSet)
                writer.WriteString("id", edFiSurveyQuestion.Id);

            if (edFiSurveyQuestion.SurveySectionReferenceOption.IsSet)
            {
                writer.WritePropertyName("surveySectionReference");
                JsonSerializer.Serialize(writer, edFiSurveyQuestion.SurveySectionReference, jsonSerializerOptions);
            }
            if (edFiSurveyQuestion.MatricesOption.IsSet)
            {
                writer.WritePropertyName("matrices");
                JsonSerializer.Serialize(writer, edFiSurveyQuestion.Matrices, jsonSerializerOptions);
            }
            if (edFiSurveyQuestion.ResponseChoicesOption.IsSet)
            {
                writer.WritePropertyName("responseChoices");
                JsonSerializer.Serialize(writer, edFiSurveyQuestion.ResponseChoices, jsonSerializerOptions);
            }
            if (edFiSurveyQuestion.EtagOption.IsSet)
                writer.WriteString("_etag", edFiSurveyQuestion.Etag);

            if (edFiSurveyQuestion.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiSurveyQuestion.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiSurveyQuestion.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiSurveyQuestion.Ext, jsonSerializerOptions);
            }
        }
    }
}
