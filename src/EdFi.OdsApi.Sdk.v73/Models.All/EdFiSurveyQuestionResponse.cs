// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiSurveyQuestionResponse
    /// </summary>
    public partial class EdFiSurveyQuestionResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestionResponse" /> class.
        /// </summary>
        /// <param name="surveyQuestionReference">surveyQuestionReference</param>
        /// <param name="surveyResponseReference">surveyResponseReference</param>
        /// <param name="id">id</param>
        /// <param name="comment">Additional information provided by the responder about the question in the survey.</param>
        /// <param name="noResponse">Indicates there was no response to the question.</param>
        /// <param name="surveyQuestionMatrixElementResponses">An unordered collection of surveyQuestionResponseSurveyQuestionMatrixElementResponses. For matrix questions, the response for each row of the matrix.</param>
        /// <param name="values">An unordered collection of surveyQuestionResponseValues. For free-form, single- or multiple-selection questions, one or more responses.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the SurveyQuestionResponse entity.</param>
        [JsonConstructor]
        public EdFiSurveyQuestionResponse(EdFiSurveyQuestionReference surveyQuestionReference, EdFiSurveyResponseReference surveyResponseReference, Option<string?> id = default, Option<string?> comment = default, Option<bool?> noResponse = default, Option<List<EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse>?> surveyQuestionMatrixElementResponses = default, Option<List<EdFiSurveyQuestionResponseValue>?> values = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            SurveyQuestionReference = surveyQuestionReference;
            SurveyResponseReference = surveyResponseReference;
            IdOption = id;
            CommentOption = comment;
            NoResponseOption = noResponse;
            SurveyQuestionMatrixElementResponsesOption = surveyQuestionMatrixElementResponses;
            ValuesOption = values;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SurveyQuestionReference
        /// </summary>
        [JsonPropertyName("surveyQuestionReference")]
        public EdFiSurveyQuestionReference SurveyQuestionReference { get; set; }

        /// <summary>
        /// Gets or Sets SurveyResponseReference
        /// </summary>
        [JsonPropertyName("surveyResponseReference")]
        public EdFiSurveyResponseReference SurveyResponseReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Additional information provided by the responder about the question in the survey.
        /// </summary>
        /// <value>Additional information provided by the responder about the question in the survey.</value>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Used to track the state of NoResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NoResponseOption { get; private set; }

        /// <summary>
        /// Indicates there was no response to the question.
        /// </summary>
        /// <value>Indicates there was no response to the question.</value>
        [JsonPropertyName("noResponse")]
        public bool? NoResponse { get { return this.NoResponseOption; } set { this.NoResponseOption = new(value); } }

        /// <summary>
        /// Used to track the state of SurveyQuestionMatrixElementResponses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse>?> SurveyQuestionMatrixElementResponsesOption { get; private set; }

        /// <summary>
        /// An unordered collection of surveyQuestionResponseSurveyQuestionMatrixElementResponses. For matrix questions, the response for each row of the matrix.
        /// </summary>
        /// <value>An unordered collection of surveyQuestionResponseSurveyQuestionMatrixElementResponses. For matrix questions, the response for each row of the matrix.</value>
        [JsonPropertyName("surveyQuestionMatrixElementResponses")]
        public List<EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse>? SurveyQuestionMatrixElementResponses { get { return this.SurveyQuestionMatrixElementResponsesOption; } set { this.SurveyQuestionMatrixElementResponsesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Values
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiSurveyQuestionResponseValue>?> ValuesOption { get; private set; }

        /// <summary>
        /// An unordered collection of surveyQuestionResponseValues. For free-form, single- or multiple-selection questions, one or more responses.
        /// </summary>
        /// <value>An unordered collection of surveyQuestionResponseValues. For free-form, single- or multiple-selection questions, one or more responses.</value>
        [JsonPropertyName("values")]
        public List<EdFiSurveyQuestionResponseValue>? Values { get { return this.ValuesOption; } set { this.ValuesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the SurveyQuestionResponse entity.
        /// </summary>
        /// <value>Extensions to the SurveyQuestionResponse entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyQuestionResponse {\n");
            sb.Append("  SurveyQuestionReference: ").Append(SurveyQuestionReference).Append("\n");
            sb.Append("  SurveyResponseReference: ").Append(SurveyResponseReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  NoResponse: ").Append(NoResponse).Append("\n");
            sb.Append("  SurveyQuestionMatrixElementResponses: ").Append(SurveyQuestionMatrixElementResponses).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Comment, length must be less than 1024.", new [] { "Comment" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiSurveyQuestionResponse" />
    /// </summary>
    public class EdFiSurveyQuestionResponseJsonConverter : JsonConverter<EdFiSurveyQuestionResponse>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiSurveyQuestionResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiSurveyQuestionResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiSurveyQuestionReference?> surveyQuestionReference = default;
            Option<EdFiSurveyResponseReference?> surveyResponseReference = default;
            Option<string?> id = default;
            Option<string?> comment = default;
            Option<bool?> noResponse = default;
            Option<List<EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse>?> surveyQuestionMatrixElementResponses = default;
            Option<List<EdFiSurveyQuestionResponseValue>?> values = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "surveyQuestionReference":
                            surveyQuestionReference = new Option<EdFiSurveyQuestionReference?>(JsonSerializer.Deserialize<EdFiSurveyQuestionReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "surveyResponseReference":
                            surveyResponseReference = new Option<EdFiSurveyResponseReference?>(JsonSerializer.Deserialize<EdFiSurveyResponseReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "noResponse":
                            noResponse = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "surveyQuestionMatrixElementResponses":
                            surveyQuestionMatrixElementResponses = new Option<List<EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse>?>(JsonSerializer.Deserialize<List<EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "values":
                            values = new Option<List<EdFiSurveyQuestionResponseValue>?>(JsonSerializer.Deserialize<List<EdFiSurveyQuestionResponseValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!surveyQuestionReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveyQuestionResponse.", nameof(surveyQuestionReference));

            if (!surveyResponseReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveyQuestionResponse.", nameof(surveyResponseReference));

            if (surveyQuestionReference.IsSet && surveyQuestionReference.Value == null)
                throw new ArgumentNullException(nameof(surveyQuestionReference), "Property is not nullable for class EdFiSurveyQuestionResponse.");

            if (surveyResponseReference.IsSet && surveyResponseReference.Value == null)
                throw new ArgumentNullException(nameof(surveyResponseReference), "Property is not nullable for class EdFiSurveyQuestionResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiSurveyQuestionResponse.");

            if (surveyQuestionMatrixElementResponses.IsSet && surveyQuestionMatrixElementResponses.Value == null)
                throw new ArgumentNullException(nameof(surveyQuestionMatrixElementResponses), "Property is not nullable for class EdFiSurveyQuestionResponse.");

            if (values.IsSet && values.Value == null)
                throw new ArgumentNullException(nameof(values), "Property is not nullable for class EdFiSurveyQuestionResponse.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiSurveyQuestionResponse.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiSurveyQuestionResponse.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiSurveyQuestionResponse.");

            return new EdFiSurveyQuestionResponse(surveyQuestionReference.Value!, surveyResponseReference.Value!, id, comment, noResponse, surveyQuestionMatrixElementResponses, values, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiSurveyQuestionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurveyQuestionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiSurveyQuestionResponse edFiSurveyQuestionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiSurveyQuestionResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiSurveyQuestionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurveyQuestionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiSurveyQuestionResponse edFiSurveyQuestionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiSurveyQuestionResponse.SurveyQuestionReference == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestionResponse.SurveyQuestionReference), "Property is required for class EdFiSurveyQuestionResponse.");

            if (edFiSurveyQuestionResponse.SurveyResponseReference == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestionResponse.SurveyResponseReference), "Property is required for class EdFiSurveyQuestionResponse.");

            if (edFiSurveyQuestionResponse.IdOption.IsSet && edFiSurveyQuestionResponse.Id == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestionResponse.Id), "Property is required for class EdFiSurveyQuestionResponse.");

            if (edFiSurveyQuestionResponse.SurveyQuestionMatrixElementResponsesOption.IsSet && edFiSurveyQuestionResponse.SurveyQuestionMatrixElementResponses == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestionResponse.SurveyQuestionMatrixElementResponses), "Property is required for class EdFiSurveyQuestionResponse.");

            if (edFiSurveyQuestionResponse.ValuesOption.IsSet && edFiSurveyQuestionResponse.Values == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestionResponse.Values), "Property is required for class EdFiSurveyQuestionResponse.");

            if (edFiSurveyQuestionResponse.EtagOption.IsSet && edFiSurveyQuestionResponse.Etag == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestionResponse.Etag), "Property is required for class EdFiSurveyQuestionResponse.");

            if (edFiSurveyQuestionResponse.ExtOption.IsSet && edFiSurveyQuestionResponse.Ext == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestionResponse.Ext), "Property is required for class EdFiSurveyQuestionResponse.");

            writer.WritePropertyName("surveyQuestionReference");
            JsonSerializer.Serialize(writer, edFiSurveyQuestionResponse.SurveyQuestionReference, jsonSerializerOptions);
            writer.WritePropertyName("surveyResponseReference");
            JsonSerializer.Serialize(writer, edFiSurveyQuestionResponse.SurveyResponseReference, jsonSerializerOptions);
            if (edFiSurveyQuestionResponse.IdOption.IsSet)
                writer.WriteString("id", edFiSurveyQuestionResponse.Id);

            if (edFiSurveyQuestionResponse.CommentOption.IsSet)
                if (edFiSurveyQuestionResponse.CommentOption.Value != null)
                    writer.WriteString("comment", edFiSurveyQuestionResponse.Comment);
                else
                    writer.WriteNull("comment");

            if (edFiSurveyQuestionResponse.NoResponseOption.IsSet)
                if (edFiSurveyQuestionResponse.NoResponseOption.Value != null)
                    writer.WriteBoolean("noResponse", edFiSurveyQuestionResponse.NoResponseOption.Value!.Value);
                else
                    writer.WriteNull("noResponse");

            if (edFiSurveyQuestionResponse.SurveyQuestionMatrixElementResponsesOption.IsSet)
            {
                writer.WritePropertyName("surveyQuestionMatrixElementResponses");
                JsonSerializer.Serialize(writer, edFiSurveyQuestionResponse.SurveyQuestionMatrixElementResponses, jsonSerializerOptions);
            }
            if (edFiSurveyQuestionResponse.ValuesOption.IsSet)
            {
                writer.WritePropertyName("values");
                JsonSerializer.Serialize(writer, edFiSurveyQuestionResponse.Values, jsonSerializerOptions);
            }
            if (edFiSurveyQuestionResponse.EtagOption.IsSet)
                writer.WriteString("_etag", edFiSurveyQuestionResponse.Etag);

            if (edFiSurveyQuestionResponse.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiSurveyQuestionResponse.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiSurveyQuestionResponse.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiSurveyQuestionResponse.Ext, jsonSerializerOptions);
            }
        }
    }
}
