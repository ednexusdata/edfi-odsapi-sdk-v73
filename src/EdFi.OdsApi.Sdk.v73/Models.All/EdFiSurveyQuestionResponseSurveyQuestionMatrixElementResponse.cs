// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse
    /// </summary>
    public partial class EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse" /> class.
        /// </summary>
        /// <param name="matrixElement">For matrix questions, the text identifying each row of the matrix.</param>
        /// <param name="maxNumericResponse">The maximum score response to the question.</param>
        /// <param name="minNumericResponse">The minimum score response to the question.</param>
        /// <param name="noResponse">Indicates there was no response to the question.</param>
        /// <param name="numericResponse">The numeric response to the question.</param>
        /// <param name="textResponse">The text response(s) for the question.</param>
        /// <param name="ext">Extensions to the SurveyQuestionResponseSurveyQuestionMatrixElementResponse entity.</param>
        [JsonConstructor]
        public EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse(string matrixElement, Option<int?> maxNumericResponse = default, Option<int?> minNumericResponse = default, Option<bool?> noResponse = default, Option<int?> numericResponse = default, Option<string?> textResponse = default, Option<Object?> ext = default)
        {
            MatrixElement = matrixElement;
            MaxNumericResponseOption = maxNumericResponse;
            MinNumericResponseOption = minNumericResponse;
            NoResponseOption = noResponse;
            NumericResponseOption = numericResponse;
            TextResponseOption = textResponse;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// For matrix questions, the text identifying each row of the matrix.
        /// </summary>
        /// <value>For matrix questions, the text identifying each row of the matrix.</value>
        [JsonPropertyName("matrixElement")]
        public string MatrixElement { get; set; }

        /// <summary>
        /// Used to track the state of MaxNumericResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxNumericResponseOption { get; private set; }

        /// <summary>
        /// The maximum score response to the question.
        /// </summary>
        /// <value>The maximum score response to the question.</value>
        [JsonPropertyName("maxNumericResponse")]
        public int? MaxNumericResponse { get { return this.MaxNumericResponseOption; } set { this.MaxNumericResponseOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinNumericResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MinNumericResponseOption { get; private set; }

        /// <summary>
        /// The minimum score response to the question.
        /// </summary>
        /// <value>The minimum score response to the question.</value>
        [JsonPropertyName("minNumericResponse")]
        public int? MinNumericResponse { get { return this.MinNumericResponseOption; } set { this.MinNumericResponseOption = new(value); } }

        /// <summary>
        /// Used to track the state of NoResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NoResponseOption { get; private set; }

        /// <summary>
        /// Indicates there was no response to the question.
        /// </summary>
        /// <value>Indicates there was no response to the question.</value>
        [JsonPropertyName("noResponse")]
        public bool? NoResponse { get { return this.NoResponseOption; } set { this.NoResponseOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumericResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumericResponseOption { get; private set; }

        /// <summary>
        /// The numeric response to the question.
        /// </summary>
        /// <value>The numeric response to the question.</value>
        [JsonPropertyName("numericResponse")]
        public int? NumericResponse { get { return this.NumericResponseOption; } set { this.NumericResponseOption = new(value); } }

        /// <summary>
        /// Used to track the state of TextResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextResponseOption { get; private set; }

        /// <summary>
        /// The text response(s) for the question.
        /// </summary>
        /// <value>The text response(s) for the question.</value>
        [JsonPropertyName("textResponse")]
        public string? TextResponse { get { return this.TextResponseOption; } set { this.TextResponseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the SurveyQuestionResponseSurveyQuestionMatrixElementResponse entity.
        /// </summary>
        /// <value>Extensions to the SurveyQuestionResponseSurveyQuestionMatrixElementResponse entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse {\n");
            sb.Append("  MatrixElement: ").Append(MatrixElement).Append("\n");
            sb.Append("  MaxNumericResponse: ").Append(MaxNumericResponse).Append("\n");
            sb.Append("  MinNumericResponse: ").Append(MinNumericResponse).Append("\n");
            sb.Append("  NoResponse: ").Append(NoResponse).Append("\n");
            sb.Append("  NumericResponse: ").Append(NumericResponse).Append("\n");
            sb.Append("  TextResponse: ").Append(TextResponse).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MatrixElement (string) maxLength
            if (this.MatrixElement != null && this.MatrixElement.Length > 255)
            {
                yield return new ValidationResult("Invalid value for MatrixElement, length must be less than 255.", new [] { "MatrixElement" });
            }

            // NumericResponse (int) maximum
            if (this.NumericResponseOption.IsSet && this.NumericResponseOption.Value > (int)100)
            {
                yield return new ValidationResult("Invalid value for NumericResponse, must be a value less than or equal to 100.", new [] { "NumericResponse" });
            }

            // NumericResponse (int) minimum
            if (this.NumericResponseOption.IsSet && this.NumericResponseOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for NumericResponse, must be a value greater than or equal to 0.", new [] { "NumericResponse" });
            }

            // TextResponse (string) maxLength
            if (this.TextResponse != null && this.TextResponse.Length > 2048)
            {
                yield return new ValidationResult("Invalid value for TextResponse, length must be less than 2048.", new [] { "TextResponse" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse" />
    /// </summary>
    public class EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponseJsonConverter : JsonConverter<EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> matrixElement = default;
            Option<int?> maxNumericResponse = default;
            Option<int?> minNumericResponse = default;
            Option<bool?> noResponse = default;
            Option<int?> numericResponse = default;
            Option<string?> textResponse = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "matrixElement":
                            matrixElement = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "maxNumericResponse":
                            maxNumericResponse = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "minNumericResponse":
                            minNumericResponse = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "noResponse":
                            noResponse = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "numericResponse":
                            numericResponse = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "textResponse":
                            textResponse = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!matrixElement.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.", nameof(matrixElement));

            if (matrixElement.IsSet && matrixElement.Value == null)
                throw new ArgumentNullException(nameof(matrixElement), "Property is not nullable for class EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.");

            return new EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse(matrixElement.Value!, maxNumericResponse, minNumericResponse, noResponse, numericResponse, textResponse, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.MatrixElement == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.MatrixElement), "Property is required for class EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.");

            if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.ExtOption.IsSet && edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.Ext == null)
                throw new ArgumentNullException(nameof(edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.Ext), "Property is required for class EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.");

            writer.WriteString("matrixElement", edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.MatrixElement);

            if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.MaxNumericResponseOption.IsSet)
                if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.MaxNumericResponseOption.Value != null)
                    writer.WriteNumber("maxNumericResponse", edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.MaxNumericResponseOption.Value!.Value);
                else
                    writer.WriteNull("maxNumericResponse");

            if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.MinNumericResponseOption.IsSet)
                if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.MinNumericResponseOption.Value != null)
                    writer.WriteNumber("minNumericResponse", edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.MinNumericResponseOption.Value!.Value);
                else
                    writer.WriteNull("minNumericResponse");

            if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.NoResponseOption.IsSet)
                if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.NoResponseOption.Value != null)
                    writer.WriteBoolean("noResponse", edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.NoResponseOption.Value!.Value);
                else
                    writer.WriteNull("noResponse");

            if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.NumericResponseOption.IsSet)
                if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.NumericResponseOption.Value != null)
                    writer.WriteNumber("numericResponse", edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.NumericResponseOption.Value!.Value);
                else
                    writer.WriteNull("numericResponse");

            if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.TextResponseOption.IsSet)
                if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.TextResponseOption.Value != null)
                    writer.WriteString("textResponse", edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.TextResponse);
                else
                    writer.WriteNull("textResponse");

            if (edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse.Ext, jsonSerializerOptions);
            }
        }
    }
}
