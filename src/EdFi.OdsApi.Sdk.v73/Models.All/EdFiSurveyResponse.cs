// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiSurveyResponse
    /// </summary>
    public partial class EdFiSurveyResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveyResponse" /> class.
        /// </summary>
        /// <param name="surveyResponseIdentifier">The identifier of the survey typically from the survey application.</param>
        /// <param name="surveyReference">surveyReference</param>
        /// <param name="responseDate">Date of the survey response.</param>
        /// <param name="id">id</param>
        /// <param name="contactReference">contactReference</param>
        /// <param name="staffReference">staffReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="electronicMailAddress">Email address of the respondent.</param>
        /// <param name="fullName">Full name of the respondent.</param>
        /// <param name="location">Location of the respondent, often a city, district, or school.</param>
        /// <param name="responseTime">The amount of time in seconds it took for the respondent to complete the survey.</param>
        /// <param name="surveyLevels">An unordered collection of surveyResponseSurveyLevels. Provides information about the respondents of a survey and how they can be grouped together.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the SurveyResponse entity.</param>
        [JsonConstructor]
        public EdFiSurveyResponse(string surveyResponseIdentifier, EdFiSurveyReference surveyReference, DateOnly responseDate, Option<string?> id = default, Option<EdFiContactReference?> contactReference = default, Option<EdFiStaffReference?> staffReference = default, Option<EdFiStudentReference?> studentReference = default, Option<string?> electronicMailAddress = default, Option<string?> fullName = default, Option<string?> location = default, Option<int?> responseTime = default, Option<List<EdFiSurveyResponseSurveyLevel>?> surveyLevels = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            SurveyResponseIdentifier = surveyResponseIdentifier;
            SurveyReference = surveyReference;
            ResponseDate = responseDate;
            IdOption = id;
            ContactReferenceOption = contactReference;
            StaffReferenceOption = staffReference;
            StudentReferenceOption = studentReference;
            ElectronicMailAddressOption = electronicMailAddress;
            FullNameOption = fullName;
            LocationOption = location;
            ResponseTimeOption = responseTime;
            SurveyLevelsOption = surveyLevels;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The identifier of the survey typically from the survey application.
        /// </summary>
        /// <value>The identifier of the survey typically from the survey application.</value>
        [JsonPropertyName("surveyResponseIdentifier")]
        public string SurveyResponseIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets SurveyReference
        /// </summary>
        [JsonPropertyName("surveyReference")]
        public EdFiSurveyReference SurveyReference { get; set; }

        /// <summary>
        /// Date of the survey response.
        /// </summary>
        /// <value>Date of the survey response.</value>
        [JsonPropertyName("responseDate")]
        public DateOnly ResponseDate { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiContactReference?> ContactReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContactReference
        /// </summary>
        [JsonPropertyName("contactReference")]
        public EdFiContactReference? ContactReference { get { return this.ContactReferenceOption; } set { this.ContactReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of StaffReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiStaffReference?> StaffReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [JsonPropertyName("staffReference")]
        public EdFiStaffReference? StaffReference { get { return this.StaffReferenceOption; } set { this.StaffReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiStudentReference?> StudentReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference? StudentReference { get { return this.StudentReferenceOption; } set { this.StudentReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ElectronicMailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ElectronicMailAddressOption { get; private set; }

        /// <summary>
        /// Email address of the respondent.
        /// </summary>
        /// <value>Email address of the respondent.</value>
        [JsonPropertyName("electronicMailAddress")]
        public string? ElectronicMailAddress { get { return this.ElectronicMailAddressOption; } set { this.ElectronicMailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FullNameOption { get; private set; }

        /// <summary>
        /// Full name of the respondent.
        /// </summary>
        /// <value>Full name of the respondent.</value>
        [JsonPropertyName("fullName")]
        public string? FullName { get { return this.FullNameOption; } set { this.FullNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Location of the respondent, often a city, district, or school.
        /// </summary>
        /// <value>Location of the respondent, often a city, district, or school.</value>
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResponseTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ResponseTimeOption { get; private set; }

        /// <summary>
        /// The amount of time in seconds it took for the respondent to complete the survey.
        /// </summary>
        /// <value>The amount of time in seconds it took for the respondent to complete the survey.</value>
        [JsonPropertyName("responseTime")]
        public int? ResponseTime { get { return this.ResponseTimeOption; } set { this.ResponseTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SurveyLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiSurveyResponseSurveyLevel>?> SurveyLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of surveyResponseSurveyLevels. Provides information about the respondents of a survey and how they can be grouped together.
        /// </summary>
        /// <value>An unordered collection of surveyResponseSurveyLevels. Provides information about the respondents of a survey and how they can be grouped together.</value>
        [JsonPropertyName("surveyLevels")]
        public List<EdFiSurveyResponseSurveyLevel>? SurveyLevels { get { return this.SurveyLevelsOption; } set { this.SurveyLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the SurveyResponse entity.
        /// </summary>
        /// <value>Extensions to the SurveyResponse entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveyResponse {\n");
            sb.Append("  SurveyResponseIdentifier: ").Append(SurveyResponseIdentifier).Append("\n");
            sb.Append("  SurveyReference: ").Append(SurveyReference).Append("\n");
            sb.Append("  ResponseDate: ").Append(ResponseDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContactReference: ").Append(ContactReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  ElectronicMailAddress: ").Append(ElectronicMailAddress).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  ResponseTime: ").Append(ResponseTime).Append("\n");
            sb.Append("  SurveyLevels: ").Append(SurveyLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SurveyResponseIdentifier (string) maxLength
            if (this.SurveyResponseIdentifier != null && this.SurveyResponseIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SurveyResponseIdentifier, length must be less than 60.", new [] { "SurveyResponseIdentifier" });
            }

            // ElectronicMailAddress (string) maxLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length > 128)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be less than 128.", new [] { "ElectronicMailAddress" });
            }

            // ElectronicMailAddress (string) minLength
            if (this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length < 7)
            {
                yield return new ValidationResult("Invalid value for ElectronicMailAddress, length must be greater than 7.", new [] { "ElectronicMailAddress" });
            }

            // FullName (string) maxLength
            if (this.FullName != null && this.FullName.Length > 80)
            {
                yield return new ValidationResult("Invalid value for FullName, length must be less than 80.", new [] { "FullName" });
            }

            // Location (string) maxLength
            if (this.Location != null && this.Location.Length > 75)
            {
                yield return new ValidationResult("Invalid value for Location, length must be less than 75.", new [] { "Location" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiSurveyResponse" />
    /// </summary>
    public class EdFiSurveyResponseJsonConverter : JsonConverter<EdFiSurveyResponse>
    {
        /// <summary>
        /// The format to use to serialize ResponseDate
        /// </summary>
        public static string ResponseDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiSurveyResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiSurveyResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> surveyResponseIdentifier = default;
            Option<EdFiSurveyReference?> surveyReference = default;
            Option<DateOnly?> responseDate = default;
            Option<string?> id = default;
            Option<EdFiContactReference?> contactReference = default;
            Option<EdFiStaffReference?> staffReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> electronicMailAddress = default;
            Option<string?> fullName = default;
            Option<string?> location = default;
            Option<int?> responseTime = default;
            Option<List<EdFiSurveyResponseSurveyLevel>?> surveyLevels = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "surveyResponseIdentifier":
                            surveyResponseIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "surveyReference":
                            surveyReference = new Option<EdFiSurveyReference?>(JsonSerializer.Deserialize<EdFiSurveyReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "responseDate":
                            responseDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contactReference":
                            contactReference = new Option<EdFiContactReference?>(JsonSerializer.Deserialize<EdFiContactReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "staffReference":
                            staffReference = new Option<EdFiStaffReference?>(JsonSerializer.Deserialize<EdFiStaffReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "electronicMailAddress":
                            electronicMailAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fullName":
                            fullName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "responseTime":
                            responseTime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "surveyLevels":
                            surveyLevels = new Option<List<EdFiSurveyResponseSurveyLevel>?>(JsonSerializer.Deserialize<List<EdFiSurveyResponseSurveyLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!surveyResponseIdentifier.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveyResponse.", nameof(surveyResponseIdentifier));

            if (!surveyReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveyResponse.", nameof(surveyReference));

            if (!responseDate.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveyResponse.", nameof(responseDate));

            if (surveyResponseIdentifier.IsSet && surveyResponseIdentifier.Value == null)
                throw new ArgumentNullException(nameof(surveyResponseIdentifier), "Property is not nullable for class EdFiSurveyResponse.");

            if (surveyReference.IsSet && surveyReference.Value == null)
                throw new ArgumentNullException(nameof(surveyReference), "Property is not nullable for class EdFiSurveyResponse.");

            if (responseDate.IsSet && responseDate.Value == null)
                throw new ArgumentNullException(nameof(responseDate), "Property is not nullable for class EdFiSurveyResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiSurveyResponse.");

            if (contactReference.IsSet && contactReference.Value == null)
                throw new ArgumentNullException(nameof(contactReference), "Property is not nullable for class EdFiSurveyResponse.");

            if (staffReference.IsSet && staffReference.Value == null)
                throw new ArgumentNullException(nameof(staffReference), "Property is not nullable for class EdFiSurveyResponse.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiSurveyResponse.");

            if (surveyLevels.IsSet && surveyLevels.Value == null)
                throw new ArgumentNullException(nameof(surveyLevels), "Property is not nullable for class EdFiSurveyResponse.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiSurveyResponse.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiSurveyResponse.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiSurveyResponse.");

            return new EdFiSurveyResponse(surveyResponseIdentifier.Value!, surveyReference.Value!, responseDate.Value!.Value!, id, contactReference, staffReference, studentReference, electronicMailAddress, fullName, location, responseTime, surveyLevels, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiSurveyResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurveyResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiSurveyResponse edFiSurveyResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiSurveyResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiSurveyResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurveyResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiSurveyResponse edFiSurveyResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiSurveyResponse.SurveyResponseIdentifier == null)
                throw new ArgumentNullException(nameof(edFiSurveyResponse.SurveyResponseIdentifier), "Property is required for class EdFiSurveyResponse.");

            if (edFiSurveyResponse.SurveyReference == null)
                throw new ArgumentNullException(nameof(edFiSurveyResponse.SurveyReference), "Property is required for class EdFiSurveyResponse.");

            if (edFiSurveyResponse.IdOption.IsSet && edFiSurveyResponse.Id == null)
                throw new ArgumentNullException(nameof(edFiSurveyResponse.Id), "Property is required for class EdFiSurveyResponse.");

            if (edFiSurveyResponse.ContactReferenceOption.IsSet && edFiSurveyResponse.ContactReference == null)
                throw new ArgumentNullException(nameof(edFiSurveyResponse.ContactReference), "Property is required for class EdFiSurveyResponse.");

            if (edFiSurveyResponse.StaffReferenceOption.IsSet && edFiSurveyResponse.StaffReference == null)
                throw new ArgumentNullException(nameof(edFiSurveyResponse.StaffReference), "Property is required for class EdFiSurveyResponse.");

            if (edFiSurveyResponse.StudentReferenceOption.IsSet && edFiSurveyResponse.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiSurveyResponse.StudentReference), "Property is required for class EdFiSurveyResponse.");

            if (edFiSurveyResponse.SurveyLevelsOption.IsSet && edFiSurveyResponse.SurveyLevels == null)
                throw new ArgumentNullException(nameof(edFiSurveyResponse.SurveyLevels), "Property is required for class EdFiSurveyResponse.");

            if (edFiSurveyResponse.EtagOption.IsSet && edFiSurveyResponse.Etag == null)
                throw new ArgumentNullException(nameof(edFiSurveyResponse.Etag), "Property is required for class EdFiSurveyResponse.");

            if (edFiSurveyResponse.ExtOption.IsSet && edFiSurveyResponse.Ext == null)
                throw new ArgumentNullException(nameof(edFiSurveyResponse.Ext), "Property is required for class EdFiSurveyResponse.");

            writer.WriteString("surveyResponseIdentifier", edFiSurveyResponse.SurveyResponseIdentifier);

            writer.WritePropertyName("surveyReference");
            JsonSerializer.Serialize(writer, edFiSurveyResponse.SurveyReference, jsonSerializerOptions);
            writer.WriteString("responseDate", edFiSurveyResponse.ResponseDate.ToString(ResponseDateFormat));

            if (edFiSurveyResponse.IdOption.IsSet)
                writer.WriteString("id", edFiSurveyResponse.Id);

            if (edFiSurveyResponse.ContactReferenceOption.IsSet)
            {
                writer.WritePropertyName("contactReference");
                JsonSerializer.Serialize(writer, edFiSurveyResponse.ContactReference, jsonSerializerOptions);
            }
            if (edFiSurveyResponse.StaffReferenceOption.IsSet)
            {
                writer.WritePropertyName("staffReference");
                JsonSerializer.Serialize(writer, edFiSurveyResponse.StaffReference, jsonSerializerOptions);
            }
            if (edFiSurveyResponse.StudentReferenceOption.IsSet)
            {
                writer.WritePropertyName("studentReference");
                JsonSerializer.Serialize(writer, edFiSurveyResponse.StudentReference, jsonSerializerOptions);
            }
            if (edFiSurveyResponse.ElectronicMailAddressOption.IsSet)
                if (edFiSurveyResponse.ElectronicMailAddressOption.Value != null)
                    writer.WriteString("electronicMailAddress", edFiSurveyResponse.ElectronicMailAddress);
                else
                    writer.WriteNull("electronicMailAddress");

            if (edFiSurveyResponse.FullNameOption.IsSet)
                if (edFiSurveyResponse.FullNameOption.Value != null)
                    writer.WriteString("fullName", edFiSurveyResponse.FullName);
                else
                    writer.WriteNull("fullName");

            if (edFiSurveyResponse.LocationOption.IsSet)
                if (edFiSurveyResponse.LocationOption.Value != null)
                    writer.WriteString("location", edFiSurveyResponse.Location);
                else
                    writer.WriteNull("location");

            if (edFiSurveyResponse.ResponseTimeOption.IsSet)
                if (edFiSurveyResponse.ResponseTimeOption.Value != null)
                    writer.WriteNumber("responseTime", edFiSurveyResponse.ResponseTimeOption.Value!.Value);
                else
                    writer.WriteNull("responseTime");

            if (edFiSurveyResponse.SurveyLevelsOption.IsSet)
            {
                writer.WritePropertyName("surveyLevels");
                JsonSerializer.Serialize(writer, edFiSurveyResponse.SurveyLevels, jsonSerializerOptions);
            }
            if (edFiSurveyResponse.EtagOption.IsSet)
                writer.WriteString("_etag", edFiSurveyResponse.Etag);

            if (edFiSurveyResponse.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiSurveyResponse.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiSurveyResponse.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiSurveyResponse.Ext, jsonSerializerOptions);
            }
        }
    }
}
