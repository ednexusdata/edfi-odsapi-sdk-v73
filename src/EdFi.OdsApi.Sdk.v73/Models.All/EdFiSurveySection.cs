// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// EdFiSurveySection
    /// </summary>
    public partial class EdFiSurveySection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiSurveySection" /> class.
        /// </summary>
        /// <param name="surveySectionTitle">The title or label for the survey section.</param>
        /// <param name="surveyReference">surveyReference</param>
        /// <param name="id">id</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="lastModifiedDate">The date and time the resource was last modified.</param>
        /// <param name="ext">Extensions to the SurveySection entity.</param>
        [JsonConstructor]
        public EdFiSurveySection(string surveySectionTitle, EdFiSurveyReference surveyReference, Option<string?> id = default, Option<string?> etag = default, Option<DateTime?> lastModifiedDate = default, Option<Object?> ext = default)
        {
            SurveySectionTitle = surveySectionTitle;
            SurveyReference = surveyReference;
            IdOption = id;
            EtagOption = etag;
            LastModifiedDateOption = lastModifiedDate;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The title or label for the survey section.
        /// </summary>
        /// <value>The title or label for the survey section.</value>
        [JsonPropertyName("surveySectionTitle")]
        public string SurveySectionTitle { get; set; }

        /// <summary>
        /// Gets or Sets SurveyReference
        /// </summary>
        [JsonPropertyName("surveyReference")]
        public EdFiSurveyReference SurveyReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModifiedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModifiedDateOption { get; private set; }

        /// <summary>
        /// The date and time the resource was last modified.
        /// </summary>
        /// <value>The date and time the resource was last modified.</value>
        [JsonPropertyName("_lastModifiedDate")]
        public DateTime? LastModifiedDate { get { return this.LastModifiedDateOption; } set { this.LastModifiedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the SurveySection entity.
        /// </summary>
        /// <value>Extensions to the SurveySection entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiSurveySection {\n");
            sb.Append("  SurveySectionTitle: ").Append(SurveySectionTitle).Append("\n");
            sb.Append("  SurveyReference: ").Append(SurveyReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SurveySectionTitle (string) maxLength
            if (this.SurveySectionTitle != null && this.SurveySectionTitle.Length > 255)
            {
                yield return new ValidationResult("Invalid value for SurveySectionTitle, length must be less than 255.", new [] { "SurveySectionTitle" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiSurveySection" />
    /// </summary>
    public class EdFiSurveySectionJsonConverter : JsonConverter<EdFiSurveySection>
    {
        /// <summary>
        /// The format to use to serialize LastModifiedDate
        /// </summary>
        public static string LastModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EdFiSurveySection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiSurveySection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> surveySectionTitle = default;
            Option<EdFiSurveyReference?> surveyReference = default;
            Option<string?> id = default;
            Option<string?> etag = default;
            Option<DateTime?> lastModifiedDate = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "surveySectionTitle":
                            surveySectionTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "surveyReference":
                            surveyReference = new Option<EdFiSurveyReference?>(JsonSerializer.Deserialize<EdFiSurveyReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_lastModifiedDate":
                            lastModifiedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!surveySectionTitle.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveySection.", nameof(surveySectionTitle));

            if (!surveyReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiSurveySection.", nameof(surveyReference));

            if (surveySectionTitle.IsSet && surveySectionTitle.Value == null)
                throw new ArgumentNullException(nameof(surveySectionTitle), "Property is not nullable for class EdFiSurveySection.");

            if (surveyReference.IsSet && surveyReference.Value == null)
                throw new ArgumentNullException(nameof(surveyReference), "Property is not nullable for class EdFiSurveySection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiSurveySection.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiSurveySection.");

            if (lastModifiedDate.IsSet && lastModifiedDate.Value == null)
                throw new ArgumentNullException(nameof(lastModifiedDate), "Property is not nullable for class EdFiSurveySection.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiSurveySection.");

            return new EdFiSurveySection(surveySectionTitle.Value!, surveyReference.Value!, id, etag, lastModifiedDate, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiSurveySection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurveySection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiSurveySection edFiSurveySection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiSurveySection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiSurveySection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiSurveySection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiSurveySection edFiSurveySection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiSurveySection.SurveySectionTitle == null)
                throw new ArgumentNullException(nameof(edFiSurveySection.SurveySectionTitle), "Property is required for class EdFiSurveySection.");

            if (edFiSurveySection.SurveyReference == null)
                throw new ArgumentNullException(nameof(edFiSurveySection.SurveyReference), "Property is required for class EdFiSurveySection.");

            if (edFiSurveySection.IdOption.IsSet && edFiSurveySection.Id == null)
                throw new ArgumentNullException(nameof(edFiSurveySection.Id), "Property is required for class EdFiSurveySection.");

            if (edFiSurveySection.EtagOption.IsSet && edFiSurveySection.Etag == null)
                throw new ArgumentNullException(nameof(edFiSurveySection.Etag), "Property is required for class EdFiSurveySection.");

            if (edFiSurveySection.ExtOption.IsSet && edFiSurveySection.Ext == null)
                throw new ArgumentNullException(nameof(edFiSurveySection.Ext), "Property is required for class EdFiSurveySection.");

            writer.WriteString("surveySectionTitle", edFiSurveySection.SurveySectionTitle);

            writer.WritePropertyName("surveyReference");
            JsonSerializer.Serialize(writer, edFiSurveySection.SurveyReference, jsonSerializerOptions);
            if (edFiSurveySection.IdOption.IsSet)
                writer.WriteString("id", edFiSurveySection.Id);

            if (edFiSurveySection.EtagOption.IsSet)
                writer.WriteString("_etag", edFiSurveySection.Etag);

            if (edFiSurveySection.LastModifiedDateOption.IsSet)
                writer.WriteString("_lastModifiedDate", edFiSurveySection.LastModifiedDateOption.Value!.Value.ToString(LastModifiedDateFormat));

            if (edFiSurveySection.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiSurveySection.Ext, jsonSerializerOptions);
            }
        }
    }
}
