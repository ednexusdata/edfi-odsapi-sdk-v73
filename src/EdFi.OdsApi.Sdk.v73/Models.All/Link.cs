// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// Link
    /// </summary>
    public partial class Link : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Link" /> class.
        /// </summary>
        /// <param name="rel">Describes the nature of the relationship to the referenced resource.</param>
        /// <param name="href">The URL to the related resource.</param>
        [JsonConstructor]
        public Link(Option<string?> rel = default, Option<string?> href = default)
        {
            RelOption = rel;
            HrefOption = href;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Rel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RelOption { get; private set; }

        /// <summary>
        /// Describes the nature of the relationship to the referenced resource.
        /// </summary>
        /// <value>Describes the nature of the relationship to the referenced resource.</value>
        [JsonPropertyName("rel")]
        public string? Rel { get { return this.RelOption; } set { this.RelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Href
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HrefOption { get; private set; }

        /// <summary>
        /// The URL to the related resource.
        /// </summary>
        /// <value>The URL to the related resource.</value>
        [JsonPropertyName("href")]
        public string? Href { get { return this.HrefOption; } set { this.HrefOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Link {\n");
            sb.Append("  Rel: ").Append(Rel).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Link" />
    /// </summary>
    public class LinkJsonConverter : JsonConverter<Link>
    {
        /// <summary>
        /// Deserializes json to <see cref="Link" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Link Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> rel = default;
            Option<string?> href = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "rel":
                            rel = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "href":
                            href = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (rel.IsSet && rel.Value == null)
                throw new ArgumentNullException(nameof(rel), "Property is not nullable for class Link.");

            if (href.IsSet && href.Value == null)
                throw new ArgumentNullException(nameof(href), "Property is not nullable for class Link.");

            return new Link(rel, href);
        }

        /// <summary>
        /// Serializes a <see cref="Link" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="link"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Link link, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, link, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Link" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="link"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Link link, JsonSerializerOptions jsonSerializerOptions)
        {
            if (link.RelOption.IsSet && link.Rel == null)
                throw new ArgumentNullException(nameof(link.Rel), "Property is required for class Link.");

            if (link.HrefOption.IsSet && link.Href == null)
                throw new ArgumentNullException(nameof(link.Href), "Property is required for class Link.");

            if (link.RelOption.IsSet)
                writer.WriteString("rel", link.Rel);

            if (link.HrefOption.IsSet)
                writer.WriteString("href", link.Href);
        }
    }
}
