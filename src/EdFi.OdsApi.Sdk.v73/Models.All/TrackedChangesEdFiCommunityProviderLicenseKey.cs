// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiCommunityProviderLicenseKey
    /// </summary>
    public partial class TrackedChangesEdFiCommunityProviderLicenseKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiCommunityProviderLicenseKey" /> class.
        /// </summary>
        /// <param name="licenseIdentifier">The unique identifier issued by the licensing organization.</param>
        /// <param name="licensingOrganization">The organization issuing the license.</param>
        /// <param name="communityProviderId">The identifier assigned to a community provider. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</param>
        [JsonConstructor]
        public TrackedChangesEdFiCommunityProviderLicenseKey(Option<string?> licenseIdentifier = default, Option<string?> licensingOrganization = default, Option<long?> communityProviderId = default)
        {
            LicenseIdentifierOption = licenseIdentifier;
            LicensingOrganizationOption = licensingOrganization;
            CommunityProviderIdOption = communityProviderId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of LicenseIdentifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LicenseIdentifierOption { get; private set; }

        /// <summary>
        /// The unique identifier issued by the licensing organization.
        /// </summary>
        /// <value>The unique identifier issued by the licensing organization.</value>
        [JsonPropertyName("licenseIdentifier")]
        public string? LicenseIdentifier { get { return this.LicenseIdentifierOption; } set { this.LicenseIdentifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of LicensingOrganization
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LicensingOrganizationOption { get; private set; }

        /// <summary>
        /// The organization issuing the license.
        /// </summary>
        /// <value>The organization issuing the license.</value>
        [JsonPropertyName("licensingOrganization")]
        public string? LicensingOrganization { get { return this.LicensingOrganizationOption; } set { this.LicensingOrganizationOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommunityProviderId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CommunityProviderIdOption { get; private set; }

        /// <summary>
        /// The identifier assigned to a community provider. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.
        /// </summary>
        /// <value>The identifier assigned to a community provider. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</value>
        [JsonPropertyName("communityProviderId")]
        public long? CommunityProviderId { get { return this.CommunityProviderIdOption; } set { this.CommunityProviderIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiCommunityProviderLicenseKey {\n");
            sb.Append("  LicenseIdentifier: ").Append(LicenseIdentifier).Append("\n");
            sb.Append("  LicensingOrganization: ").Append(LicensingOrganization).Append("\n");
            sb.Append("  CommunityProviderId: ").Append(CommunityProviderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LicenseIdentifier (string) maxLength
            if (this.LicenseIdentifier != null && this.LicenseIdentifier.Length > 36)
            {
                yield return new ValidationResult("Invalid value for LicenseIdentifier, length must be less than 36.", new [] { "LicenseIdentifier" });
            }

            // LicensingOrganization (string) maxLength
            if (this.LicensingOrganization != null && this.LicensingOrganization.Length > 75)
            {
                yield return new ValidationResult("Invalid value for LicensingOrganization, length must be less than 75.", new [] { "LicensingOrganization" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiCommunityProviderLicenseKey" />
    /// </summary>
    public class TrackedChangesEdFiCommunityProviderLicenseKeyJsonConverter : JsonConverter<TrackedChangesEdFiCommunityProviderLicenseKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiCommunityProviderLicenseKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiCommunityProviderLicenseKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> licenseIdentifier = default;
            Option<string?> licensingOrganization = default;
            Option<long?> communityProviderId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "licenseIdentifier":
                            licenseIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "licensingOrganization":
                            licensingOrganization = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "communityProviderId":
                            communityProviderId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (licenseIdentifier.IsSet && licenseIdentifier.Value == null)
                throw new ArgumentNullException(nameof(licenseIdentifier), "Property is not nullable for class TrackedChangesEdFiCommunityProviderLicenseKey.");

            if (licensingOrganization.IsSet && licensingOrganization.Value == null)
                throw new ArgumentNullException(nameof(licensingOrganization), "Property is not nullable for class TrackedChangesEdFiCommunityProviderLicenseKey.");

            if (communityProviderId.IsSet && communityProviderId.Value == null)
                throw new ArgumentNullException(nameof(communityProviderId), "Property is not nullable for class TrackedChangesEdFiCommunityProviderLicenseKey.");

            return new TrackedChangesEdFiCommunityProviderLicenseKey(licenseIdentifier, licensingOrganization, communityProviderId);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiCommunityProviderLicenseKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiCommunityProviderLicenseKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiCommunityProviderLicenseKey trackedChangesEdFiCommunityProviderLicenseKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiCommunityProviderLicenseKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiCommunityProviderLicenseKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiCommunityProviderLicenseKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiCommunityProviderLicenseKey trackedChangesEdFiCommunityProviderLicenseKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiCommunityProviderLicenseKey.LicenseIdentifierOption.IsSet && trackedChangesEdFiCommunityProviderLicenseKey.LicenseIdentifier == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiCommunityProviderLicenseKey.LicenseIdentifier), "Property is required for class TrackedChangesEdFiCommunityProviderLicenseKey.");

            if (trackedChangesEdFiCommunityProviderLicenseKey.LicensingOrganizationOption.IsSet && trackedChangesEdFiCommunityProviderLicenseKey.LicensingOrganization == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiCommunityProviderLicenseKey.LicensingOrganization), "Property is required for class TrackedChangesEdFiCommunityProviderLicenseKey.");

            if (trackedChangesEdFiCommunityProviderLicenseKey.LicenseIdentifierOption.IsSet)
                writer.WriteString("licenseIdentifier", trackedChangesEdFiCommunityProviderLicenseKey.LicenseIdentifier);

            if (trackedChangesEdFiCommunityProviderLicenseKey.LicensingOrganizationOption.IsSet)
                writer.WriteString("licensingOrganization", trackedChangesEdFiCommunityProviderLicenseKey.LicensingOrganization);

            if (trackedChangesEdFiCommunityProviderLicenseKey.CommunityProviderIdOption.IsSet)
                writer.WriteNumber("communityProviderId", trackedChangesEdFiCommunityProviderLicenseKey.CommunityProviderIdOption.Value!.Value);
        }
    }
}
