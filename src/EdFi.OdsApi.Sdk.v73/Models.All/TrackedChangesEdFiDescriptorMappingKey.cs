// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiDescriptorMappingKey
    /// </summary>
    public partial class TrackedChangesEdFiDescriptorMappingKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiDescriptorMappingKey" /> class.
        /// </summary>
        /// <param name="mappedNamespace">The namespace of the descriptor value to which the from descriptor value is mapped to.</param>
        /// <param name="mappedValue">The descriptor value to which the from descriptor value is being mapped to.</param>
        /// <param name="namespace">The namespace of the descriptor value that is being mapped to another value.</param>
        /// <param name="value">The descriptor value that is being mapped to another value.</param>
        [JsonConstructor]
        public TrackedChangesEdFiDescriptorMappingKey(Option<string?> mappedNamespace = default, Option<string?> mappedValue = default, Option<string?> @namespace = default, Option<string?> value = default)
        {
            MappedNamespaceOption = mappedNamespace;
            MappedValueOption = mappedValue;
            NamespaceOption = @namespace;
            ValueOption = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MappedNamespace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MappedNamespaceOption { get; private set; }

        /// <summary>
        /// The namespace of the descriptor value to which the from descriptor value is mapped to.
        /// </summary>
        /// <value>The namespace of the descriptor value to which the from descriptor value is mapped to.</value>
        [JsonPropertyName("mappedNamespace")]
        public string? MappedNamespace { get { return this.MappedNamespaceOption; } set { this.MappedNamespaceOption = new(value); } }

        /// <summary>
        /// Used to track the state of MappedValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MappedValueOption { get; private set; }

        /// <summary>
        /// The descriptor value to which the from descriptor value is being mapped to.
        /// </summary>
        /// <value>The descriptor value to which the from descriptor value is being mapped to.</value>
        [JsonPropertyName("mappedValue")]
        public string? MappedValue { get { return this.MappedValueOption; } set { this.MappedValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of Namespace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NamespaceOption { get; private set; }

        /// <summary>
        /// The namespace of the descriptor value that is being mapped to another value.
        /// </summary>
        /// <value>The namespace of the descriptor value that is being mapped to another value.</value>
        [JsonPropertyName("namespace")]
        public string? Namespace { get { return this.NamespaceOption; } set { this.NamespaceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// The descriptor value that is being mapped to another value.
        /// </summary>
        /// <value>The descriptor value that is being mapped to another value.</value>
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiDescriptorMappingKey {\n");
            sb.Append("  MappedNamespace: ").Append(MappedNamespace).Append("\n");
            sb.Append("  MappedValue: ").Append(MappedValue).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MappedNamespace (string) maxLength
            if (this.MappedNamespace != null && this.MappedNamespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for MappedNamespace, length must be less than 255.", new [] { "MappedNamespace" });
            }

            // MappedNamespace (string) minLength
            if (this.MappedNamespace != null && this.MappedNamespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for MappedNamespace, length must be greater than 5.", new [] { "MappedNamespace" });
            }

            // MappedValue (string) maxLength
            if (this.MappedValue != null && this.MappedValue.Length > 50)
            {
                yield return new ValidationResult("Invalid value for MappedValue, length must be less than 50.", new [] { "MappedValue" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // Value (string) maxLength
            if (this.Value != null && this.Value.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Value, length must be less than 50.", new [] { "Value" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiDescriptorMappingKey" />
    /// </summary>
    public class TrackedChangesEdFiDescriptorMappingKeyJsonConverter : JsonConverter<TrackedChangesEdFiDescriptorMappingKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiDescriptorMappingKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiDescriptorMappingKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> mappedNamespace = default;
            Option<string?> mappedValue = default;
            Option<string?> varNamespace = default;
            Option<string?> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "mappedNamespace":
                            mappedNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mappedValue":
                            mappedValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (mappedNamespace.IsSet && mappedNamespace.Value == null)
                throw new ArgumentNullException(nameof(mappedNamespace), "Property is not nullable for class TrackedChangesEdFiDescriptorMappingKey.");

            if (mappedValue.IsSet && mappedValue.Value == null)
                throw new ArgumentNullException(nameof(mappedValue), "Property is not nullable for class TrackedChangesEdFiDescriptorMappingKey.");

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class TrackedChangesEdFiDescriptorMappingKey.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class TrackedChangesEdFiDescriptorMappingKey.");

            return new TrackedChangesEdFiDescriptorMappingKey(mappedNamespace, mappedValue, varNamespace, value);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiDescriptorMappingKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiDescriptorMappingKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiDescriptorMappingKey trackedChangesEdFiDescriptorMappingKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiDescriptorMappingKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiDescriptorMappingKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiDescriptorMappingKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiDescriptorMappingKey trackedChangesEdFiDescriptorMappingKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiDescriptorMappingKey.MappedNamespaceOption.IsSet && trackedChangesEdFiDescriptorMappingKey.MappedNamespace == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiDescriptorMappingKey.MappedNamespace), "Property is required for class TrackedChangesEdFiDescriptorMappingKey.");

            if (trackedChangesEdFiDescriptorMappingKey.MappedValueOption.IsSet && trackedChangesEdFiDescriptorMappingKey.MappedValue == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiDescriptorMappingKey.MappedValue), "Property is required for class TrackedChangesEdFiDescriptorMappingKey.");

            if (trackedChangesEdFiDescriptorMappingKey.NamespaceOption.IsSet && trackedChangesEdFiDescriptorMappingKey.Namespace == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiDescriptorMappingKey.Namespace), "Property is required for class TrackedChangesEdFiDescriptorMappingKey.");

            if (trackedChangesEdFiDescriptorMappingKey.ValueOption.IsSet && trackedChangesEdFiDescriptorMappingKey.Value == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiDescriptorMappingKey.Value), "Property is required for class TrackedChangesEdFiDescriptorMappingKey.");

            if (trackedChangesEdFiDescriptorMappingKey.MappedNamespaceOption.IsSet)
                writer.WriteString("mappedNamespace", trackedChangesEdFiDescriptorMappingKey.MappedNamespace);

            if (trackedChangesEdFiDescriptorMappingKey.MappedValueOption.IsSet)
                writer.WriteString("mappedValue", trackedChangesEdFiDescriptorMappingKey.MappedValue);

            if (trackedChangesEdFiDescriptorMappingKey.NamespaceOption.IsSet)
                writer.WriteString("namespace", trackedChangesEdFiDescriptorMappingKey.Namespace);

            if (trackedChangesEdFiDescriptorMappingKey.ValueOption.IsSet)
                writer.WriteString("value", trackedChangesEdFiDescriptorMappingKey.Value);
        }
    }
}
