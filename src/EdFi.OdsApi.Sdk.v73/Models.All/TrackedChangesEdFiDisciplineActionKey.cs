// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiDisciplineActionKey
    /// </summary>
    public partial class TrackedChangesEdFiDisciplineActionKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiDisciplineActionKey" /> class.
        /// </summary>
        /// <param name="disciplineActionIdentifier">Identifier assigned by the education organization to the discipline action.</param>
        /// <param name="disciplineDate">The date of the discipline action.</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student.</param>
        [JsonConstructor]
        public TrackedChangesEdFiDisciplineActionKey(Option<string?> disciplineActionIdentifier = default, Option<DateOnly?> disciplineDate = default, Option<string?> studentUniqueId = default)
        {
            DisciplineActionIdentifierOption = disciplineActionIdentifier;
            DisciplineDateOption = disciplineDate;
            StudentUniqueIdOption = studentUniqueId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DisciplineActionIdentifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisciplineActionIdentifierOption { get; private set; }

        /// <summary>
        /// Identifier assigned by the education organization to the discipline action.
        /// </summary>
        /// <value>Identifier assigned by the education organization to the discipline action.</value>
        [JsonPropertyName("disciplineActionIdentifier")]
        public string? DisciplineActionIdentifier { get { return this.DisciplineActionIdentifierOption; } set { this.DisciplineActionIdentifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisciplineDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DisciplineDateOption { get; private set; }

        /// <summary>
        /// The date of the discipline action.
        /// </summary>
        /// <value>The date of the discipline action.</value>
        [JsonPropertyName("disciplineDate")]
        public DateOnly? DisciplineDate { get { return this.DisciplineDateOption; } set { this.DisciplineDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentUniqueId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudentUniqueIdOption { get; private set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [JsonPropertyName("studentUniqueId")]
        public string? StudentUniqueId { get { return this.StudentUniqueIdOption; } set { this.StudentUniqueIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiDisciplineActionKey {\n");
            sb.Append("  DisciplineActionIdentifier: ").Append(DisciplineActionIdentifier).Append("\n");
            sb.Append("  DisciplineDate: ").Append(DisciplineDate).Append("\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisciplineActionIdentifier (string) maxLength
            if (this.DisciplineActionIdentifier != null && this.DisciplineActionIdentifier.Length > 36)
            {
                yield return new ValidationResult("Invalid value for DisciplineActionIdentifier, length must be less than 36.", new [] { "DisciplineActionIdentifier" });
            }

            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiDisciplineActionKey" />
    /// </summary>
    public class TrackedChangesEdFiDisciplineActionKeyJsonConverter : JsonConverter<TrackedChangesEdFiDisciplineActionKey>
    {
        /// <summary>
        /// The format to use to serialize DisciplineDate
        /// </summary>
        public static string DisciplineDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiDisciplineActionKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiDisciplineActionKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> disciplineActionIdentifier = default;
            Option<DateOnly?> disciplineDate = default;
            Option<string?> studentUniqueId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "disciplineActionIdentifier":
                            disciplineActionIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "disciplineDate":
                            disciplineDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "studentUniqueId":
                            studentUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (disciplineActionIdentifier.IsSet && disciplineActionIdentifier.Value == null)
                throw new ArgumentNullException(nameof(disciplineActionIdentifier), "Property is not nullable for class TrackedChangesEdFiDisciplineActionKey.");

            if (disciplineDate.IsSet && disciplineDate.Value == null)
                throw new ArgumentNullException(nameof(disciplineDate), "Property is not nullable for class TrackedChangesEdFiDisciplineActionKey.");

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId), "Property is not nullable for class TrackedChangesEdFiDisciplineActionKey.");

            return new TrackedChangesEdFiDisciplineActionKey(disciplineActionIdentifier, disciplineDate, studentUniqueId);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiDisciplineActionKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiDisciplineActionKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiDisciplineActionKey trackedChangesEdFiDisciplineActionKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiDisciplineActionKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiDisciplineActionKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiDisciplineActionKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiDisciplineActionKey trackedChangesEdFiDisciplineActionKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiDisciplineActionKey.DisciplineActionIdentifierOption.IsSet && trackedChangesEdFiDisciplineActionKey.DisciplineActionIdentifier == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiDisciplineActionKey.DisciplineActionIdentifier), "Property is required for class TrackedChangesEdFiDisciplineActionKey.");

            if (trackedChangesEdFiDisciplineActionKey.StudentUniqueIdOption.IsSet && trackedChangesEdFiDisciplineActionKey.StudentUniqueId == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiDisciplineActionKey.StudentUniqueId), "Property is required for class TrackedChangesEdFiDisciplineActionKey.");

            if (trackedChangesEdFiDisciplineActionKey.DisciplineActionIdentifierOption.IsSet)
                writer.WriteString("disciplineActionIdentifier", trackedChangesEdFiDisciplineActionKey.DisciplineActionIdentifier);

            if (trackedChangesEdFiDisciplineActionKey.DisciplineDateOption.IsSet)
                writer.WriteString("disciplineDate", trackedChangesEdFiDisciplineActionKey.DisciplineDateOption.Value!.Value.ToString(DisciplineDateFormat));

            if (trackedChangesEdFiDisciplineActionKey.StudentUniqueIdOption.IsSet)
                writer.WriteString("studentUniqueId", trackedChangesEdFiDisciplineActionKey.StudentUniqueId);
        }
    }
}
