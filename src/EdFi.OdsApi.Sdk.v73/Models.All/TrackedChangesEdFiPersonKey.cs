// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiPersonKey
    /// </summary>
    public partial class TrackedChangesEdFiPersonKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiPersonKey" /> class.
        /// </summary>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person.</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person.</param>
        [JsonConstructor]
        public TrackedChangesEdFiPersonKey(Option<string?> sourceSystemDescriptor = default, Option<string?> personId = default)
        {
            SourceSystemDescriptorOption = sourceSystemDescriptor;
            PersonIdOption = personId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SourceSystemDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceSystemDescriptorOption { get; private set; }

        /// <summary>
        /// This descriptor defines the originating record source system for the person.
        /// </summary>
        /// <value>This descriptor defines the originating record source system for the person.</value>
        [JsonPropertyName("sourceSystemDescriptor")]
        public string? SourceSystemDescriptor { get { return this.SourceSystemDescriptorOption; } set { this.SourceSystemDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PersonIdOption { get; private set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a person.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a person.</value>
        [JsonPropertyName("personId")]
        public string? PersonId { get { return this.PersonIdOption; } set { this.PersonIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiPersonKey {\n");
            sb.Append("  SourceSystemDescriptor: ").Append(SourceSystemDescriptor).Append("\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SourceSystemDescriptor (string) maxLength
            if (this.SourceSystemDescriptor != null && this.SourceSystemDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SourceSystemDescriptor, length must be less than 306.", new [] { "SourceSystemDescriptor" });
            }

            // PersonId (string) maxLength
            if (this.PersonId != null && this.PersonId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for PersonId, length must be less than 32.", new [] { "PersonId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiPersonKey" />
    /// </summary>
    public class TrackedChangesEdFiPersonKeyJsonConverter : JsonConverter<TrackedChangesEdFiPersonKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiPersonKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiPersonKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> sourceSystemDescriptor = default;
            Option<string?> personId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sourceSystemDescriptor":
                            sourceSystemDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "personId":
                            personId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (sourceSystemDescriptor.IsSet && sourceSystemDescriptor.Value == null)
                throw new ArgumentNullException(nameof(sourceSystemDescriptor), "Property is not nullable for class TrackedChangesEdFiPersonKey.");

            if (personId.IsSet && personId.Value == null)
                throw new ArgumentNullException(nameof(personId), "Property is not nullable for class TrackedChangesEdFiPersonKey.");

            return new TrackedChangesEdFiPersonKey(sourceSystemDescriptor, personId);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiPersonKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiPersonKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiPersonKey trackedChangesEdFiPersonKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiPersonKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiPersonKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiPersonKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiPersonKey trackedChangesEdFiPersonKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiPersonKey.SourceSystemDescriptorOption.IsSet && trackedChangesEdFiPersonKey.SourceSystemDescriptor == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiPersonKey.SourceSystemDescriptor), "Property is required for class TrackedChangesEdFiPersonKey.");

            if (trackedChangesEdFiPersonKey.PersonIdOption.IsSet && trackedChangesEdFiPersonKey.PersonId == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiPersonKey.PersonId), "Property is required for class TrackedChangesEdFiPersonKey.");

            if (trackedChangesEdFiPersonKey.SourceSystemDescriptorOption.IsSet)
                writer.WriteString("sourceSystemDescriptor", trackedChangesEdFiPersonKey.SourceSystemDescriptor);

            if (trackedChangesEdFiPersonKey.PersonIdOption.IsSet)
                writer.WriteString("personId", trackedChangesEdFiPersonKey.PersonId);
        }
    }
}
