// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiPostSecondaryEventKey
    /// </summary>
    public partial class TrackedChangesEdFiPostSecondaryEventKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiPostSecondaryEventKey" /> class.
        /// </summary>
        /// <param name="postSecondaryEventCategoryDescriptor">The post secondary event that is logged.</param>
        /// <param name="eventDate">The date the event occurred or was recorded.</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student.</param>
        [JsonConstructor]
        public TrackedChangesEdFiPostSecondaryEventKey(Option<string?> postSecondaryEventCategoryDescriptor = default, Option<DateOnly?> eventDate = default, Option<string?> studentUniqueId = default)
        {
            PostSecondaryEventCategoryDescriptorOption = postSecondaryEventCategoryDescriptor;
            EventDateOption = eventDate;
            StudentUniqueIdOption = studentUniqueId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PostSecondaryEventCategoryDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostSecondaryEventCategoryDescriptorOption { get; private set; }

        /// <summary>
        /// The post secondary event that is logged.
        /// </summary>
        /// <value>The post secondary event that is logged.</value>
        [JsonPropertyName("postSecondaryEventCategoryDescriptor")]
        public string? PostSecondaryEventCategoryDescriptor { get { return this.PostSecondaryEventCategoryDescriptorOption; } set { this.PostSecondaryEventCategoryDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EventDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EventDateOption { get; private set; }

        /// <summary>
        /// The date the event occurred or was recorded.
        /// </summary>
        /// <value>The date the event occurred or was recorded.</value>
        [JsonPropertyName("eventDate")]
        public DateOnly? EventDate { get { return this.EventDateOption; } set { this.EventDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentUniqueId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudentUniqueIdOption { get; private set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [JsonPropertyName("studentUniqueId")]
        public string? StudentUniqueId { get { return this.StudentUniqueIdOption; } set { this.StudentUniqueIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiPostSecondaryEventKey {\n");
            sb.Append("  PostSecondaryEventCategoryDescriptor: ").Append(PostSecondaryEventCategoryDescriptor).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PostSecondaryEventCategoryDescriptor (string) maxLength
            if (this.PostSecondaryEventCategoryDescriptor != null && this.PostSecondaryEventCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PostSecondaryEventCategoryDescriptor, length must be less than 306.", new [] { "PostSecondaryEventCategoryDescriptor" });
            }

            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiPostSecondaryEventKey" />
    /// </summary>
    public class TrackedChangesEdFiPostSecondaryEventKeyJsonConverter : JsonConverter<TrackedChangesEdFiPostSecondaryEventKey>
    {
        /// <summary>
        /// The format to use to serialize EventDate
        /// </summary>
        public static string EventDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiPostSecondaryEventKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiPostSecondaryEventKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> postSecondaryEventCategoryDescriptor = default;
            Option<DateOnly?> eventDate = default;
            Option<string?> studentUniqueId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "postSecondaryEventCategoryDescriptor":
                            postSecondaryEventCategoryDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eventDate":
                            eventDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "studentUniqueId":
                            studentUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (postSecondaryEventCategoryDescriptor.IsSet && postSecondaryEventCategoryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(postSecondaryEventCategoryDescriptor), "Property is not nullable for class TrackedChangesEdFiPostSecondaryEventKey.");

            if (eventDate.IsSet && eventDate.Value == null)
                throw new ArgumentNullException(nameof(eventDate), "Property is not nullable for class TrackedChangesEdFiPostSecondaryEventKey.");

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId), "Property is not nullable for class TrackedChangesEdFiPostSecondaryEventKey.");

            return new TrackedChangesEdFiPostSecondaryEventKey(postSecondaryEventCategoryDescriptor, eventDate, studentUniqueId);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiPostSecondaryEventKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiPostSecondaryEventKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiPostSecondaryEventKey trackedChangesEdFiPostSecondaryEventKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiPostSecondaryEventKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiPostSecondaryEventKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiPostSecondaryEventKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiPostSecondaryEventKey trackedChangesEdFiPostSecondaryEventKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiPostSecondaryEventKey.PostSecondaryEventCategoryDescriptorOption.IsSet && trackedChangesEdFiPostSecondaryEventKey.PostSecondaryEventCategoryDescriptor == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiPostSecondaryEventKey.PostSecondaryEventCategoryDescriptor), "Property is required for class TrackedChangesEdFiPostSecondaryEventKey.");

            if (trackedChangesEdFiPostSecondaryEventKey.StudentUniqueIdOption.IsSet && trackedChangesEdFiPostSecondaryEventKey.StudentUniqueId == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiPostSecondaryEventKey.StudentUniqueId), "Property is required for class TrackedChangesEdFiPostSecondaryEventKey.");

            if (trackedChangesEdFiPostSecondaryEventKey.PostSecondaryEventCategoryDescriptorOption.IsSet)
                writer.WriteString("postSecondaryEventCategoryDescriptor", trackedChangesEdFiPostSecondaryEventKey.PostSecondaryEventCategoryDescriptor);

            if (trackedChangesEdFiPostSecondaryEventKey.EventDateOption.IsSet)
                writer.WriteString("eventDate", trackedChangesEdFiPostSecondaryEventKey.EventDateOption.Value!.Value.ToString(EventDateFormat));

            if (trackedChangesEdFiPostSecondaryEventKey.StudentUniqueIdOption.IsSet)
                writer.WriteString("studentUniqueId", trackedChangesEdFiPostSecondaryEventKey.StudentUniqueId);
        }
    }
}
