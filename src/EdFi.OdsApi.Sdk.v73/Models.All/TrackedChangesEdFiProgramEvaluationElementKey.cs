// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiProgramEvaluationElementKey
    /// </summary>
    public partial class TrackedChangesEdFiProgramEvaluationElementKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiProgramEvaluationElementKey" /> class.
        /// </summary>
        /// <param name="programEvaluationElementTitle">The name or title of the program evaluation element.</param>
        /// <param name="programEducationOrganizationId">The identifier assigned to an education organization.</param>
        /// <param name="programEvaluationPeriodDescriptor">The name of the period for the program evaluation.</param>
        /// <param name="programEvaluationTitle">An assigned unique identifier for the student program evaluation.</param>
        /// <param name="programEvaluationTypeDescriptor">The type of program evaluation conducted.</param>
        /// <param name="programName">The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.</param>
        /// <param name="programTypeDescriptor">The type of program.</param>
        [JsonConstructor]
        public TrackedChangesEdFiProgramEvaluationElementKey(Option<string?> programEvaluationElementTitle = default, Option<long?> programEducationOrganizationId = default, Option<string?> programEvaluationPeriodDescriptor = default, Option<string?> programEvaluationTitle = default, Option<string?> programEvaluationTypeDescriptor = default, Option<string?> programName = default, Option<string?> programTypeDescriptor = default)
        {
            ProgramEvaluationElementTitleOption = programEvaluationElementTitle;
            ProgramEducationOrganizationIdOption = programEducationOrganizationId;
            ProgramEvaluationPeriodDescriptorOption = programEvaluationPeriodDescriptor;
            ProgramEvaluationTitleOption = programEvaluationTitle;
            ProgramEvaluationTypeDescriptorOption = programEvaluationTypeDescriptor;
            ProgramNameOption = programName;
            ProgramTypeDescriptorOption = programTypeDescriptor;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ProgramEvaluationElementTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgramEvaluationElementTitleOption { get; private set; }

        /// <summary>
        /// The name or title of the program evaluation element.
        /// </summary>
        /// <value>The name or title of the program evaluation element.</value>
        [JsonPropertyName("programEvaluationElementTitle")]
        public string? ProgramEvaluationElementTitle { get { return this.ProgramEvaluationElementTitleOption; } set { this.ProgramEvaluationElementTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramEducationOrganizationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProgramEducationOrganizationIdOption { get; private set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [JsonPropertyName("programEducationOrganizationId")]
        public long? ProgramEducationOrganizationId { get { return this.ProgramEducationOrganizationIdOption; } set { this.ProgramEducationOrganizationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramEvaluationPeriodDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgramEvaluationPeriodDescriptorOption { get; private set; }

        /// <summary>
        /// The name of the period for the program evaluation.
        /// </summary>
        /// <value>The name of the period for the program evaluation.</value>
        [JsonPropertyName("programEvaluationPeriodDescriptor")]
        public string? ProgramEvaluationPeriodDescriptor { get { return this.ProgramEvaluationPeriodDescriptorOption; } set { this.ProgramEvaluationPeriodDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramEvaluationTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgramEvaluationTitleOption { get; private set; }

        /// <summary>
        /// An assigned unique identifier for the student program evaluation.
        /// </summary>
        /// <value>An assigned unique identifier for the student program evaluation.</value>
        [JsonPropertyName("programEvaluationTitle")]
        public string? ProgramEvaluationTitle { get { return this.ProgramEvaluationTitleOption; } set { this.ProgramEvaluationTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramEvaluationTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgramEvaluationTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of program evaluation conducted.
        /// </summary>
        /// <value>The type of program evaluation conducted.</value>
        [JsonPropertyName("programEvaluationTypeDescriptor")]
        public string? ProgramEvaluationTypeDescriptor { get { return this.ProgramEvaluationTypeDescriptorOption; } set { this.ProgramEvaluationTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgramNameOption { get; private set; }

        /// <summary>
        /// The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        /// <value>The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.</value>
        [JsonPropertyName("programName")]
        public string? ProgramName { get { return this.ProgramNameOption; } set { this.ProgramNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProgramTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of program.
        /// </summary>
        /// <value>The type of program.</value>
        [JsonPropertyName("programTypeDescriptor")]
        public string? ProgramTypeDescriptor { get { return this.ProgramTypeDescriptorOption; } set { this.ProgramTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiProgramEvaluationElementKey {\n");
            sb.Append("  ProgramEvaluationElementTitle: ").Append(ProgramEvaluationElementTitle).Append("\n");
            sb.Append("  ProgramEducationOrganizationId: ").Append(ProgramEducationOrganizationId).Append("\n");
            sb.Append("  ProgramEvaluationPeriodDescriptor: ").Append(ProgramEvaluationPeriodDescriptor).Append("\n");
            sb.Append("  ProgramEvaluationTitle: ").Append(ProgramEvaluationTitle).Append("\n");
            sb.Append("  ProgramEvaluationTypeDescriptor: ").Append(ProgramEvaluationTypeDescriptor).Append("\n");
            sb.Append("  ProgramName: ").Append(ProgramName).Append("\n");
            sb.Append("  ProgramTypeDescriptor: ").Append(ProgramTypeDescriptor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramEvaluationElementTitle (string) maxLength
            if (this.ProgramEvaluationElementTitle != null && this.ProgramEvaluationElementTitle.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationElementTitle, length must be less than 50.", new [] { "ProgramEvaluationElementTitle" });
            }

            // ProgramEvaluationPeriodDescriptor (string) maxLength
            if (this.ProgramEvaluationPeriodDescriptor != null && this.ProgramEvaluationPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationPeriodDescriptor, length must be less than 306.", new [] { "ProgramEvaluationPeriodDescriptor" });
            }

            // ProgramEvaluationTitle (string) maxLength
            if (this.ProgramEvaluationTitle != null && this.ProgramEvaluationTitle.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationTitle, length must be less than 50.", new [] { "ProgramEvaluationTitle" });
            }

            // ProgramEvaluationTypeDescriptor (string) maxLength
            if (this.ProgramEvaluationTypeDescriptor != null && this.ProgramEvaluationTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramEvaluationTypeDescriptor, length must be less than 306.", new [] { "ProgramEvaluationTypeDescriptor" });
            }

            // ProgramName (string) maxLength
            if (this.ProgramName != null && this.ProgramName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ProgramName, length must be less than 60.", new [] { "ProgramName" });
            }

            // ProgramTypeDescriptor (string) maxLength
            if (this.ProgramTypeDescriptor != null && this.ProgramTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ProgramTypeDescriptor, length must be less than 306.", new [] { "ProgramTypeDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiProgramEvaluationElementKey" />
    /// </summary>
    public class TrackedChangesEdFiProgramEvaluationElementKeyJsonConverter : JsonConverter<TrackedChangesEdFiProgramEvaluationElementKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiProgramEvaluationElementKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiProgramEvaluationElementKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> programEvaluationElementTitle = default;
            Option<long?> programEducationOrganizationId = default;
            Option<string?> programEvaluationPeriodDescriptor = default;
            Option<string?> programEvaluationTitle = default;
            Option<string?> programEvaluationTypeDescriptor = default;
            Option<string?> programName = default;
            Option<string?> programTypeDescriptor = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "programEvaluationElementTitle":
                            programEvaluationElementTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programEducationOrganizationId":
                            programEducationOrganizationId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "programEvaluationPeriodDescriptor":
                            programEvaluationPeriodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programEvaluationTitle":
                            programEvaluationTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programEvaluationTypeDescriptor":
                            programEvaluationTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programName":
                            programName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "programTypeDescriptor":
                            programTypeDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (programEvaluationElementTitle.IsSet && programEvaluationElementTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationElementTitle), "Property is not nullable for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (programEducationOrganizationId.IsSet && programEducationOrganizationId.Value == null)
                throw new ArgumentNullException(nameof(programEducationOrganizationId), "Property is not nullable for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (programEvaluationPeriodDescriptor.IsSet && programEvaluationPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationPeriodDescriptor), "Property is not nullable for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (programEvaluationTitle.IsSet && programEvaluationTitle.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTitle), "Property is not nullable for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (programEvaluationTypeDescriptor.IsSet && programEvaluationTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programEvaluationTypeDescriptor), "Property is not nullable for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (programName.IsSet && programName.Value == null)
                throw new ArgumentNullException(nameof(programName), "Property is not nullable for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (programTypeDescriptor.IsSet && programTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(programTypeDescriptor), "Property is not nullable for class TrackedChangesEdFiProgramEvaluationElementKey.");

            return new TrackedChangesEdFiProgramEvaluationElementKey(programEvaluationElementTitle, programEducationOrganizationId, programEvaluationPeriodDescriptor, programEvaluationTitle, programEvaluationTypeDescriptor, programName, programTypeDescriptor);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiProgramEvaluationElementKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiProgramEvaluationElementKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiProgramEvaluationElementKey trackedChangesEdFiProgramEvaluationElementKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiProgramEvaluationElementKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiProgramEvaluationElementKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiProgramEvaluationElementKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiProgramEvaluationElementKey trackedChangesEdFiProgramEvaluationElementKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationElementTitleOption.IsSet && trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationElementTitle == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationElementTitle), "Property is required for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationPeriodDescriptorOption.IsSet && trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationPeriodDescriptor == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationPeriodDescriptor), "Property is required for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationTitleOption.IsSet && trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationTitle == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationTitle), "Property is required for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationTypeDescriptorOption.IsSet && trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationTypeDescriptor == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationTypeDescriptor), "Property is required for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramNameOption.IsSet && trackedChangesEdFiProgramEvaluationElementKey.ProgramName == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiProgramEvaluationElementKey.ProgramName), "Property is required for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramTypeDescriptorOption.IsSet && trackedChangesEdFiProgramEvaluationElementKey.ProgramTypeDescriptor == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiProgramEvaluationElementKey.ProgramTypeDescriptor), "Property is required for class TrackedChangesEdFiProgramEvaluationElementKey.");

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationElementTitleOption.IsSet)
                writer.WriteString("programEvaluationElementTitle", trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationElementTitle);

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramEducationOrganizationIdOption.IsSet)
                writer.WriteNumber("programEducationOrganizationId", trackedChangesEdFiProgramEvaluationElementKey.ProgramEducationOrganizationIdOption.Value!.Value);

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationPeriodDescriptorOption.IsSet)
                writer.WriteString("programEvaluationPeriodDescriptor", trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationPeriodDescriptor);

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationTitleOption.IsSet)
                writer.WriteString("programEvaluationTitle", trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationTitle);

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationTypeDescriptorOption.IsSet)
                writer.WriteString("programEvaluationTypeDescriptor", trackedChangesEdFiProgramEvaluationElementKey.ProgramEvaluationTypeDescriptor);

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramNameOption.IsSet)
                writer.WriteString("programName", trackedChangesEdFiProgramEvaluationElementKey.ProgramName);

            if (trackedChangesEdFiProgramEvaluationElementKey.ProgramTypeDescriptorOption.IsSet)
                writer.WriteString("programTypeDescriptor", trackedChangesEdFiProgramEvaluationElementKey.ProgramTypeDescriptor);
        }
    }
}
