// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey
    /// </summary>
    public partial class TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey" /> class.
        /// </summary>
        /// <param name="staffClassificationDescriptor">The titles of employment, official status, or rank of education staff.</param>
        /// <param name="beginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization.</param>
        /// <param name="staffUniqueId">A unique alphanumeric code assigned to a staff.</param>
        [JsonConstructor]
        public TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey(Option<string?> staffClassificationDescriptor = default, Option<DateOnly?> beginDate = default, Option<long?> educationOrganizationId = default, Option<string?> staffUniqueId = default)
        {
            StaffClassificationDescriptorOption = staffClassificationDescriptor;
            BeginDateOption = beginDate;
            EducationOrganizationIdOption = educationOrganizationId;
            StaffUniqueIdOption = staffUniqueId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StaffClassificationDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StaffClassificationDescriptorOption { get; private set; }

        /// <summary>
        /// The titles of employment, official status, or rank of education staff.
        /// </summary>
        /// <value>The titles of employment, official status, or rank of education staff.</value>
        [JsonPropertyName("staffClassificationDescriptor")]
        public string? StaffClassificationDescriptor { get { return this.StaffClassificationDescriptorOption; } set { this.StaffClassificationDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of BeginDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> BeginDateOption { get; private set; }

        /// <summary>
        /// Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly? BeginDate { get { return this.BeginDateOption; } set { this.BeginDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationOrganizationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EducationOrganizationIdOption { get; private set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [JsonPropertyName("educationOrganizationId")]
        public long? EducationOrganizationId { get { return this.EducationOrganizationIdOption; } set { this.EducationOrganizationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StaffUniqueId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StaffUniqueIdOption { get; private set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a staff.</value>
        [JsonPropertyName("staffUniqueId")]
        public string? StaffUniqueId { get { return this.StaffUniqueIdOption; } set { this.StaffUniqueIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey {\n");
            sb.Append("  StaffClassificationDescriptor: ").Append(StaffClassificationDescriptor).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  StaffUniqueId: ").Append(StaffUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StaffClassificationDescriptor (string) maxLength
            if (this.StaffClassificationDescriptor != null && this.StaffClassificationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for StaffClassificationDescriptor, length must be less than 306.", new [] { "StaffClassificationDescriptor" });
            }

            // StaffUniqueId (string) maxLength
            if (this.StaffUniqueId != null && this.StaffUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StaffUniqueId, length must be less than 32.", new [] { "StaffUniqueId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey" />
    /// </summary>
    public class TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKeyJsonConverter : JsonConverter<TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> staffClassificationDescriptor = default;
            Option<DateOnly?> beginDate = default;
            Option<long?> educationOrganizationId = default;
            Option<string?> staffUniqueId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "staffClassificationDescriptor":
                            staffClassificationDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationId":
                            educationOrganizationId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "staffUniqueId":
                            staffUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (staffClassificationDescriptor.IsSet && staffClassificationDescriptor.Value == null)
                throw new ArgumentNullException(nameof(staffClassificationDescriptor), "Property is not nullable for class TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.");

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.");

            if (educationOrganizationId.IsSet && educationOrganizationId.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationId), "Property is not nullable for class TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.");

            if (staffUniqueId.IsSet && staffUniqueId.Value == null)
                throw new ArgumentNullException(nameof(staffUniqueId), "Property is not nullable for class TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.");

            return new TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey(staffClassificationDescriptor, beginDate, educationOrganizationId, staffUniqueId);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.StaffClassificationDescriptorOption.IsSet && trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.StaffClassificationDescriptor == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.StaffClassificationDescriptor), "Property is required for class TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.");

            if (trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.StaffUniqueIdOption.IsSet && trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.StaffUniqueId == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.StaffUniqueId), "Property is required for class TrackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.");

            if (trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.StaffClassificationDescriptorOption.IsSet)
                writer.WriteString("staffClassificationDescriptor", trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.StaffClassificationDescriptor);

            if (trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.BeginDateOption.IsSet)
                writer.WriteString("beginDate", trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.BeginDateOption.Value!.Value.ToString(BeginDateFormat));

            if (trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.EducationOrganizationIdOption.IsSet)
                writer.WriteNumber("educationOrganizationId", trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.EducationOrganizationIdOption.Value!.Value);

            if (trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.StaffUniqueIdOption.IsSet)
                writer.WriteString("staffUniqueId", trackedChangesEdFiStaffEducationOrganizationAssignmentAssociationKey.StaffUniqueId);
        }
    }
}
