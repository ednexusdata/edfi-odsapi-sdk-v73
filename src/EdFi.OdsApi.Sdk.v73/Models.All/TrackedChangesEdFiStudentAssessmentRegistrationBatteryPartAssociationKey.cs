// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey
    /// </summary>
    public partial class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey" /> class.
        /// </summary>
        /// <param name="assessmentBatteryPartName">The name of the part of an assessment battery.</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment.</param>
        /// <param name="namespace">Namespace for the assessment.</param>
        /// <param name="administrationIdentifier">The title or name of the assessment in the context of its administration.</param>
        /// <param name="assigningEducationOrganizationId">The identifier assigned to an education organization.</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization.</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student.</param>
        [JsonConstructor]
        public TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey(Option<string?> assessmentBatteryPartName = default, Option<string?> assessmentIdentifier = default, Option<string?> @namespace = default, Option<string?> administrationIdentifier = default, Option<long?> assigningEducationOrganizationId = default, Option<long?> educationOrganizationId = default, Option<string?> studentUniqueId = default)
        {
            AssessmentBatteryPartNameOption = assessmentBatteryPartName;
            AssessmentIdentifierOption = assessmentIdentifier;
            NamespaceOption = @namespace;
            AdministrationIdentifierOption = administrationIdentifier;
            AssigningEducationOrganizationIdOption = assigningEducationOrganizationId;
            EducationOrganizationIdOption = educationOrganizationId;
            StudentUniqueIdOption = studentUniqueId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AssessmentBatteryPartName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssessmentBatteryPartNameOption { get; private set; }

        /// <summary>
        /// The name of the part of an assessment battery.
        /// </summary>
        /// <value>The name of the part of an assessment battery.</value>
        [JsonPropertyName("assessmentBatteryPartName")]
        public string? AssessmentBatteryPartName { get { return this.AssessmentBatteryPartNameOption; } set { this.AssessmentBatteryPartNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssessmentIdentifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssessmentIdentifierOption { get; private set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an assessment.</value>
        [JsonPropertyName("assessmentIdentifier")]
        public string? AssessmentIdentifier { get { return this.AssessmentIdentifierOption; } set { this.AssessmentIdentifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of Namespace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NamespaceOption { get; private set; }

        /// <summary>
        /// Namespace for the assessment.
        /// </summary>
        /// <value>Namespace for the assessment.</value>
        [JsonPropertyName("namespace")]
        public string? Namespace { get { return this.NamespaceOption; } set { this.NamespaceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AdministrationIdentifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AdministrationIdentifierOption { get; private set; }

        /// <summary>
        /// The title or name of the assessment in the context of its administration.
        /// </summary>
        /// <value>The title or name of the assessment in the context of its administration.</value>
        [JsonPropertyName("administrationIdentifier")]
        public string? AdministrationIdentifier { get { return this.AdministrationIdentifierOption; } set { this.AdministrationIdentifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssigningEducationOrganizationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AssigningEducationOrganizationIdOption { get; private set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [JsonPropertyName("assigningEducationOrganizationId")]
        public long? AssigningEducationOrganizationId { get { return this.AssigningEducationOrganizationIdOption; } set { this.AssigningEducationOrganizationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationOrganizationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EducationOrganizationIdOption { get; private set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [JsonPropertyName("educationOrganizationId")]
        public long? EducationOrganizationId { get { return this.EducationOrganizationIdOption; } set { this.EducationOrganizationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentUniqueId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudentUniqueIdOption { get; private set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [JsonPropertyName("studentUniqueId")]
        public string? StudentUniqueId { get { return this.StudentUniqueIdOption; } set { this.StudentUniqueIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey {\n");
            sb.Append("  AssessmentBatteryPartName: ").Append(AssessmentBatteryPartName).Append("\n");
            sb.Append("  AssessmentIdentifier: ").Append(AssessmentIdentifier).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  AdministrationIdentifier: ").Append(AdministrationIdentifier).Append("\n");
            sb.Append("  AssigningEducationOrganizationId: ").Append(AssigningEducationOrganizationId).Append("\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssessmentBatteryPartName (string) maxLength
            if (this.AssessmentBatteryPartName != null && this.AssessmentBatteryPartName.Length > 65)
            {
                yield return new ValidationResult("Invalid value for AssessmentBatteryPartName, length must be less than 65.", new [] { "AssessmentBatteryPartName" });
            }

            // AssessmentIdentifier (string) maxLength
            if (this.AssessmentIdentifier != null && this.AssessmentIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AssessmentIdentifier, length must be less than 60.", new [] { "AssessmentIdentifier" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // AdministrationIdentifier (string) maxLength
            if (this.AdministrationIdentifier != null && this.AdministrationIdentifier.Length > 255)
            {
                yield return new ValidationResult("Invalid value for AdministrationIdentifier, length must be less than 255.", new [] { "AdministrationIdentifier" });
            }

            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey" />
    /// </summary>
    public class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKeyJsonConverter : JsonConverter<TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> assessmentBatteryPartName = default;
            Option<string?> assessmentIdentifier = default;
            Option<string?> varNamespace = default;
            Option<string?> administrationIdentifier = default;
            Option<long?> assigningEducationOrganizationId = default;
            Option<long?> educationOrganizationId = default;
            Option<string?> studentUniqueId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assessmentBatteryPartName":
                            assessmentBatteryPartName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assessmentIdentifier":
                            assessmentIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "administrationIdentifier":
                            administrationIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assigningEducationOrganizationId":
                            assigningEducationOrganizationId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "educationOrganizationId":
                            educationOrganizationId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "studentUniqueId":
                            studentUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (assessmentBatteryPartName.IsSet && assessmentBatteryPartName.Value == null)
                throw new ArgumentNullException(nameof(assessmentBatteryPartName), "Property is not nullable for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            if (assessmentIdentifier.IsSet && assessmentIdentifier.Value == null)
                throw new ArgumentNullException(nameof(assessmentIdentifier), "Property is not nullable for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            if (administrationIdentifier.IsSet && administrationIdentifier.Value == null)
                throw new ArgumentNullException(nameof(administrationIdentifier), "Property is not nullable for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            if (assigningEducationOrganizationId.IsSet && assigningEducationOrganizationId.Value == null)
                throw new ArgumentNullException(nameof(assigningEducationOrganizationId), "Property is not nullable for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            if (educationOrganizationId.IsSet && educationOrganizationId.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationId), "Property is not nullable for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId), "Property is not nullable for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            return new TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey(assessmentBatteryPartName, assessmentIdentifier, varNamespace, administrationIdentifier, assigningEducationOrganizationId, educationOrganizationId, studentUniqueId);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssessmentBatteryPartNameOption.IsSet && trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssessmentBatteryPartName == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssessmentBatteryPartName), "Property is required for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssessmentIdentifierOption.IsSet && trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssessmentIdentifier == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssessmentIdentifier), "Property is required for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.NamespaceOption.IsSet && trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.Namespace == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.Namespace), "Property is required for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AdministrationIdentifierOption.IsSet && trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AdministrationIdentifier == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AdministrationIdentifier), "Property is required for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.StudentUniqueIdOption.IsSet && trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.StudentUniqueId == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.StudentUniqueId), "Property is required for class TrackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.");

            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssessmentBatteryPartNameOption.IsSet)
                writer.WriteString("assessmentBatteryPartName", trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssessmentBatteryPartName);

            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssessmentIdentifierOption.IsSet)
                writer.WriteString("assessmentIdentifier", trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssessmentIdentifier);

            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.NamespaceOption.IsSet)
                writer.WriteString("namespace", trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.Namespace);

            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AdministrationIdentifierOption.IsSet)
                writer.WriteString("administrationIdentifier", trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AdministrationIdentifier);

            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssigningEducationOrganizationIdOption.IsSet)
                writer.WriteNumber("assigningEducationOrganizationId", trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.AssigningEducationOrganizationIdOption.Value!.Value);

            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.EducationOrganizationIdOption.IsSet)
                writer.WriteNumber("educationOrganizationId", trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.EducationOrganizationIdOption.Value!.Value);

            if (trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.StudentUniqueIdOption.IsSet)
                writer.WriteString("studentUniqueId", trackedChangesEdFiStudentAssessmentRegistrationBatteryPartAssociationKey.StudentUniqueId);
        }
    }
}
