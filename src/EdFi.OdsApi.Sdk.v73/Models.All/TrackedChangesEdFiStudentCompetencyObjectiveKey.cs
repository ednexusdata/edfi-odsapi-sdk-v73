// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiStudentCompetencyObjectiveKey
    /// </summary>
    public partial class TrackedChangesEdFiStudentCompetencyObjectiveKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiStudentCompetencyObjectiveKey" /> class.
        /// </summary>
        /// <param name="objectiveEducationOrganizationId">The identifier assigned to an education organization.</param>
        /// <param name="objective">The designated title of the competency objective.</param>
        /// <param name="objectiveGradeLevelDescriptor">The grade level for which the competency objective is targeted.</param>
        /// <param name="gradingPeriodDescriptor">The state&#39;s name of the period for which grades are reported.</param>
        /// <param name="gradingPeriodName">The school&#39;s descriptive name of the grading period.</param>
        /// <param name="gradingPeriodSchoolId">The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</param>
        /// <param name="gradingPeriodSchoolYear">The identifier for the grading period school year.</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student.</param>
        [JsonConstructor]
        public TrackedChangesEdFiStudentCompetencyObjectiveKey(Option<long?> objectiveEducationOrganizationId = default, Option<string?> objective = default, Option<string?> objectiveGradeLevelDescriptor = default, Option<string?> gradingPeriodDescriptor = default, Option<string?> gradingPeriodName = default, Option<long?> gradingPeriodSchoolId = default, Option<int?> gradingPeriodSchoolYear = default, Option<string?> studentUniqueId = default)
        {
            ObjectiveEducationOrganizationIdOption = objectiveEducationOrganizationId;
            ObjectiveOption = objective;
            ObjectiveGradeLevelDescriptorOption = objectiveGradeLevelDescriptor;
            GradingPeriodDescriptorOption = gradingPeriodDescriptor;
            GradingPeriodNameOption = gradingPeriodName;
            GradingPeriodSchoolIdOption = gradingPeriodSchoolId;
            GradingPeriodSchoolYearOption = gradingPeriodSchoolYear;
            StudentUniqueIdOption = studentUniqueId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ObjectiveEducationOrganizationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ObjectiveEducationOrganizationIdOption { get; private set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [JsonPropertyName("objectiveEducationOrganizationId")]
        public long? ObjectiveEducationOrganizationId { get { return this.ObjectiveEducationOrganizationIdOption; } set { this.ObjectiveEducationOrganizationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Objective
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectiveOption { get; private set; }

        /// <summary>
        /// The designated title of the competency objective.
        /// </summary>
        /// <value>The designated title of the competency objective.</value>
        [JsonPropertyName("objective")]
        public string? Objective { get { return this.ObjectiveOption; } set { this.ObjectiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectiveGradeLevelDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectiveGradeLevelDescriptorOption { get; private set; }

        /// <summary>
        /// The grade level for which the competency objective is targeted.
        /// </summary>
        /// <value>The grade level for which the competency objective is targeted.</value>
        [JsonPropertyName("objectiveGradeLevelDescriptor")]
        public string? ObjectiveGradeLevelDescriptor { get { return this.ObjectiveGradeLevelDescriptorOption; } set { this.ObjectiveGradeLevelDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradingPeriodDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GradingPeriodDescriptorOption { get; private set; }

        /// <summary>
        /// The state&#39;s name of the period for which grades are reported.
        /// </summary>
        /// <value>The state&#39;s name of the period for which grades are reported.</value>
        [JsonPropertyName("gradingPeriodDescriptor")]
        public string? GradingPeriodDescriptor { get { return this.GradingPeriodDescriptorOption; } set { this.GradingPeriodDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradingPeriodName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GradingPeriodNameOption { get; private set; }

        /// <summary>
        /// The school&#39;s descriptive name of the grading period.
        /// </summary>
        /// <value>The school&#39;s descriptive name of the grading period.</value>
        [JsonPropertyName("gradingPeriodName")]
        public string? GradingPeriodName { get { return this.GradingPeriodNameOption; } set { this.GradingPeriodNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradingPeriodSchoolId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> GradingPeriodSchoolIdOption { get; private set; }

        /// <summary>
        /// The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.
        /// </summary>
        /// <value>The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.</value>
        [JsonPropertyName("gradingPeriodSchoolId")]
        public long? GradingPeriodSchoolId { get { return this.GradingPeriodSchoolIdOption; } set { this.GradingPeriodSchoolIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradingPeriodSchoolYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GradingPeriodSchoolYearOption { get; private set; }

        /// <summary>
        /// The identifier for the grading period school year.
        /// </summary>
        /// <value>The identifier for the grading period school year.</value>
        [JsonPropertyName("gradingPeriodSchoolYear")]
        public int? GradingPeriodSchoolYear { get { return this.GradingPeriodSchoolYearOption; } set { this.GradingPeriodSchoolYearOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentUniqueId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudentUniqueIdOption { get; private set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [JsonPropertyName("studentUniqueId")]
        public string? StudentUniqueId { get { return this.StudentUniqueIdOption; } set { this.StudentUniqueIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiStudentCompetencyObjectiveKey {\n");
            sb.Append("  ObjectiveEducationOrganizationId: ").Append(ObjectiveEducationOrganizationId).Append("\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  ObjectiveGradeLevelDescriptor: ").Append(ObjectiveGradeLevelDescriptor).Append("\n");
            sb.Append("  GradingPeriodDescriptor: ").Append(GradingPeriodDescriptor).Append("\n");
            sb.Append("  GradingPeriodName: ").Append(GradingPeriodName).Append("\n");
            sb.Append("  GradingPeriodSchoolId: ").Append(GradingPeriodSchoolId).Append("\n");
            sb.Append("  GradingPeriodSchoolYear: ").Append(GradingPeriodSchoolYear).Append("\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Objective (string) maxLength
            if (this.Objective != null && this.Objective.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Objective, length must be less than 60.", new [] { "Objective" });
            }

            // ObjectiveGradeLevelDescriptor (string) maxLength
            if (this.ObjectiveGradeLevelDescriptor != null && this.ObjectiveGradeLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ObjectiveGradeLevelDescriptor, length must be less than 306.", new [] { "ObjectiveGradeLevelDescriptor" });
            }

            // GradingPeriodDescriptor (string) maxLength
            if (this.GradingPeriodDescriptor != null && this.GradingPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodDescriptor, length must be less than 306.", new [] { "GradingPeriodDescriptor" });
            }

            // GradingPeriodName (string) maxLength
            if (this.GradingPeriodName != null && this.GradingPeriodName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodName, length must be less than 60.", new [] { "GradingPeriodName" });
            }

            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiStudentCompetencyObjectiveKey" />
    /// </summary>
    public class TrackedChangesEdFiStudentCompetencyObjectiveKeyJsonConverter : JsonConverter<TrackedChangesEdFiStudentCompetencyObjectiveKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiStudentCompetencyObjectiveKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiStudentCompetencyObjectiveKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> objectiveEducationOrganizationId = default;
            Option<string?> objective = default;
            Option<string?> objectiveGradeLevelDescriptor = default;
            Option<string?> gradingPeriodDescriptor = default;
            Option<string?> gradingPeriodName = default;
            Option<long?> gradingPeriodSchoolId = default;
            Option<int?> gradingPeriodSchoolYear = default;
            Option<string?> studentUniqueId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "objectiveEducationOrganizationId":
                            objectiveEducationOrganizationId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "objective":
                            objective = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "objectiveGradeLevelDescriptor":
                            objectiveGradeLevelDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradingPeriodDescriptor":
                            gradingPeriodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradingPeriodName":
                            gradingPeriodName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradingPeriodSchoolId":
                            gradingPeriodSchoolId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "gradingPeriodSchoolYear":
                            gradingPeriodSchoolYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "studentUniqueId":
                            studentUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (objectiveEducationOrganizationId.IsSet && objectiveEducationOrganizationId.Value == null)
                throw new ArgumentNullException(nameof(objectiveEducationOrganizationId), "Property is not nullable for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (objective.IsSet && objective.Value == null)
                throw new ArgumentNullException(nameof(objective), "Property is not nullable for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (objectiveGradeLevelDescriptor.IsSet && objectiveGradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(objectiveGradeLevelDescriptor), "Property is not nullable for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (gradingPeriodDescriptor.IsSet && gradingPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodDescriptor), "Property is not nullable for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (gradingPeriodName.IsSet && gradingPeriodName.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodName), "Property is not nullable for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (gradingPeriodSchoolId.IsSet && gradingPeriodSchoolId.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodSchoolId), "Property is not nullable for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (gradingPeriodSchoolYear.IsSet && gradingPeriodSchoolYear.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodSchoolYear), "Property is not nullable for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId), "Property is not nullable for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            return new TrackedChangesEdFiStudentCompetencyObjectiveKey(objectiveEducationOrganizationId, objective, objectiveGradeLevelDescriptor, gradingPeriodDescriptor, gradingPeriodName, gradingPeriodSchoolId, gradingPeriodSchoolYear, studentUniqueId);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiStudentCompetencyObjectiveKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStudentCompetencyObjectiveKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiStudentCompetencyObjectiveKey trackedChangesEdFiStudentCompetencyObjectiveKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiStudentCompetencyObjectiveKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiStudentCompetencyObjectiveKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStudentCompetencyObjectiveKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiStudentCompetencyObjectiveKey trackedChangesEdFiStudentCompetencyObjectiveKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiStudentCompetencyObjectiveKey.ObjectiveOption.IsSet && trackedChangesEdFiStudentCompetencyObjectiveKey.Objective == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentCompetencyObjectiveKey.Objective), "Property is required for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.ObjectiveGradeLevelDescriptorOption.IsSet && trackedChangesEdFiStudentCompetencyObjectiveKey.ObjectiveGradeLevelDescriptor == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentCompetencyObjectiveKey.ObjectiveGradeLevelDescriptor), "Property is required for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodDescriptorOption.IsSet && trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodDescriptor == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodDescriptor), "Property is required for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodNameOption.IsSet && trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodName == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodName), "Property is required for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.StudentUniqueIdOption.IsSet && trackedChangesEdFiStudentCompetencyObjectiveKey.StudentUniqueId == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentCompetencyObjectiveKey.StudentUniqueId), "Property is required for class TrackedChangesEdFiStudentCompetencyObjectiveKey.");

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.ObjectiveEducationOrganizationIdOption.IsSet)
                writer.WriteNumber("objectiveEducationOrganizationId", trackedChangesEdFiStudentCompetencyObjectiveKey.ObjectiveEducationOrganizationIdOption.Value!.Value);

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.ObjectiveOption.IsSet)
                writer.WriteString("objective", trackedChangesEdFiStudentCompetencyObjectiveKey.Objective);

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.ObjectiveGradeLevelDescriptorOption.IsSet)
                writer.WriteString("objectiveGradeLevelDescriptor", trackedChangesEdFiStudentCompetencyObjectiveKey.ObjectiveGradeLevelDescriptor);

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodDescriptorOption.IsSet)
                writer.WriteString("gradingPeriodDescriptor", trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodDescriptor);

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodNameOption.IsSet)
                writer.WriteString("gradingPeriodName", trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodName);

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodSchoolIdOption.IsSet)
                writer.WriteNumber("gradingPeriodSchoolId", trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodSchoolIdOption.Value!.Value);

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodSchoolYearOption.IsSet)
                writer.WriteNumber("gradingPeriodSchoolYear", trackedChangesEdFiStudentCompetencyObjectiveKey.GradingPeriodSchoolYearOption.Value!.Value);

            if (trackedChangesEdFiStudentCompetencyObjectiveKey.StudentUniqueIdOption.IsSet)
                writer.WriteString("studentUniqueId", trackedChangesEdFiStudentCompetencyObjectiveKey.StudentUniqueId);
        }
    }
}
