// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey
    /// </summary>
    public partial class TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey" /> class.
        /// </summary>
        /// <param name="responsibilityDescriptor">Indications of an education organization&#39;s responsibility for a student, such as accountability, attendance, funding, etc.</param>
        /// <param name="beginDate">Month, day, and year of the start date of an education organization&#39;s responsibility for a student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization.</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student.</param>
        [JsonConstructor]
        public TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey(Option<string?> responsibilityDescriptor = default, Option<DateOnly?> beginDate = default, Option<long?> educationOrganizationId = default, Option<string?> studentUniqueId = default)
        {
            ResponsibilityDescriptorOption = responsibilityDescriptor;
            BeginDateOption = beginDate;
            EducationOrganizationIdOption = educationOrganizationId;
            StudentUniqueIdOption = studentUniqueId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ResponsibilityDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResponsibilityDescriptorOption { get; private set; }

        /// <summary>
        /// Indications of an education organization&#39;s responsibility for a student, such as accountability, attendance, funding, etc.
        /// </summary>
        /// <value>Indications of an education organization&#39;s responsibility for a student, such as accountability, attendance, funding, etc.</value>
        [JsonPropertyName("responsibilityDescriptor")]
        public string? ResponsibilityDescriptor { get { return this.ResponsibilityDescriptorOption; } set { this.ResponsibilityDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of BeginDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> BeginDateOption { get; private set; }

        /// <summary>
        /// Month, day, and year of the start date of an education organization&#39;s responsibility for a student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
        /// </summary>
        /// <value>Month, day, and year of the start date of an education organization&#39;s responsibility for a student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly? BeginDate { get { return this.BeginDateOption; } set { this.BeginDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationOrganizationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EducationOrganizationIdOption { get; private set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [JsonPropertyName("educationOrganizationId")]
        public long? EducationOrganizationId { get { return this.EducationOrganizationIdOption; } set { this.EducationOrganizationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentUniqueId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudentUniqueIdOption { get; private set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [JsonPropertyName("studentUniqueId")]
        public string? StudentUniqueId { get { return this.StudentUniqueIdOption; } set { this.StudentUniqueIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey {\n");
            sb.Append("  ResponsibilityDescriptor: ").Append(ResponsibilityDescriptor).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ResponsibilityDescriptor (string) maxLength
            if (this.ResponsibilityDescriptor != null && this.ResponsibilityDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for ResponsibilityDescriptor, length must be less than 306.", new [] { "ResponsibilityDescriptor" });
            }

            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey" />
    /// </summary>
    public class TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKeyJsonConverter : JsonConverter<TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> responsibilityDescriptor = default;
            Option<DateOnly?> beginDate = default;
            Option<long?> educationOrganizationId = default;
            Option<string?> studentUniqueId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "responsibilityDescriptor":
                            responsibilityDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationId":
                            educationOrganizationId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "studentUniqueId":
                            studentUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (responsibilityDescriptor.IsSet && responsibilityDescriptor.Value == null)
                throw new ArgumentNullException(nameof(responsibilityDescriptor), "Property is not nullable for class TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.");

            if (beginDate.IsSet && beginDate.Value == null)
                throw new ArgumentNullException(nameof(beginDate), "Property is not nullable for class TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.");

            if (educationOrganizationId.IsSet && educationOrganizationId.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationId), "Property is not nullable for class TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.");

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId), "Property is not nullable for class TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.");

            return new TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey(responsibilityDescriptor, beginDate, educationOrganizationId, studentUniqueId);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.ResponsibilityDescriptorOption.IsSet && trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.ResponsibilityDescriptor == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.ResponsibilityDescriptor), "Property is required for class TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.");

            if (trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.StudentUniqueIdOption.IsSet && trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.StudentUniqueId == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.StudentUniqueId), "Property is required for class TrackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.");

            if (trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.ResponsibilityDescriptorOption.IsSet)
                writer.WriteString("responsibilityDescriptor", trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.ResponsibilityDescriptor);

            if (trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.BeginDateOption.IsSet)
                writer.WriteString("beginDate", trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.BeginDateOption.Value!.Value.ToString(BeginDateFormat));

            if (trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.EducationOrganizationIdOption.IsSet)
                writer.WriteNumber("educationOrganizationId", trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.EducationOrganizationIdOption.Value!.Value);

            if (trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.StudentUniqueIdOption.IsSet)
                writer.WriteString("studentUniqueId", trackedChangesEdFiStudentEducationOrganizationResponsibilityAssociationKey.StudentUniqueId);
        }
    }
}
