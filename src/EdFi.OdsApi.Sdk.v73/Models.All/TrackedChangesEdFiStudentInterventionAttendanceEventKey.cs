// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiStudentInterventionAttendanceEventKey
    /// </summary>
    public partial class TrackedChangesEdFiStudentInterventionAttendanceEventKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiStudentInterventionAttendanceEventKey" /> class.
        /// </summary>
        /// <param name="attendanceEventCategoryDescriptor">A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy.</param>
        /// <param name="eventDate">Date for this attendance event.</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization.</param>
        /// <param name="interventionIdentificationCode">A unique number or alphanumeric code assigned to an intervention.</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student.</param>
        [JsonConstructor]
        public TrackedChangesEdFiStudentInterventionAttendanceEventKey(Option<string?> attendanceEventCategoryDescriptor = default, Option<DateOnly?> eventDate = default, Option<long?> educationOrganizationId = default, Option<string?> interventionIdentificationCode = default, Option<string?> studentUniqueId = default)
        {
            AttendanceEventCategoryDescriptorOption = attendanceEventCategoryDescriptor;
            EventDateOption = eventDate;
            EducationOrganizationIdOption = educationOrganizationId;
            InterventionIdentificationCodeOption = interventionIdentificationCode;
            StudentUniqueIdOption = studentUniqueId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AttendanceEventCategoryDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AttendanceEventCategoryDescriptorOption { get; private set; }

        /// <summary>
        /// A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy.
        /// </summary>
        /// <value>A code describing the attendance event, for example:         Present         Unexcused absence         Excused absence         Tardy.</value>
        [JsonPropertyName("attendanceEventCategoryDescriptor")]
        public string? AttendanceEventCategoryDescriptor { get { return this.AttendanceEventCategoryDescriptorOption; } set { this.AttendanceEventCategoryDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EventDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EventDateOption { get; private set; }

        /// <summary>
        /// Date for this attendance event.
        /// </summary>
        /// <value>Date for this attendance event.</value>
        [JsonPropertyName("eventDate")]
        public DateOnly? EventDate { get { return this.EventDateOption; } set { this.EventDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EducationOrganizationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EducationOrganizationIdOption { get; private set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [JsonPropertyName("educationOrganizationId")]
        public long? EducationOrganizationId { get { return this.EducationOrganizationIdOption; } set { this.EducationOrganizationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of InterventionIdentificationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InterventionIdentificationCodeOption { get; private set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to an intervention.</value>
        [JsonPropertyName("interventionIdentificationCode")]
        public string? InterventionIdentificationCode { get { return this.InterventionIdentificationCodeOption; } set { this.InterventionIdentificationCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentUniqueId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudentUniqueIdOption { get; private set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [JsonPropertyName("studentUniqueId")]
        public string? StudentUniqueId { get { return this.StudentUniqueIdOption; } set { this.StudentUniqueIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiStudentInterventionAttendanceEventKey {\n");
            sb.Append("  AttendanceEventCategoryDescriptor: ").Append(AttendanceEventCategoryDescriptor).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  InterventionIdentificationCode: ").Append(InterventionIdentificationCode).Append("\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AttendanceEventCategoryDescriptor (string) maxLength
            if (this.AttendanceEventCategoryDescriptor != null && this.AttendanceEventCategoryDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AttendanceEventCategoryDescriptor, length must be less than 306.", new [] { "AttendanceEventCategoryDescriptor" });
            }

            // InterventionIdentificationCode (string) maxLength
            if (this.InterventionIdentificationCode != null && this.InterventionIdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for InterventionIdentificationCode, length must be less than 60.", new [] { "InterventionIdentificationCode" });
            }

            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiStudentInterventionAttendanceEventKey" />
    /// </summary>
    public class TrackedChangesEdFiStudentInterventionAttendanceEventKeyJsonConverter : JsonConverter<TrackedChangesEdFiStudentInterventionAttendanceEventKey>
    {
        /// <summary>
        /// The format to use to serialize EventDate
        /// </summary>
        public static string EventDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiStudentInterventionAttendanceEventKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiStudentInterventionAttendanceEventKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> attendanceEventCategoryDescriptor = default;
            Option<DateOnly?> eventDate = default;
            Option<long?> educationOrganizationId = default;
            Option<string?> interventionIdentificationCode = default;
            Option<string?> studentUniqueId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attendanceEventCategoryDescriptor":
                            attendanceEventCategoryDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eventDate":
                            eventDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationId":
                            educationOrganizationId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "interventionIdentificationCode":
                            interventionIdentificationCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "studentUniqueId":
                            studentUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (attendanceEventCategoryDescriptor.IsSet && attendanceEventCategoryDescriptor.Value == null)
                throw new ArgumentNullException(nameof(attendanceEventCategoryDescriptor), "Property is not nullable for class TrackedChangesEdFiStudentInterventionAttendanceEventKey.");

            if (eventDate.IsSet && eventDate.Value == null)
                throw new ArgumentNullException(nameof(eventDate), "Property is not nullable for class TrackedChangesEdFiStudentInterventionAttendanceEventKey.");

            if (educationOrganizationId.IsSet && educationOrganizationId.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationId), "Property is not nullable for class TrackedChangesEdFiStudentInterventionAttendanceEventKey.");

            if (interventionIdentificationCode.IsSet && interventionIdentificationCode.Value == null)
                throw new ArgumentNullException(nameof(interventionIdentificationCode), "Property is not nullable for class TrackedChangesEdFiStudentInterventionAttendanceEventKey.");

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId), "Property is not nullable for class TrackedChangesEdFiStudentInterventionAttendanceEventKey.");

            return new TrackedChangesEdFiStudentInterventionAttendanceEventKey(attendanceEventCategoryDescriptor, eventDate, educationOrganizationId, interventionIdentificationCode, studentUniqueId);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiStudentInterventionAttendanceEventKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStudentInterventionAttendanceEventKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiStudentInterventionAttendanceEventKey trackedChangesEdFiStudentInterventionAttendanceEventKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiStudentInterventionAttendanceEventKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiStudentInterventionAttendanceEventKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStudentInterventionAttendanceEventKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiStudentInterventionAttendanceEventKey trackedChangesEdFiStudentInterventionAttendanceEventKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiStudentInterventionAttendanceEventKey.AttendanceEventCategoryDescriptorOption.IsSet && trackedChangesEdFiStudentInterventionAttendanceEventKey.AttendanceEventCategoryDescriptor == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentInterventionAttendanceEventKey.AttendanceEventCategoryDescriptor), "Property is required for class TrackedChangesEdFiStudentInterventionAttendanceEventKey.");

            if (trackedChangesEdFiStudentInterventionAttendanceEventKey.InterventionIdentificationCodeOption.IsSet && trackedChangesEdFiStudentInterventionAttendanceEventKey.InterventionIdentificationCode == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentInterventionAttendanceEventKey.InterventionIdentificationCode), "Property is required for class TrackedChangesEdFiStudentInterventionAttendanceEventKey.");

            if (trackedChangesEdFiStudentInterventionAttendanceEventKey.StudentUniqueIdOption.IsSet && trackedChangesEdFiStudentInterventionAttendanceEventKey.StudentUniqueId == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentInterventionAttendanceEventKey.StudentUniqueId), "Property is required for class TrackedChangesEdFiStudentInterventionAttendanceEventKey.");

            if (trackedChangesEdFiStudentInterventionAttendanceEventKey.AttendanceEventCategoryDescriptorOption.IsSet)
                writer.WriteString("attendanceEventCategoryDescriptor", trackedChangesEdFiStudentInterventionAttendanceEventKey.AttendanceEventCategoryDescriptor);

            if (trackedChangesEdFiStudentInterventionAttendanceEventKey.EventDateOption.IsSet)
                writer.WriteString("eventDate", trackedChangesEdFiStudentInterventionAttendanceEventKey.EventDateOption.Value!.Value.ToString(EventDateFormat));

            if (trackedChangesEdFiStudentInterventionAttendanceEventKey.EducationOrganizationIdOption.IsSet)
                writer.WriteNumber("educationOrganizationId", trackedChangesEdFiStudentInterventionAttendanceEventKey.EducationOrganizationIdOption.Value!.Value);

            if (trackedChangesEdFiStudentInterventionAttendanceEventKey.InterventionIdentificationCodeOption.IsSet)
                writer.WriteString("interventionIdentificationCode", trackedChangesEdFiStudentInterventionAttendanceEventKey.InterventionIdentificationCode);

            if (trackedChangesEdFiStudentInterventionAttendanceEventKey.StudentUniqueIdOption.IsSet)
                writer.WriteString("studentUniqueId", trackedChangesEdFiStudentInterventionAttendanceEventKey.StudentUniqueId);
        }
    }
}
