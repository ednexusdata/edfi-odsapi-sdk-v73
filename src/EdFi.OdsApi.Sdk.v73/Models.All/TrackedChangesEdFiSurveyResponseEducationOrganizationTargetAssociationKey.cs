// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey
    /// </summary>
    public partial class TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey" /> class.
        /// </summary>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization.</param>
        /// <param name="namespace">Namespace for the survey.</param>
        /// <param name="surveyIdentifier">The unique survey identifier from the survey tool.</param>
        /// <param name="surveyResponseIdentifier">The identifier of the survey typically from the survey application.</param>
        [JsonConstructor]
        public TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey(Option<long?> educationOrganizationId = default, Option<string?> @namespace = default, Option<string?> surveyIdentifier = default, Option<string?> surveyResponseIdentifier = default)
        {
            EducationOrganizationIdOption = educationOrganizationId;
            NamespaceOption = @namespace;
            SurveyIdentifierOption = surveyIdentifier;
            SurveyResponseIdentifierOption = surveyResponseIdentifier;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EducationOrganizationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EducationOrganizationIdOption { get; private set; }

        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [JsonPropertyName("educationOrganizationId")]
        public long? EducationOrganizationId { get { return this.EducationOrganizationIdOption; } set { this.EducationOrganizationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Namespace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NamespaceOption { get; private set; }

        /// <summary>
        /// Namespace for the survey.
        /// </summary>
        /// <value>Namespace for the survey.</value>
        [JsonPropertyName("namespace")]
        public string? Namespace { get { return this.NamespaceOption; } set { this.NamespaceOption = new(value); } }

        /// <summary>
        /// Used to track the state of SurveyIdentifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SurveyIdentifierOption { get; private set; }

        /// <summary>
        /// The unique survey identifier from the survey tool.
        /// </summary>
        /// <value>The unique survey identifier from the survey tool.</value>
        [JsonPropertyName("surveyIdentifier")]
        public string? SurveyIdentifier { get { return this.SurveyIdentifierOption; } set { this.SurveyIdentifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of SurveyResponseIdentifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SurveyResponseIdentifierOption { get; private set; }

        /// <summary>
        /// The identifier of the survey typically from the survey application.
        /// </summary>
        /// <value>The identifier of the survey typically from the survey application.</value>
        [JsonPropertyName("surveyResponseIdentifier")]
        public string? SurveyResponseIdentifier { get { return this.SurveyResponseIdentifierOption; } set { this.SurveyResponseIdentifierOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey {\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  SurveyIdentifier: ").Append(SurveyIdentifier).Append("\n");
            sb.Append("  SurveyResponseIdentifier: ").Append(SurveyResponseIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Namespace (string) minLength
            if (this.Namespace != null && this.Namespace.Length < 5)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be greater than 5.", new [] { "Namespace" });
            }

            // SurveyIdentifier (string) maxLength
            if (this.SurveyIdentifier != null && this.SurveyIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SurveyIdentifier, length must be less than 60.", new [] { "SurveyIdentifier" });
            }

            // SurveyResponseIdentifier (string) maxLength
            if (this.SurveyResponseIdentifier != null && this.SurveyResponseIdentifier.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SurveyResponseIdentifier, length must be less than 60.", new [] { "SurveyResponseIdentifier" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey" />
    /// </summary>
    public class TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKeyJsonConverter : JsonConverter<TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> educationOrganizationId = default;
            Option<string?> varNamespace = default;
            Option<string?> surveyIdentifier = default;
            Option<string?> surveyResponseIdentifier = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "educationOrganizationId":
                            educationOrganizationId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "surveyIdentifier":
                            surveyIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "surveyResponseIdentifier":
                            surveyResponseIdentifier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (educationOrganizationId.IsSet && educationOrganizationId.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationId), "Property is not nullable for class TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.");

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.");

            if (surveyIdentifier.IsSet && surveyIdentifier.Value == null)
                throw new ArgumentNullException(nameof(surveyIdentifier), "Property is not nullable for class TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.");

            if (surveyResponseIdentifier.IsSet && surveyResponseIdentifier.Value == null)
                throw new ArgumentNullException(nameof(surveyResponseIdentifier), "Property is not nullable for class TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.");

            return new TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey(educationOrganizationId, varNamespace, surveyIdentifier, surveyResponseIdentifier);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.NamespaceOption.IsSet && trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.Namespace == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.Namespace), "Property is required for class TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.");

            if (trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.SurveyIdentifierOption.IsSet && trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.SurveyIdentifier == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.SurveyIdentifier), "Property is required for class TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.");

            if (trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.SurveyResponseIdentifierOption.IsSet && trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.SurveyResponseIdentifier == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.SurveyResponseIdentifier), "Property is required for class TrackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.");

            if (trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.EducationOrganizationIdOption.IsSet)
                writer.WriteNumber("educationOrganizationId", trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.EducationOrganizationIdOption.Value!.Value);

            if (trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.NamespaceOption.IsSet)
                writer.WriteString("namespace", trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.Namespace);

            if (trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.SurveyIdentifierOption.IsSet)
                writer.WriteString("surveyIdentifier", trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.SurveyIdentifier);

            if (trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.SurveyResponseIdentifierOption.IsSet)
                writer.WriteString("surveyResponseIdentifier", trackedChangesEdFiSurveyResponseEducationOrganizationTargetAssociationKey.SurveyResponseIdentifier);
        }
    }
}
