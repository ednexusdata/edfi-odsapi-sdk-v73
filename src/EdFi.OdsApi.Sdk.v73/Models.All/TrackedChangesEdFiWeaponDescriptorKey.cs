// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v73.Client;

namespace EdFi.OdsApi.Sdk.v73.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiWeaponDescriptorKey
    /// </summary>
    public partial class TrackedChangesEdFiWeaponDescriptorKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiWeaponDescriptorKey" /> class.
        /// </summary>
        /// <param name="namespace">A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.</param>
        /// <param name="codeValue">A code or abbreviation that is used to refer to the descriptor.</param>
        [JsonConstructor]
        public TrackedChangesEdFiWeaponDescriptorKey(Option<string?> @namespace = default, Option<string?> codeValue = default)
        {
            NamespaceOption = @namespace;
            CodeValueOption = codeValue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Namespace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NamespaceOption { get; private set; }

        /// <summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        /// </summary>
        /// <value>A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.</value>
        [JsonPropertyName("namespace")]
        public string? Namespace { get { return this.NamespaceOption; } set { this.NamespaceOption = new(value); } }

        /// <summary>
        /// Used to track the state of CodeValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeValueOption { get; private set; }

        /// <summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        /// </summary>
        /// <value>A code or abbreviation that is used to refer to the descriptor.</value>
        [JsonPropertyName("codeValue")]
        public string? CodeValue { get { return this.CodeValueOption; } set { this.CodeValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiWeaponDescriptorKey {\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  CodeValue: ").Append(CodeValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // CodeValue (string) maxLength
            if (this.CodeValue != null && this.CodeValue.Length > 50)
            {
                yield return new ValidationResult("Invalid value for CodeValue, length must be less than 50.", new [] { "CodeValue" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiWeaponDescriptorKey" />
    /// </summary>
    public class TrackedChangesEdFiWeaponDescriptorKeyJsonConverter : JsonConverter<TrackedChangesEdFiWeaponDescriptorKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiWeaponDescriptorKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiWeaponDescriptorKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varNamespace = default;
            Option<string?> codeValue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "codeValue":
                            codeValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class TrackedChangesEdFiWeaponDescriptorKey.");

            if (codeValue.IsSet && codeValue.Value == null)
                throw new ArgumentNullException(nameof(codeValue), "Property is not nullable for class TrackedChangesEdFiWeaponDescriptorKey.");

            return new TrackedChangesEdFiWeaponDescriptorKey(varNamespace, codeValue);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiWeaponDescriptorKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiWeaponDescriptorKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiWeaponDescriptorKey trackedChangesEdFiWeaponDescriptorKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiWeaponDescriptorKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiWeaponDescriptorKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiWeaponDescriptorKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiWeaponDescriptorKey trackedChangesEdFiWeaponDescriptorKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiWeaponDescriptorKey.NamespaceOption.IsSet && trackedChangesEdFiWeaponDescriptorKey.Namespace == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiWeaponDescriptorKey.Namespace), "Property is required for class TrackedChangesEdFiWeaponDescriptorKey.");

            if (trackedChangesEdFiWeaponDescriptorKey.CodeValueOption.IsSet && trackedChangesEdFiWeaponDescriptorKey.CodeValue == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiWeaponDescriptorKey.CodeValue), "Property is required for class TrackedChangesEdFiWeaponDescriptorKey.");

            if (trackedChangesEdFiWeaponDescriptorKey.NamespaceOption.IsSet)
                writer.WriteString("namespace", trackedChangesEdFiWeaponDescriptorKey.Namespace);

            if (trackedChangesEdFiWeaponDescriptorKey.CodeValueOption.IsSet)
                writer.WriteString("codeValue", trackedChangesEdFiWeaponDescriptorKey.CodeValue);
        }
    }
}
